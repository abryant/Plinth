package eu.bryants.anthony.plinth.parser;

import static eu.bryants.anthony.plinth.parser.ParseType.AMPERSAND;
import static eu.bryants.anthony.plinth.parser.ParseType.AMPERSAND_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.ARROW;
import static eu.bryants.anthony.plinth.parser.ParseType.BOOLEAN_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.BREAK_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.BYTE_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.CARET;
import static eu.bryants.anthony.plinth.parser.ParseType.CARET_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.CAST_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.CLASS_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.COLON;
import static eu.bryants.anthony.plinth.parser.ParseType.COMMA;
import static eu.bryants.anthony.plinth.parser.ParseType.COMPILATION_UNIT;
import static eu.bryants.anthony.plinth.parser.ParseType.COMPOUND_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.CONTINUE_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.DOT;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_AMPERSAND;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_COLON;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_LANGLE;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_LANGLE_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_MINUS;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_PERCENT;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_PERCENT_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_PIPE;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_PLUS;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_RANGLE;
import static eu.bryants.anthony.plinth.parser.ParseType.DOUBLE_RANGLE_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.ELSE_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.EXCLAIMATION_MARK;
import static eu.bryants.anthony.plinth.parser.ParseType.EXCLAIMATION_MARK_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.FALSE_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.FINAL_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.FLOATING_LITERAL;
import static eu.bryants.anthony.plinth.parser.ParseType.FLOAT_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.FORWARD_SLASH;
import static eu.bryants.anthony.plinth.parser.ParseType.FORWARD_SLASH_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.FOR_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.GENERATED_START_RULE;
import static eu.bryants.anthony.plinth.parser.ParseType.IF_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.IMPORT_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.INTEGER_LITERAL;
import static eu.bryants.anthony.plinth.parser.ParseType.INT_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.LANGLE;
import static eu.bryants.anthony.plinth.parser.ParseType.LANGLE_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.LBRACE;
import static eu.bryants.anthony.plinth.parser.ParseType.LONG_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.LPAREN;
import static eu.bryants.anthony.plinth.parser.ParseType.LSQUARE;
import static eu.bryants.anthony.plinth.parser.ParseType.MINUS;
import static eu.bryants.anthony.plinth.parser.ParseType.MINUS_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.NAME;
import static eu.bryants.anthony.plinth.parser.ParseType.NATIVE_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.NEW_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.NULL_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.PACKAGE_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.PERCENT;
import static eu.bryants.anthony.plinth.parser.ParseType.PERCENT_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.PIPE;
import static eu.bryants.anthony.plinth.parser.ParseType.PIPE_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.PLUS;
import static eu.bryants.anthony.plinth.parser.ParseType.PLUS_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.QUESTION_MARK;
import static eu.bryants.anthony.plinth.parser.ParseType.QUESTION_MARK_COLON;
import static eu.bryants.anthony.plinth.parser.ParseType.QUESTION_MARK_DOT;
import static eu.bryants.anthony.plinth.parser.ParseType.RANGLE;
import static eu.bryants.anthony.plinth.parser.ParseType.RANGLE_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.RBRACE;
import static eu.bryants.anthony.plinth.parser.ParseType.RETURN_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.RPAREN;
import static eu.bryants.anthony.plinth.parser.ParseType.RSQUARE;
import static eu.bryants.anthony.plinth.parser.ParseType.SEMICOLON;
import static eu.bryants.anthony.plinth.parser.ParseType.SHORT_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.STAR;
import static eu.bryants.anthony.plinth.parser.ParseType.STAR_EQUALS;
import static eu.bryants.anthony.plinth.parser.ParseType.STATIC_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.STRING_LITERAL;
import static eu.bryants.anthony.plinth.parser.ParseType.THIS_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.TILDE;
import static eu.bryants.anthony.plinth.parser.ParseType.TRUE_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.UBYTE_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.UINT_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.ULONG_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.UNDERSCORE;
import static eu.bryants.anthony.plinth.parser.ParseType.USHORT_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.VOID_KEYWORD;
import static eu.bryants.anthony.plinth.parser.ParseType.WHILE_KEYWORD;

import java.util.Deque;
import java.util.LinkedList;

import parser.BadTokenException;
import parser.ParseException;
import parser.Production;
import parser.Rule;
import parser.Token;
import parser.Tokenizer;
import eu.bryants.anthony.plinth.parser.rules.ClassDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.CompilationUnitRule;
import eu.bryants.anthony.plinth.parser.rules.CompoundDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.AdditiveExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.BasicPrimaryRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ClassCreationExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ComparisonExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.DimensionsRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionListRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionNoTupleRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.FunctionCallExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.LogicalExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.MultiplicativeExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryNoThisRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryNoTrailingTypeRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryRule;
import eu.bryants.anthony.plinth.parser.rules.expression.QNameExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ShiftExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.TupleExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.TupleIndexExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.UnaryExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.member.ConstructorRule;
import eu.bryants.anthony.plinth.parser.rules.member.FieldRule;
import eu.bryants.anthony.plinth.parser.rules.member.InitialiserRule;
import eu.bryants.anthony.plinth.parser.rules.member.MemberListRule;
import eu.bryants.anthony.plinth.parser.rules.member.MethodRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ArgumentsRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeNoQNameRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeRule;
import eu.bryants.anthony.plinth.parser.rules.misc.DeclarationAssigneeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ForInitRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ForUpdateRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ImportsRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.NestedQNameListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.OptionalModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ParameterListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ParametersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.QNameListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.QNameRule;
import eu.bryants.anthony.plinth.parser.rules.statement.AssignStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.BlockRule;
import eu.bryants.anthony.plinth.parser.rules.statement.BreakStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ContinueStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ForStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.IfStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.PrefixIncDecStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ReturnStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ShorthandAssignmentRule;
import eu.bryants.anthony.plinth.parser.rules.statement.StatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.StatementsRule;
import eu.bryants.anthony.plinth.parser.rules.statement.WhileStatementRule;
import eu.bryants.anthony.plinth.parser.rules.type.ReturnTypeRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeListNoQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeNoQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeRule;

/*
 * Created on 2 Oct 2012
 */

/**
 * @author Anthony Bryant
 */
public class GeneratedParser
{
  // Generated parser in 22055ms
  private static final ImportsRule RULE_0 = new ImportsRule();
  private static final CompilationUnitRule RULE_1 = new CompilationUnitRule();
  private static final GeneratedStartRule RULE_2 = new GeneratedStartRule();
  private static final QNameRule RULE_3 = new QNameRule();
  private static final MemberListRule RULE_4 = new MemberListRule();
  private static final TypeNoQNameRule RULE_5 = new TypeNoQNameRule();
  private static final ModifiersRule RULE_6 = new ModifiersRule();
  private static final ClassDefinitionRule RULE_7 = new ClassDefinitionRule();
  private static final InitialiserRule RULE_8 = new InitialiserRule();
  private static final TypeRule RULE_9 = new TypeRule();
  private static final CompoundDefinitionRule RULE_10 = new CompoundDefinitionRule();
  private static final QNameListRule RULE_11 = new QNameListRule();
  private static final TypeListNoQNameRule RULE_12 = new TypeListNoQNameRule();
  private static final BasicPrimaryRule RULE_13 = new BasicPrimaryRule();
  private static final AssigneeNoQNameRule RULE_14 = new AssigneeNoQNameRule();
  private static final PrimaryRule RULE_15 = new PrimaryRule();
  private static final PrimaryNoTrailingTypeRule RULE_16 = new PrimaryNoTrailingTypeRule();
  private static final BlockRule RULE_17 = new BlockRule();
  private static final AssigneeListRule RULE_18 = new AssigneeListRule();
  private static final StatementsRule RULE_19 = new StatementsRule();
  private static final AssigneeRule RULE_20 = new AssigneeRule();
  private static final QNameExpressionRule RULE_21 = new QNameExpressionRule();
  private static final StatementRule RULE_22 = new StatementRule();
  private static final PrimaryNoThisRule RULE_23 = new PrimaryNoThisRule();
  private static final OptionalModifiersRule RULE_24 = new OptionalModifiersRule();
  private static final NestedQNameListRule RULE_25 = new NestedQNameListRule();
  private static final ReturnTypeRule RULE_26 = new ReturnTypeRule();
  private static final ExpressionNoTupleRule RULE_27 = new ExpressionNoTupleRule();
  private static final UnaryExpressionRule RULE_28 = new UnaryExpressionRule();
  private static final ExpressionRule RULE_29 = new ExpressionRule();
  private static final LogicalExpressionRule RULE_30 = new LogicalExpressionRule();
  private static final MultiplicativeExpressionRule RULE_31 = new MultiplicativeExpressionRule();
  private static final TupleIndexExpressionRule RULE_32 = new TupleIndexExpressionRule();
  private static final ShiftExpressionRule RULE_33 = new ShiftExpressionRule();
  private static final TupleExpressionRule RULE_34 = new TupleExpressionRule();
  private static final ComparisonExpressionRule RULE_35 = new ComparisonExpressionRule();
  private static final AdditiveExpressionRule RULE_36 = new AdditiveExpressionRule();
  private static final ReturnStatementRule RULE_37 = new ReturnStatementRule();
  private static final ContinueStatementRule RULE_38 = new ContinueStatementRule();
  private static final BreakStatementRule RULE_39 = new BreakStatementRule();
  private static final DeclarationAssigneeListRule RULE_40 = new DeclarationAssigneeListRule();
  private static final FunctionCallExpressionRule RULE_41 = new FunctionCallExpressionRule();
  private static final ParameterListRule RULE_42 = new ParameterListRule();
  private static final ConstructorRule RULE_43 = new ConstructorRule();
  private static final FieldRule RULE_44 = new FieldRule();
  private static final MethodRule RULE_45 = new MethodRule();
  private static final PrefixIncDecStatementRule RULE_46 = new PrefixIncDecStatementRule();
  private static final IfStatementRule RULE_47 = new IfStatementRule();
  private static final ArgumentsRule RULE_48 = new ArgumentsRule();
  private static final ExpressionListRule RULE_49 = new ExpressionListRule();
  private static final WhileStatementRule RULE_50 = new WhileStatementRule();
  private static final ClassCreationExpressionRule RULE_51 = new ClassCreationExpressionRule();
  private static final ForInitRule RULE_52 = new ForInitRule();
  private static final AssignStatementRule RULE_53 = new AssignStatementRule();
  private static final ShorthandAssignmentRule RULE_54 = new ShorthandAssignmentRule();
  private static final DimensionsRule RULE_55 = new DimensionsRule();
  private static final ForUpdateRule RULE_56 = new ForUpdateRule();
  private static final ParametersRule RULE_57 = new ParametersRule();
  private static final ForStatementRule RULE_58 = new ForStatementRule();

  private Deque<Integer> stateStack = new LinkedList<Integer>();
  private Deque<Token<ParseType>> tokenStack = new LinkedList<Token<ParseType>>();
  private Tokenizer<ParseType> tokenizer;

  private boolean accepted = false;

  public GeneratedParser(Tokenizer<ParseType> tokenizer)
  {
    this.tokenizer = tokenizer;
  }

  private final boolean reduce(Rule<ParseType> rule, int productionIndex) throws ParseException
  {
    Production<ParseType> production = rule.getProductions()[productionIndex];
    ParseType[] productionTypes = production.getTypes();
    if (stateStack.size() <= productionTypes.length || tokenStack.size() < productionTypes.length)
    {
      throw new ParseException("Bad reduction of rule, not enough elements");
    }

    // get the list of token values
    Object[] values = new Object[productionTypes.length];
    for (int i = values.length - 1; i >= 0; i--)
    {
      Token<ParseType> t = tokenStack.removeFirst();
      if (!t.getType().equals(productionTypes[i]))
      {
        throw new ParseException("Bad reduction of rule, invalid token type");
      }
      values[i] = t.getValue();

      // remove the top state from the state stack
      stateStack.removeFirst();
    }

    Object result = rule.match(production, values);
    Token<ParseType> nonTerminal = new Token<ParseType>(rule.getType(), result);

    Integer topState = stateStack.peekFirst();
    Integer gotoState = findGotoState(topState, nonTerminal.getType());

    stateStack.addFirst(gotoState);
    tokenStack.addFirst(nonTerminal);

    return false;
  }

  private static class GeneratedStartRule extends Rule<ParseType>
  {
    private static final long serialVersionUID = 1L;

    public GeneratedStartRule()
    {
      super(GENERATED_START_RULE, new Production<ParseType>(COMPILATION_UNIT));
    }

    @Override
    public Object match(Production<ParseType> production, Object[] args) throws ParseException
    {
      ParseType[] productionTypes = production.getTypes();
      if (productionTypes.length == 1 && productionTypes[0] == COMPILATION_UNIT)
      {
        return args[0];
      }
      throw badTypeList();
    }
  }

  public Token<ParseType> parse() throws ParseException, BadTokenException
  {
    stateStack.addFirst(0);
    Token<ParseType> lookahead = tokenizer.next();

    while (true)
    {
      Integer state = stateStack.peekFirst();
      boolean used = false;
      switch (state)
      {
      case 0: used = action0(lookahead); break;
      case 1: used = action1(lookahead); break;
      case 2: used = action2(lookahead); break;
      case 3: used = action3(lookahead); break;
      case 4: used = action4(lookahead); break;
      case 5: used = action5(lookahead); break;
      case 6: used = action6(lookahead); break;
      case 7: used = action7(lookahead); break;
      case 8: used = action8(lookahead); break;
      case 9: used = action9(lookahead); break;
      case 10: used = action10(lookahead); break;
      case 11: used = action11(lookahead); break;
      case 12: used = action12(lookahead); break;
      case 13: used = action13(lookahead); break;
      case 14: used = action14(lookahead); break;
      case 15: used = action15(lookahead); break;
      case 16: used = action16(lookahead); break;
      case 17: used = action17(lookahead); break;
      case 18: used = action18(lookahead); break;
      case 19: used = action19(lookahead); break;
      case 20: used = action20(lookahead); break;
      case 21: used = action21(lookahead); break;
      case 22: used = action22(lookahead); break;
      case 23: used = action23(lookahead); break;
      case 24: used = action24(lookahead); break;
      case 25: used = action25(lookahead); break;
      case 26: used = action26(lookahead); break;
      case 27: used = action27(lookahead); break;
      case 28: used = action28(lookahead); break;
      case 29: used = action29(lookahead); break;
      case 30: used = action30(lookahead); break;
      case 31: used = action31(lookahead); break;
      case 32: used = action32(lookahead); break;
      case 33: used = action33(lookahead); break;
      case 34: used = action34(lookahead); break;
      case 35: used = action35(lookahead); break;
      case 36: used = action36(lookahead); break;
      case 37: used = action37(lookahead); break;
      case 38: used = action38(lookahead); break;
      case 39: used = action39(lookahead); break;
      case 40: used = action40(lookahead); break;
      case 41: used = action41(lookahead); break;
      case 42: used = action42(lookahead); break;
      case 43: used = action43(lookahead); break;
      case 44: used = action44(lookahead); break;
      case 45: used = action45(lookahead); break;
      case 46: used = action46(lookahead); break;
      case 47: used = action47(lookahead); break;
      case 48: used = action48(lookahead); break;
      case 49: used = action49(lookahead); break;
      case 50: used = action50(lookahead); break;
      case 51: used = action51(lookahead); break;
      case 52: used = action52(lookahead); break;
      case 53: used = action53(lookahead); break;
      case 54: used = action54(lookahead); break;
      case 55: used = action55(lookahead); break;
      case 56: used = action56(lookahead); break;
      case 57: used = action57(lookahead); break;
      case 58: used = action58(lookahead); break;
      case 59: used = action59(lookahead); break;
      case 60: used = action60(lookahead); break;
      case 61: used = action61(lookahead); break;
      case 62: used = action62(lookahead); break;
      case 63: used = action63(lookahead); break;
      case 64: used = action64(lookahead); break;
      case 65: used = action65(lookahead); break;
      case 66: used = action66(lookahead); break;
      case 67: used = action67(lookahead); break;
      case 68: used = action68(lookahead); break;
      case 69: used = action69(lookahead); break;
      case 70: used = action70(lookahead); break;
      case 71: used = action71(lookahead); break;
      case 72: used = action72(lookahead); break;
      case 73: used = action73(lookahead); break;
      case 74: used = action74(lookahead); break;
      case 75: used = action75(lookahead); break;
      case 76: used = action76(lookahead); break;
      case 77: used = action77(lookahead); break;
      case 78: used = action78(lookahead); break;
      case 79: used = action79(lookahead); break;
      case 80: used = action80(lookahead); break;
      case 81: used = action81(lookahead); break;
      case 82: used = action82(lookahead); break;
      case 83: used = action83(lookahead); break;
      case 84: used = action84(lookahead); break;
      case 85: used = action85(lookahead); break;
      case 86: used = action86(lookahead); break;
      case 87: used = action87(lookahead); break;
      case 88: used = action88(lookahead); break;
      case 89: used = action89(lookahead); break;
      case 90: used = action90(lookahead); break;
      case 91: used = action91(lookahead); break;
      case 92: used = action92(lookahead); break;
      case 93: used = action93(lookahead); break;
      case 94: used = action94(lookahead); break;
      case 95: used = action95(lookahead); break;
      case 96: used = action96(lookahead); break;
      case 97: used = action97(lookahead); break;
      case 98: used = action98(lookahead); break;
      case 99: used = action99(lookahead); break;
      case 100: used = action100(lookahead); break;
      case 101: used = action101(lookahead); break;
      case 102: used = action102(lookahead); break;
      case 103: used = action103(lookahead); break;
      case 104: used = action104(lookahead); break;
      case 105: used = action105(lookahead); break;
      case 106: used = action106(lookahead); break;
      case 107: used = action107(lookahead); break;
      case 108: used = action108(lookahead); break;
      case 109: used = action109(lookahead); break;
      case 110: used = action110(lookahead); break;
      case 111: used = action111(lookahead); break;
      case 112: used = action112(lookahead); break;
      case 113: used = action113(lookahead); break;
      case 114: used = action114(lookahead); break;
      case 115: used = action115(lookahead); break;
      case 116: used = action116(lookahead); break;
      case 117: used = action117(lookahead); break;
      case 118: used = action118(lookahead); break;
      case 119: used = action119(lookahead); break;
      case 120: used = action120(lookahead); break;
      case 121: used = action121(lookahead); break;
      case 122: used = action122(lookahead); break;
      case 123: used = action123(lookahead); break;
      case 124: used = action124(lookahead); break;
      case 125: used = action125(lookahead); break;
      case 126: used = action126(lookahead); break;
      case 127: used = action127(lookahead); break;
      case 128: used = action128(lookahead); break;
      case 129: used = action129(lookahead); break;
      case 130: used = action130(lookahead); break;
      case 131: used = action131(lookahead); break;
      case 132: used = action132(lookahead); break;
      case 133: used = action133(lookahead); break;
      case 134: used = action134(lookahead); break;
      case 135: used = action135(lookahead); break;
      case 136: used = action136(lookahead); break;
      case 137: used = action137(lookahead); break;
      case 138: used = action138(lookahead); break;
      case 139: used = action139(lookahead); break;
      case 140: used = action140(lookahead); break;
      case 141: used = action141(lookahead); break;
      case 142: used = action142(lookahead); break;
      case 143: used = action143(lookahead); break;
      case 144: used = action144(lookahead); break;
      case 145: used = action145(lookahead); break;
      case 146: used = action146(lookahead); break;
      case 147: used = action147(lookahead); break;
      case 148: used = action148(lookahead); break;
      case 149: used = action149(lookahead); break;
      case 150: used = action150(lookahead); break;
      case 151: used = action151(lookahead); break;
      case 152: used = action152(lookahead); break;
      case 153: used = action153(lookahead); break;
      case 154: used = action154(lookahead); break;
      case 155: used = action155(lookahead); break;
      case 156: used = action156(lookahead); break;
      case 157: used = action157(lookahead); break;
      case 158: used = action158(lookahead); break;
      case 159: used = action159(lookahead); break;
      case 160: used = action160(lookahead); break;
      case 161: used = action161(lookahead); break;
      case 162: used = action162(lookahead); break;
      case 163: used = action163(lookahead); break;
      case 164: used = action164(lookahead); break;
      case 165: used = action165(lookahead); break;
      case 166: used = action166(lookahead); break;
      case 167: used = action167(lookahead); break;
      case 168: used = action168(lookahead); break;
      case 169: used = action169(lookahead); break;
      case 170: used = action170(lookahead); break;
      case 171: used = action171(lookahead); break;
      case 172: used = action172(lookahead); break;
      case 173: used = action173(lookahead); break;
      case 174: used = action174(lookahead); break;
      case 175: used = action175(lookahead); break;
      case 176: used = action176(lookahead); break;
      case 177: used = action177(lookahead); break;
      case 178: used = action178(lookahead); break;
      case 179: used = action179(lookahead); break;
      case 180: used = action180(lookahead); break;
      case 181: used = action181(lookahead); break;
      case 182: used = action182(lookahead); break;
      case 183: used = action183(lookahead); break;
      case 184: used = action184(lookahead); break;
      case 185: used = action185(lookahead); break;
      case 186: used = action186(lookahead); break;
      case 187: used = action187(lookahead); break;
      case 188: used = action188(lookahead); break;
      case 189: used = action189(lookahead); break;
      case 190: used = action190(lookahead); break;
      case 191: used = action191(lookahead); break;
      case 192: used = action192(lookahead); break;
      case 193: used = action193(lookahead); break;
      case 194: used = action194(lookahead); break;
      case 195: used = action195(lookahead); break;
      case 196: used = action196(lookahead); break;
      case 197: used = action197(lookahead); break;
      case 198: used = action198(lookahead); break;
      case 199: used = action199(lookahead); break;
      case 200: used = action200(lookahead); break;
      case 201: used = action201(lookahead); break;
      case 202: used = action202(lookahead); break;
      case 203: used = action203(lookahead); break;
      case 204: used = action204(lookahead); break;
      case 205: used = action205(lookahead); break;
      case 206: used = action206(lookahead); break;
      case 207: used = action207(lookahead); break;
      case 208: used = action208(lookahead); break;
      case 209: used = action209(lookahead); break;
      case 210: used = action210(lookahead); break;
      case 211: used = action211(lookahead); break;
      case 212: used = action212(lookahead); break;
      case 213: used = action213(lookahead); break;
      case 214: used = action214(lookahead); break;
      case 215: used = action215(lookahead); break;
      case 216: used = action216(lookahead); break;
      case 217: used = action217(lookahead); break;
      case 218: used = action218(lookahead); break;
      case 219: used = action219(lookahead); break;
      case 220: used = action220(lookahead); break;
      case 221: used = action221(lookahead); break;
      case 222: used = action222(lookahead); break;
      case 223: used = action223(lookahead); break;
      case 224: used = action224(lookahead); break;
      case 225: used = action225(lookahead); break;
      case 226: used = action226(lookahead); break;
      case 227: used = action227(lookahead); break;
      case 228: used = action228(lookahead); break;
      case 229: used = action229(lookahead); break;
      case 230: used = action230(lookahead); break;
      case 231: used = action231(lookahead); break;
      case 232: used = action232(lookahead); break;
      case 233: used = action233(lookahead); break;
      case 234: used = action234(lookahead); break;
      case 235: used = action235(lookahead); break;
      case 236: used = action236(lookahead); break;
      case 237: used = action237(lookahead); break;
      case 238: used = action238(lookahead); break;
      case 239: used = action239(lookahead); break;
      case 240: used = action240(lookahead); break;
      case 241: used = action241(lookahead); break;
      case 242: used = action242(lookahead); break;
      case 243: used = action243(lookahead); break;
      case 244: used = action244(lookahead); break;
      case 245: used = action245(lookahead); break;
      case 246: used = action246(lookahead); break;
      case 247: used = action247(lookahead); break;
      case 248: used = action248(lookahead); break;
      case 249: used = action249(lookahead); break;
      case 250: used = action250(lookahead); break;
      case 251: used = action251(lookahead); break;
      case 252: used = action252(lookahead); break;
      case 253: used = action253(lookahead); break;
      case 254: used = action254(lookahead); break;
      case 255: used = action255(lookahead); break;
      case 256: used = action256(lookahead); break;
      case 257: used = action257(lookahead); break;
      case 258: used = action258(lookahead); break;
      case 259: used = action259(lookahead); break;
      case 260: used = action260(lookahead); break;
      case 261: used = action261(lookahead); break;
      case 262: used = action262(lookahead); break;
      case 263: used = action263(lookahead); break;
      case 264: used = action264(lookahead); break;
      case 265: used = action265(lookahead); break;
      case 266: used = action266(lookahead); break;
      case 267: used = action267(lookahead); break;
      case 268: used = action268(lookahead); break;
      case 269: used = action269(lookahead); break;
      case 270: used = action270(lookahead); break;
      case 271: used = action271(lookahead); break;
      case 272: used = action272(lookahead); break;
      case 273: used = action273(lookahead); break;
      case 274: used = action274(lookahead); break;
      case 275: used = action275(lookahead); break;
      case 276: used = action276(lookahead); break;
      case 277: used = action277(lookahead); break;
      case 278: used = action278(lookahead); break;
      case 279: used = action279(lookahead); break;
      case 280: used = action280(lookahead); break;
      case 281: used = action281(lookahead); break;
      case 282: used = action282(lookahead); break;
      case 283: used = action283(lookahead); break;
      case 284: used = action284(lookahead); break;
      case 285: used = action285(lookahead); break;
      case 286: used = action286(lookahead); break;
      case 287: used = action287(lookahead); break;
      case 288: used = action288(lookahead); break;
      case 289: used = action289(lookahead); break;
      case 290: used = action290(lookahead); break;
      case 291: used = action291(lookahead); break;
      case 292: used = action292(lookahead); break;
      case 293: used = action293(lookahead); break;
      case 294: used = action294(lookahead); break;
      case 295: used = action295(lookahead); break;
      case 296: used = action296(lookahead); break;
      case 297: used = action297(lookahead); break;
      case 298: used = action298(lookahead); break;
      case 299: used = action299(lookahead); break;
      case 300: used = action300(lookahead); break;
      case 301: used = action301(lookahead); break;
      case 302: used = action302(lookahead); break;
      case 303: used = action303(lookahead); break;
      case 304: used = action304(lookahead); break;
      case 305: used = action305(lookahead); break;
      case 306: used = action306(lookahead); break;
      case 307: used = action307(lookahead); break;
      case 308: used = action308(lookahead); break;
      case 309: used = action309(lookahead); break;
      case 310: used = action310(lookahead); break;
      case 311: used = action311(lookahead); break;
      case 312: used = action312(lookahead); break;
      case 313: used = action313(lookahead); break;
      case 314: used = action314(lookahead); break;
      case 315: used = action315(lookahead); break;
      case 316: used = action316(lookahead); break;
      case 317: used = action317(lookahead); break;
      case 318: used = action318(lookahead); break;
      case 319: used = action319(lookahead); break;
      case 320: used = action320(lookahead); break;
      case 321: used = action321(lookahead); break;
      case 322: used = action322(lookahead); break;
      case 323: used = action323(lookahead); break;
      case 324: used = action324(lookahead); break;
      case 325: used = action325(lookahead); break;
      case 326: used = action326(lookahead); break;
      case 327: used = action327(lookahead); break;
      case 328: used = action328(lookahead); break;
      case 329: used = action329(lookahead); break;
      case 330: used = action330(lookahead); break;
      case 331: used = action331(lookahead); break;
      case 332: used = action332(lookahead); break;
      case 333: used = action333(lookahead); break;
      case 334: used = action334(lookahead); break;
      case 335: used = action335(lookahead); break;
      case 336: used = action336(lookahead); break;
      case 337: used = action337(lookahead); break;
      case 338: used = action338(lookahead); break;
      case 339: used = action339(lookahead); break;
      case 340: used = action340(lookahead); break;
      case 341: used = action341(lookahead); break;
      case 342: used = action342(lookahead); break;
      case 343: used = action343(lookahead); break;
      case 344: used = action344(lookahead); break;
      case 345: used = action345(lookahead); break;
      case 346: used = action346(lookahead); break;
      case 347: used = action347(lookahead); break;
      case 348: used = action348(lookahead); break;
      case 349: used = action349(lookahead); break;
      case 350: used = action350(lookahead); break;
      case 351: used = action351(lookahead); break;
      case 352: used = action352(lookahead); break;
      case 353: used = action353(lookahead); break;
      case 354: used = action354(lookahead); break;
      case 355: used = action355(lookahead); break;
      case 356: used = action356(lookahead); break;
      case 357: used = action357(lookahead); break;
      case 358: used = action358(lookahead); break;
      case 359: used = action359(lookahead); break;
      case 360: used = action360(lookahead); break;
      case 361: used = action361(lookahead); break;
      case 362: used = action362(lookahead); break;
      case 363: used = action363(lookahead); break;
      case 364: used = action364(lookahead); break;
      case 365: used = action365(lookahead); break;
      case 366: used = action366(lookahead); break;
      case 367: used = action367(lookahead); break;
      case 368: used = action368(lookahead); break;
      case 369: used = action369(lookahead); break;
      case 370: used = action370(lookahead); break;
      case 371: used = action371(lookahead); break;
      case 372: used = action372(lookahead); break;
      case 373: used = action373(lookahead); break;
      case 374: used = action374(lookahead); break;
      case 375: used = action375(lookahead); break;
      case 376: used = action376(lookahead); break;
      case 377: used = action377(lookahead); break;
      case 378: used = action378(lookahead); break;
      case 379: used = action379(lookahead); break;
      case 380: used = action380(lookahead); break;
      case 381: used = action381(lookahead); break;
      case 382: used = action382(lookahead); break;
      case 383: used = action383(lookahead); break;
      case 384: used = action384(lookahead); break;
      case 385: used = action385(lookahead); break;
      case 386: used = action386(lookahead); break;
      case 387: used = action387(lookahead); break;
      case 388: used = action388(lookahead); break;
      case 389: used = action389(lookahead); break;
      case 390: used = action390(lookahead); break;
      case 391: used = action391(lookahead); break;
      case 392: used = action392(lookahead); break;
      case 393: used = action393(lookahead); break;
      case 394: used = action394(lookahead); break;
      case 395: used = action395(lookahead); break;
      case 396: used = action396(lookahead); break;
      case 397: used = action397(lookahead); break;
      case 398: used = action398(lookahead); break;
      case 399: used = action399(lookahead); break;
      case 400: used = action400(lookahead); break;
      case 401: used = action401(lookahead); break;
      case 402: used = action402(lookahead); break;
      case 403: used = action403(lookahead); break;
      case 404: used = action404(lookahead); break;
      case 405: used = action405(lookahead); break;
      case 406: used = action406(lookahead); break;
      case 407: used = action407(lookahead); break;
      case 408: used = action408(lookahead); break;
      case 409: used = action409(lookahead); break;
      case 410: used = action410(lookahead); break;
      case 411: used = action411(lookahead); break;
      case 412: used = action412(lookahead); break;
      case 413: used = action413(lookahead); break;
      case 414: used = action414(lookahead); break;
      case 415: used = action415(lookahead); break;
      case 416: used = action416(lookahead); break;
      case 417: used = action417(lookahead); break;
      case 418: used = action418(lookahead); break;
      case 419: used = action419(lookahead); break;
      case 420: used = action420(lookahead); break;
      case 421: used = action421(lookahead); break;
      case 422: used = action422(lookahead); break;
      case 423: used = action423(lookahead); break;
      case 424: used = action424(lookahead); break;
      case 425: used = action425(lookahead); break;
      case 426: used = action426(lookahead); break;
      case 427: used = action427(lookahead); break;
      case 428: used = action428(lookahead); break;
      case 429: used = action429(lookahead); break;
      case 430: used = action430(lookahead); break;
      case 431: used = action431(lookahead); break;
      case 432: used = action432(lookahead); break;
      case 433: used = action433(lookahead); break;
      case 434: used = action434(lookahead); break;
      case 435: used = action435(lookahead); break;
      case 436: used = action436(lookahead); break;
      case 437: used = action437(lookahead); break;
      case 438: used = action438(lookahead); break;
      case 439: used = action439(lookahead); break;
      case 440: used = action440(lookahead); break;
      case 441: used = action441(lookahead); break;
      case 442: used = action442(lookahead); break;
      case 443: used = action443(lookahead); break;
      case 444: used = action444(lookahead); break;
      case 445: used = action445(lookahead); break;
      case 446: used = action446(lookahead); break;
      case 447: used = action447(lookahead); break;
      case 448: used = action448(lookahead); break;
      case 449: used = action449(lookahead); break;
      case 450: used = action450(lookahead); break;
      case 451: used = action451(lookahead); break;
      case 452: used = action452(lookahead); break;
      case 453: used = action453(lookahead); break;
      case 454: used = action454(lookahead); break;
      case 455: used = action455(lookahead); break;
      case 456: used = action456(lookahead); break;
      case 457: used = action457(lookahead); break;
      case 458: used = action458(lookahead); break;
      case 459: used = action459(lookahead); break;
      case 460: used = action460(lookahead); break;
      case 461: used = action461(lookahead); break;
      case 462: used = action462(lookahead); break;
      case 463: used = action463(lookahead); break;
      case 464: used = action464(lookahead); break;
      case 465: used = action465(lookahead); break;
      case 466: used = action466(lookahead); break;
      case 467: used = action467(lookahead); break;
      case 468: used = action468(lookahead); break;
      case 469: used = action469(lookahead); break;
      case 470: used = action470(lookahead); break;
      case 471: used = action471(lookahead); break;
      case 472: used = action472(lookahead); break;
      case 473: used = action473(lookahead); break;
      case 474: used = action474(lookahead); break;
      case 475: used = action475(lookahead); break;
      case 476: used = action476(lookahead); break;
      case 477: used = action477(lookahead); break;
      case 478: used = action478(lookahead); break;
      case 479: used = action479(lookahead); break;
      case 480: used = action480(lookahead); break;
      case 481: used = action481(lookahead); break;
      case 482: used = action482(lookahead); break;
      case 483: used = action483(lookahead); break;
      case 484: used = action484(lookahead); break;
      case 485: used = action485(lookahead); break;
      case 486: used = action486(lookahead); break;
      case 487: used = action487(lookahead); break;
      case 488: used = action488(lookahead); break;
      case 489: used = action489(lookahead); break;
      case 490: used = action490(lookahead); break;
      case 491: used = action491(lookahead); break;
      case 492: used = action492(lookahead); break;
      case 493: used = action493(lookahead); break;
      case 494: used = action494(lookahead); break;
      case 495: used = action495(lookahead); break;
      case 496: used = action496(lookahead); break;
      case 497: used = action497(lookahead); break;
      case 498: used = action498(lookahead); break;
      case 499: used = action499(lookahead); break;
      case 500: used = action500(lookahead); break;
      case 501: used = action501(lookahead); break;
      case 502: used = action502(lookahead); break;
      case 503: used = action503(lookahead); break;
      case 504: used = action504(lookahead); break;
      case 505: used = action505(lookahead); break;
      case 506: used = action506(lookahead); break;
      case 507: used = action507(lookahead); break;
      case 508: used = action508(lookahead); break;
      case 509: used = action509(lookahead); break;
      case 510: used = action510(lookahead); break;
      case 511: used = action511(lookahead); break;
      case 512: used = action512(lookahead); break;
      case 513: used = action513(lookahead); break;
      case 514: used = action514(lookahead); break;
      case 515: used = action515(lookahead); break;
      case 516: used = action516(lookahead); break;
      case 517: used = action517(lookahead); break;
      case 518: used = action518(lookahead); break;
      case 519: used = action519(lookahead); break;
      case 520: used = action520(lookahead); break;
      case 521: used = action521(lookahead); break;
      case 522: used = action522(lookahead); break;
      case 523: used = action523(lookahead); break;
      case 524: used = action524(lookahead); break;
      case 525: used = action525(lookahead); break;
      case 526: used = action526(lookahead); break;
      case 527: used = action527(lookahead); break;
      case 528: used = action528(lookahead); break;
      case 529: used = action529(lookahead); break;
      case 530: used = action530(lookahead); break;
      case 531: used = action531(lookahead); break;
      case 532: used = action532(lookahead); break;
      case 533: used = action533(lookahead); break;
      case 534: used = action534(lookahead); break;
      case 535: used = action535(lookahead); break;
      case 536: used = action536(lookahead); break;
      case 537: used = action537(lookahead); break;
      case 538: used = action538(lookahead); break;
      case 539: used = action539(lookahead); break;
      case 540: used = action540(lookahead); break;
      case 541: used = action541(lookahead); break;
      case 542: used = action542(lookahead); break;
      case 543: used = action543(lookahead); break;
      case 544: used = action544(lookahead); break;
      case 545: used = action545(lookahead); break;
      case 546: used = action546(lookahead); break;
      case 547: used = action547(lookahead); break;
      case 548: used = action548(lookahead); break;
      case 549: used = action549(lookahead); break;
      case 550: used = action550(lookahead); break;
      case 551: used = action551(lookahead); break;
      case 552: used = action552(lookahead); break;
      case 553: used = action553(lookahead); break;
      case 554: used = action554(lookahead); break;
      case 555: used = action555(lookahead); break;
      case 556: used = action556(lookahead); break;
      case 557: used = action557(lookahead); break;
      case 558: used = action558(lookahead); break;
      case 559: used = action559(lookahead); break;
      case 560: used = action560(lookahead); break;
      case 561: used = action561(lookahead); break;
      case 562: used = action562(lookahead); break;
      case 563: used = action563(lookahead); break;
      case 564: used = action564(lookahead); break;
      case 565: used = action565(lookahead); break;
      case 566: used = action566(lookahead); break;
      case 567: used = action567(lookahead); break;
      case 568: used = action568(lookahead); break;
      case 569: used = action569(lookahead); break;
      case 570: used = action570(lookahead); break;
      case 571: used = action571(lookahead); break;
      case 572: used = action572(lookahead); break;
      case 573: used = action573(lookahead); break;
      case 574: used = action574(lookahead); break;
      case 575: used = action575(lookahead); break;
      case 576: used = action576(lookahead); break;
      case 577: used = action577(lookahead); break;
      case 578: used = action578(lookahead); break;
      case 579: used = action579(lookahead); break;
      case 580: used = action580(lookahead); break;
      case 581: used = action581(lookahead); break;
      case 582: used = action582(lookahead); break;
      case 583: used = action583(lookahead); break;
      case 584: used = action584(lookahead); break;
      case 585: used = action585(lookahead); break;
      default: throw new IllegalStateException();
      }
      if (accepted)
      {
        return tokenStack.removeFirst();
      }
      if (used)
      {
        lookahead = tokenizer.next();
      }
    }
  }

  private final int findGotoState(int state, ParseType tokenType)
  {
    switch (state)
    {
    case 0: return goto0(tokenType);
    case 1: return goto1(tokenType);
    case 3: return goto3(tokenType);
    case 6: return goto6(tokenType);
    case 11: return goto11(tokenType);
    case 20: return goto20(tokenType);
    case 21: return goto21(tokenType);
    case 23: return goto23(tokenType);
    case 24: return goto24(tokenType);
    case 35: return goto35(tokenType);
    case 38: return goto38(tokenType);
    case 45: return goto45(tokenType);
    case 46: return goto46(tokenType);
    case 55: return goto55(tokenType);
    case 59: return goto59(tokenType);
    case 67: return goto67(tokenType);
    case 73: return goto73(tokenType);
    case 76: return goto76(tokenType);
    case 82: return goto82(tokenType);
    case 83: return goto83(tokenType);
    case 86: return goto86(tokenType);
    case 90: return goto90(tokenType);
    case 91: return goto91(tokenType);
    case 94: return goto94(tokenType);
    case 95: return goto95(tokenType);
    case 96: return goto96(tokenType);
    case 99: return goto99(tokenType);
    case 100: return goto100(tokenType);
    case 106: return goto106(tokenType);
    case 107: return goto107(tokenType);
    case 116: return goto116(tokenType);
    case 122: return goto122(tokenType);
    case 124: return goto124(tokenType);
    case 127: return goto127(tokenType);
    case 131: return goto131(tokenType);
    case 132: return goto132(tokenType);
    case 133: return goto133(tokenType);
    case 134: return goto134(tokenType);
    case 139: return goto139(tokenType);
    case 142: return goto142(tokenType);
    case 144: return goto144(tokenType);
    case 145: return goto145(tokenType);
    case 150: return goto150(tokenType);
    case 151: return goto151(tokenType);
    case 152: return goto152(tokenType);
    case 164: return goto164(tokenType);
    case 165: return goto165(tokenType);
    case 167: return goto167(tokenType);
    case 172: return goto172(tokenType);
    case 179: return goto179(tokenType);
    case 187: return goto187(tokenType);
    case 189: return goto189(tokenType);
    case 190: return goto190(tokenType);
    case 191: return goto191(tokenType);
    case 192: return goto192(tokenType);
    case 202: return goto202(tokenType);
    case 203: return goto203(tokenType);
    case 207: return goto207(tokenType);
    case 208: return goto208(tokenType);
    case 210: return goto210(tokenType);
    case 214: return goto214(tokenType);
    case 215: return goto215(tokenType);
    case 216: return goto216(tokenType);
    case 217: return goto217(tokenType);
    case 218: return goto218(tokenType);
    case 219: return goto219(tokenType);
    case 220: return goto220(tokenType);
    case 221: return goto221(tokenType);
    case 222: return goto222(tokenType);
    case 223: return goto223(tokenType);
    case 224: return goto224(tokenType);
    case 225: return goto225(tokenType);
    case 228: return goto228(tokenType);
    case 229: return goto229(tokenType);
    case 230: return goto230(tokenType);
    case 236: return goto236(tokenType);
    case 238: return goto238(tokenType);
    case 239: return goto239(tokenType);
    case 240: return goto240(tokenType);
    case 241: return goto241(tokenType);
    case 242: return goto242(tokenType);
    case 246: return goto246(tokenType);
    case 248: return goto248(tokenType);
    case 250: return goto250(tokenType);
    case 252: return goto252(tokenType);
    case 254: return goto254(tokenType);
    case 255: return goto255(tokenType);
    case 256: return goto256(tokenType);
    case 262: return goto262(tokenType);
    case 263: return goto263(tokenType);
    case 273: return goto273(tokenType);
    case 277: return goto277(tokenType);
    case 278: return goto278(tokenType);
    case 280: return goto280(tokenType);
    case 281: return goto281(tokenType);
    case 282: return goto282(tokenType);
    case 283: return goto283(tokenType);
    case 284: return goto284(tokenType);
    case 285: return goto285(tokenType);
    case 286: return goto286(tokenType);
    case 287: return goto287(tokenType);
    case 288: return goto288(tokenType);
    case 290: return goto290(tokenType);
    case 291: return goto291(tokenType);
    case 292: return goto292(tokenType);
    case 293: return goto293(tokenType);
    case 294: return goto294(tokenType);
    case 295: return goto295(tokenType);
    case 296: return goto296(tokenType);
    case 297: return goto297(tokenType);
    case 298: return goto298(tokenType);
    case 299: return goto299(tokenType);
    case 300: return goto300(tokenType);
    case 301: return goto301(tokenType);
    case 303: return goto303(tokenType);
    case 304: return goto304(tokenType);
    case 305: return goto305(tokenType);
    case 306: return goto306(tokenType);
    case 307: return goto307(tokenType);
    case 308: return goto308(tokenType);
    case 309: return goto309(tokenType);
    case 310: return goto310(tokenType);
    case 311: return goto311(tokenType);
    case 312: return goto312(tokenType);
    case 313: return goto313(tokenType);
    case 314: return goto314(tokenType);
    case 315: return goto315(tokenType);
    case 319: return goto319(tokenType);
    case 320: return goto320(tokenType);
    case 321: return goto321(tokenType);
    case 322: return goto322(tokenType);
    case 323: return goto323(tokenType);
    case 324: return goto324(tokenType);
    case 325: return goto325(tokenType);
    case 326: return goto326(tokenType);
    case 327: return goto327(tokenType);
    case 328: return goto328(tokenType);
    case 329: return goto329(tokenType);
    case 330: return goto330(tokenType);
    case 331: return goto331(tokenType);
    case 332: return goto332(tokenType);
    case 333: return goto333(tokenType);
    case 336: return goto336(tokenType);
    case 341: return goto341(tokenType);
    case 343: return goto343(tokenType);
    case 347: return goto347(tokenType);
    case 348: return goto348(tokenType);
    case 354: return goto354(tokenType);
    case 357: return goto357(tokenType);
    case 364: return goto364(tokenType);
    case 381: return goto381(tokenType);
    case 391: return goto391(tokenType);
    case 394: return goto394(tokenType);
    case 399: return goto399(tokenType);
    case 401: return goto401(tokenType);
    case 403: return goto403(tokenType);
    case 408: return goto408(tokenType);
    case 411: return goto411(tokenType);
    case 413: return goto413(tokenType);
    case 415: return goto415(tokenType);
    case 417: return goto417(tokenType);
    case 419: return goto419(tokenType);
    case 423: return goto423(tokenType);
    case 425: return goto425(tokenType);
    case 427: return goto427(tokenType);
    case 429: return goto429(tokenType);
    case 431: return goto431(tokenType);
    case 433: return goto433(tokenType);
    case 435: return goto435(tokenType);
    case 437: return goto437(tokenType);
    case 439: return goto439(tokenType);
    case 441: return goto441(tokenType);
    case 443: return goto443(tokenType);
    case 448: return goto448(tokenType);
    case 449: return goto449(tokenType);
    case 451: return goto451(tokenType);
    case 453: return goto453(tokenType);
    case 456: return goto456(tokenType);
    case 457: return goto457(tokenType);
    case 459: return goto459(tokenType);
    case 461: return goto461(tokenType);
    case 463: return goto463(tokenType);
    case 468: return goto468(tokenType);
    case 470: return goto470(tokenType);
    case 473: return goto473(tokenType);
    case 476: return goto476(tokenType);
    case 478: return goto478(tokenType);
    case 480: return goto480(tokenType);
    case 482: return goto482(tokenType);
    case 484: return goto484(tokenType);
    case 486: return goto486(tokenType);
    case 488: return goto488(tokenType);
    case 490: return goto490(tokenType);
    case 494: return goto494(tokenType);
    case 496: return goto496(tokenType);
    case 498: return goto498(tokenType);
    case 500: return goto500(tokenType);
    case 502: return goto502(tokenType);
    case 508: return goto508(tokenType);
    case 519: return goto519(tokenType);
    case 521: return goto521(tokenType);
    case 523: return goto523(tokenType);
    case 527: return goto527(tokenType);
    case 537: return goto537(tokenType);
    case 538: return goto538(tokenType);
    case 540: return goto540(tokenType);
    case 545: return goto545(tokenType);
    case 547: return goto547(tokenType);
    case 549: return goto549(tokenType);
    case 550: return goto550(tokenType);
    case 555: return goto555(tokenType);
    case 565: return goto565(tokenType);
    case 566: return goto566(tokenType);
    case 568: return goto568(tokenType);
    case 574: return goto574(tokenType);
    case 575: return goto575(tokenType);
    case 584: return goto584(tokenType);
    default: break;
    }
    throw new IllegalArgumentException();
  }

  private final boolean action0(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 0);
    }
    switch (token.getType().ordinal())
    {
    case 134:
      stateStack.addFirst(1);
      tokenStack.addFirst(token);
      return true;
    case 128:
      return reduce(RULE_0, 0);
    case 118:
      return reduce(RULE_0, 0);
    case 119:
      return reduce(RULE_0, 0);
    default: throw new BadTokenException(token, new Object[] {IMPORT_KEYWORD, null, CLASS_KEYWORD, PACKAGE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final int goto0(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 2: return 2;
    case 1: return 3;
    default: return -1;
    }
  }

  private final boolean action1(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto1(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 5;
    default: return -1;
    }
  }

  private final boolean action2(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_1, 0);
    }
    switch (token.getType().ordinal())
    {
    case 128:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 118:
      return reduce(RULE_1, 0);
    case 119:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {null, IMPORT_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action3(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      accepted = true;
      return reduce(RULE_2, 0);
    }
    switch (token.getType().ordinal())
    {
    case 118:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final int goto3(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 3: return 9;
    case 4: return 10;
    default: return -1;
    }
  }

  private final boolean action4(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      return reduce(RULE_3, 0);
    case 105:
      return reduce(RULE_3, 0);
    case 65:
      return reduce(RULE_3, 0);
    case 63:
      return reduce(RULE_3, 0);
    case 76:
      return reduce(RULE_3, 0);
    case 78:
      return reduce(RULE_3, 0);
    case 103:
      return reduce(RULE_3, 0);
    case 82:
      return reduce(RULE_3, 0);
    case 85:
      return reduce(RULE_3, 0);
    case 64:
      return reduce(RULE_3, 0);
    case 98:
      return reduce(RULE_3, 0);
    case 83:
      return reduce(RULE_3, 0);
    case 104:
      return reduce(RULE_3, 0);
    case 81:
      return reduce(RULE_3, 0);
    case 113:
      return reduce(RULE_3, 0);
    case 72:
      return reduce(RULE_3, 0);
    case 87:
      return reduce(RULE_3, 0);
    case 86:
      return reduce(RULE_3, 0);
    case 94:
      return reduce(RULE_3, 0);
    case 90:
      return reduce(RULE_3, 0);
    case 99:
      return reduce(RULE_3, 0);
    case 88:
      return reduce(RULE_3, 0);
    case 95:
      return reduce(RULE_3, 0);
    case 71:
      return reduce(RULE_3, 0);
    case 69:
      return reduce(RULE_3, 0);
    case 77:
      return reduce(RULE_3, 0);
    case 70:
      return reduce(RULE_3, 0);
    case 89:
      return reduce(RULE_3, 0);
    case 106:
      return reduce(RULE_3, 0);
    case 97:
      return reduce(RULE_3, 0);
    case 109:
      return reduce(RULE_3, 0);
    case 101:
      return reduce(RULE_3, 0);
    case 84:
      return reduce(RULE_3, 0);
    case 80:
      return reduce(RULE_3, 0);
    case 91:
      return reduce(RULE_3, 0);
    case 107:
      return reduce(RULE_3, 0);
    case 110:
      return reduce(RULE_3, 0);
    case 66:
      return reduce(RULE_3, 0);
    case 92:
      return reduce(RULE_3, 0);
    case 73:
      return reduce(RULE_3, 0);
    case 74:
      return reduce(RULE_3, 0);
    case 111:
      return reduce(RULE_3, 0);
    case 68:
      return reduce(RULE_3, 0);
    case 108:
      return reduce(RULE_3, 0);
    case 96:
      return reduce(RULE_3, 0);
    case 93:
      return reduce(RULE_3, 0);
    case 67:
      return reduce(RULE_3, 0);
    case 102:
      return reduce(RULE_3, 0);
    case 59:
      return reduce(RULE_3, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, PLUS_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, RANGLE, DOUBLE_RANGLE_EQUALS, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH_EQUALS, FORWARD_SLASH, MINUS_EQUALS, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_PERCENT_EQUALS, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, RPAREN, LPAREN, DOUBLE_LANGLE, LSQUARE, DOUBLE_LANGLE_EQUALS, COLON, STAR_EQUALS, RSQUARE, PERCENT_EQUALS, QUESTION_MARK_COLON, CARET_EQUALS, MINUS, NAME});
    }
  }

  private final boolean action5(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT});
    }
  }

  private final boolean action6(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto6(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 13;
    default: return -1;
    }
  }

  private final boolean action7(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action8(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action9(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_1, 2);
    }
    switch (token.getType().ordinal())
    {
    case 118:
      return reduce(RULE_1, 2);
    case 119:
      return reduce(RULE_1, 2);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action10(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_1, 3);
    }
    switch (token.getType().ordinal())
    {
    case 118:
      return reduce(RULE_1, 3);
    case 119:
      return reduce(RULE_1, 3);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action11(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 0);
    }
    switch (token.getType().ordinal())
    {
    case 128:
      return reduce(RULE_0, 0);
    case 118:
      return reduce(RULE_0, 0);
    case 119:
      return reduce(RULE_0, 0);
    default: throw new BadTokenException(token, new Object[] {IMPORT_KEYWORD, null, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final int goto11(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 2: return 16;
    default: return -1;
    }
  }

  private final boolean action12(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(17);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action13(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(18);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(19);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT});
    }
  }

  private final boolean action14(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 90:
      stateStack.addFirst(20);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action15(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 90:
      stateStack.addFirst(21);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action16(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_1, 1);
    }
    switch (token.getType().ordinal())
    {
    case 128:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 118:
      return reduce(RULE_1, 1);
    case 119:
      return reduce(RULE_1, 1);
    default: throw new BadTokenException(token, new Object[] {null, IMPORT_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action17(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      return reduce(RULE_3, 1);
    case 105:
      return reduce(RULE_3, 1);
    case 65:
      return reduce(RULE_3, 1);
    case 76:
      return reduce(RULE_3, 1);
    case 63:
      return reduce(RULE_3, 1);
    case 78:
      return reduce(RULE_3, 1);
    case 103:
      return reduce(RULE_3, 1);
    case 82:
      return reduce(RULE_3, 1);
    case 85:
      return reduce(RULE_3, 1);
    case 64:
      return reduce(RULE_3, 1);
    case 98:
      return reduce(RULE_3, 1);
    case 83:
      return reduce(RULE_3, 1);
    case 104:
      return reduce(RULE_3, 1);
    case 81:
      return reduce(RULE_3, 1);
    case 113:
      return reduce(RULE_3, 1);
    case 72:
      return reduce(RULE_3, 1);
    case 87:
      return reduce(RULE_3, 1);
    case 86:
      return reduce(RULE_3, 1);
    case 94:
      return reduce(RULE_3, 1);
    case 90:
      return reduce(RULE_3, 1);
    case 99:
      return reduce(RULE_3, 1);
    case 88:
      return reduce(RULE_3, 1);
    case 95:
      return reduce(RULE_3, 1);
    case 71:
      return reduce(RULE_3, 1);
    case 69:
      return reduce(RULE_3, 1);
    case 77:
      return reduce(RULE_3, 1);
    case 70:
      return reduce(RULE_3, 1);
    case 89:
      return reduce(RULE_3, 1);
    case 106:
      return reduce(RULE_3, 1);
    case 97:
      return reduce(RULE_3, 1);
    case 109:
      return reduce(RULE_3, 1);
    case 101:
      return reduce(RULE_3, 1);
    case 84:
      return reduce(RULE_3, 1);
    case 80:
      return reduce(RULE_3, 1);
    case 91:
      return reduce(RULE_3, 1);
    case 107:
      return reduce(RULE_3, 1);
    case 66:
      return reduce(RULE_3, 1);
    case 110:
      return reduce(RULE_3, 1);
    case 92:
      return reduce(RULE_3, 1);
    case 73:
      return reduce(RULE_3, 1);
    case 74:
      return reduce(RULE_3, 1);
    case 111:
      return reduce(RULE_3, 1);
    case 68:
      return reduce(RULE_3, 1);
    case 108:
      return reduce(RULE_3, 1);
    case 96:
      return reduce(RULE_3, 1);
    case 93:
      return reduce(RULE_3, 1);
    case 67:
      return reduce(RULE_3, 1);
    case 102:
      return reduce(RULE_3, 1);
    case 59:
      return reduce(RULE_3, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, PLUS_EQUALS, ARROW, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, RANGLE, DOUBLE_RANGLE_EQUALS, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH_EQUALS, FORWARD_SLASH, MINUS_EQUALS, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_PERCENT_EQUALS, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, RPAREN, LPAREN, DOUBLE_LANGLE, LSQUARE, DOUBLE_LANGLE_EQUALS, COLON, STAR_EQUALS, RSQUARE, PERCENT_EQUALS, QUESTION_MARK_COLON, CARET_EQUALS, MINUS, NAME});
    }
  }

  private final boolean action18(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 1);
    }
    switch (token.getType().ordinal())
    {
    case 128:
      return reduce(RULE_0, 1);
    case 118:
      return reduce(RULE_0, 1);
    case 119:
      return reduce(RULE_0, 1);
    default: throw new BadTokenException(token, new Object[] {IMPORT_KEYWORD, null, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action19(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(17);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {STAR, NAME});
    }
  }

  private final boolean action20(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_4, 0);
    case 140:
      return reduce(RULE_4, 0);
    case 141:
      return reduce(RULE_4, 0);
    case 131:
      return reduce(RULE_4, 0);
    case 124:
      return reduce(RULE_4, 0);
    case 142:
      return reduce(RULE_4, 0);
    case 106:
      return reduce(RULE_4, 0);
    case 129:
      return reduce(RULE_4, 0);
    case 144:
      return reduce(RULE_4, 0);
    case 101:
      return reduce(RULE_4, 0);
    case 116:
      return reduce(RULE_4, 0);
    case 136:
      return reduce(RULE_4, 0);
    case 91:
      return reduce(RULE_4, 0);
    case 143:
      return reduce(RULE_4, 0);
    case 92:
      return reduce(RULE_4, 0);
    case 130:
      return reduce(RULE_4, 0);
    case 114:
      return reduce(RULE_4, 0);
    case 137:
      return reduce(RULE_4, 0);
    case 125:
      return reduce(RULE_4, 0);
    case 90:
      return reduce(RULE_4, 0);
    case 59:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto20(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 5: return 23;
    default: return -1;
    }
  }

  private final boolean action21(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_4, 0);
    case 140:
      return reduce(RULE_4, 0);
    case 141:
      return reduce(RULE_4, 0);
    case 131:
      return reduce(RULE_4, 0);
    case 124:
      return reduce(RULE_4, 0);
    case 142:
      return reduce(RULE_4, 0);
    case 106:
      return reduce(RULE_4, 0);
    case 129:
      return reduce(RULE_4, 0);
    case 144:
      return reduce(RULE_4, 0);
    case 101:
      return reduce(RULE_4, 0);
    case 116:
      return reduce(RULE_4, 0);
    case 136:
      return reduce(RULE_4, 0);
    case 91:
      return reduce(RULE_4, 0);
    case 143:
      return reduce(RULE_4, 0);
    case 92:
      return reduce(RULE_4, 0);
    case 130:
      return reduce(RULE_4, 0);
    case 114:
      return reduce(RULE_4, 0);
    case 137:
      return reduce(RULE_4, 0);
    case 125:
      return reduce(RULE_4, 0);
    case 90:
      return reduce(RULE_4, 0);
    case 59:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto21(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 5: return 24;
    default: return -1;
    }
  }

  private final boolean action22(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action23(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(46);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, DOUBLE_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto23(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 9: return 47;
    case 24: return 48;
    case 6: return 49;
    case 37: return 50;
    case 23: return 51;
    case 38: return 52;
    case 7: return 53;
    case 21: return 54;
    case 19: return 55;
    case 8: return 56;
    default: return -1;
    }
  }

  private final boolean action24(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(57);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(46);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, DOUBLE_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto24(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 9: return 47;
    case 24: return 48;
    case 6: return 49;
    case 37: return 50;
    case 23: return 51;
    case 38: return 52;
    case 7: return 53;
    case 21: return 54;
    case 19: return 55;
    case 8: return 56;
    default: return -1;
    }
  }

  private final boolean action25(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 2);
    }
    switch (token.getType().ordinal())
    {
    case 128:
      return reduce(RULE_0, 2);
    case 118:
      return reduce(RULE_0, 2);
    case 119:
      return reduce(RULE_0, 2);
    default: throw new BadTokenException(token, new Object[] {IMPORT_KEYWORD, null, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action26(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 19);
    case 65:
      return reduce(RULE_5, 19);
    case 63:
      return reduce(RULE_5, 19);
    case 76:
      return reduce(RULE_5, 19);
    case 78:
      return reduce(RULE_5, 19);
    case 85:
      return reduce(RULE_5, 19);
    case 104:
      return reduce(RULE_5, 19);
    case 113:
      return reduce(RULE_5, 19);
    case 72:
      return reduce(RULE_5, 19);
    case 86:
      return reduce(RULE_5, 19);
    case 90:
      return reduce(RULE_5, 19);
    case 99:
      return reduce(RULE_5, 19);
    case 88:
      return reduce(RULE_5, 19);
    case 95:
      return reduce(RULE_5, 19);
    case 71:
      return reduce(RULE_5, 19);
    case 69:
      return reduce(RULE_5, 19);
    case 70:
      return reduce(RULE_5, 19);
    case 89:
      return reduce(RULE_5, 19);
    case 106:
      return reduce(RULE_5, 19);
    case 97:
      return reduce(RULE_5, 19);
    case 109:
      return reduce(RULE_5, 19);
    case 101:
      return reduce(RULE_5, 19);
    case 84:
      return reduce(RULE_5, 19);
    case 80:
      return reduce(RULE_5, 19);
    case 107:
      return reduce(RULE_5, 19);
    case 91:
      return reduce(RULE_5, 19);
    case 110:
      return reduce(RULE_5, 19);
    case 66:
      return reduce(RULE_5, 19);
    case 73:
      return reduce(RULE_5, 19);
    case 92:
      return reduce(RULE_5, 19);
    case 68:
      return reduce(RULE_5, 19);
    case 108:
      return reduce(RULE_5, 19);
    case 93:
      return reduce(RULE_5, 19);
    case 102:
      return reduce(RULE_5, 19);
    case 59:
      return reduce(RULE_5, 19);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action27(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 11);
    case 65:
      return reduce(RULE_5, 11);
    case 63:
      return reduce(RULE_5, 11);
    case 76:
      return reduce(RULE_5, 11);
    case 78:
      return reduce(RULE_5, 11);
    case 85:
      return reduce(RULE_5, 11);
    case 104:
      return reduce(RULE_5, 11);
    case 113:
      return reduce(RULE_5, 11);
    case 72:
      return reduce(RULE_5, 11);
    case 86:
      return reduce(RULE_5, 11);
    case 90:
      return reduce(RULE_5, 11);
    case 99:
      return reduce(RULE_5, 11);
    case 88:
      return reduce(RULE_5, 11);
    case 95:
      return reduce(RULE_5, 11);
    case 71:
      return reduce(RULE_5, 11);
    case 69:
      return reduce(RULE_5, 11);
    case 70:
      return reduce(RULE_5, 11);
    case 89:
      return reduce(RULE_5, 11);
    case 106:
      return reduce(RULE_5, 11);
    case 97:
      return reduce(RULE_5, 11);
    case 109:
      return reduce(RULE_5, 11);
    case 101:
      return reduce(RULE_5, 11);
    case 84:
      return reduce(RULE_5, 11);
    case 80:
      return reduce(RULE_5, 11);
    case 107:
      return reduce(RULE_5, 11);
    case 91:
      return reduce(RULE_5, 11);
    case 110:
      return reduce(RULE_5, 11);
    case 66:
      return reduce(RULE_5, 11);
    case 73:
      return reduce(RULE_5, 11);
    case 92:
      return reduce(RULE_5, 11);
    case 68:
      return reduce(RULE_5, 11);
    case 108:
      return reduce(RULE_5, 11);
    case 93:
      return reduce(RULE_5, 11);
    case 102:
      return reduce(RULE_5, 11);
    case 59:
      return reduce(RULE_5, 11);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action28(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 2);
    case 65:
      return reduce(RULE_5, 2);
    case 63:
      return reduce(RULE_5, 2);
    case 76:
      return reduce(RULE_5, 2);
    case 78:
      return reduce(RULE_5, 2);
    case 85:
      return reduce(RULE_5, 2);
    case 104:
      return reduce(RULE_5, 2);
    case 113:
      return reduce(RULE_5, 2);
    case 72:
      return reduce(RULE_5, 2);
    case 86:
      return reduce(RULE_5, 2);
    case 90:
      return reduce(RULE_5, 2);
    case 99:
      return reduce(RULE_5, 2);
    case 88:
      return reduce(RULE_5, 2);
    case 95:
      return reduce(RULE_5, 2);
    case 71:
      return reduce(RULE_5, 2);
    case 69:
      return reduce(RULE_5, 2);
    case 70:
      return reduce(RULE_5, 2);
    case 89:
      return reduce(RULE_5, 2);
    case 106:
      return reduce(RULE_5, 2);
    case 97:
      return reduce(RULE_5, 2);
    case 109:
      return reduce(RULE_5, 2);
    case 101:
      return reduce(RULE_5, 2);
    case 84:
      return reduce(RULE_5, 2);
    case 80:
      return reduce(RULE_5, 2);
    case 107:
      return reduce(RULE_5, 2);
    case 91:
      return reduce(RULE_5, 2);
    case 110:
      return reduce(RULE_5, 2);
    case 66:
      return reduce(RULE_5, 2);
    case 73:
      return reduce(RULE_5, 2);
    case 92:
      return reduce(RULE_5, 2);
    case 68:
      return reduce(RULE_5, 2);
    case 108:
      return reduce(RULE_5, 2);
    case 93:
      return reduce(RULE_5, 2);
    case 102:
      return reduce(RULE_5, 2);
    case 59:
      return reduce(RULE_5, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action29(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 62:
      stateStack.addFirst(58);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_6, 2);
    case 140:
      return reduce(RULE_6, 2);
    case 141:
      return reduce(RULE_6, 2);
    case 131:
      return reduce(RULE_6, 2);
    case 124:
      return reduce(RULE_6, 2);
    case 142:
      return reduce(RULE_6, 2);
    case 129:
      return reduce(RULE_6, 2);
    case 144:
      return reduce(RULE_6, 2);
    case 101:
      return reduce(RULE_6, 2);
    case 116:
      return reduce(RULE_6, 2);
    case 136:
      return reduce(RULE_6, 2);
    case 91:
      return reduce(RULE_6, 2);
    case 143:
      return reduce(RULE_6, 2);
    case 92:
      return reduce(RULE_6, 2);
    case 130:
      return reduce(RULE_6, 2);
    case 114:
      return reduce(RULE_6, 2);
    case 137:
      return reduce(RULE_6, 2);
    case 125:
      return reduce(RULE_6, 2);
    case 90:
      return reduce(RULE_6, 2);
    case 59:
      return reduce(RULE_6, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, STRING_LITERAL, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action30(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_6, 0);
    case 140:
      return reduce(RULE_6, 0);
    case 141:
      return reduce(RULE_6, 0);
    case 131:
      return reduce(RULE_6, 0);
    case 124:
      return reduce(RULE_6, 0);
    case 142:
      return reduce(RULE_6, 0);
    case 129:
      return reduce(RULE_6, 0);
    case 144:
      return reduce(RULE_6, 0);
    case 101:
      return reduce(RULE_6, 0);
    case 116:
      return reduce(RULE_6, 0);
    case 136:
      return reduce(RULE_6, 0);
    case 91:
      return reduce(RULE_6, 0);
    case 143:
      return reduce(RULE_6, 0);
    case 92:
      return reduce(RULE_6, 0);
    case 130:
      return reduce(RULE_6, 0);
    case 114:
      return reduce(RULE_6, 0);
    case 137:
      return reduce(RULE_6, 0);
    case 125:
      return reduce(RULE_6, 0);
    case 90:
      return reduce(RULE_6, 0);
    case 59:
      return reduce(RULE_6, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action31(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 7);
    case 65:
      return reduce(RULE_5, 7);
    case 63:
      return reduce(RULE_5, 7);
    case 76:
      return reduce(RULE_5, 7);
    case 78:
      return reduce(RULE_5, 7);
    case 85:
      return reduce(RULE_5, 7);
    case 104:
      return reduce(RULE_5, 7);
    case 113:
      return reduce(RULE_5, 7);
    case 72:
      return reduce(RULE_5, 7);
    case 86:
      return reduce(RULE_5, 7);
    case 90:
      return reduce(RULE_5, 7);
    case 99:
      return reduce(RULE_5, 7);
    case 88:
      return reduce(RULE_5, 7);
    case 95:
      return reduce(RULE_5, 7);
    case 71:
      return reduce(RULE_5, 7);
    case 69:
      return reduce(RULE_5, 7);
    case 70:
      return reduce(RULE_5, 7);
    case 89:
      return reduce(RULE_5, 7);
    case 106:
      return reduce(RULE_5, 7);
    case 97:
      return reduce(RULE_5, 7);
    case 109:
      return reduce(RULE_5, 7);
    case 101:
      return reduce(RULE_5, 7);
    case 84:
      return reduce(RULE_5, 7);
    case 80:
      return reduce(RULE_5, 7);
    case 107:
      return reduce(RULE_5, 7);
    case 91:
      return reduce(RULE_5, 7);
    case 110:
      return reduce(RULE_5, 7);
    case 66:
      return reduce(RULE_5, 7);
    case 73:
      return reduce(RULE_5, 7);
    case 92:
      return reduce(RULE_5, 7);
    case 68:
      return reduce(RULE_5, 7);
    case 108:
      return reduce(RULE_5, 7);
    case 93:
      return reduce(RULE_5, 7);
    case 102:
      return reduce(RULE_5, 7);
    case 59:
      return reduce(RULE_5, 7);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action32(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_7, 0);
    }
    switch (token.getType().ordinal())
    {
    case 118:
      return reduce(RULE_7, 0);
    case 119:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action33(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 10);
    case 65:
      return reduce(RULE_5, 10);
    case 63:
      return reduce(RULE_5, 10);
    case 76:
      return reduce(RULE_5, 10);
    case 78:
      return reduce(RULE_5, 10);
    case 85:
      return reduce(RULE_5, 10);
    case 104:
      return reduce(RULE_5, 10);
    case 113:
      return reduce(RULE_5, 10);
    case 72:
      return reduce(RULE_5, 10);
    case 86:
      return reduce(RULE_5, 10);
    case 90:
      return reduce(RULE_5, 10);
    case 99:
      return reduce(RULE_5, 10);
    case 88:
      return reduce(RULE_5, 10);
    case 95:
      return reduce(RULE_5, 10);
    case 71:
      return reduce(RULE_5, 10);
    case 69:
      return reduce(RULE_5, 10);
    case 70:
      return reduce(RULE_5, 10);
    case 89:
      return reduce(RULE_5, 10);
    case 106:
      return reduce(RULE_5, 10);
    case 97:
      return reduce(RULE_5, 10);
    case 109:
      return reduce(RULE_5, 10);
    case 101:
      return reduce(RULE_5, 10);
    case 84:
      return reduce(RULE_5, 10);
    case 80:
      return reduce(RULE_5, 10);
    case 107:
      return reduce(RULE_5, 10);
    case 91:
      return reduce(RULE_5, 10);
    case 110:
      return reduce(RULE_5, 10);
    case 66:
      return reduce(RULE_5, 10);
    case 73:
      return reduce(RULE_5, 10);
    case 92:
      return reduce(RULE_5, 10);
    case 68:
      return reduce(RULE_5, 10);
    case 108:
      return reduce(RULE_5, 10);
    case 93:
      return reduce(RULE_5, 10);
    case 102:
      return reduce(RULE_5, 10);
    case 59:
      return reduce(RULE_5, 10);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action34(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(59);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action35(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(60);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(71);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, DOUBLE_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto35(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 23: return 74;
    case 21: return 75;
    default: return -1;
    }
  }

  private final boolean action36(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 18);
    case 65:
      return reduce(RULE_5, 18);
    case 63:
      return reduce(RULE_5, 18);
    case 76:
      return reduce(RULE_5, 18);
    case 78:
      return reduce(RULE_5, 18);
    case 85:
      return reduce(RULE_5, 18);
    case 104:
      return reduce(RULE_5, 18);
    case 113:
      return reduce(RULE_5, 18);
    case 72:
      return reduce(RULE_5, 18);
    case 86:
      return reduce(RULE_5, 18);
    case 90:
      return reduce(RULE_5, 18);
    case 99:
      return reduce(RULE_5, 18);
    case 88:
      return reduce(RULE_5, 18);
    case 95:
      return reduce(RULE_5, 18);
    case 71:
      return reduce(RULE_5, 18);
    case 69:
      return reduce(RULE_5, 18);
    case 70:
      return reduce(RULE_5, 18);
    case 89:
      return reduce(RULE_5, 18);
    case 106:
      return reduce(RULE_5, 18);
    case 97:
      return reduce(RULE_5, 18);
    case 109:
      return reduce(RULE_5, 18);
    case 101:
      return reduce(RULE_5, 18);
    case 84:
      return reduce(RULE_5, 18);
    case 80:
      return reduce(RULE_5, 18);
    case 107:
      return reduce(RULE_5, 18);
    case 91:
      return reduce(RULE_5, 18);
    case 110:
      return reduce(RULE_5, 18);
    case 66:
      return reduce(RULE_5, 18);
    case 73:
      return reduce(RULE_5, 18);
    case 92:
      return reduce(RULE_5, 18);
    case 68:
      return reduce(RULE_5, 18);
    case 108:
      return reduce(RULE_5, 18);
    case 93:
      return reduce(RULE_5, 18);
    case 102:
      return reduce(RULE_5, 18);
    case 59:
      return reduce(RULE_5, 18);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action37(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 14);
    case 65:
      return reduce(RULE_5, 14);
    case 63:
      return reduce(RULE_5, 14);
    case 76:
      return reduce(RULE_5, 14);
    case 78:
      return reduce(RULE_5, 14);
    case 85:
      return reduce(RULE_5, 14);
    case 104:
      return reduce(RULE_5, 14);
    case 113:
      return reduce(RULE_5, 14);
    case 72:
      return reduce(RULE_5, 14);
    case 86:
      return reduce(RULE_5, 14);
    case 90:
      return reduce(RULE_5, 14);
    case 99:
      return reduce(RULE_5, 14);
    case 88:
      return reduce(RULE_5, 14);
    case 95:
      return reduce(RULE_5, 14);
    case 71:
      return reduce(RULE_5, 14);
    case 69:
      return reduce(RULE_5, 14);
    case 70:
      return reduce(RULE_5, 14);
    case 89:
      return reduce(RULE_5, 14);
    case 106:
      return reduce(RULE_5, 14);
    case 97:
      return reduce(RULE_5, 14);
    case 109:
      return reduce(RULE_5, 14);
    case 101:
      return reduce(RULE_5, 14);
    case 84:
      return reduce(RULE_5, 14);
    case 80:
      return reduce(RULE_5, 14);
    case 107:
      return reduce(RULE_5, 14);
    case 91:
      return reduce(RULE_5, 14);
    case 110:
      return reduce(RULE_5, 14);
    case 66:
      return reduce(RULE_5, 14);
    case 73:
      return reduce(RULE_5, 14);
    case 92:
      return reduce(RULE_5, 14);
    case 68:
      return reduce(RULE_5, 14);
    case 108:
      return reduce(RULE_5, 14);
    case 93:
      return reduce(RULE_5, 14);
    case 102:
      return reduce(RULE_5, 14);
    case 59:
      return reduce(RULE_5, 14);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action38(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto38(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 39: return 77;
    case 22: return 78;
    case 23: return 79;
    case 38: return 80;
    case 21: return 81;
    default: return -1;
    }
  }

  private final boolean action39(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 15);
    case 65:
      return reduce(RULE_5, 15);
    case 63:
      return reduce(RULE_5, 15);
    case 76:
      return reduce(RULE_5, 15);
    case 78:
      return reduce(RULE_5, 15);
    case 85:
      return reduce(RULE_5, 15);
    case 104:
      return reduce(RULE_5, 15);
    case 113:
      return reduce(RULE_5, 15);
    case 72:
      return reduce(RULE_5, 15);
    case 86:
      return reduce(RULE_5, 15);
    case 90:
      return reduce(RULE_5, 15);
    case 99:
      return reduce(RULE_5, 15);
    case 88:
      return reduce(RULE_5, 15);
    case 95:
      return reduce(RULE_5, 15);
    case 71:
      return reduce(RULE_5, 15);
    case 69:
      return reduce(RULE_5, 15);
    case 70:
      return reduce(RULE_5, 15);
    case 89:
      return reduce(RULE_5, 15);
    case 106:
      return reduce(RULE_5, 15);
    case 97:
      return reduce(RULE_5, 15);
    case 109:
      return reduce(RULE_5, 15);
    case 101:
      return reduce(RULE_5, 15);
    case 84:
      return reduce(RULE_5, 15);
    case 80:
      return reduce(RULE_5, 15);
    case 107:
      return reduce(RULE_5, 15);
    case 91:
      return reduce(RULE_5, 15);
    case 110:
      return reduce(RULE_5, 15);
    case 66:
      return reduce(RULE_5, 15);
    case 73:
      return reduce(RULE_5, 15);
    case 92:
      return reduce(RULE_5, 15);
    case 68:
      return reduce(RULE_5, 15);
    case 108:
      return reduce(RULE_5, 15);
    case 93:
      return reduce(RULE_5, 15);
    case 102:
      return reduce(RULE_5, 15);
    case 59:
      return reduce(RULE_5, 15);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action40(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action41(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 6);
    case 65:
      return reduce(RULE_5, 6);
    case 63:
      return reduce(RULE_5, 6);
    case 76:
      return reduce(RULE_5, 6);
    case 78:
      return reduce(RULE_5, 6);
    case 85:
      return reduce(RULE_5, 6);
    case 104:
      return reduce(RULE_5, 6);
    case 113:
      return reduce(RULE_5, 6);
    case 72:
      return reduce(RULE_5, 6);
    case 86:
      return reduce(RULE_5, 6);
    case 90:
      return reduce(RULE_5, 6);
    case 99:
      return reduce(RULE_5, 6);
    case 88:
      return reduce(RULE_5, 6);
    case 95:
      return reduce(RULE_5, 6);
    case 71:
      return reduce(RULE_5, 6);
    case 69:
      return reduce(RULE_5, 6);
    case 70:
      return reduce(RULE_5, 6);
    case 89:
      return reduce(RULE_5, 6);
    case 106:
      return reduce(RULE_5, 6);
    case 97:
      return reduce(RULE_5, 6);
    case 109:
      return reduce(RULE_5, 6);
    case 101:
      return reduce(RULE_5, 6);
    case 84:
      return reduce(RULE_5, 6);
    case 80:
      return reduce(RULE_5, 6);
    case 107:
      return reduce(RULE_5, 6);
    case 91:
      return reduce(RULE_5, 6);
    case 110:
      return reduce(RULE_5, 6);
    case 66:
      return reduce(RULE_5, 6);
    case 73:
      return reduce(RULE_5, 6);
    case 92:
      return reduce(RULE_5, 6);
    case 68:
      return reduce(RULE_5, 6);
    case 108:
      return reduce(RULE_5, 6);
    case 93:
      return reduce(RULE_5, 6);
    case 102:
      return reduce(RULE_5, 6);
    case 59:
      return reduce(RULE_5, 6);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action42(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 0);
    case 65:
      return reduce(RULE_5, 0);
    case 63:
      return reduce(RULE_5, 0);
    case 76:
      return reduce(RULE_5, 0);
    case 78:
      return reduce(RULE_5, 0);
    case 85:
      return reduce(RULE_5, 0);
    case 104:
      return reduce(RULE_5, 0);
    case 113:
      return reduce(RULE_5, 0);
    case 72:
      return reduce(RULE_5, 0);
    case 86:
      return reduce(RULE_5, 0);
    case 90:
      return reduce(RULE_5, 0);
    case 99:
      return reduce(RULE_5, 0);
    case 88:
      return reduce(RULE_5, 0);
    case 95:
      return reduce(RULE_5, 0);
    case 71:
      return reduce(RULE_5, 0);
    case 69:
      return reduce(RULE_5, 0);
    case 70:
      return reduce(RULE_5, 0);
    case 89:
      return reduce(RULE_5, 0);
    case 106:
      return reduce(RULE_5, 0);
    case 97:
      return reduce(RULE_5, 0);
    case 109:
      return reduce(RULE_5, 0);
    case 101:
      return reduce(RULE_5, 0);
    case 84:
      return reduce(RULE_5, 0);
    case 80:
      return reduce(RULE_5, 0);
    case 107:
      return reduce(RULE_5, 0);
    case 91:
      return reduce(RULE_5, 0);
    case 110:
      return reduce(RULE_5, 0);
    case 66:
      return reduce(RULE_5, 0);
    case 73:
      return reduce(RULE_5, 0);
    case 92:
      return reduce(RULE_5, 0);
    case 68:
      return reduce(RULE_5, 0);
    case 108:
      return reduce(RULE_5, 0);
    case 93:
      return reduce(RULE_5, 0);
    case 102:
      return reduce(RULE_5, 0);
    case 59:
      return reduce(RULE_5, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action43(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_6, 1);
    case 140:
      return reduce(RULE_6, 1);
    case 141:
      return reduce(RULE_6, 1);
    case 131:
      return reduce(RULE_6, 1);
    case 124:
      return reduce(RULE_6, 1);
    case 142:
      return reduce(RULE_6, 1);
    case 129:
      return reduce(RULE_6, 1);
    case 144:
      return reduce(RULE_6, 1);
    case 101:
      return reduce(RULE_6, 1);
    case 116:
      return reduce(RULE_6, 1);
    case 136:
      return reduce(RULE_6, 1);
    case 91:
      return reduce(RULE_6, 1);
    case 143:
      return reduce(RULE_6, 1);
    case 92:
      return reduce(RULE_6, 1);
    case 130:
      return reduce(RULE_6, 1);
    case 114:
      return reduce(RULE_6, 1);
    case 137:
      return reduce(RULE_6, 1);
    case 125:
      return reduce(RULE_6, 1);
    case 90:
      return reduce(RULE_6, 1);
    case 59:
      return reduce(RULE_6, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action44(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 3);
    case 65:
      return reduce(RULE_5, 3);
    case 63:
      return reduce(RULE_5, 3);
    case 76:
      return reduce(RULE_5, 3);
    case 78:
      return reduce(RULE_5, 3);
    case 85:
      return reduce(RULE_5, 3);
    case 104:
      return reduce(RULE_5, 3);
    case 113:
      return reduce(RULE_5, 3);
    case 72:
      return reduce(RULE_5, 3);
    case 86:
      return reduce(RULE_5, 3);
    case 90:
      return reduce(RULE_5, 3);
    case 99:
      return reduce(RULE_5, 3);
    case 88:
      return reduce(RULE_5, 3);
    case 95:
      return reduce(RULE_5, 3);
    case 71:
      return reduce(RULE_5, 3);
    case 69:
      return reduce(RULE_5, 3);
    case 70:
      return reduce(RULE_5, 3);
    case 89:
      return reduce(RULE_5, 3);
    case 106:
      return reduce(RULE_5, 3);
    case 97:
      return reduce(RULE_5, 3);
    case 109:
      return reduce(RULE_5, 3);
    case 101:
      return reduce(RULE_5, 3);
    case 84:
      return reduce(RULE_5, 3);
    case 80:
      return reduce(RULE_5, 3);
    case 107:
      return reduce(RULE_5, 3);
    case 91:
      return reduce(RULE_5, 3);
    case 110:
      return reduce(RULE_5, 3);
    case 66:
      return reduce(RULE_5, 3);
    case 73:
      return reduce(RULE_5, 3);
    case 92:
      return reduce(RULE_5, 3);
    case 68:
      return reduce(RULE_5, 3);
    case 108:
      return reduce(RULE_5, 3);
    case 93:
      return reduce(RULE_5, 3);
    case 102:
      return reduce(RULE_5, 3);
    case 59:
      return reduce(RULE_5, 3);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action45(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 65:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(91);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(94);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(95);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(97);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(98);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(100);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(101);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(102);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, ARROW, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, FINAL_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final int goto45(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 103;
    case 50: return 104;
    case 26: return 105;
    case 38: return 106;
    case 21: return 107;
    case 32: return 108;
    case 39: return 109;
    case 24: return 110;
    case 52: return 111;
    case 54: return 112;
    case 13: return 113;
    case 53: return 114;
    case 29: return 115;
    case 25: return 116;
    case 33: return 117;
    case 55: return 118;
    case 35: return 119;
    case 37: return 120;
    case 34: return 121;
    case 58: return 122;
    case 22: return 123;
    case 51: return 124;
    case 30: return 125;
    case 31: return 126;
    case 19: return 127;
    case 12: return 128;
    case 28: return 129;
    case 27: return 130;
    case 23: return 131;
    default: return -1;
    }
  }

  private final boolean action46(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 82:
      return reduce(RULE_3, 0);
    case 59:
      return reduce(RULE_3, 0);
    default: throw new BadTokenException(token, new Object[] {LPAREN, DOT, NAME});
    }
  }

  private final int goto46(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 133;
    default: return -1;
    }
  }

  private final boolean action47(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_4, 4);
    case 140:
      return reduce(RULE_4, 4);
    case 141:
      return reduce(RULE_4, 4);
    case 131:
      return reduce(RULE_4, 4);
    case 124:
      return reduce(RULE_4, 4);
    case 142:
      return reduce(RULE_4, 4);
    case 106:
      return reduce(RULE_4, 4);
    case 129:
      return reduce(RULE_4, 4);
    case 144:
      return reduce(RULE_4, 4);
    case 101:
      return reduce(RULE_4, 4);
    case 116:
      return reduce(RULE_4, 4);
    case 136:
      return reduce(RULE_4, 4);
    case 91:
      return reduce(RULE_4, 4);
    case 143:
      return reduce(RULE_4, 4);
    case 92:
      return reduce(RULE_4, 4);
    case 130:
      return reduce(RULE_4, 4);
    case 114:
      return reduce(RULE_4, 4);
    case 137:
      return reduce(RULE_4, 4);
    case 125:
      return reduce(RULE_4, 4);
    case 90:
      return reduce(RULE_4, 4);
    case 59:
      return reduce(RULE_4, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action48(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_8, 1);
    case 140:
      return reduce(RULE_8, 1);
    case 141:
      return reduce(RULE_8, 1);
    case 131:
      return reduce(RULE_8, 1);
    case 124:
      return reduce(RULE_8, 1);
    case 142:
      return reduce(RULE_8, 1);
    case 106:
      return reduce(RULE_8, 1);
    case 129:
      return reduce(RULE_8, 1);
    case 144:
      return reduce(RULE_8, 1);
    case 101:
      return reduce(RULE_8, 1);
    case 116:
      return reduce(RULE_8, 1);
    case 136:
      return reduce(RULE_8, 1);
    case 143:
      return reduce(RULE_8, 1);
    case 91:
      return reduce(RULE_8, 1);
    case 92:
      return reduce(RULE_8, 1);
    case 130:
      return reduce(RULE_8, 1);
    case 114:
      return reduce(RULE_8, 1);
    case 137:
      return reduce(RULE_8, 1);
    case 125:
      return reduce(RULE_8, 1);
    case 90:
      return reduce(RULE_8, 1);
    case 59:
      return reduce(RULE_8, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action49(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_4, 1);
    case 140:
      return reduce(RULE_4, 1);
    case 141:
      return reduce(RULE_4, 1);
    case 131:
      return reduce(RULE_4, 1);
    case 124:
      return reduce(RULE_4, 1);
    case 142:
      return reduce(RULE_4, 1);
    case 106:
      return reduce(RULE_4, 1);
    case 129:
      return reduce(RULE_4, 1);
    case 144:
      return reduce(RULE_4, 1);
    case 101:
      return reduce(RULE_4, 1);
    case 116:
      return reduce(RULE_4, 1);
    case 136:
      return reduce(RULE_4, 1);
    case 91:
      return reduce(RULE_4, 1);
    case 143:
      return reduce(RULE_4, 1);
    case 92:
      return reduce(RULE_4, 1);
    case 130:
      return reduce(RULE_4, 1);
    case 114:
      return reduce(RULE_4, 1);
    case 137:
      return reduce(RULE_4, 1);
    case 125:
      return reduce(RULE_4, 1);
    case 90:
      return reduce(RULE_4, 1);
    case 59:
      return reduce(RULE_4, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action50(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action51(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_9, 1);
    case 65:
      return reduce(RULE_9, 1);
    case 63:
      return reduce(RULE_9, 1);
    case 76:
      return reduce(RULE_9, 1);
    case 78:
      return reduce(RULE_9, 1);
    case 85:
      return reduce(RULE_9, 1);
    case 104:
      return reduce(RULE_9, 1);
    case 113:
      return reduce(RULE_9, 1);
    case 72:
      return reduce(RULE_9, 1);
    case 86:
      return reduce(RULE_9, 1);
    case 90:
      return reduce(RULE_9, 1);
    case 99:
      return reduce(RULE_9, 1);
    case 88:
      return reduce(RULE_9, 1);
    case 95:
      return reduce(RULE_9, 1);
    case 71:
      return reduce(RULE_9, 1);
    case 69:
      return reduce(RULE_9, 1);
    case 70:
      return reduce(RULE_9, 1);
    case 89:
      return reduce(RULE_9, 1);
    case 106:
      return reduce(RULE_9, 1);
    case 97:
      return reduce(RULE_9, 1);
    case 109:
      return reduce(RULE_9, 1);
    case 101:
      return reduce(RULE_9, 1);
    case 84:
      return reduce(RULE_9, 1);
    case 80:
      return reduce(RULE_9, 1);
    case 107:
      return reduce(RULE_9, 1);
    case 91:
      return reduce(RULE_9, 1);
    case 110:
      return reduce(RULE_9, 1);
    case 66:
      return reduce(RULE_9, 1);
    case 73:
      return reduce(RULE_9, 1);
    case 92:
      return reduce(RULE_9, 1);
    case 68:
      return reduce(RULE_9, 1);
    case 108:
      return reduce(RULE_9, 1);
    case 93:
      return reduce(RULE_9, 1);
    case 102:
      return reduce(RULE_9, 1);
    case 59:
      return reduce(RULE_9, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action52(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_9, 2);
    case 65:
      return reduce(RULE_9, 2);
    case 63:
      return reduce(RULE_9, 2);
    case 76:
      return reduce(RULE_9, 2);
    case 78:
      return reduce(RULE_9, 2);
    case 85:
      return reduce(RULE_9, 2);
    case 104:
      return reduce(RULE_9, 2);
    case 113:
      return reduce(RULE_9, 2);
    case 72:
      return reduce(RULE_9, 2);
    case 86:
      return reduce(RULE_9, 2);
    case 90:
      return reduce(RULE_9, 2);
    case 99:
      return reduce(RULE_9, 2);
    case 88:
      return reduce(RULE_9, 2);
    case 95:
      return reduce(RULE_9, 2);
    case 69:
      return reduce(RULE_9, 2);
    case 71:
      return reduce(RULE_9, 2);
    case 70:
      return reduce(RULE_9, 2);
    case 89:
      return reduce(RULE_9, 2);
    case 106:
      return reduce(RULE_9, 2);
    case 97:
      return reduce(RULE_9, 2);
    case 109:
      return reduce(RULE_9, 2);
    case 101:
      return reduce(RULE_9, 2);
    case 84:
      return reduce(RULE_9, 2);
    case 80:
      return reduce(RULE_9, 2);
    case 107:
      return reduce(RULE_9, 2);
    case 91:
      return reduce(RULE_9, 2);
    case 110:
      return reduce(RULE_9, 2);
    case 66:
      return reduce(RULE_9, 2);
    case 73:
      return reduce(RULE_9, 2);
    case 92:
      return reduce(RULE_9, 2);
    case 68:
      return reduce(RULE_9, 2);
    case 108:
      return reduce(RULE_9, 2);
    case 93:
      return reduce(RULE_9, 2);
    case 102:
      return reduce(RULE_9, 2);
    case 59:
      return reduce(RULE_9, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action53(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_4, 2);
    case 140:
      return reduce(RULE_4, 2);
    case 141:
      return reduce(RULE_4, 2);
    case 131:
      return reduce(RULE_4, 2);
    case 124:
      return reduce(RULE_4, 2);
    case 142:
      return reduce(RULE_4, 2);
    case 106:
      return reduce(RULE_4, 2);
    case 129:
      return reduce(RULE_4, 2);
    case 144:
      return reduce(RULE_4, 2);
    case 101:
      return reduce(RULE_4, 2);
    case 116:
      return reduce(RULE_4, 2);
    case 136:
      return reduce(RULE_4, 2);
    case 91:
      return reduce(RULE_4, 2);
    case 143:
      return reduce(RULE_4, 2);
    case 92:
      return reduce(RULE_4, 2);
    case 130:
      return reduce(RULE_4, 2);
    case 114:
      return reduce(RULE_4, 2);
    case 137:
      return reduce(RULE_4, 2);
    case 125:
      return reduce(RULE_4, 2);
    case 90:
      return reduce(RULE_4, 2);
    case 59:
      return reduce(RULE_4, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action54(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_9, 0);
    case 65:
      return reduce(RULE_9, 0);
    case 63:
      return reduce(RULE_9, 0);
    case 76:
      return reduce(RULE_9, 0);
    case 78:
      return reduce(RULE_9, 0);
    case 85:
      return reduce(RULE_9, 0);
    case 104:
      return reduce(RULE_9, 0);
    case 113:
      return reduce(RULE_9, 0);
    case 72:
      return reduce(RULE_9, 0);
    case 86:
      return reduce(RULE_9, 0);
    case 90:
      return reduce(RULE_9, 0);
    case 99:
      return reduce(RULE_9, 0);
    case 88:
      return reduce(RULE_9, 0);
    case 95:
      return reduce(RULE_9, 0);
    case 71:
      return reduce(RULE_9, 0);
    case 69:
      return reduce(RULE_9, 0);
    case 70:
      return reduce(RULE_9, 0);
    case 89:
      return reduce(RULE_9, 0);
    case 106:
      return reduce(RULE_9, 0);
    case 97:
      return reduce(RULE_9, 0);
    case 109:
      return reduce(RULE_9, 0);
    case 101:
      return reduce(RULE_9, 0);
    case 84:
      return reduce(RULE_9, 0);
    case 80:
      return reduce(RULE_9, 0);
    case 107:
      return reduce(RULE_9, 0);
    case 91:
      return reduce(RULE_9, 0);
    case 110:
      return reduce(RULE_9, 0);
    case 66:
      return reduce(RULE_9, 0);
    case 73:
      return reduce(RULE_9, 0);
    case 92:
      return reduce(RULE_9, 0);
    case 68:
      return reduce(RULE_9, 0);
    case 108:
      return reduce(RULE_9, 0);
    case 93:
      return reduce(RULE_9, 0);
    case 102:
      return reduce(RULE_9, 0);
    case 59:
      return reduce(RULE_9, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action55(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(137);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, DOUBLE_KEYWORD, NATIVE_KEYWORD, ULONG_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto55(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 140;
    case 37: return 141;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action56(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_4, 3);
    case 140:
      return reduce(RULE_4, 3);
    case 141:
      return reduce(RULE_4, 3);
    case 131:
      return reduce(RULE_4, 3);
    case 124:
      return reduce(RULE_4, 3);
    case 142:
      return reduce(RULE_4, 3);
    case 106:
      return reduce(RULE_4, 3);
    case 129:
      return reduce(RULE_4, 3);
    case 144:
      return reduce(RULE_4, 3);
    case 101:
      return reduce(RULE_4, 3);
    case 116:
      return reduce(RULE_4, 3);
    case 136:
      return reduce(RULE_4, 3);
    case 91:
      return reduce(RULE_4, 3);
    case 143:
      return reduce(RULE_4, 3);
    case 92:
      return reduce(RULE_4, 3);
    case 130:
      return reduce(RULE_4, 3);
    case 114:
      return reduce(RULE_4, 3);
    case 137:
      return reduce(RULE_4, 3);
    case 125:
      return reduce(RULE_4, 3);
    case 90:
      return reduce(RULE_4, 3);
    case 59:
      return reduce(RULE_4, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action57(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_10, 0);
    }
    switch (token.getType().ordinal())
    {
    case 118:
      return reduce(RULE_10, 0);
    case 119:
      return reduce(RULE_10, 0);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action58(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_6, 3);
    case 140:
      return reduce(RULE_6, 3);
    case 141:
      return reduce(RULE_6, 3);
    case 131:
      return reduce(RULE_6, 3);
    case 124:
      return reduce(RULE_6, 3);
    case 142:
      return reduce(RULE_6, 3);
    case 129:
      return reduce(RULE_6, 3);
    case 144:
      return reduce(RULE_6, 3);
    case 101:
      return reduce(RULE_6, 3);
    case 116:
      return reduce(RULE_6, 3);
    case 136:
      return reduce(RULE_6, 3);
    case 143:
      return reduce(RULE_6, 3);
    case 91:
      return reduce(RULE_6, 3);
    case 92:
      return reduce(RULE_6, 3);
    case 130:
      return reduce(RULE_6, 3);
    case 114:
      return reduce(RULE_6, 3);
    case 137:
      return reduce(RULE_6, 3);
    case 125:
      return reduce(RULE_6, 3);
    case 90:
      return reduce(RULE_6, 3);
    case 59:
      return reduce(RULE_6, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action59(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto59(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 142;
    default: return -1;
    }
  }

  private final boolean action60(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 21);
    case 65:
      return reduce(RULE_5, 21);
    case 63:
      return reduce(RULE_5, 21);
    case 76:
      return reduce(RULE_5, 21);
    case 78:
      return reduce(RULE_5, 21);
    case 85:
      return reduce(RULE_5, 21);
    case 104:
      return reduce(RULE_5, 21);
    case 113:
      return reduce(RULE_5, 21);
    case 72:
      return reduce(RULE_5, 21);
    case 86:
      return reduce(RULE_5, 21);
    case 90:
      return reduce(RULE_5, 21);
    case 99:
      return reduce(RULE_5, 21);
    case 88:
      return reduce(RULE_5, 21);
    case 95:
      return reduce(RULE_5, 21);
    case 69:
      return reduce(RULE_5, 21);
    case 71:
      return reduce(RULE_5, 21);
    case 70:
      return reduce(RULE_5, 21);
    case 89:
      return reduce(RULE_5, 21);
    case 106:
      return reduce(RULE_5, 21);
    case 97:
      return reduce(RULE_5, 21);
    case 109:
      return reduce(RULE_5, 21);
    case 101:
      return reduce(RULE_5, 21);
    case 84:
      return reduce(RULE_5, 21);
    case 80:
      return reduce(RULE_5, 21);
    case 107:
      return reduce(RULE_5, 21);
    case 91:
      return reduce(RULE_5, 21);
    case 110:
      return reduce(RULE_5, 21);
    case 66:
      return reduce(RULE_5, 21);
    case 73:
      return reduce(RULE_5, 21);
    case 92:
      return reduce(RULE_5, 21);
    case 68:
      return reduce(RULE_5, 21);
    case 108:
      return reduce(RULE_5, 21);
    case 93:
      return reduce(RULE_5, 21);
    case 102:
      return reduce(RULE_5, 21);
    case 59:
      return reduce(RULE_5, 21);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action61(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 13);
    case 65:
      return reduce(RULE_5, 13);
    case 63:
      return reduce(RULE_5, 13);
    case 76:
      return reduce(RULE_5, 13);
    case 78:
      return reduce(RULE_5, 13);
    case 85:
      return reduce(RULE_5, 13);
    case 104:
      return reduce(RULE_5, 13);
    case 113:
      return reduce(RULE_5, 13);
    case 72:
      return reduce(RULE_5, 13);
    case 86:
      return reduce(RULE_5, 13);
    case 90:
      return reduce(RULE_5, 13);
    case 99:
      return reduce(RULE_5, 13);
    case 88:
      return reduce(RULE_5, 13);
    case 95:
      return reduce(RULE_5, 13);
    case 69:
      return reduce(RULE_5, 13);
    case 71:
      return reduce(RULE_5, 13);
    case 70:
      return reduce(RULE_5, 13);
    case 89:
      return reduce(RULE_5, 13);
    case 106:
      return reduce(RULE_5, 13);
    case 97:
      return reduce(RULE_5, 13);
    case 109:
      return reduce(RULE_5, 13);
    case 101:
      return reduce(RULE_5, 13);
    case 84:
      return reduce(RULE_5, 13);
    case 80:
      return reduce(RULE_5, 13);
    case 107:
      return reduce(RULE_5, 13);
    case 91:
      return reduce(RULE_5, 13);
    case 110:
      return reduce(RULE_5, 13);
    case 66:
      return reduce(RULE_5, 13);
    case 73:
      return reduce(RULE_5, 13);
    case 92:
      return reduce(RULE_5, 13);
    case 68:
      return reduce(RULE_5, 13);
    case 108:
      return reduce(RULE_5, 13);
    case 93:
      return reduce(RULE_5, 13);
    case 102:
      return reduce(RULE_5, 13);
    case 59:
      return reduce(RULE_5, 13);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action62(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 4);
    case 65:
      return reduce(RULE_5, 4);
    case 63:
      return reduce(RULE_5, 4);
    case 76:
      return reduce(RULE_5, 4);
    case 78:
      return reduce(RULE_5, 4);
    case 85:
      return reduce(RULE_5, 4);
    case 104:
      return reduce(RULE_5, 4);
    case 113:
      return reduce(RULE_5, 4);
    case 72:
      return reduce(RULE_5, 4);
    case 86:
      return reduce(RULE_5, 4);
    case 90:
      return reduce(RULE_5, 4);
    case 99:
      return reduce(RULE_5, 4);
    case 88:
      return reduce(RULE_5, 4);
    case 95:
      return reduce(RULE_5, 4);
    case 69:
      return reduce(RULE_5, 4);
    case 71:
      return reduce(RULE_5, 4);
    case 70:
      return reduce(RULE_5, 4);
    case 89:
      return reduce(RULE_5, 4);
    case 106:
      return reduce(RULE_5, 4);
    case 97:
      return reduce(RULE_5, 4);
    case 109:
      return reduce(RULE_5, 4);
    case 101:
      return reduce(RULE_5, 4);
    case 84:
      return reduce(RULE_5, 4);
    case 80:
      return reduce(RULE_5, 4);
    case 107:
      return reduce(RULE_5, 4);
    case 91:
      return reduce(RULE_5, 4);
    case 110:
      return reduce(RULE_5, 4);
    case 66:
      return reduce(RULE_5, 4);
    case 73:
      return reduce(RULE_5, 4);
    case 92:
      return reduce(RULE_5, 4);
    case 68:
      return reduce(RULE_5, 4);
    case 108:
      return reduce(RULE_5, 4);
    case 93:
      return reduce(RULE_5, 4);
    case 102:
      return reduce(RULE_5, 4);
    case 59:
      return reduce(RULE_5, 4);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action63(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 9);
    case 65:
      return reduce(RULE_5, 9);
    case 63:
      return reduce(RULE_5, 9);
    case 76:
      return reduce(RULE_5, 9);
    case 78:
      return reduce(RULE_5, 9);
    case 85:
      return reduce(RULE_5, 9);
    case 104:
      return reduce(RULE_5, 9);
    case 113:
      return reduce(RULE_5, 9);
    case 72:
      return reduce(RULE_5, 9);
    case 86:
      return reduce(RULE_5, 9);
    case 90:
      return reduce(RULE_5, 9);
    case 99:
      return reduce(RULE_5, 9);
    case 88:
      return reduce(RULE_5, 9);
    case 95:
      return reduce(RULE_5, 9);
    case 69:
      return reduce(RULE_5, 9);
    case 71:
      return reduce(RULE_5, 9);
    case 70:
      return reduce(RULE_5, 9);
    case 89:
      return reduce(RULE_5, 9);
    case 106:
      return reduce(RULE_5, 9);
    case 97:
      return reduce(RULE_5, 9);
    case 109:
      return reduce(RULE_5, 9);
    case 101:
      return reduce(RULE_5, 9);
    case 84:
      return reduce(RULE_5, 9);
    case 80:
      return reduce(RULE_5, 9);
    case 107:
      return reduce(RULE_5, 9);
    case 91:
      return reduce(RULE_5, 9);
    case 110:
      return reduce(RULE_5, 9);
    case 66:
      return reduce(RULE_5, 9);
    case 73:
      return reduce(RULE_5, 9);
    case 92:
      return reduce(RULE_5, 9);
    case 68:
      return reduce(RULE_5, 9);
    case 108:
      return reduce(RULE_5, 9);
    case 93:
      return reduce(RULE_5, 9);
    case 102:
      return reduce(RULE_5, 9);
    case 59:
      return reduce(RULE_5, 9);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action64(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 12);
    case 65:
      return reduce(RULE_5, 12);
    case 63:
      return reduce(RULE_5, 12);
    case 76:
      return reduce(RULE_5, 12);
    case 78:
      return reduce(RULE_5, 12);
    case 85:
      return reduce(RULE_5, 12);
    case 104:
      return reduce(RULE_5, 12);
    case 113:
      return reduce(RULE_5, 12);
    case 72:
      return reduce(RULE_5, 12);
    case 86:
      return reduce(RULE_5, 12);
    case 90:
      return reduce(RULE_5, 12);
    case 99:
      return reduce(RULE_5, 12);
    case 88:
      return reduce(RULE_5, 12);
    case 95:
      return reduce(RULE_5, 12);
    case 69:
      return reduce(RULE_5, 12);
    case 71:
      return reduce(RULE_5, 12);
    case 70:
      return reduce(RULE_5, 12);
    case 89:
      return reduce(RULE_5, 12);
    case 106:
      return reduce(RULE_5, 12);
    case 97:
      return reduce(RULE_5, 12);
    case 109:
      return reduce(RULE_5, 12);
    case 101:
      return reduce(RULE_5, 12);
    case 84:
      return reduce(RULE_5, 12);
    case 80:
      return reduce(RULE_5, 12);
    case 107:
      return reduce(RULE_5, 12);
    case 91:
      return reduce(RULE_5, 12);
    case 110:
      return reduce(RULE_5, 12);
    case 66:
      return reduce(RULE_5, 12);
    case 73:
      return reduce(RULE_5, 12);
    case 92:
      return reduce(RULE_5, 12);
    case 68:
      return reduce(RULE_5, 12);
    case 108:
      return reduce(RULE_5, 12);
    case 93:
      return reduce(RULE_5, 12);
    case 102:
      return reduce(RULE_5, 12);
    case 59:
      return reduce(RULE_5, 12);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action65(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 20);
    case 65:
      return reduce(RULE_5, 20);
    case 63:
      return reduce(RULE_5, 20);
    case 76:
      return reduce(RULE_5, 20);
    case 78:
      return reduce(RULE_5, 20);
    case 85:
      return reduce(RULE_5, 20);
    case 104:
      return reduce(RULE_5, 20);
    case 113:
      return reduce(RULE_5, 20);
    case 72:
      return reduce(RULE_5, 20);
    case 86:
      return reduce(RULE_5, 20);
    case 90:
      return reduce(RULE_5, 20);
    case 99:
      return reduce(RULE_5, 20);
    case 88:
      return reduce(RULE_5, 20);
    case 95:
      return reduce(RULE_5, 20);
    case 69:
      return reduce(RULE_5, 20);
    case 71:
      return reduce(RULE_5, 20);
    case 70:
      return reduce(RULE_5, 20);
    case 89:
      return reduce(RULE_5, 20);
    case 106:
      return reduce(RULE_5, 20);
    case 97:
      return reduce(RULE_5, 20);
    case 109:
      return reduce(RULE_5, 20);
    case 101:
      return reduce(RULE_5, 20);
    case 84:
      return reduce(RULE_5, 20);
    case 80:
      return reduce(RULE_5, 20);
    case 107:
      return reduce(RULE_5, 20);
    case 91:
      return reduce(RULE_5, 20);
    case 110:
      return reduce(RULE_5, 20);
    case 66:
      return reduce(RULE_5, 20);
    case 73:
      return reduce(RULE_5, 20);
    case 92:
      return reduce(RULE_5, 20);
    case 68:
      return reduce(RULE_5, 20);
    case 108:
      return reduce(RULE_5, 20);
    case 93:
      return reduce(RULE_5, 20);
    case 102:
      return reduce(RULE_5, 20);
    case 59:
      return reduce(RULE_5, 20);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action66(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 16);
    case 65:
      return reduce(RULE_5, 16);
    case 63:
      return reduce(RULE_5, 16);
    case 76:
      return reduce(RULE_5, 16);
    case 78:
      return reduce(RULE_5, 16);
    case 85:
      return reduce(RULE_5, 16);
    case 104:
      return reduce(RULE_5, 16);
    case 113:
      return reduce(RULE_5, 16);
    case 72:
      return reduce(RULE_5, 16);
    case 86:
      return reduce(RULE_5, 16);
    case 90:
      return reduce(RULE_5, 16);
    case 99:
      return reduce(RULE_5, 16);
    case 88:
      return reduce(RULE_5, 16);
    case 95:
      return reduce(RULE_5, 16);
    case 69:
      return reduce(RULE_5, 16);
    case 71:
      return reduce(RULE_5, 16);
    case 70:
      return reduce(RULE_5, 16);
    case 89:
      return reduce(RULE_5, 16);
    case 106:
      return reduce(RULE_5, 16);
    case 97:
      return reduce(RULE_5, 16);
    case 109:
      return reduce(RULE_5, 16);
    case 101:
      return reduce(RULE_5, 16);
    case 84:
      return reduce(RULE_5, 16);
    case 80:
      return reduce(RULE_5, 16);
    case 107:
      return reduce(RULE_5, 16);
    case 91:
      return reduce(RULE_5, 16);
    case 110:
      return reduce(RULE_5, 16);
    case 66:
      return reduce(RULE_5, 16);
    case 73:
      return reduce(RULE_5, 16);
    case 92:
      return reduce(RULE_5, 16);
    case 68:
      return reduce(RULE_5, 16);
    case 108:
      return reduce(RULE_5, 16);
    case 93:
      return reduce(RULE_5, 16);
    case 102:
      return reduce(RULE_5, 16);
    case 59:
      return reduce(RULE_5, 16);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action67(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto67(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 39: return 143;
    case 22: return 78;
    case 23: return 79;
    case 38: return 80;
    case 21: return 81;
    default: return -1;
    }
  }

  private final boolean action68(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 17);
    case 65:
      return reduce(RULE_5, 17);
    case 63:
      return reduce(RULE_5, 17);
    case 76:
      return reduce(RULE_5, 17);
    case 78:
      return reduce(RULE_5, 17);
    case 85:
      return reduce(RULE_5, 17);
    case 104:
      return reduce(RULE_5, 17);
    case 113:
      return reduce(RULE_5, 17);
    case 72:
      return reduce(RULE_5, 17);
    case 86:
      return reduce(RULE_5, 17);
    case 90:
      return reduce(RULE_5, 17);
    case 99:
      return reduce(RULE_5, 17);
    case 88:
      return reduce(RULE_5, 17);
    case 95:
      return reduce(RULE_5, 17);
    case 69:
      return reduce(RULE_5, 17);
    case 71:
      return reduce(RULE_5, 17);
    case 70:
      return reduce(RULE_5, 17);
    case 89:
      return reduce(RULE_5, 17);
    case 106:
      return reduce(RULE_5, 17);
    case 97:
      return reduce(RULE_5, 17);
    case 109:
      return reduce(RULE_5, 17);
    case 101:
      return reduce(RULE_5, 17);
    case 84:
      return reduce(RULE_5, 17);
    case 80:
      return reduce(RULE_5, 17);
    case 107:
      return reduce(RULE_5, 17);
    case 91:
      return reduce(RULE_5, 17);
    case 110:
      return reduce(RULE_5, 17);
    case 66:
      return reduce(RULE_5, 17);
    case 73:
      return reduce(RULE_5, 17);
    case 92:
      return reduce(RULE_5, 17);
    case 68:
      return reduce(RULE_5, 17);
    case 108:
      return reduce(RULE_5, 17);
    case 93:
      return reduce(RULE_5, 17);
    case 102:
      return reduce(RULE_5, 17);
    case 59:
      return reduce(RULE_5, 17);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action69(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action70(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 8);
    case 65:
      return reduce(RULE_5, 8);
    case 63:
      return reduce(RULE_5, 8);
    case 76:
      return reduce(RULE_5, 8);
    case 78:
      return reduce(RULE_5, 8);
    case 85:
      return reduce(RULE_5, 8);
    case 104:
      return reduce(RULE_5, 8);
    case 113:
      return reduce(RULE_5, 8);
    case 72:
      return reduce(RULE_5, 8);
    case 86:
      return reduce(RULE_5, 8);
    case 90:
      return reduce(RULE_5, 8);
    case 99:
      return reduce(RULE_5, 8);
    case 88:
      return reduce(RULE_5, 8);
    case 95:
      return reduce(RULE_5, 8);
    case 69:
      return reduce(RULE_5, 8);
    case 71:
      return reduce(RULE_5, 8);
    case 70:
      return reduce(RULE_5, 8);
    case 89:
      return reduce(RULE_5, 8);
    case 106:
      return reduce(RULE_5, 8);
    case 97:
      return reduce(RULE_5, 8);
    case 109:
      return reduce(RULE_5, 8);
    case 101:
      return reduce(RULE_5, 8);
    case 84:
      return reduce(RULE_5, 8);
    case 80:
      return reduce(RULE_5, 8);
    case 107:
      return reduce(RULE_5, 8);
    case 91:
      return reduce(RULE_5, 8);
    case 110:
      return reduce(RULE_5, 8);
    case 66:
      return reduce(RULE_5, 8);
    case 73:
      return reduce(RULE_5, 8);
    case 92:
      return reduce(RULE_5, 8);
    case 68:
      return reduce(RULE_5, 8);
    case 108:
      return reduce(RULE_5, 8);
    case 93:
      return reduce(RULE_5, 8);
    case 102:
      return reduce(RULE_5, 8);
    case 59:
      return reduce(RULE_5, 8);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action71(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 1);
    case 65:
      return reduce(RULE_5, 1);
    case 63:
      return reduce(RULE_5, 1);
    case 76:
      return reduce(RULE_5, 1);
    case 78:
      return reduce(RULE_5, 1);
    case 85:
      return reduce(RULE_5, 1);
    case 104:
      return reduce(RULE_5, 1);
    case 113:
      return reduce(RULE_5, 1);
    case 72:
      return reduce(RULE_5, 1);
    case 86:
      return reduce(RULE_5, 1);
    case 90:
      return reduce(RULE_5, 1);
    case 99:
      return reduce(RULE_5, 1);
    case 88:
      return reduce(RULE_5, 1);
    case 95:
      return reduce(RULE_5, 1);
    case 69:
      return reduce(RULE_5, 1);
    case 71:
      return reduce(RULE_5, 1);
    case 70:
      return reduce(RULE_5, 1);
    case 89:
      return reduce(RULE_5, 1);
    case 106:
      return reduce(RULE_5, 1);
    case 97:
      return reduce(RULE_5, 1);
    case 109:
      return reduce(RULE_5, 1);
    case 101:
      return reduce(RULE_5, 1);
    case 84:
      return reduce(RULE_5, 1);
    case 80:
      return reduce(RULE_5, 1);
    case 107:
      return reduce(RULE_5, 1);
    case 91:
      return reduce(RULE_5, 1);
    case 110:
      return reduce(RULE_5, 1);
    case 66:
      return reduce(RULE_5, 1);
    case 73:
      return reduce(RULE_5, 1);
    case 92:
      return reduce(RULE_5, 1);
    case 68:
      return reduce(RULE_5, 1);
    case 108:
      return reduce(RULE_5, 1);
    case 93:
      return reduce(RULE_5, 1);
    case 102:
      return reduce(RULE_5, 1);
    case 59:
      return reduce(RULE_5, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action72(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 5);
    case 65:
      return reduce(RULE_5, 5);
    case 63:
      return reduce(RULE_5, 5);
    case 76:
      return reduce(RULE_5, 5);
    case 78:
      return reduce(RULE_5, 5);
    case 85:
      return reduce(RULE_5, 5);
    case 104:
      return reduce(RULE_5, 5);
    case 113:
      return reduce(RULE_5, 5);
    case 72:
      return reduce(RULE_5, 5);
    case 86:
      return reduce(RULE_5, 5);
    case 90:
      return reduce(RULE_5, 5);
    case 99:
      return reduce(RULE_5, 5);
    case 88:
      return reduce(RULE_5, 5);
    case 95:
      return reduce(RULE_5, 5);
    case 69:
      return reduce(RULE_5, 5);
    case 71:
      return reduce(RULE_5, 5);
    case 70:
      return reduce(RULE_5, 5);
    case 89:
      return reduce(RULE_5, 5);
    case 106:
      return reduce(RULE_5, 5);
    case 97:
      return reduce(RULE_5, 5);
    case 109:
      return reduce(RULE_5, 5);
    case 101:
      return reduce(RULE_5, 5);
    case 84:
      return reduce(RULE_5, 5);
    case 80:
      return reduce(RULE_5, 5);
    case 107:
      return reduce(RULE_5, 5);
    case 91:
      return reduce(RULE_5, 5);
    case 110:
      return reduce(RULE_5, 5);
    case 66:
      return reduce(RULE_5, 5);
    case 73:
      return reduce(RULE_5, 5);
    case 92:
      return reduce(RULE_5, 5);
    case 68:
      return reduce(RULE_5, 5);
    case 108:
      return reduce(RULE_5, 5);
    case 93:
      return reduce(RULE_5, 5);
    case 102:
      return reduce(RULE_5, 5);
    case 59:
      return reduce(RULE_5, 5);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action73(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 65:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ARROW, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto73(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 39: return 146;
    case 22: return 147;
    case 23: return 79;
    case 38: return 80;
    case 21: return 81;
    default: return -1;
    }
  }

  private final boolean action74(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 27);
    case 65:
      return reduce(RULE_5, 27);
    case 63:
      return reduce(RULE_5, 27);
    case 76:
      return reduce(RULE_5, 27);
    case 78:
      return reduce(RULE_5, 27);
    case 85:
      return reduce(RULE_5, 27);
    case 104:
      return reduce(RULE_5, 27);
    case 113:
      return reduce(RULE_5, 27);
    case 72:
      return reduce(RULE_5, 27);
    case 86:
      return reduce(RULE_5, 27);
    case 90:
      return reduce(RULE_5, 27);
    case 99:
      return reduce(RULE_5, 27);
    case 88:
      return reduce(RULE_5, 27);
    case 95:
      return reduce(RULE_5, 27);
    case 69:
      return reduce(RULE_5, 27);
    case 71:
      return reduce(RULE_5, 27);
    case 70:
      return reduce(RULE_5, 27);
    case 89:
      return reduce(RULE_5, 27);
    case 106:
      return reduce(RULE_5, 27);
    case 97:
      return reduce(RULE_5, 27);
    case 109:
      return reduce(RULE_5, 27);
    case 101:
      return reduce(RULE_5, 27);
    case 84:
      return reduce(RULE_5, 27);
    case 80:
      return reduce(RULE_5, 27);
    case 107:
      return reduce(RULE_5, 27);
    case 91:
      return reduce(RULE_5, 27);
    case 110:
      return reduce(RULE_5, 27);
    case 66:
      return reduce(RULE_5, 27);
    case 73:
      return reduce(RULE_5, 27);
    case 92:
      return reduce(RULE_5, 27);
    case 68:
      return reduce(RULE_5, 27);
    case 108:
      return reduce(RULE_5, 27);
    case 93:
      return reduce(RULE_5, 27);
    case 102:
      return reduce(RULE_5, 27);
    case 59:
      return reduce(RULE_5, 27);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action75(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_5, 22);
    case 65:
      return reduce(RULE_5, 22);
    case 63:
      return reduce(RULE_5, 22);
    case 76:
      return reduce(RULE_5, 22);
    case 78:
      return reduce(RULE_5, 22);
    case 85:
      return reduce(RULE_5, 22);
    case 104:
      return reduce(RULE_5, 22);
    case 113:
      return reduce(RULE_5, 22);
    case 72:
      return reduce(RULE_5, 22);
    case 86:
      return reduce(RULE_5, 22);
    case 90:
      return reduce(RULE_5, 22);
    case 99:
      return reduce(RULE_5, 22);
    case 88:
      return reduce(RULE_5, 22);
    case 95:
      return reduce(RULE_5, 22);
    case 69:
      return reduce(RULE_5, 22);
    case 71:
      return reduce(RULE_5, 22);
    case 70:
      return reduce(RULE_5, 22);
    case 89:
      return reduce(RULE_5, 22);
    case 106:
      return reduce(RULE_5, 22);
    case 97:
      return reduce(RULE_5, 22);
    case 109:
      return reduce(RULE_5, 22);
    case 101:
      return reduce(RULE_5, 22);
    case 84:
      return reduce(RULE_5, 22);
    case 80:
      return reduce(RULE_5, 22);
    case 107:
      return reduce(RULE_5, 22);
    case 91:
      return reduce(RULE_5, 22);
    case 110:
      return reduce(RULE_5, 22);
    case 66:
      return reduce(RULE_5, 22);
    case 73:
      return reduce(RULE_5, 22);
    case 92:
      return reduce(RULE_5, 22);
    case 68:
      return reduce(RULE_5, 22);
    case 108:
      return reduce(RULE_5, 22);
    case 93:
      return reduce(RULE_5, 22);
    case 102:
      return reduce(RULE_5, 22);
    case 59:
      return reduce(RULE_5, 22);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action76(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 65:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, ARROW, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto76(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 39: return 109;
    case 22: return 123;
    case 23: return 79;
    case 38: return 80;
    case 21: return 81;
    default: return -1;
    }
  }

  private final boolean action77(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(148);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action78(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(149);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action79(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(150);
      tokenStack.addFirst(token);
      return true;
    case 65:
      return reduce(RULE_11, 1);
    case 107:
      return reduce(RULE_11, 1);
    default: throw new BadTokenException(token, new Object[] {ARROW, RPAREN, COMMA});
    }
  }

  private final boolean action80(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    case 65:
      return reduce(RULE_12, 4);
    case 107:
      return reduce(RULE_12, 4);
    default: throw new BadTokenException(token, new Object[] {ARROW, RPAREN, COMMA});
    }
  }

  private final boolean action81(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(152);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 65:
      return reduce(RULE_11, 0);
    case 107:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {ARROW, RPAREN, COMMA, DOT});
    }
  }

  private final boolean action82(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto82(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 153;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action83(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, ULONG_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, NEW_KEYWORD, INT_KEYWORD, TRUE_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, UNDERSCORE, LSQUARE, LONG_KEYWORD, FLOATING_LITERAL, BOOLEAN_KEYWORD, THIS_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto83(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 155;
    case 11: return 156;
    case 52: return 111;
    case 55: return 157;
    case 37: return 120;
    case 50: return 104;
    case 58: return 122;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 159;
    case 38: return 52;
    case 21: return 160;
    default: return -1;
    }
  }

  private final boolean action84(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 3);
    case 63:
      return reduce(RULE_13, 3);
    case 76:
      return reduce(RULE_13, 3);
    case 78:
      return reduce(RULE_13, 3);
    case 103:
      return reduce(RULE_13, 3);
    case 82:
      return reduce(RULE_13, 3);
    case 85:
      return reduce(RULE_13, 3);
    case 104:
      return reduce(RULE_13, 3);
    case 72:
      return reduce(RULE_13, 3);
    case 86:
      return reduce(RULE_13, 3);
    case 90:
      return reduce(RULE_13, 3);
    case 99:
      return reduce(RULE_13, 3);
    case 88:
      return reduce(RULE_13, 3);
    case 95:
      return reduce(RULE_13, 3);
    case 69:
      return reduce(RULE_13, 3);
    case 70:
      return reduce(RULE_13, 3);
    case 89:
      return reduce(RULE_13, 3);
    case 106:
      return reduce(RULE_13, 3);
    case 97:
      return reduce(RULE_13, 3);
    case 109:
      return reduce(RULE_13, 3);
    case 101:
      return reduce(RULE_13, 3);
    case 84:
      return reduce(RULE_13, 3);
    case 80:
      return reduce(RULE_13, 3);
    case 110:
      return reduce(RULE_13, 3);
    case 91:
      return reduce(RULE_13, 3);
    case 66:
      return reduce(RULE_13, 3);
    case 107:
      return reduce(RULE_13, 3);
    case 92:
      return reduce(RULE_13, 3);
    case 73:
      return reduce(RULE_13, 3);
    case 68:
      return reduce(RULE_13, 3);
    case 108:
      return reduce(RULE_13, 3);
    case 93:
      return reduce(RULE_13, 3);
    case 102:
      return reduce(RULE_13, 3);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, LPAREN, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action85(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 4);
    case 63:
      return reduce(RULE_13, 4);
    case 76:
      return reduce(RULE_13, 4);
    case 78:
      return reduce(RULE_13, 4);
    case 103:
      return reduce(RULE_13, 4);
    case 82:
      return reduce(RULE_13, 4);
    case 85:
      return reduce(RULE_13, 4);
    case 104:
      return reduce(RULE_13, 4);
    case 72:
      return reduce(RULE_13, 4);
    case 86:
      return reduce(RULE_13, 4);
    case 90:
      return reduce(RULE_13, 4);
    case 99:
      return reduce(RULE_13, 4);
    case 88:
      return reduce(RULE_13, 4);
    case 95:
      return reduce(RULE_13, 4);
    case 69:
      return reduce(RULE_13, 4);
    case 70:
      return reduce(RULE_13, 4);
    case 89:
      return reduce(RULE_13, 4);
    case 106:
      return reduce(RULE_13, 4);
    case 97:
      return reduce(RULE_13, 4);
    case 109:
      return reduce(RULE_13, 4);
    case 101:
      return reduce(RULE_13, 4);
    case 84:
      return reduce(RULE_13, 4);
    case 80:
      return reduce(RULE_13, 4);
    case 110:
      return reduce(RULE_13, 4);
    case 91:
      return reduce(RULE_13, 4);
    case 66:
      return reduce(RULE_13, 4);
    case 107:
      return reduce(RULE_13, 4);
    case 92:
      return reduce(RULE_13, 4);
    case 73:
      return reduce(RULE_13, 4);
    case 68:
      return reduce(RULE_13, 4);
    case 108:
      return reduce(RULE_13, 4);
    case 93:
      return reduce(RULE_13, 4);
    case 102:
      return reduce(RULE_13, 4);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, LPAREN, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action86(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(161);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto86(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 162;
    case 36: return 163;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action87(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 0);
    case 63:
      return reduce(RULE_13, 0);
    case 76:
      return reduce(RULE_13, 0);
    case 78:
      return reduce(RULE_13, 0);
    case 103:
      return reduce(RULE_13, 0);
    case 82:
      return reduce(RULE_13, 0);
    case 85:
      return reduce(RULE_13, 0);
    case 104:
      return reduce(RULE_13, 0);
    case 72:
      return reduce(RULE_13, 0);
    case 86:
      return reduce(RULE_13, 0);
    case 90:
      return reduce(RULE_13, 0);
    case 99:
      return reduce(RULE_13, 0);
    case 88:
      return reduce(RULE_13, 0);
    case 95:
      return reduce(RULE_13, 0);
    case 69:
      return reduce(RULE_13, 0);
    case 70:
      return reduce(RULE_13, 0);
    case 89:
      return reduce(RULE_13, 0);
    case 106:
      return reduce(RULE_13, 0);
    case 97:
      return reduce(RULE_13, 0);
    case 109:
      return reduce(RULE_13, 0);
    case 101:
      return reduce(RULE_13, 0);
    case 84:
      return reduce(RULE_13, 0);
    case 80:
      return reduce(RULE_13, 0);
    case 110:
      return reduce(RULE_13, 0);
    case 91:
      return reduce(RULE_13, 0);
    case 66:
      return reduce(RULE_13, 0);
    case 107:
      return reduce(RULE_13, 0);
    case 92:
      return reduce(RULE_13, 0);
    case 73:
      return reduce(RULE_13, 0);
    case 68:
      return reduce(RULE_13, 0);
    case 108:
      return reduce(RULE_13, 0);
    case 93:
      return reduce(RULE_13, 0);
    case 102:
      return reduce(RULE_13, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, LPAREN, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action88(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 17);
    case 63:
      return reduce(RULE_13, 17);
    case 76:
      return reduce(RULE_13, 17);
    case 78:
      return reduce(RULE_13, 17);
    case 103:
      return reduce(RULE_13, 17);
    case 82:
      return reduce(RULE_13, 17);
    case 85:
      return reduce(RULE_13, 17);
    case 104:
      return reduce(RULE_13, 17);
    case 72:
      return reduce(RULE_13, 17);
    case 86:
      return reduce(RULE_13, 17);
    case 90:
      return reduce(RULE_13, 17);
    case 99:
      return reduce(RULE_13, 17);
    case 88:
      return reduce(RULE_13, 17);
    case 95:
      return reduce(RULE_13, 17);
    case 69:
      return reduce(RULE_13, 17);
    case 70:
      return reduce(RULE_13, 17);
    case 89:
      return reduce(RULE_13, 17);
    case 106:
      return reduce(RULE_13, 17);
    case 97:
      return reduce(RULE_13, 17);
    case 109:
      return reduce(RULE_13, 17);
    case 101:
      return reduce(RULE_13, 17);
    case 84:
      return reduce(RULE_13, 17);
    case 80:
      return reduce(RULE_13, 17);
    case 110:
      return reduce(RULE_13, 17);
    case 91:
      return reduce(RULE_13, 17);
    case 66:
      return reduce(RULE_13, 17);
    case 107:
      return reduce(RULE_13, 17);
    case 92:
      return reduce(RULE_13, 17);
    case 73:
      return reduce(RULE_13, 17);
    case 68:
      return reduce(RULE_13, 17);
    case 108:
      return reduce(RULE_13, 17);
    case 93:
      return reduce(RULE_13, 17);
    case 102:
      return reduce(RULE_13, 17);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, LPAREN, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action89(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 2);
    case 63:
      return reduce(RULE_13, 2);
    case 76:
      return reduce(RULE_13, 2);
    case 78:
      return reduce(RULE_13, 2);
    case 103:
      return reduce(RULE_13, 2);
    case 82:
      return reduce(RULE_13, 2);
    case 85:
      return reduce(RULE_13, 2);
    case 104:
      return reduce(RULE_13, 2);
    case 72:
      return reduce(RULE_13, 2);
    case 86:
      return reduce(RULE_13, 2);
    case 90:
      return reduce(RULE_13, 2);
    case 99:
      return reduce(RULE_13, 2);
    case 88:
      return reduce(RULE_13, 2);
    case 95:
      return reduce(RULE_13, 2);
    case 69:
      return reduce(RULE_13, 2);
    case 70:
      return reduce(RULE_13, 2);
    case 89:
      return reduce(RULE_13, 2);
    case 106:
      return reduce(RULE_13, 2);
    case 97:
      return reduce(RULE_13, 2);
    case 109:
      return reduce(RULE_13, 2);
    case 101:
      return reduce(RULE_13, 2);
    case 84:
      return reduce(RULE_13, 2);
    case 80:
      return reduce(RULE_13, 2);
    case 110:
      return reduce(RULE_13, 2);
    case 91:
      return reduce(RULE_13, 2);
    case 66:
      return reduce(RULE_13, 2);
    case 107:
      return reduce(RULE_13, 2);
    case 92:
      return reduce(RULE_13, 2);
    case 73:
      return reduce(RULE_13, 2);
    case 68:
      return reduce(RULE_13, 2);
    case 108:
      return reduce(RULE_13, 2);
    case 93:
      return reduce(RULE_13, 2);
    case 102:
      return reduce(RULE_13, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, LPAREN, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action90(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto90(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 179;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action91(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(185);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SEMICOLON, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto91(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 186;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action92(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      return reduce(RULE_14, 5);
    case 69:
      return reduce(RULE_14, 5);
    case 77:
      return reduce(RULE_14, 5);
    case 64:
      return reduce(RULE_14, 5);
    case 98:
      return reduce(RULE_14, 5);
    case 83:
      return reduce(RULE_14, 5);
    case 109:
      return reduce(RULE_14, 5);
    case 107:
      return reduce(RULE_14, 5);
    case 81:
      return reduce(RULE_14, 5);
    case 87:
      return reduce(RULE_14, 5);
    case 74:
      return reduce(RULE_14, 5);
    case 94:
      return reduce(RULE_14, 5);
    case 111:
      return reduce(RULE_14, 5);
    case 96:
      return reduce(RULE_14, 5);
    case 67:
      return reduce(RULE_14, 5);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, COMMA, DOUBLE_PERCENT_EQUALS, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, SEMICOLON, RPAREN, DOUBLE_RANGLE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, STAR_EQUALS, MINUS_EQUALS, PERCENT_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action93(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 1);
    case 63:
      return reduce(RULE_13, 1);
    case 76:
      return reduce(RULE_13, 1);
    case 78:
      return reduce(RULE_13, 1);
    case 103:
      return reduce(RULE_13, 1);
    case 82:
      return reduce(RULE_13, 1);
    case 85:
      return reduce(RULE_13, 1);
    case 104:
      return reduce(RULE_13, 1);
    case 72:
      return reduce(RULE_13, 1);
    case 86:
      return reduce(RULE_13, 1);
    case 90:
      return reduce(RULE_13, 1);
    case 99:
      return reduce(RULE_13, 1);
    case 88:
      return reduce(RULE_13, 1);
    case 95:
      return reduce(RULE_13, 1);
    case 69:
      return reduce(RULE_13, 1);
    case 70:
      return reduce(RULE_13, 1);
    case 89:
      return reduce(RULE_13, 1);
    case 106:
      return reduce(RULE_13, 1);
    case 97:
      return reduce(RULE_13, 1);
    case 109:
      return reduce(RULE_13, 1);
    case 101:
      return reduce(RULE_13, 1);
    case 84:
      return reduce(RULE_13, 1);
    case 80:
      return reduce(RULE_13, 1);
    case 110:
      return reduce(RULE_13, 1);
    case 91:
      return reduce(RULE_13, 1);
    case 66:
      return reduce(RULE_13, 1);
    case 107:
      return reduce(RULE_13, 1);
    case 92:
      return reduce(RULE_13, 1);
    case 73:
      return reduce(RULE_13, 1);
    case 68:
      return reduce(RULE_13, 1);
    case 108:
      return reduce(RULE_13, 1);
    case 93:
      return reduce(RULE_13, 1);
    case 102:
      return reduce(RULE_13, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, LPAREN, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action94(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 92:
      return reduce(RULE_15, 1);
    case 103:
      return reduce(RULE_16, 1);
    case 82:
      return reduce(RULE_16, 1);
    default: throw new BadTokenException(token, new Object[] {LPAREN, LSQUARE, QUESTION_MARK_DOT, DOT});
    }
  }

  private final int goto94(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 188;
    default: return -1;
    }
  }

  private final boolean action95(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto95(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 189;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action96(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 92:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LSQUARE, NAME});
    }
  }

  private final int goto96(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 191;
    case 21: return 192;
    default: return -1;
    }
  }

  private final boolean action97(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(193);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, INTEGER_LITERAL});
    }
  }

  private final boolean action98(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_17, 1);
    case 141:
      return reduce(RULE_17, 1);
    case 79:
      return reduce(RULE_17, 1);
    case 133:
      return reduce(RULE_17, 1);
    case 123:
      return reduce(RULE_17, 1);
    case 131:
      return reduce(RULE_17, 1);
    case 60:
      return reduce(RULE_17, 1);
    case 62:
      return reduce(RULE_17, 1);
    case 139:
      return reduce(RULE_17, 1);
    case 127:
      return reduce(RULE_17, 1);
    case 144:
      return reduce(RULE_17, 1);
    case 122:
      return reduce(RULE_17, 1);
    case 136:
      return reduce(RULE_17, 1);
    case 135:
      return reduce(RULE_17, 1);
    case 113:
      return reduce(RULE_17, 1);
    case 130:
      return reduce(RULE_17, 1);
    case 61:
      return reduce(RULE_17, 1);
    case 138:
      return reduce(RULE_17, 1);
    case 137:
      return reduce(RULE_17, 1);
    case 90:
      return reduce(RULE_17, 1);
    case 121:
      return reduce(RULE_17, 1);
    case 142:
      return reduce(RULE_17, 1);
    case 124:
      return reduce(RULE_17, 1);
    case 145:
      return reduce(RULE_17, 1);
    case 132:
      return reduce(RULE_17, 1);
    case 120:
      return reduce(RULE_17, 1);
    case 106:
      return reduce(RULE_17, 1);
    case 129:
      return reduce(RULE_17, 1);
    case 101:
      return reduce(RULE_17, 1);
    case 116:
      return reduce(RULE_17, 1);
    case 143:
      return reduce(RULE_17, 1);
    case 91:
      return reduce(RULE_17, 1);
    case 75:
      return reduce(RULE_17, 1);
    case 92:
      return reduce(RULE_17, 1);
    case 114:
      return reduce(RULE_17, 1);
    case 125:
      return reduce(RULE_17, 1);
    case 115:
      return reduce(RULE_17, 1);
    case 126:
      return reduce(RULE_17, 1);
    case 59:
      return reduce(RULE_17, 1);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, VOID_KEYWORD, ELSE_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, STATIC_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, FINAL_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, BYTE_KEYWORD, QUESTION_MARK, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action99(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto99(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 78;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 195;
    case 21: return 196;
    case 45: return 175;
    case 49: return 176;
    case 39: return 77;
    case 52: return 177;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 197;
    case 47: return 183;
    case 41: return 198;
    default: return -1;
    }
  }

  private final boolean action100(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, ULONG_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, NEW_KEYWORD, INT_KEYWORD, TRUE_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, UNDERSCORE, LSQUARE, LONG_KEYWORD, FLOATING_LITERAL, BOOLEAN_KEYWORD, THIS_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto100(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 155;
    case 11: return 199;
    case 52: return 111;
    case 55: return 157;
    case 37: return 120;
    case 50: return 104;
    case 58: return 122;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 159;
    case 38: return 52;
    case 21: return 160;
    default: return -1;
    }
  }

  private final boolean action101(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, INTEGER_LITERAL});
    }
  }

  private final boolean action102(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(202);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final boolean action103(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      return reduce(RULE_18, 2);
    case 100:
      return reduce(RULE_18, 2);
    case 83:
      return reduce(RULE_18, 2);
    case 81:
      return reduce(RULE_18, 2);
    case 77:
      return reduce(RULE_18, 2);
    case 87:
      return reduce(RULE_18, 2);
    case 74:
      return reduce(RULE_18, 2);
    case 111:
      return reduce(RULE_18, 2);
    case 94:
      return reduce(RULE_18, 2);
    case 96:
      return reduce(RULE_18, 2);
    case 67:
      return reduce(RULE_18, 2);
    case 64:
      return reduce(RULE_18, 2);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, PIPE_EQUALS, EQUALS, DOUBLE_RANGLE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, CARET_EQUALS, AMPERSAND_EQUALS});
    }
  }

  private final boolean action104(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 92:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LSQUARE});
    }
  }

  private final boolean action105(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_19, 0);
    case 140:
      return reduce(RULE_19, 0);
    case 123:
      return reduce(RULE_19, 0);
    case 133:
      return reduce(RULE_19, 0);
    case 79:
      return reduce(RULE_19, 0);
    case 131:
      return reduce(RULE_19, 0);
    case 60:
      return reduce(RULE_19, 0);
    case 62:
      return reduce(RULE_19, 0);
    case 139:
      return reduce(RULE_19, 0);
    case 127:
      return reduce(RULE_19, 0);
    case 136:
      return reduce(RULE_19, 0);
    case 135:
      return reduce(RULE_19, 0);
    case 113:
      return reduce(RULE_19, 0);
    case 130:
      return reduce(RULE_19, 0);
    case 61:
      return reduce(RULE_19, 0);
    case 137:
      return reduce(RULE_19, 0);
    case 138:
      return reduce(RULE_19, 0);
    case 90:
      return reduce(RULE_19, 0);
    case 121:
      return reduce(RULE_19, 0);
    case 124:
      return reduce(RULE_19, 0);
    case 142:
      return reduce(RULE_19, 0);
    case 145:
      return reduce(RULE_19, 0);
    case 132:
      return reduce(RULE_19, 0);
    case 120:
      return reduce(RULE_19, 0);
    case 129:
      return reduce(RULE_19, 0);
    case 106:
      return reduce(RULE_19, 0);
    case 101:
      return reduce(RULE_19, 0);
    case 116:
      return reduce(RULE_19, 0);
    case 91:
      return reduce(RULE_19, 0);
    case 143:
      return reduce(RULE_19, 0);
    case 75:
      return reduce(RULE_19, 0);
    case 92:
      return reduce(RULE_19, 0);
    case 114:
      return reduce(RULE_19, 0);
    case 125:
      return reduce(RULE_19, 0);
    case 126:
      return reduce(RULE_19, 0);
    case 115:
      return reduce(RULE_19, 0);
    case 59:
      return reduce(RULE_19, 0);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action106(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 65:
      return reduce(RULE_12, 4);
    case 71:
      return reduce(RULE_9, 2);
    default: throw new BadTokenException(token, new Object[] {ARROW, DOUBLE_COLON, COMMA, UNDERSCORE, NAME});
    }
  }

  private final int goto106(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 14: return 206;
    default: return -1;
    }
  }

  private final boolean action107(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 100:
      return reduce(RULE_20, 0);
    case 65:
      return reduce(RULE_11, 0);
    case 71:
      return reduce(RULE_9, 0);
    case 77:
      return reduce(RULE_20, 0);
    case 103:
      return reduce(RULE_21, 0);
    case 64:
      return reduce(RULE_20, 0);
    case 98:
      return reduce(RULE_20, 0);
    case 83:
      return reduce(RULE_20, 0);
    case 91:
      return reduce(RULE_21, 0);
    case 81:
      return reduce(RULE_20, 0);
    case 87:
      return reduce(RULE_20, 0);
    case 74:
      return reduce(RULE_20, 0);
    case 94:
      return reduce(RULE_20, 0);
    case 111:
      return reduce(RULE_20, 0);
    case 96:
      return reduce(RULE_20, 0);
    case 67:
      return reduce(RULE_20, 0);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, ARROW, COMMA, DOUBLE_COLON, DOUBLE_PERCENT_EQUALS, QUESTION_MARK_DOT, DOT, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, LPAREN, DOUBLE_RANGLE_EQUALS, UNDERSCORE, LSQUARE, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, STAR_EQUALS, MINUS_EQUALS, PERCENT_EQUALS, CARET_EQUALS, NAME});
    }
  }

  private final int goto107(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 14: return 209;
    default: return -1;
    }
  }

  private final boolean action108(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 6);
    case 140:
      return reduce(RULE_22, 6);
    case 123:
      return reduce(RULE_22, 6);
    case 133:
      return reduce(RULE_22, 6);
    case 79:
      return reduce(RULE_22, 6);
    case 131:
      return reduce(RULE_22, 6);
    case 60:
      return reduce(RULE_22, 6);
    case 62:
      return reduce(RULE_22, 6);
    case 139:
      return reduce(RULE_22, 6);
    case 127:
      return reduce(RULE_22, 6);
    case 136:
      return reduce(RULE_22, 6);
    case 135:
      return reduce(RULE_22, 6);
    case 113:
      return reduce(RULE_22, 6);
    case 130:
      return reduce(RULE_22, 6);
    case 61:
      return reduce(RULE_22, 6);
    case 137:
      return reduce(RULE_22, 6);
    case 138:
      return reduce(RULE_22, 6);
    case 90:
      return reduce(RULE_22, 6);
    case 121:
      return reduce(RULE_22, 6);
    case 124:
      return reduce(RULE_22, 6);
    case 142:
      return reduce(RULE_22, 6);
    case 145:
      return reduce(RULE_22, 6);
    case 132:
      return reduce(RULE_22, 6);
    case 120:
      return reduce(RULE_22, 6);
    case 129:
      return reduce(RULE_22, 6);
    case 106:
      return reduce(RULE_22, 6);
    case 101:
      return reduce(RULE_22, 6);
    case 116:
      return reduce(RULE_22, 6);
    case 91:
      return reduce(RULE_22, 6);
    case 143:
      return reduce(RULE_22, 6);
    case 75:
      return reduce(RULE_22, 6);
    case 92:
      return reduce(RULE_22, 6);
    case 114:
      return reduce(RULE_22, 6);
    case 125:
      return reduce(RULE_22, 6);
    case 126:
      return reduce(RULE_22, 6);
    case 115:
      return reduce(RULE_22, 6);
    case 59:
      return reduce(RULE_22, 6);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action109(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 65:
      stateStack.addFirst(210);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action110(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 1);
    case 140:
      return reduce(RULE_22, 1);
    case 123:
      return reduce(RULE_22, 1);
    case 133:
      return reduce(RULE_22, 1);
    case 79:
      return reduce(RULE_22, 1);
    case 131:
      return reduce(RULE_22, 1);
    case 60:
      return reduce(RULE_22, 1);
    case 62:
      return reduce(RULE_22, 1);
    case 139:
      return reduce(RULE_22, 1);
    case 127:
      return reduce(RULE_22, 1);
    case 136:
      return reduce(RULE_22, 1);
    case 135:
      return reduce(RULE_22, 1);
    case 113:
      return reduce(RULE_22, 1);
    case 130:
      return reduce(RULE_22, 1);
    case 61:
      return reduce(RULE_22, 1);
    case 137:
      return reduce(RULE_22, 1);
    case 138:
      return reduce(RULE_22, 1);
    case 90:
      return reduce(RULE_22, 1);
    case 121:
      return reduce(RULE_22, 1);
    case 124:
      return reduce(RULE_22, 1);
    case 142:
      return reduce(RULE_22, 1);
    case 145:
      return reduce(RULE_22, 1);
    case 132:
      return reduce(RULE_22, 1);
    case 120:
      return reduce(RULE_22, 1);
    case 129:
      return reduce(RULE_22, 1);
    case 106:
      return reduce(RULE_22, 1);
    case 101:
      return reduce(RULE_22, 1);
    case 116:
      return reduce(RULE_22, 1);
    case 91:
      return reduce(RULE_22, 1);
    case 143:
      return reduce(RULE_22, 1);
    case 75:
      return reduce(RULE_22, 1);
    case 92:
      return reduce(RULE_22, 1);
    case 114:
      return reduce(RULE_22, 1);
    case 125:
      return reduce(RULE_22, 1);
    case 126:
      return reduce(RULE_22, 1);
    case 115:
      return reduce(RULE_22, 1);
    case 59:
      return reduce(RULE_22, 1);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action111(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action112(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 91:
      return reduce(RULE_13, 16);
    case 92:
      return reduce(RULE_13, 16);
    case 103:
      return reduce(RULE_13, 16);
    case 82:
      return reduce(RULE_13, 16);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LPAREN, LSQUARE, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action113(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 83:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 81:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(218);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(219);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(220);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(221);
      tokenStack.addFirst(token);
      return true;
    case 111:
      stateStack.addFirst(222);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(223);
      tokenStack.addFirst(token);
      return true;
    case 67:
      stateStack.addFirst(224);
      tokenStack.addFirst(token);
      return true;
    case 64:
      stateStack.addFirst(225);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {PIPE_EQUALS, PLUS_EQUALS, EQUALS, DOUBLE_RANGLE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, STAR_EQUALS, MINUS_EQUALS, PERCENT_EQUALS, CARET_EQUALS, AMPERSAND_EQUALS});
    }
  }

  private final boolean action114(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_23, 0);
    case 63:
      return reduce(RULE_23, 0);
    case 76:
      return reduce(RULE_23, 0);
    case 78:
      return reduce(RULE_23, 0);
    case 103:
      return reduce(RULE_16, 0);
    case 82:
      return reduce(RULE_16, 0);
    case 85:
      return reduce(RULE_23, 0);
    case 104:
      return reduce(RULE_23, 0);
    case 72:
      return reduce(RULE_23, 0);
    case 86:
      return reduce(RULE_23, 0);
    case 90:
      return reduce(RULE_23, 0);
    case 99:
      return reduce(RULE_23, 0);
    case 88:
      return reduce(RULE_23, 0);
    case 95:
      return reduce(RULE_23, 0);
    case 69:
      return reduce(RULE_23, 0);
    case 70:
      return reduce(RULE_23, 0);
    case 89:
      return reduce(RULE_23, 0);
    case 106:
      return reduce(RULE_23, 0);
    case 97:
      return reduce(RULE_23, 0);
    case 109:
      return reduce(RULE_23, 0);
    case 101:
      return reduce(RULE_23, 0);
    case 84:
      return reduce(RULE_23, 0);
    case 80:
      return reduce(RULE_23, 0);
    case 66:
      return reduce(RULE_23, 0);
    case 107:
      return reduce(RULE_23, 0);
    case 91:
      return reduce(RULE_23, 0);
    case 110:
      return reduce(RULE_23, 0);
    case 73:
      return reduce(RULE_23, 0);
    case 92:
      return reduce(RULE_23, 0);
    case 68:
      return reduce(RULE_23, 0);
    case 108:
      return reduce(RULE_23, 0);
    case 93:
      return reduce(RULE_23, 0);
    case 102:
      return reduce(RULE_23, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action115(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 3);
    case 140:
      return reduce(RULE_22, 3);
    case 123:
      return reduce(RULE_22, 3);
    case 133:
      return reduce(RULE_22, 3);
    case 79:
      return reduce(RULE_22, 3);
    case 131:
      return reduce(RULE_22, 3);
    case 60:
      return reduce(RULE_22, 3);
    case 62:
      return reduce(RULE_22, 3);
    case 139:
      return reduce(RULE_22, 3);
    case 127:
      return reduce(RULE_22, 3);
    case 136:
      return reduce(RULE_22, 3);
    case 135:
      return reduce(RULE_22, 3);
    case 113:
      return reduce(RULE_22, 3);
    case 130:
      return reduce(RULE_22, 3);
    case 61:
      return reduce(RULE_22, 3);
    case 137:
      return reduce(RULE_22, 3);
    case 138:
      return reduce(RULE_22, 3);
    case 90:
      return reduce(RULE_22, 3);
    case 121:
      return reduce(RULE_22, 3);
    case 124:
      return reduce(RULE_22, 3);
    case 142:
      return reduce(RULE_22, 3);
    case 145:
      return reduce(RULE_22, 3);
    case 132:
      return reduce(RULE_22, 3);
    case 120:
      return reduce(RULE_22, 3);
    case 129:
      return reduce(RULE_22, 3);
    case 106:
      return reduce(RULE_22, 3);
    case 101:
      return reduce(RULE_22, 3);
    case 116:
      return reduce(RULE_22, 3);
    case 91:
      return reduce(RULE_22, 3);
    case 143:
      return reduce(RULE_22, 3);
    case 75:
      return reduce(RULE_22, 3);
    case 92:
      return reduce(RULE_22, 3);
    case 114:
      return reduce(RULE_22, 3);
    case 125:
      return reduce(RULE_22, 3);
    case 126:
      return reduce(RULE_22, 3);
    case 115:
      return reduce(RULE_22, 3);
    case 59:
      return reduce(RULE_22, 3);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action116(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(91);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(94);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(95);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(97);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(226);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(100);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(101);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(102);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, STATIC_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, FINAL_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final int goto116(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 103;
    case 33: return 117;
    case 35: return 119;
    case 55: return 118;
    case 26: return 227;
    case 50: return 104;
    case 37: return 120;
    case 34: return 121;
    case 58: return 122;
    case 51: return 124;
    case 30: return 125;
    case 38: return 228;
    case 31: return 126;
    case 21: return 229;
    case 19: return 127;
    case 12: return 128;
    case 32: return 108;
    case 24: return 110;
    case 28: return 129;
    case 52: return 111;
    case 27: return 130;
    case 54: return 112;
    case 13: return 113;
    case 53: return 114;
    case 23: return 230;
    case 29: return 115;
    default: return -1;
    }
  }

  private final boolean action117(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 7);
    case 140:
      return reduce(RULE_22, 7);
    case 123:
      return reduce(RULE_22, 7);
    case 133:
      return reduce(RULE_22, 7);
    case 79:
      return reduce(RULE_22, 7);
    case 131:
      return reduce(RULE_22, 7);
    case 60:
      return reduce(RULE_22, 7);
    case 62:
      return reduce(RULE_22, 7);
    case 139:
      return reduce(RULE_22, 7);
    case 127:
      return reduce(RULE_22, 7);
    case 136:
      return reduce(RULE_22, 7);
    case 135:
      return reduce(RULE_22, 7);
    case 113:
      return reduce(RULE_22, 7);
    case 130:
      return reduce(RULE_22, 7);
    case 61:
      return reduce(RULE_22, 7);
    case 137:
      return reduce(RULE_22, 7);
    case 138:
      return reduce(RULE_22, 7);
    case 90:
      return reduce(RULE_22, 7);
    case 121:
      return reduce(RULE_22, 7);
    case 124:
      return reduce(RULE_22, 7);
    case 142:
      return reduce(RULE_22, 7);
    case 145:
      return reduce(RULE_22, 7);
    case 132:
      return reduce(RULE_22, 7);
    case 120:
      return reduce(RULE_22, 7);
    case 129:
      return reduce(RULE_22, 7);
    case 106:
      return reduce(RULE_22, 7);
    case 101:
      return reduce(RULE_22, 7);
    case 116:
      return reduce(RULE_22, 7);
    case 91:
      return reduce(RULE_22, 7);
    case 143:
      return reduce(RULE_22, 7);
    case 75:
      return reduce(RULE_22, 7);
    case 92:
      return reduce(RULE_22, 7);
    case 114:
      return reduce(RULE_22, 7);
    case 125:
      return reduce(RULE_22, 7);
    case 126:
      return reduce(RULE_22, 7);
    case 115:
      return reduce(RULE_22, 7);
    case 59:
      return reduce(RULE_22, 7);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action118(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(231);
      tokenStack.addFirst(token);
      return true;
    case 91:
      return reduce(RULE_13, 14);
    case 92:
      return reduce(RULE_13, 14);
    case 103:
      return reduce(RULE_13, 14);
    case 82:
      return reduce(RULE_13, 14);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LPAREN, LSQUARE, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action119(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 8);
    case 140:
      return reduce(RULE_22, 8);
    case 123:
      return reduce(RULE_22, 8);
    case 133:
      return reduce(RULE_22, 8);
    case 79:
      return reduce(RULE_22, 8);
    case 131:
      return reduce(RULE_22, 8);
    case 60:
      return reduce(RULE_22, 8);
    case 62:
      return reduce(RULE_22, 8);
    case 139:
      return reduce(RULE_22, 8);
    case 127:
      return reduce(RULE_22, 8);
    case 136:
      return reduce(RULE_22, 8);
    case 135:
      return reduce(RULE_22, 8);
    case 113:
      return reduce(RULE_22, 8);
    case 130:
      return reduce(RULE_22, 8);
    case 61:
      return reduce(RULE_22, 8);
    case 137:
      return reduce(RULE_22, 8);
    case 138:
      return reduce(RULE_22, 8);
    case 90:
      return reduce(RULE_22, 8);
    case 121:
      return reduce(RULE_22, 8);
    case 124:
      return reduce(RULE_22, 8);
    case 142:
      return reduce(RULE_22, 8);
    case 145:
      return reduce(RULE_22, 8);
    case 132:
      return reduce(RULE_22, 8);
    case 120:
      return reduce(RULE_22, 8);
    case 129:
      return reduce(RULE_22, 8);
    case 106:
      return reduce(RULE_22, 8);
    case 101:
      return reduce(RULE_22, 8);
    case 116:
      return reduce(RULE_22, 8);
    case 91:
      return reduce(RULE_22, 8);
    case 143:
      return reduce(RULE_22, 8);
    case 75:
      return reduce(RULE_22, 8);
    case 92:
      return reduce(RULE_22, 8);
    case 114:
      return reduce(RULE_22, 8);
    case 125:
      return reduce(RULE_22, 8);
    case 126:
      return reduce(RULE_22, 8);
    case 115:
      return reduce(RULE_22, 8);
    case 59:
      return reduce(RULE_22, 8);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action120(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 71:
      stateStack.addFirst(232);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action121(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(233);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action122(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final int goto122(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action123(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 65:
      stateStack.addFirst(236);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action124(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_15, 0);
    case 63:
      return reduce(RULE_15, 0);
    case 76:
      return reduce(RULE_15, 0);
    case 78:
      return reduce(RULE_15, 0);
    case 85:
      return reduce(RULE_15, 0);
    case 104:
      return reduce(RULE_15, 0);
    case 72:
      return reduce(RULE_15, 0);
    case 86:
      return reduce(RULE_15, 0);
    case 90:
      return reduce(RULE_15, 0);
    case 99:
      return reduce(RULE_15, 0);
    case 88:
      return reduce(RULE_15, 0);
    case 95:
      return reduce(RULE_15, 0);
    case 69:
      return reduce(RULE_15, 0);
    case 70:
      return reduce(RULE_15, 0);
    case 89:
      return reduce(RULE_15, 0);
    case 106:
      return reduce(RULE_15, 0);
    case 97:
      return reduce(RULE_15, 0);
    case 109:
      return reduce(RULE_15, 0);
    case 101:
      return reduce(RULE_15, 0);
    case 84:
      return reduce(RULE_15, 0);
    case 80:
      return reduce(RULE_15, 0);
    case 107:
      return reduce(RULE_15, 0);
    case 110:
      return reduce(RULE_15, 0);
    case 66:
      return reduce(RULE_15, 0);
    case 73:
      return reduce(RULE_15, 0);
    case 92:
      return reduce(RULE_15, 0);
    case 68:
      return reduce(RULE_15, 0);
    case 108:
      return reduce(RULE_15, 0);
    case 93:
      return reduce(RULE_15, 0);
    case 102:
      return reduce(RULE_15, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, LPAREN, RPAREN, STAR, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto124(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 237;
    default: return -1;
    }
  }

  private final boolean action125(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 5);
    case 140:
      return reduce(RULE_22, 5);
    case 123:
      return reduce(RULE_22, 5);
    case 133:
      return reduce(RULE_22, 5);
    case 79:
      return reduce(RULE_22, 5);
    case 131:
      return reduce(RULE_22, 5);
    case 60:
      return reduce(RULE_22, 5);
    case 62:
      return reduce(RULE_22, 5);
    case 139:
      return reduce(RULE_22, 5);
    case 127:
      return reduce(RULE_22, 5);
    case 136:
      return reduce(RULE_22, 5);
    case 135:
      return reduce(RULE_22, 5);
    case 113:
      return reduce(RULE_22, 5);
    case 130:
      return reduce(RULE_22, 5);
    case 61:
      return reduce(RULE_22, 5);
    case 137:
      return reduce(RULE_22, 5);
    case 138:
      return reduce(RULE_22, 5);
    case 90:
      return reduce(RULE_22, 5);
    case 121:
      return reduce(RULE_22, 5);
    case 124:
      return reduce(RULE_22, 5);
    case 142:
      return reduce(RULE_22, 5);
    case 145:
      return reduce(RULE_22, 5);
    case 132:
      return reduce(RULE_22, 5);
    case 120:
      return reduce(RULE_22, 5);
    case 129:
      return reduce(RULE_22, 5);
    case 106:
      return reduce(RULE_22, 5);
    case 101:
      return reduce(RULE_22, 5);
    case 116:
      return reduce(RULE_22, 5);
    case 91:
      return reduce(RULE_22, 5);
    case 143:
      return reduce(RULE_22, 5);
    case 75:
      return reduce(RULE_22, 5);
    case 92:
      return reduce(RULE_22, 5);
    case 114:
      return reduce(RULE_22, 5);
    case 125:
      return reduce(RULE_22, 5);
    case 126:
      return reduce(RULE_22, 5);
    case 115:
      return reduce(RULE_22, 5);
    case 59:
      return reduce(RULE_22, 5);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action126(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 4);
    case 140:
      return reduce(RULE_22, 4);
    case 123:
      return reduce(RULE_22, 4);
    case 133:
      return reduce(RULE_22, 4);
    case 79:
      return reduce(RULE_22, 4);
    case 131:
      return reduce(RULE_22, 4);
    case 60:
      return reduce(RULE_22, 4);
    case 62:
      return reduce(RULE_22, 4);
    case 139:
      return reduce(RULE_22, 4);
    case 127:
      return reduce(RULE_22, 4);
    case 136:
      return reduce(RULE_22, 4);
    case 135:
      return reduce(RULE_22, 4);
    case 113:
      return reduce(RULE_22, 4);
    case 130:
      return reduce(RULE_22, 4);
    case 61:
      return reduce(RULE_22, 4);
    case 137:
      return reduce(RULE_22, 4);
    case 138:
      return reduce(RULE_22, 4);
    case 90:
      return reduce(RULE_22, 4);
    case 121:
      return reduce(RULE_22, 4);
    case 124:
      return reduce(RULE_22, 4);
    case 142:
      return reduce(RULE_22, 4);
    case 145:
      return reduce(RULE_22, 4);
    case 132:
      return reduce(RULE_22, 4);
    case 120:
      return reduce(RULE_22, 4);
    case 129:
      return reduce(RULE_22, 4);
    case 106:
      return reduce(RULE_22, 4);
    case 101:
      return reduce(RULE_22, 4);
    case 116:
      return reduce(RULE_22, 4);
    case 91:
      return reduce(RULE_22, 4);
    case 143:
      return reduce(RULE_22, 4);
    case 75:
      return reduce(RULE_22, 4);
    case 92:
      return reduce(RULE_22, 4);
    case 114:
      return reduce(RULE_22, 4);
    case 125:
      return reduce(RULE_22, 4);
    case 126:
      return reduce(RULE_22, 4);
    case 115:
      return reduce(RULE_22, 4);
    case 59:
      return reduce(RULE_22, 4);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action127(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, ULONG_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto127(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 23: return 238;
    case 38: return 239;
    case 21: return 240;
    default: return -1;
    }
  }

  private final boolean action128(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(241);
      tokenStack.addFirst(token);
      return true;
    case 98:
      return reduce(RULE_20, 1);
    case 100:
      return reduce(RULE_20, 1);
    case 83:
      return reduce(RULE_20, 1);
    case 81:
      return reduce(RULE_20, 1);
    case 77:
      return reduce(RULE_20, 1);
    case 87:
      return reduce(RULE_20, 1);
    case 74:
      return reduce(RULE_20, 1);
    case 111:
      return reduce(RULE_20, 1);
    case 94:
      return reduce(RULE_20, 1);
    case 96:
      return reduce(RULE_20, 1);
    case 67:
      return reduce(RULE_20, 1);
    case 64:
      return reduce(RULE_20, 1);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, PIPE_EQUALS, EQUALS, COMMA, DOUBLE_RANGLE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, CARET_EQUALS, AMPERSAND_EQUALS});
    }
  }

  private final boolean action129(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 2);
    case 140:
      return reduce(RULE_22, 2);
    case 123:
      return reduce(RULE_22, 2);
    case 133:
      return reduce(RULE_22, 2);
    case 79:
      return reduce(RULE_22, 2);
    case 131:
      return reduce(RULE_22, 2);
    case 60:
      return reduce(RULE_22, 2);
    case 62:
      return reduce(RULE_22, 2);
    case 139:
      return reduce(RULE_22, 2);
    case 127:
      return reduce(RULE_22, 2);
    case 136:
      return reduce(RULE_22, 2);
    case 135:
      return reduce(RULE_22, 2);
    case 113:
      return reduce(RULE_22, 2);
    case 130:
      return reduce(RULE_22, 2);
    case 61:
      return reduce(RULE_22, 2);
    case 137:
      return reduce(RULE_22, 2);
    case 138:
      return reduce(RULE_22, 2);
    case 90:
      return reduce(RULE_22, 2);
    case 121:
      return reduce(RULE_22, 2);
    case 124:
      return reduce(RULE_22, 2);
    case 142:
      return reduce(RULE_22, 2);
    case 145:
      return reduce(RULE_22, 2);
    case 132:
      return reduce(RULE_22, 2);
    case 120:
      return reduce(RULE_22, 2);
    case 129:
      return reduce(RULE_22, 2);
    case 106:
      return reduce(RULE_22, 2);
    case 101:
      return reduce(RULE_22, 2);
    case 116:
      return reduce(RULE_22, 2);
    case 91:
      return reduce(RULE_22, 2);
    case 143:
      return reduce(RULE_22, 2);
    case 75:
      return reduce(RULE_22, 2);
    case 92:
      return reduce(RULE_22, 2);
    case 114:
      return reduce(RULE_22, 2);
    case 125:
      return reduce(RULE_22, 2);
    case 126:
      return reduce(RULE_22, 2);
    case 115:
      return reduce(RULE_22, 2);
    case 59:
      return reduce(RULE_22, 2);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action130(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 0);
    case 140:
      return reduce(RULE_22, 0);
    case 123:
      return reduce(RULE_22, 0);
    case 133:
      return reduce(RULE_22, 0);
    case 79:
      return reduce(RULE_22, 0);
    case 131:
      return reduce(RULE_22, 0);
    case 60:
      return reduce(RULE_22, 0);
    case 62:
      return reduce(RULE_22, 0);
    case 139:
      return reduce(RULE_22, 0);
    case 127:
      return reduce(RULE_22, 0);
    case 136:
      return reduce(RULE_22, 0);
    case 135:
      return reduce(RULE_22, 0);
    case 113:
      return reduce(RULE_22, 0);
    case 130:
      return reduce(RULE_22, 0);
    case 61:
      return reduce(RULE_22, 0);
    case 137:
      return reduce(RULE_22, 0);
    case 138:
      return reduce(RULE_22, 0);
    case 90:
      return reduce(RULE_22, 0);
    case 121:
      return reduce(RULE_22, 0);
    case 124:
      return reduce(RULE_22, 0);
    case 142:
      return reduce(RULE_22, 0);
    case 145:
      return reduce(RULE_22, 0);
    case 132:
      return reduce(RULE_22, 0);
    case 120:
      return reduce(RULE_22, 0);
    case 129:
      return reduce(RULE_22, 0);
    case 106:
      return reduce(RULE_22, 0);
    case 101:
      return reduce(RULE_22, 0);
    case 116:
      return reduce(RULE_22, 0);
    case 91:
      return reduce(RULE_22, 0);
    case 143:
      return reduce(RULE_22, 0);
    case 75:
      return reduce(RULE_22, 0);
    case 92:
      return reduce(RULE_22, 0);
    case 114:
      return reduce(RULE_22, 0);
    case 125:
      return reduce(RULE_22, 0);
    case 126:
      return reduce(RULE_22, 0);
    case 115:
      return reduce(RULE_22, 0);
    case 59:
      return reduce(RULE_22, 0);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action131(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(150);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(242);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 65:
      return reduce(RULE_11, 1);
    case 91:
      return reduce(RULE_21, 1);
    case 71:
      return reduce(RULE_9, 1);
    case 103:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {ARROW, DOUBLE_COLON, LPAREN, COMMA, UNDERSCORE, LSQUARE, QUESTION_MARK_DOT, NAME});
    }
  }

  private final int goto131(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 14: return 243;
    default: return -1;
    }
  }

  private final boolean action132(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(244);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_24, 0);
    case 140:
      return reduce(RULE_24, 0);
    case 141:
      return reduce(RULE_24, 0);
    case 142:
      return reduce(RULE_24, 0);
    case 129:
      return reduce(RULE_24, 0);
    case 101:
      return reduce(RULE_24, 0);
    case 116:
      return reduce(RULE_24, 0);
    case 136:
      return reduce(RULE_24, 0);
    case 91:
      return reduce(RULE_24, 0);
    case 143:
      return reduce(RULE_24, 0);
    case 92:
      return reduce(RULE_24, 0);
    case 130:
      return reduce(RULE_24, 0);
    case 114:
      return reduce(RULE_24, 0);
    case 125:
      return reduce(RULE_24, 0);
    case 90:
      return reduce(RULE_24, 0);
    case 59:
      return reduce(RULE_24, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, RPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto132(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 15: return 245;
    case 20: return 246;
    case 19: return 247;
    default: return -1;
    }
  }

  private final boolean action133(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto133(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 249;
    default: return -1;
    }
  }

  private final boolean action134(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(250);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(251);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, LPAREN});
    }
  }

  private final int goto134(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 252;
    default: return -1;
    }
  }

  private final boolean action135(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 62:
      stateStack.addFirst(253);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_6, 6);
    case 140:
      return reduce(RULE_6, 6);
    case 141:
      return reduce(RULE_6, 6);
    case 131:
      return reduce(RULE_6, 6);
    case 124:
      return reduce(RULE_6, 6);
    case 142:
      return reduce(RULE_6, 6);
    case 129:
      return reduce(RULE_6, 6);
    case 144:
      return reduce(RULE_6, 6);
    case 101:
      return reduce(RULE_6, 6);
    case 116:
      return reduce(RULE_6, 6);
    case 136:
      return reduce(RULE_6, 6);
    case 143:
      return reduce(RULE_6, 6);
    case 91:
      return reduce(RULE_6, 6);
    case 92:
      return reduce(RULE_6, 6);
    case 130:
      return reduce(RULE_6, 6);
    case 114:
      return reduce(RULE_6, 6);
    case 137:
      return reduce(RULE_6, 6);
    case 125:
      return reduce(RULE_6, 6);
    case 90:
      return reduce(RULE_6, 6);
    case 59:
      return reduce(RULE_6, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, STRING_LITERAL, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action136(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_6, 4);
    case 140:
      return reduce(RULE_6, 4);
    case 141:
      return reduce(RULE_6, 4);
    case 131:
      return reduce(RULE_6, 4);
    case 124:
      return reduce(RULE_6, 4);
    case 142:
      return reduce(RULE_6, 4);
    case 129:
      return reduce(RULE_6, 4);
    case 144:
      return reduce(RULE_6, 4);
    case 101:
      return reduce(RULE_6, 4);
    case 116:
      return reduce(RULE_6, 4);
    case 136:
      return reduce(RULE_6, 4);
    case 143:
      return reduce(RULE_6, 4);
    case 91:
      return reduce(RULE_6, 4);
    case 92:
      return reduce(RULE_6, 4);
    case 130:
      return reduce(RULE_6, 4);
    case 114:
      return reduce(RULE_6, 4);
    case 137:
      return reduce(RULE_6, 4);
    case 125:
      return reduce(RULE_6, 4);
    case 90:
      return reduce(RULE_6, 4);
    case 59:
      return reduce(RULE_6, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action137(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(254);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action138(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_6, 5);
    case 140:
      return reduce(RULE_6, 5);
    case 141:
      return reduce(RULE_6, 5);
    case 131:
      return reduce(RULE_6, 5);
    case 124:
      return reduce(RULE_6, 5);
    case 142:
      return reduce(RULE_6, 5);
    case 129:
      return reduce(RULE_6, 5);
    case 144:
      return reduce(RULE_6, 5);
    case 101:
      return reduce(RULE_6, 5);
    case 116:
      return reduce(RULE_6, 5);
    case 136:
      return reduce(RULE_6, 5);
    case 143:
      return reduce(RULE_6, 5);
    case 91:
      return reduce(RULE_6, 5);
    case 92:
      return reduce(RULE_6, 5);
    case 130:
      return reduce(RULE_6, 5);
    case 114:
      return reduce(RULE_6, 5);
    case 137:
      return reduce(RULE_6, 5);
    case 125:
      return reduce(RULE_6, 5);
    case 90:
      return reduce(RULE_6, 5);
    case 59:
      return reduce(RULE_6, 5);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action139(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 82:
      return reduce(RULE_3, 0);
    case 59:
      return reduce(RULE_3, 0);
    default: throw new BadTokenException(token, new Object[] {LPAREN, DOT, NAME});
    }
  }

  private final int goto139(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 255;
    default: return -1;
    }
  }

  private final boolean action140(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_8, 0);
    case 140:
      return reduce(RULE_8, 0);
    case 141:
      return reduce(RULE_8, 0);
    case 131:
      return reduce(RULE_8, 0);
    case 124:
      return reduce(RULE_8, 0);
    case 142:
      return reduce(RULE_8, 0);
    case 106:
      return reduce(RULE_8, 0);
    case 129:
      return reduce(RULE_8, 0);
    case 144:
      return reduce(RULE_8, 0);
    case 101:
      return reduce(RULE_8, 0);
    case 116:
      return reduce(RULE_8, 0);
    case 136:
      return reduce(RULE_8, 0);
    case 91:
      return reduce(RULE_8, 0);
    case 143:
      return reduce(RULE_8, 0);
    case 92:
      return reduce(RULE_8, 0);
    case 130:
      return reduce(RULE_8, 0);
    case 114:
      return reduce(RULE_8, 0);
    case 137:
      return reduce(RULE_8, 0);
    case 125:
      return reduce(RULE_8, 0);
    case 90:
      return reduce(RULE_8, 0);
    case 59:
      return reduce(RULE_8, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action141(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(256);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action142(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(257);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto142(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 258;
    default: return -1;
    }
  }

  private final boolean action143(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(259);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action144(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto144(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 260;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action145(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(161);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto145(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 162;
    case 36: return 261;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action146(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 65:
      stateStack.addFirst(262);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action147(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 65:
      stateStack.addFirst(263);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action148(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 25);
    case 65:
      return reduce(RULE_5, 25);
    case 63:
      return reduce(RULE_5, 25);
    case 76:
      return reduce(RULE_5, 25);
    case 78:
      return reduce(RULE_5, 25);
    case 85:
      return reduce(RULE_5, 25);
    case 104:
      return reduce(RULE_5, 25);
    case 113:
      return reduce(RULE_5, 25);
    case 72:
      return reduce(RULE_5, 25);
    case 86:
      return reduce(RULE_5, 25);
    case 90:
      return reduce(RULE_5, 25);
    case 99:
      return reduce(RULE_5, 25);
    case 88:
      return reduce(RULE_5, 25);
    case 95:
      return reduce(RULE_5, 25);
    case 71:
      return reduce(RULE_5, 25);
    case 69:
      return reduce(RULE_5, 25);
    case 70:
      return reduce(RULE_5, 25);
    case 89:
      return reduce(RULE_5, 25);
    case 106:
      return reduce(RULE_5, 25);
    case 97:
      return reduce(RULE_5, 25);
    case 109:
      return reduce(RULE_5, 25);
    case 101:
      return reduce(RULE_5, 25);
    case 84:
      return reduce(RULE_5, 25);
    case 80:
      return reduce(RULE_5, 25);
    case 107:
      return reduce(RULE_5, 25);
    case 91:
      return reduce(RULE_5, 25);
    case 110:
      return reduce(RULE_5, 25);
    case 66:
      return reduce(RULE_5, 25);
    case 73:
      return reduce(RULE_5, 25);
    case 92:
      return reduce(RULE_5, 25);
    case 68:
      return reduce(RULE_5, 25);
    case 108:
      return reduce(RULE_5, 25);
    case 93:
      return reduce(RULE_5, 25);
    case 102:
      return reduce(RULE_5, 25);
    case 59:
      return reduce(RULE_5, 25);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action149(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_25, 0);
    case 65:
      return reduce(RULE_25, 0);
    case 63:
      return reduce(RULE_25, 0);
    case 76:
      return reduce(RULE_25, 0);
    case 78:
      return reduce(RULE_25, 0);
    case 103:
      return reduce(RULE_25, 0);
    case 85:
      return reduce(RULE_25, 0);
    case 104:
      return reduce(RULE_25, 0);
    case 113:
      return reduce(RULE_25, 0);
    case 72:
      return reduce(RULE_25, 0);
    case 86:
      return reduce(RULE_25, 0);
    case 90:
      return reduce(RULE_25, 0);
    case 99:
      return reduce(RULE_25, 0);
    case 88:
      return reduce(RULE_25, 0);
    case 95:
      return reduce(RULE_25, 0);
    case 69:
      return reduce(RULE_25, 0);
    case 71:
      return reduce(RULE_25, 0);
    case 70:
      return reduce(RULE_25, 0);
    case 89:
      return reduce(RULE_25, 0);
    case 106:
      return reduce(RULE_25, 0);
    case 97:
      return reduce(RULE_25, 0);
    case 109:
      return reduce(RULE_25, 0);
    case 101:
      return reduce(RULE_25, 0);
    case 84:
      return reduce(RULE_25, 0);
    case 80:
      return reduce(RULE_25, 0);
    case 107:
      return reduce(RULE_25, 0);
    case 110:
      return reduce(RULE_25, 0);
    case 66:
      return reduce(RULE_25, 0);
    case 91:
      return reduce(RULE_25, 0);
    case 73:
      return reduce(RULE_25, 0);
    case 92:
      return reduce(RULE_25, 0);
    case 68:
      return reduce(RULE_25, 0);
    case 108:
      return reduce(RULE_25, 0);
    case 102:
      return reduce(RULE_25, 0);
    case 93:
      return reduce(RULE_25, 0);
    case 59:
      return reduce(RULE_25, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, CARET, STAR, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON, NAME});
    }
  }

  private final boolean action150(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto150(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 39: return 264;
    case 22: return 265;
    case 23: return 79;
    case 38: return 80;
    case 21: return 81;
    default: return -1;
    }
  }

  private final boolean action151(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto151(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 39: return 266;
    case 22: return 267;
    case 23: return 79;
    case 38: return 80;
    case 21: return 81;
    default: return -1;
    }
  }

  private final boolean action152(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto152(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 39: return 268;
    case 22: return 269;
    case 23: return 79;
    case 38: return 80;
    case 21: return 81;
    default: return -1;
    }
  }

  private final boolean action153(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 23);
    case 65:
      return reduce(RULE_5, 23);
    case 76:
      return reduce(RULE_5, 23);
    case 63:
      return reduce(RULE_5, 23);
    case 78:
      return reduce(RULE_5, 23);
    case 85:
      return reduce(RULE_5, 23);
    case 104:
      return reduce(RULE_5, 23);
    case 113:
      return reduce(RULE_5, 23);
    case 72:
      return reduce(RULE_5, 23);
    case 86:
      return reduce(RULE_5, 23);
    case 90:
      return reduce(RULE_5, 23);
    case 99:
      return reduce(RULE_5, 23);
    case 95:
      return reduce(RULE_5, 23);
    case 88:
      return reduce(RULE_5, 23);
    case 71:
      return reduce(RULE_5, 23);
    case 69:
      return reduce(RULE_5, 23);
    case 70:
      return reduce(RULE_5, 23);
    case 89:
      return reduce(RULE_5, 23);
    case 106:
      return reduce(RULE_5, 23);
    case 97:
      return reduce(RULE_5, 23);
    case 109:
      return reduce(RULE_5, 23);
    case 101:
      return reduce(RULE_5, 23);
    case 84:
      return reduce(RULE_5, 23);
    case 80:
      return reduce(RULE_5, 23);
    case 107:
      return reduce(RULE_5, 23);
    case 91:
      return reduce(RULE_5, 23);
    case 110:
      return reduce(RULE_5, 23);
    case 66:
      return reduce(RULE_5, 23);
    case 92:
      return reduce(RULE_5, 23);
    case 73:
      return reduce(RULE_5, 23);
    case 68:
      return reduce(RULE_5, 23);
    case 108:
      return reduce(RULE_5, 23);
    case 102:
      return reduce(RULE_5, 23);
    case 93:
      return reduce(RULE_5, 23);
    case 59:
      return reduce(RULE_5, 23);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON, NAME});
    }
  }

  private final boolean action154(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_15, 1);
    case 76:
      return reduce(RULE_15, 1);
    case 63:
      return reduce(RULE_15, 1);
    case 78:
      return reduce(RULE_15, 1);
    case 103:
      return reduce(RULE_16, 1);
    case 82:
      return reduce(RULE_16, 1);
    case 85:
      return reduce(RULE_15, 1);
    case 104:
      return reduce(RULE_15, 1);
    case 72:
      return reduce(RULE_15, 1);
    case 86:
      return reduce(RULE_15, 1);
    case 90:
      return reduce(RULE_15, 1);
    case 99:
      return reduce(RULE_15, 1);
    case 95:
      return reduce(RULE_15, 1);
    case 88:
      return reduce(RULE_15, 1);
    case 69:
      return reduce(RULE_15, 1);
    case 70:
      return reduce(RULE_15, 1);
    case 89:
      return reduce(RULE_15, 1);
    case 106:
      return reduce(RULE_15, 1);
    case 97:
      return reduce(RULE_15, 1);
    case 109:
      return reduce(RULE_15, 1);
    case 101:
      return reduce(RULE_15, 1);
    case 84:
      return reduce(RULE_15, 1);
    case 80:
      return reduce(RULE_15, 1);
    case 66:
      return reduce(RULE_15, 1);
    case 110:
      return reduce(RULE_15, 1);
    case 107:
      return reduce(RULE_15, 1);
    case 73:
      return reduce(RULE_15, 1);
    case 92:
      return reduce(RULE_15, 1);
    case 68:
      return reduce(RULE_15, 1);
    case 108:
      return reduce(RULE_15, 1);
    case 102:
      return reduce(RULE_15, 1);
    case 93:
      return reduce(RULE_15, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action155(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_20, 1);
    case 107:
      return reduce(RULE_20, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action156(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(270);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action157(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 14);
    case 76:
      return reduce(RULE_13, 14);
    case 63:
      return reduce(RULE_13, 14);
    case 78:
      return reduce(RULE_13, 14);
    case 103:
      return reduce(RULE_13, 14);
    case 82:
      return reduce(RULE_13, 14);
    case 85:
      return reduce(RULE_13, 14);
    case 104:
      return reduce(RULE_13, 14);
    case 72:
      return reduce(RULE_13, 14);
    case 86:
      return reduce(RULE_13, 14);
    case 90:
      return reduce(RULE_13, 14);
    case 99:
      return reduce(RULE_13, 14);
    case 88:
      return reduce(RULE_13, 14);
    case 95:
      return reduce(RULE_13, 14);
    case 69:
      return reduce(RULE_13, 14);
    case 70:
      return reduce(RULE_13, 14);
    case 89:
      return reduce(RULE_13, 14);
    case 106:
      return reduce(RULE_13, 14);
    case 97:
      return reduce(RULE_13, 14);
    case 109:
      return reduce(RULE_13, 14);
    case 101:
      return reduce(RULE_13, 14);
    case 84:
      return reduce(RULE_13, 14);
    case 80:
      return reduce(RULE_13, 14);
    case 66:
      return reduce(RULE_13, 14);
    case 110:
      return reduce(RULE_13, 14);
    case 91:
      return reduce(RULE_13, 14);
    case 107:
      return reduce(RULE_13, 14);
    case 92:
      return reduce(RULE_13, 14);
    case 73:
      return reduce(RULE_13, 14);
    case 68:
      return reduce(RULE_13, 14);
    case 108:
      return reduce(RULE_13, 14);
    case 102:
      return reduce(RULE_13, 14);
    case 93:
      return reduce(RULE_13, 14);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, LPAREN, STAR, CARET, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action158(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 16);
    case 76:
      return reduce(RULE_13, 16);
    case 63:
      return reduce(RULE_13, 16);
    case 78:
      return reduce(RULE_13, 16);
    case 103:
      return reduce(RULE_13, 16);
    case 82:
      return reduce(RULE_13, 16);
    case 85:
      return reduce(RULE_13, 16);
    case 104:
      return reduce(RULE_13, 16);
    case 72:
      return reduce(RULE_13, 16);
    case 86:
      return reduce(RULE_13, 16);
    case 90:
      return reduce(RULE_13, 16);
    case 99:
      return reduce(RULE_13, 16);
    case 88:
      return reduce(RULE_13, 16);
    case 95:
      return reduce(RULE_13, 16);
    case 69:
      return reduce(RULE_13, 16);
    case 70:
      return reduce(RULE_13, 16);
    case 89:
      return reduce(RULE_13, 16);
    case 106:
      return reduce(RULE_13, 16);
    case 97:
      return reduce(RULE_13, 16);
    case 109:
      return reduce(RULE_13, 16);
    case 101:
      return reduce(RULE_13, 16);
    case 84:
      return reduce(RULE_13, 16);
    case 80:
      return reduce(RULE_13, 16);
    case 66:
      return reduce(RULE_13, 16);
    case 110:
      return reduce(RULE_13, 16);
    case 91:
      return reduce(RULE_13, 16);
    case 107:
      return reduce(RULE_13, 16);
    case 92:
      return reduce(RULE_13, 16);
    case 73:
      return reduce(RULE_13, 16);
    case 68:
      return reduce(RULE_13, 16);
    case 108:
      return reduce(RULE_13, 16);
    case 102:
      return reduce(RULE_13, 16);
    case 93:
      return reduce(RULE_13, 16);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, LPAREN, STAR, CARET, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action159(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 92:
      stateStack.addFirst(242);
      tokenStack.addFirst(token);
      return true;
    case 91:
      return reduce(RULE_21, 1);
    case 71:
      return reduce(RULE_9, 1);
    case 103:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, LPAREN, LSQUARE, QUESTION_MARK_DOT});
    }
  }

  private final boolean action160(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 92:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_20, 0);
    case 71:
      return reduce(RULE_9, 0);
    case 107:
      return reduce(RULE_20, 0);
    case 91:
      return reduce(RULE_21, 0);
    case 103:
      return reduce(RULE_21, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LPAREN, RPAREN, DOUBLE_COLON, LSQUARE, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action161(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action162(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action163(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(271);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action164(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto164(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 49: return 272;
    case 52: return 177;
    case 55: return 157;
    case 37: return 170;
    case 50: return 169;
    case 58: return 273;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 274;
    case 38: return 52;
    case 21: return 275;
    default: return -1;
    }
  }

  private final boolean action165(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto165(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 49: return 276;
    case 52: return 177;
    case 55: return 157;
    case 37: return 170;
    case 50: return 169;
    case 58: return 277;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 274;
    case 38: return 52;
    case 21: return 275;
    default: return -1;
    }
  }

  private final boolean action166(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 88:
      stateStack.addFirst(278);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LANGLE});
    }
  }

  private final boolean action167(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto167(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 49: return 279;
    case 52: return 177;
    case 55: return 157;
    case 37: return 170;
    case 50: return 169;
    case 58: return 280;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 274;
    case 38: return 52;
    case 21: return 275;
    default: return -1;
    }
  }

  private final boolean action168(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(281);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 66:
      stateStack.addFirst(283);
      tokenStack.addFirst(token);
      return true;
    case 63:
      stateStack.addFirst(284);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(285);
      tokenStack.addFirst(token);
      return true;
    case 70:
      stateStack.addFirst(286);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(287);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_27, 0);
    case 69:
      return reduce(RULE_27, 0);
    case 107:
      return reduce(RULE_27, 0);
    case 68:
      return reduce(RULE_27, 0);
    case 108:
      return reduce(RULE_27, 0);
    case 90:
      return reduce(RULE_27, 0);
    case 106:
      return reduce(RULE_27, 0);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, COMMA, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, CARET, RPAREN, COLON, RSQUARE, LBRACE, QUESTION_MARK_COLON});
    }
  }

  private final boolean action169(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 92:
      stateStack.addFirst(288);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_28, 0);
    case 63:
      return reduce(RULE_28, 0);
    case 76:
      return reduce(RULE_28, 0);
    case 78:
      return reduce(RULE_28, 0);
    case 85:
      return reduce(RULE_28, 0);
    case 104:
      return reduce(RULE_28, 0);
    case 72:
      return reduce(RULE_28, 0);
    case 86:
      return reduce(RULE_28, 0);
    case 90:
      return reduce(RULE_28, 0);
    case 99:
      return reduce(RULE_28, 0);
    case 95:
      return reduce(RULE_28, 0);
    case 88:
      return reduce(RULE_28, 0);
    case 69:
      return reduce(RULE_28, 0);
    case 70:
      return reduce(RULE_28, 0);
    case 89:
      return reduce(RULE_28, 0);
    case 106:
      return reduce(RULE_28, 0);
    case 97:
      return reduce(RULE_28, 0);
    case 109:
      return reduce(RULE_28, 0);
    case 101:
      return reduce(RULE_28, 0);
    case 84:
      return reduce(RULE_28, 0);
    case 80:
      return reduce(RULE_28, 0);
    case 107:
      return reduce(RULE_28, 0);
    case 66:
      return reduce(RULE_28, 0);
    case 110:
      return reduce(RULE_28, 0);
    case 73:
      return reduce(RULE_28, 0);
    case 68:
      return reduce(RULE_28, 0);
    case 108:
      return reduce(RULE_28, 0);
    case 102:
      return reduce(RULE_28, 0);
    case 93:
      return reduce(RULE_28, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, RPAREN, CARET, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action170(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 71:
      stateStack.addFirst(289);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action171(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_29, 1);
    case 107:
      return reduce(RULE_29, 1);
    case 68:
      return reduce(RULE_29, 1);
    case 108:
      return reduce(RULE_29, 1);
    case 90:
      return reduce(RULE_29, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COLON, RSQUARE, LBRACE});
    }
  }

  private final boolean action172(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 63:
      stateStack.addFirst(295);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(296);
      tokenStack.addFirst(token);
      return true;
    case 70:
      stateStack.addFirst(297);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 97:
      stateStack.addFirst(300);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(301);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 66:
      stateStack.addFirst(305);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, PLUS, PERCENT, LANGLE, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, QUESTION_MARK_DOT, LANGLE_EQUALS, EXCLAIMATION_MARK_EQUALS, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RANGLE, CARET, LPAREN, STAR, DOUBLE_LANGLE, DOUBLE_EQUALS, FORWARD_SLASH, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto172(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action173(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 0);
    case 63:
      return reduce(RULE_30, 0);
    case 78:
      return reduce(RULE_30, 0);
    case 70:
      return reduce(RULE_30, 0);
    case 106:
      return reduce(RULE_30, 0);
    case 97:
      return reduce(RULE_30, 0);
    case 109:
      return reduce(RULE_30, 0);
    case 101:
      return reduce(RULE_30, 0);
    case 107:
      return reduce(RULE_30, 0);
    case 66:
      return reduce(RULE_30, 0);
    case 68:
      return reduce(RULE_30, 0);
    case 108:
      return reduce(RULE_30, 0);
    case 90:
      return reduce(RULE_30, 0);
    case 102:
      return reduce(RULE_30, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action174(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(312);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(313);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_21, 0);
    case 63:
      return reduce(RULE_21, 0);
    case 76:
      return reduce(RULE_21, 0);
    case 78:
      return reduce(RULE_21, 0);
    case 103:
      return reduce(RULE_21, 0);
    case 85:
      return reduce(RULE_21, 0);
    case 104:
      return reduce(RULE_21, 0);
    case 72:
      return reduce(RULE_21, 0);
    case 86:
      return reduce(RULE_21, 0);
    case 90:
      return reduce(RULE_11, 0);
    case 99:
      return reduce(RULE_21, 0);
    case 88:
      return reduce(RULE_21, 0);
    case 95:
      return reduce(RULE_21, 0);
    case 71:
      return reduce(RULE_9, 0);
    case 70:
      return reduce(RULE_21, 0);
    case 89:
      return reduce(RULE_21, 0);
    case 97:
      return reduce(RULE_21, 0);
    case 109:
      return reduce(RULE_11, 0);
    case 101:
      return reduce(RULE_21, 0);
    case 84:
      return reduce(RULE_21, 0);
    case 80:
      return reduce(RULE_21, 0);
    case 107:
      return reduce(RULE_11, 0);
    case 66:
      return reduce(RULE_21, 0);
    case 110:
      return reduce(RULE_21, 0);
    case 91:
      return reduce(RULE_21, 0);
    case 73:
      return reduce(RULE_21, 0);
    case 68:
      return reduce(RULE_11, 0);
    case 108:
      return reduce(RULE_11, 0);
    case 102:
      return reduce(RULE_21, 0);
    case 93:
      return reduce(RULE_21, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, STAR, CARET, RPAREN, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action175(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 80:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 0);
    case 76:
      return reduce(RULE_31, 0);
    case 63:
      return reduce(RULE_31, 0);
    case 78:
      return reduce(RULE_31, 0);
    case 85:
      return reduce(RULE_31, 0);
    case 104:
      return reduce(RULE_31, 0);
    case 72:
      return reduce(RULE_31, 0);
    case 86:
      return reduce(RULE_31, 0);
    case 90:
      return reduce(RULE_31, 0);
    case 99:
      return reduce(RULE_31, 0);
    case 88:
      return reduce(RULE_31, 0);
    case 95:
      return reduce(RULE_31, 0);
    case 69:
      return reduce(RULE_31, 0);
    case 70:
      return reduce(RULE_31, 0);
    case 89:
      return reduce(RULE_31, 0);
    case 106:
      return reduce(RULE_31, 0);
    case 97:
      return reduce(RULE_31, 0);
    case 109:
      return reduce(RULE_31, 0);
    case 101:
      return reduce(RULE_31, 0);
    case 107:
      return reduce(RULE_31, 0);
    case 110:
      return reduce(RULE_31, 0);
    case 66:
      return reduce(RULE_31, 0);
    case 68:
      return reduce(RULE_31, 0);
    case 108:
      return reduce(RULE_31, 0);
    case 93:
      return reduce(RULE_31, 0);
    case 102:
      return reduce(RULE_31, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action176(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_32, 0);
    case 63:
      return reduce(RULE_32, 0);
    case 76:
      return reduce(RULE_32, 0);
    case 78:
      return reduce(RULE_32, 0);
    case 85:
      return reduce(RULE_32, 0);
    case 104:
      return reduce(RULE_32, 0);
    case 72:
      return reduce(RULE_32, 0);
    case 86:
      return reduce(RULE_32, 0);
    case 90:
      return reduce(RULE_32, 0);
    case 99:
      return reduce(RULE_32, 0);
    case 95:
      return reduce(RULE_32, 0);
    case 88:
      return reduce(RULE_32, 0);
    case 69:
      return reduce(RULE_32, 0);
    case 70:
      return reduce(RULE_32, 0);
    case 89:
      return reduce(RULE_32, 0);
    case 106:
      return reduce(RULE_32, 0);
    case 97:
      return reduce(RULE_32, 0);
    case 109:
      return reduce(RULE_32, 0);
    case 101:
      return reduce(RULE_32, 0);
    case 84:
      return reduce(RULE_32, 0);
    case 80:
      return reduce(RULE_32, 0);
    case 107:
      return reduce(RULE_32, 0);
    case 66:
      return reduce(RULE_32, 0);
    case 110:
      return reduce(RULE_32, 0);
    case 73:
      return reduce(RULE_32, 0);
    case 68:
      return reduce(RULE_32, 0);
    case 108:
      return reduce(RULE_32, 0);
    case 102:
      return reduce(RULE_32, 0);
    case 93:
      return reduce(RULE_32, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action177(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(316);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action178(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_33, 0);
    case 63:
      return reduce(RULE_33, 0);
    case 76:
      return reduce(RULE_33, 0);
    case 78:
      return reduce(RULE_33, 0);
    case 85:
      return reduce(RULE_33, 0);
    case 104:
      return reduce(RULE_33, 0);
    case 72:
      return reduce(RULE_33, 0);
    case 86:
      return reduce(RULE_33, 0);
    case 90:
      return reduce(RULE_33, 0);
    case 99:
      return reduce(RULE_33, 0);
    case 95:
      return reduce(RULE_33, 0);
    case 88:
      return reduce(RULE_33, 0);
    case 69:
      return reduce(RULE_33, 0);
    case 70:
      return reduce(RULE_33, 0);
    case 89:
      return reduce(RULE_33, 0);
    case 106:
      return reduce(RULE_33, 0);
    case 97:
      return reduce(RULE_33, 0);
    case 101:
      return reduce(RULE_33, 0);
    case 109:
      return reduce(RULE_33, 0);
    case 80:
      return reduce(RULE_33, 0);
    case 107:
      return reduce(RULE_33, 0);
    case 66:
      return reduce(RULE_33, 0);
    case 110:
      return reduce(RULE_33, 0);
    case 73:
      return reduce(RULE_33, 0);
    case 68:
      return reduce(RULE_33, 0);
    case 108:
      return reduce(RULE_33, 0);
    case 102:
      return reduce(RULE_33, 0);
    case 93:
      return reduce(RULE_33, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action179(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto179(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 318;
    default: return -1;
    }
  }

  private final boolean action180(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(319);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_34, 4);
    case 107:
      return reduce(RULE_34, 4);
    case 68:
      return reduce(RULE_34, 4);
    case 108:
      return reduce(RULE_34, 4);
    case 90:
      return reduce(RULE_34, 4);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COMMA, COLON, RSQUARE, LBRACE});
    }
  }

  private final boolean action181(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 0);
    case 63:
      return reduce(RULE_35, 0);
    case 78:
      return reduce(RULE_35, 0);
    case 70:
      return reduce(RULE_35, 0);
    case 106:
      return reduce(RULE_35, 0);
    case 97:
      return reduce(RULE_35, 0);
    case 109:
      return reduce(RULE_35, 0);
    case 101:
      return reduce(RULE_35, 0);
    case 107:
      return reduce(RULE_35, 0);
    case 66:
      return reduce(RULE_35, 0);
    case 68:
      return reduce(RULE_35, 0);
    case 108:
      return reduce(RULE_35, 0);
    case 90:
      return reduce(RULE_35, 0);
    case 102:
      return reduce(RULE_35, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, PLUS, LANGLE, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, LANGLE_EQUALS, EXCLAIMATION_MARK_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, CARET, RPAREN, RANGLE, DOUBLE_EQUALS, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action182(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_21, 1);
    case 63:
      return reduce(RULE_21, 1);
    case 76:
      return reduce(RULE_21, 1);
    case 78:
      return reduce(RULE_21, 1);
    case 103:
      return reduce(RULE_21, 1);
    case 85:
      return reduce(RULE_21, 1);
    case 104:
      return reduce(RULE_21, 1);
    case 72:
      return reduce(RULE_21, 1);
    case 86:
      return reduce(RULE_21, 1);
    case 90:
      return reduce(RULE_11, 1);
    case 99:
      return reduce(RULE_21, 1);
    case 88:
      return reduce(RULE_21, 1);
    case 95:
      return reduce(RULE_21, 1);
    case 71:
      return reduce(RULE_9, 1);
    case 70:
      return reduce(RULE_21, 1);
    case 89:
      return reduce(RULE_21, 1);
    case 97:
      return reduce(RULE_21, 1);
    case 109:
      return reduce(RULE_11, 1);
    case 101:
      return reduce(RULE_21, 1);
    case 84:
      return reduce(RULE_21, 1);
    case 80:
      return reduce(RULE_21, 1);
    case 91:
      return reduce(RULE_21, 1);
    case 107:
      return reduce(RULE_11, 1);
    case 66:
      return reduce(RULE_21, 1);
    case 110:
      return reduce(RULE_21, 1);
    case 73:
      return reduce(RULE_21, 1);
    case 68:
      return reduce(RULE_11, 1);
    case 108:
      return reduce(RULE_11, 1);
    case 93:
      return reduce(RULE_21, 1);
    case 102:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, RPAREN, LPAREN, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action183(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 95:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(333);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_36, 0);
    case 99:
      return reduce(RULE_36, 0);
    case 88:
      return reduce(RULE_36, 0);
    case 63:
      return reduce(RULE_36, 0);
    case 69:
      return reduce(RULE_36, 0);
    case 78:
      return reduce(RULE_36, 0);
    case 70:
      return reduce(RULE_36, 0);
    case 89:
      return reduce(RULE_36, 0);
    case 85:
      return reduce(RULE_36, 0);
    case 106:
      return reduce(RULE_36, 0);
    case 97:
      return reduce(RULE_36, 0);
    case 101:
      return reduce(RULE_36, 0);
    case 109:
      return reduce(RULE_36, 0);
    case 66:
      return reduce(RULE_36, 0);
    case 104:
      return reduce(RULE_36, 0);
    case 107:
      return reduce(RULE_36, 0);
    case 72:
      return reduce(RULE_36, 0);
    case 68:
      return reduce(RULE_36, 0);
    case 108:
      return reduce(RULE_36, 0);
    case 102:
      return reduce(RULE_36, 0);
    case 90:
      return reduce(RULE_36, 0);
    case 93:
      return reduce(RULE_36, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, STAR, CARET, RPAREN, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action184(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_29, 0);
    case 107:
      return reduce(RULE_29, 0);
    case 68:
      return reduce(RULE_29, 0);
    case 108:
      return reduce(RULE_29, 0);
    case 90:
      return reduce(RULE_29, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COLON, RSQUARE, LBRACE});
    }
  }

  private final boolean action185(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_37, 1);
    case 141:
      return reduce(RULE_37, 1);
    case 131:
      return reduce(RULE_37, 1);
    case 79:
      return reduce(RULE_37, 1);
    case 133:
      return reduce(RULE_37, 1);
    case 123:
      return reduce(RULE_37, 1);
    case 60:
      return reduce(RULE_37, 1);
    case 62:
      return reduce(RULE_37, 1);
    case 139:
      return reduce(RULE_37, 1);
    case 127:
      return reduce(RULE_37, 1);
    case 136:
      return reduce(RULE_37, 1);
    case 135:
      return reduce(RULE_37, 1);
    case 113:
      return reduce(RULE_37, 1);
    case 130:
      return reduce(RULE_37, 1);
    case 61:
      return reduce(RULE_37, 1);
    case 137:
      return reduce(RULE_37, 1);
    case 138:
      return reduce(RULE_37, 1);
    case 90:
      return reduce(RULE_37, 1);
    case 121:
      return reduce(RULE_37, 1);
    case 124:
      return reduce(RULE_37, 1);
    case 142:
      return reduce(RULE_37, 1);
    case 145:
      return reduce(RULE_37, 1);
    case 132:
      return reduce(RULE_37, 1);
    case 120:
      return reduce(RULE_37, 1);
    case 106:
      return reduce(RULE_37, 1);
    case 129:
      return reduce(RULE_37, 1);
    case 116:
      return reduce(RULE_37, 1);
    case 101:
      return reduce(RULE_37, 1);
    case 143:
      return reduce(RULE_37, 1);
    case 91:
      return reduce(RULE_37, 1);
    case 75:
      return reduce(RULE_37, 1);
    case 92:
      return reduce(RULE_37, 1);
    case 114:
      return reduce(RULE_37, 1);
    case 125:
      return reduce(RULE_37, 1);
    case 115:
      return reduce(RULE_37, 1);
    case 126:
      return reduce(RULE_37, 1);
    case 59:
      return reduce(RULE_37, 1);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action186(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(334);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action187(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(335);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, RPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto187(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 336;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 337;
    case 54: return 158;
    case 56: return 338;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action188(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(339);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action189(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto189(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 340;
    default: return -1;
    }
  }

  private final boolean action190(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(341);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, RSQUARE, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto190(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 342;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action191(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(343);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto191(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 344;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action192(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN, DOT});
    }
  }

  private final int goto192(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 345;
    default: return -1;
    }
  }

  private final boolean action193(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_38, 0);
    case 141:
      return reduce(RULE_38, 0);
    case 131:
      return reduce(RULE_38, 0);
    case 79:
      return reduce(RULE_38, 0);
    case 133:
      return reduce(RULE_38, 0);
    case 123:
      return reduce(RULE_38, 0);
    case 60:
      return reduce(RULE_38, 0);
    case 62:
      return reduce(RULE_38, 0);
    case 139:
      return reduce(RULE_38, 0);
    case 127:
      return reduce(RULE_38, 0);
    case 136:
      return reduce(RULE_38, 0);
    case 135:
      return reduce(RULE_38, 0);
    case 113:
      return reduce(RULE_38, 0);
    case 130:
      return reduce(RULE_38, 0);
    case 61:
      return reduce(RULE_38, 0);
    case 137:
      return reduce(RULE_38, 0);
    case 138:
      return reduce(RULE_38, 0);
    case 90:
      return reduce(RULE_38, 0);
    case 121:
      return reduce(RULE_38, 0);
    case 124:
      return reduce(RULE_38, 0);
    case 142:
      return reduce(RULE_38, 0);
    case 145:
      return reduce(RULE_38, 0);
    case 132:
      return reduce(RULE_38, 0);
    case 120:
      return reduce(RULE_38, 0);
    case 106:
      return reduce(RULE_38, 0);
    case 129:
      return reduce(RULE_38, 0);
    case 116:
      return reduce(RULE_38, 0);
    case 101:
      return reduce(RULE_38, 0);
    case 143:
      return reduce(RULE_38, 0);
    case 91:
      return reduce(RULE_38, 0);
    case 75:
      return reduce(RULE_38, 0);
    case 92:
      return reduce(RULE_38, 0);
    case 114:
      return reduce(RULE_38, 0);
    case 125:
      return reduce(RULE_38, 0);
    case 115:
      return reduce(RULE_38, 0);
    case 126:
      return reduce(RULE_38, 0);
    case 59:
      return reduce(RULE_38, 0);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action194(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(346);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action195(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    case 65:
      return reduce(RULE_12, 4);
    case 107:
      return reduce(RULE_12, 4);
    case 71:
      return reduce(RULE_9, 2);
    default: throw new BadTokenException(token, new Object[] {ARROW, DOUBLE_COLON, RPAREN, COMMA});
    }
  }

  private final boolean action196(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(347);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(313);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_21, 0);
    case 63:
      return reduce(RULE_21, 0);
    case 76:
      return reduce(RULE_21, 0);
    case 78:
      return reduce(RULE_21, 0);
    case 103:
      return reduce(RULE_21, 0);
    case 85:
      return reduce(RULE_21, 0);
    case 104:
      return reduce(RULE_21, 0);
    case 72:
      return reduce(RULE_21, 0);
    case 86:
      return reduce(RULE_21, 0);
    case 99:
      return reduce(RULE_21, 0);
    case 88:
      return reduce(RULE_21, 0);
    case 95:
      return reduce(RULE_21, 0);
    case 71:
      return reduce(RULE_9, 0);
    case 70:
      return reduce(RULE_21, 0);
    case 89:
      return reduce(RULE_21, 0);
    case 97:
      return reduce(RULE_21, 0);
    case 101:
      return reduce(RULE_21, 0);
    case 84:
      return reduce(RULE_21, 0);
    case 80:
      return reduce(RULE_21, 0);
    case 107:
      return reduce(RULE_11, 0);
    case 66:
      return reduce(RULE_21, 0);
    case 110:
      return reduce(RULE_21, 0);
    case 91:
      return reduce(RULE_21, 0);
    case 73:
      return reduce(RULE_21, 0);
    case 102:
      return reduce(RULE_21, 0);
    case 93:
      return reduce(RULE_21, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, STAR, RPAREN, CARET, DOUBLE_LANGLE, LSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action197(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(348);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_21, 1);
    case 63:
      return reduce(RULE_21, 1);
    case 76:
      return reduce(RULE_21, 1);
    case 78:
      return reduce(RULE_21, 1);
    case 103:
      return reduce(RULE_21, 1);
    case 85:
      return reduce(RULE_21, 1);
    case 104:
      return reduce(RULE_21, 1);
    case 72:
      return reduce(RULE_21, 1);
    case 86:
      return reduce(RULE_21, 1);
    case 99:
      return reduce(RULE_21, 1);
    case 88:
      return reduce(RULE_21, 1);
    case 95:
      return reduce(RULE_21, 1);
    case 71:
      return reduce(RULE_9, 1);
    case 70:
      return reduce(RULE_21, 1);
    case 89:
      return reduce(RULE_21, 1);
    case 97:
      return reduce(RULE_21, 1);
    case 101:
      return reduce(RULE_21, 1);
    case 84:
      return reduce(RULE_21, 1);
    case 80:
      return reduce(RULE_21, 1);
    case 107:
      return reduce(RULE_11, 1);
    case 66:
      return reduce(RULE_21, 1);
    case 110:
      return reduce(RULE_21, 1);
    case 91:
      return reduce(RULE_21, 1);
    case 73:
      return reduce(RULE_21, 1);
    case 93:
      return reduce(RULE_21, 1);
    case 102:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, RPAREN, CARET, STAR, DOUBLE_LANGLE, LSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action198(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(349);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action199(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(350);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action200(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_39, 0);
    case 141:
      return reduce(RULE_39, 0);
    case 131:
      return reduce(RULE_39, 0);
    case 79:
      return reduce(RULE_39, 0);
    case 133:
      return reduce(RULE_39, 0);
    case 123:
      return reduce(RULE_39, 0);
    case 60:
      return reduce(RULE_39, 0);
    case 62:
      return reduce(RULE_39, 0);
    case 139:
      return reduce(RULE_39, 0);
    case 127:
      return reduce(RULE_39, 0);
    case 136:
      return reduce(RULE_39, 0);
    case 135:
      return reduce(RULE_39, 0);
    case 113:
      return reduce(RULE_39, 0);
    case 130:
      return reduce(RULE_39, 0);
    case 61:
      return reduce(RULE_39, 0);
    case 137:
      return reduce(RULE_39, 0);
    case 138:
      return reduce(RULE_39, 0);
    case 90:
      return reduce(RULE_39, 0);
    case 121:
      return reduce(RULE_39, 0);
    case 124:
      return reduce(RULE_39, 0);
    case 142:
      return reduce(RULE_39, 0);
    case 145:
      return reduce(RULE_39, 0);
    case 132:
      return reduce(RULE_39, 0);
    case 120:
      return reduce(RULE_39, 0);
    case 106:
      return reduce(RULE_39, 0);
    case 129:
      return reduce(RULE_39, 0);
    case 116:
      return reduce(RULE_39, 0);
    case 101:
      return reduce(RULE_39, 0);
    case 143:
      return reduce(RULE_39, 0);
    case 91:
      return reduce(RULE_39, 0);
    case 75:
      return reduce(RULE_39, 0);
    case 92:
      return reduce(RULE_39, 0);
    case 114:
      return reduce(RULE_39, 0);
    case 125:
      return reduce(RULE_39, 0);
    case 115:
      return reduce(RULE_39, 0);
    case 126:
      return reduce(RULE_39, 0);
    case 59:
      return reduce(RULE_39, 0);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action201(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(351);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action202(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(352);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, FINAL_KEYWORD, NEW_KEYWORD, INT_KEYWORD, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, NAME});
    }
  }

  private final int goto202(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 103;
    case 55: return 157;
    case 50: return 104;
    case 37: return 120;
    case 58: return 122;
    case 34: return 353;
    case 51: return 124;
    case 38: return 228;
    case 17: return 354;
    case 21: return 229;
    case 19: return 127;
    case 12: return 128;
    case 52: return 111;
    case 27: return 355;
    case 54: return 158;
    case 13: return 113;
    case 53: return 114;
    case 23: return 230;
    default: return -1;
    }
  }

  private final boolean action203(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto203(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 356;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action204(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      return reduce(RULE_40, 1);
    case 109:
      return reduce(RULE_40, 1);
    case 69:
      return reduce(RULE_40, 1);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action205(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      return reduce(RULE_40, 0);
    case 109:
      return reduce(RULE_40, 0);
    case 69:
      return reduce(RULE_40, 0);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action206(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 69:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action207(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, ULONG_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, NEW_KEYWORD, INT_KEYWORD, TRUE_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, UNDERSCORE, LSQUARE, LONG_KEYWORD, FLOATING_LITERAL, BOOLEAN_KEYWORD, THIS_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto207(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 103;
    case 55: return 157;
    case 50: return 104;
    case 37: return 120;
    case 22: return 269;
    case 58: return 122;
    case 51: return 124;
    case 38: return 195;
    case 21: return 360;
    case 12: return 128;
    case 39: return 268;
    case 52: return 111;
    case 54: return 158;
    case 13: return 361;
    case 53: return 114;
    case 23: return 362;
    default: return -1;
    }
  }

  private final boolean action208(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto208(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 363;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action209(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(364);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 69:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action210(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(161);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto210(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 162;
    case 36: return 366;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action211(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(367);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action212(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action213(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_22, 11);
    case 141:
      return reduce(RULE_22, 11);
    case 131:
      return reduce(RULE_22, 11);
    case 79:
      return reduce(RULE_22, 11);
    case 133:
      return reduce(RULE_22, 11);
    case 123:
      return reduce(RULE_22, 11);
    case 60:
      return reduce(RULE_22, 11);
    case 62:
      return reduce(RULE_22, 11);
    case 139:
      return reduce(RULE_22, 11);
    case 127:
      return reduce(RULE_22, 11);
    case 136:
      return reduce(RULE_22, 11);
    case 135:
      return reduce(RULE_22, 11);
    case 113:
      return reduce(RULE_22, 11);
    case 130:
      return reduce(RULE_22, 11);
    case 61:
      return reduce(RULE_22, 11);
    case 137:
      return reduce(RULE_22, 11);
    case 138:
      return reduce(RULE_22, 11);
    case 90:
      return reduce(RULE_22, 11);
    case 121:
      return reduce(RULE_22, 11);
    case 124:
      return reduce(RULE_22, 11);
    case 142:
      return reduce(RULE_22, 11);
    case 145:
      return reduce(RULE_22, 11);
    case 132:
      return reduce(RULE_22, 11);
    case 120:
      return reduce(RULE_22, 11);
    case 106:
      return reduce(RULE_22, 11);
    case 129:
      return reduce(RULE_22, 11);
    case 116:
      return reduce(RULE_22, 11);
    case 101:
      return reduce(RULE_22, 11);
    case 143:
      return reduce(RULE_22, 11);
    case 91:
      return reduce(RULE_22, 11);
    case 75:
      return reduce(RULE_22, 11);
    case 92:
      return reduce(RULE_22, 11);
    case 114:
      return reduce(RULE_22, 11);
    case 125:
      return reduce(RULE_22, 11);
    case 115:
      return reduce(RULE_22, 11);
    case 126:
      return reduce(RULE_22, 11);
    case 59:
      return reduce(RULE_22, 11);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action214(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto214(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 369;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action215(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto215(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 370;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action216(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto216(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 371;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action217(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto217(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 372;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action218(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto218(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 373;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action219(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto219(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 374;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action220(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto220(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 375;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action221(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto221(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 376;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action222(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto222(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 377;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action223(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto223(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 378;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action224(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto224(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 379;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action225(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto225(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 380;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action226(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_17, 0);
    case 140:
      return reduce(RULE_17, 0);
    case 131:
      return reduce(RULE_17, 0);
    case 123:
      return reduce(RULE_17, 0);
    case 133:
      return reduce(RULE_17, 0);
    case 79:
      return reduce(RULE_17, 0);
    case 60:
      return reduce(RULE_17, 0);
    case 62:
      return reduce(RULE_17, 0);
    case 139:
      return reduce(RULE_17, 0);
    case 127:
      return reduce(RULE_17, 0);
    case 144:
      return reduce(RULE_17, 0);
    case 122:
      return reduce(RULE_17, 0);
    case 136:
      return reduce(RULE_17, 0);
    case 135:
      return reduce(RULE_17, 0);
    case 113:
      return reduce(RULE_17, 0);
    case 130:
      return reduce(RULE_17, 0);
    case 61:
      return reduce(RULE_17, 0);
    case 138:
      return reduce(RULE_17, 0);
    case 137:
      return reduce(RULE_17, 0);
    case 90:
      return reduce(RULE_17, 0);
    case 121:
      return reduce(RULE_17, 0);
    case 142:
      return reduce(RULE_17, 0);
    case 124:
      return reduce(RULE_17, 0);
    case 145:
      return reduce(RULE_17, 0);
    case 132:
      return reduce(RULE_17, 0);
    case 120:
      return reduce(RULE_17, 0);
    case 129:
      return reduce(RULE_17, 0);
    case 106:
      return reduce(RULE_17, 0);
    case 116:
      return reduce(RULE_17, 0);
    case 101:
      return reduce(RULE_17, 0);
    case 91:
      return reduce(RULE_17, 0);
    case 143:
      return reduce(RULE_17, 0);
    case 75:
      return reduce(RULE_17, 0);
    case 92:
      return reduce(RULE_17, 0);
    case 114:
      return reduce(RULE_17, 0);
    case 125:
      return reduce(RULE_17, 0);
    case 126:
      return reduce(RULE_17, 0);
    case 115:
      return reduce(RULE_17, 0);
    case 59:
      return reduce(RULE_17, 0);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, VOID_KEYWORD, ELSE_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, STATIC_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, FINAL_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action227(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_19, 1);
    case 141:
      return reduce(RULE_19, 1);
    case 131:
      return reduce(RULE_19, 1);
    case 79:
      return reduce(RULE_19, 1);
    case 133:
      return reduce(RULE_19, 1);
    case 123:
      return reduce(RULE_19, 1);
    case 60:
      return reduce(RULE_19, 1);
    case 62:
      return reduce(RULE_19, 1);
    case 139:
      return reduce(RULE_19, 1);
    case 127:
      return reduce(RULE_19, 1);
    case 136:
      return reduce(RULE_19, 1);
    case 135:
      return reduce(RULE_19, 1);
    case 113:
      return reduce(RULE_19, 1);
    case 130:
      return reduce(RULE_19, 1);
    case 61:
      return reduce(RULE_19, 1);
    case 137:
      return reduce(RULE_19, 1);
    case 138:
      return reduce(RULE_19, 1);
    case 90:
      return reduce(RULE_19, 1);
    case 121:
      return reduce(RULE_19, 1);
    case 124:
      return reduce(RULE_19, 1);
    case 142:
      return reduce(RULE_19, 1);
    case 145:
      return reduce(RULE_19, 1);
    case 132:
      return reduce(RULE_19, 1);
    case 120:
      return reduce(RULE_19, 1);
    case 106:
      return reduce(RULE_19, 1);
    case 129:
      return reduce(RULE_19, 1);
    case 116:
      return reduce(RULE_19, 1);
    case 101:
      return reduce(RULE_19, 1);
    case 143:
      return reduce(RULE_19, 1);
    case 91:
      return reduce(RULE_19, 1);
    case 75:
      return reduce(RULE_19, 1);
    case 92:
      return reduce(RULE_19, 1);
    case 114:
      return reduce(RULE_19, 1);
    case 125:
      return reduce(RULE_19, 1);
    case 115:
      return reduce(RULE_19, 1);
    case 126:
      return reduce(RULE_19, 1);
    case 59:
      return reduce(RULE_19, 1);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action228(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 113:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 71:
      return reduce(RULE_9, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, UNDERSCORE, NAME});
    }
  }

  private final int goto228(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 14: return 206;
    default: return -1;
    }
  }

  private final boolean action229(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 100:
      return reduce(RULE_20, 0);
    case 71:
      return reduce(RULE_9, 0);
    case 77:
      return reduce(RULE_20, 0);
    case 103:
      return reduce(RULE_21, 0);
    case 64:
      return reduce(RULE_20, 0);
    case 98:
      return reduce(RULE_20, 0);
    case 83:
      return reduce(RULE_20, 0);
    case 91:
      return reduce(RULE_21, 0);
    case 81:
      return reduce(RULE_20, 0);
    case 87:
      return reduce(RULE_20, 0);
    case 74:
      return reduce(RULE_20, 0);
    case 94:
      return reduce(RULE_20, 0);
    case 111:
      return reduce(RULE_20, 0);
    case 96:
      return reduce(RULE_20, 0);
    case 67:
      return reduce(RULE_20, 0);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, COMMA, DOUBLE_COLON, DOUBLE_PERCENT_EQUALS, QUESTION_MARK_DOT, DOT, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, LPAREN, DOUBLE_RANGLE_EQUALS, UNDERSCORE, LSQUARE, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, STAR_EQUALS, MINUS_EQUALS, PERCENT_EQUALS, CARET_EQUALS, NAME});
    }
  }

  private final int goto229(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 14: return 209;
    default: return -1;
    }
  }

  private final boolean action230(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 113:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(242);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 91:
      return reduce(RULE_21, 1);
    case 71:
      return reduce(RULE_9, 1);
    case 103:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, LPAREN, UNDERSCORE, LSQUARE, QUESTION_MARK_DOT, NAME});
    }
  }

  private final int goto230(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 14: return 243;
    default: return -1;
    }
  }

  private final boolean action231(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_22, 10);
    case 141:
      return reduce(RULE_22, 10);
    case 131:
      return reduce(RULE_22, 10);
    case 79:
      return reduce(RULE_22, 10);
    case 133:
      return reduce(RULE_22, 10);
    case 123:
      return reduce(RULE_22, 10);
    case 60:
      return reduce(RULE_22, 10);
    case 62:
      return reduce(RULE_22, 10);
    case 139:
      return reduce(RULE_22, 10);
    case 127:
      return reduce(RULE_22, 10);
    case 136:
      return reduce(RULE_22, 10);
    case 135:
      return reduce(RULE_22, 10);
    case 113:
      return reduce(RULE_22, 10);
    case 130:
      return reduce(RULE_22, 10);
    case 61:
      return reduce(RULE_22, 10);
    case 137:
      return reduce(RULE_22, 10);
    case 138:
      return reduce(RULE_22, 10);
    case 90:
      return reduce(RULE_22, 10);
    case 121:
      return reduce(RULE_22, 10);
    case 124:
      return reduce(RULE_22, 10);
    case 142:
      return reduce(RULE_22, 10);
    case 145:
      return reduce(RULE_22, 10);
    case 132:
      return reduce(RULE_22, 10);
    case 120:
      return reduce(RULE_22, 10);
    case 106:
      return reduce(RULE_22, 10);
    case 129:
      return reduce(RULE_22, 10);
    case 116:
      return reduce(RULE_22, 10);
    case 101:
      return reduce(RULE_22, 10);
    case 143:
      return reduce(RULE_22, 10);
    case 91:
      return reduce(RULE_22, 10);
    case 75:
      return reduce(RULE_22, 10);
    case 92:
      return reduce(RULE_22, 10);
    case 114:
      return reduce(RULE_22, 10);
    case 125:
      return reduce(RULE_22, 10);
    case 115:
      return reduce(RULE_22, 10);
    case 126:
      return reduce(RULE_22, 10);
    case 59:
      return reduce(RULE_22, 10);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action232(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(382);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action233(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_22, 9);
    case 141:
      return reduce(RULE_22, 9);
    case 131:
      return reduce(RULE_22, 9);
    case 79:
      return reduce(RULE_22, 9);
    case 133:
      return reduce(RULE_22, 9);
    case 123:
      return reduce(RULE_22, 9);
    case 60:
      return reduce(RULE_22, 9);
    case 62:
      return reduce(RULE_22, 9);
    case 139:
      return reduce(RULE_22, 9);
    case 127:
      return reduce(RULE_22, 9);
    case 136:
      return reduce(RULE_22, 9);
    case 135:
      return reduce(RULE_22, 9);
    case 113:
      return reduce(RULE_22, 9);
    case 130:
      return reduce(RULE_22, 9);
    case 61:
      return reduce(RULE_22, 9);
    case 137:
      return reduce(RULE_22, 9);
    case 138:
      return reduce(RULE_22, 9);
    case 90:
      return reduce(RULE_22, 9);
    case 121:
      return reduce(RULE_22, 9);
    case 124:
      return reduce(RULE_22, 9);
    case 142:
      return reduce(RULE_22, 9);
    case 145:
      return reduce(RULE_22, 9);
    case 132:
      return reduce(RULE_22, 9);
    case 120:
      return reduce(RULE_22, 9);
    case 106:
      return reduce(RULE_22, 9);
    case 129:
      return reduce(RULE_22, 9);
    case 116:
      return reduce(RULE_22, 9);
    case 101:
      return reduce(RULE_22, 9);
    case 143:
      return reduce(RULE_22, 9);
    case 91:
      return reduce(RULE_22, 9);
    case 75:
      return reduce(RULE_22, 9);
    case 92:
      return reduce(RULE_22, 9);
    case 114:
      return reduce(RULE_22, 9);
    case 125:
      return reduce(RULE_22, 9);
    case 115:
      return reduce(RULE_22, 9);
    case 126:
      return reduce(RULE_22, 9);
    case 59:
      return reduce(RULE_22, 9);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action234(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(383);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action235(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_41, 1);
    case 76:
      return reduce(RULE_41, 1);
    case 63:
      return reduce(RULE_41, 1);
    case 78:
      return reduce(RULE_41, 1);
    case 103:
      return reduce(RULE_41, 1);
    case 82:
      return reduce(RULE_41, 1);
    case 85:
      return reduce(RULE_41, 1);
    case 104:
      return reduce(RULE_41, 1);
    case 72:
      return reduce(RULE_41, 1);
    case 86:
      return reduce(RULE_41, 1);
    case 90:
      return reduce(RULE_41, 1);
    case 99:
      return reduce(RULE_41, 1);
    case 88:
      return reduce(RULE_41, 1);
    case 95:
      return reduce(RULE_41, 1);
    case 69:
      return reduce(RULE_41, 1);
    case 70:
      return reduce(RULE_41, 1);
    case 89:
      return reduce(RULE_41, 1);
    case 106:
      return reduce(RULE_41, 1);
    case 97:
      return reduce(RULE_41, 1);
    case 109:
      return reduce(RULE_41, 1);
    case 101:
      return reduce(RULE_41, 1);
    case 84:
      return reduce(RULE_41, 1);
    case 80:
      return reduce(RULE_41, 1);
    case 91:
      return reduce(RULE_41, 1);
    case 66:
      return reduce(RULE_41, 1);
    case 110:
      return reduce(RULE_41, 1);
    case 107:
      return reduce(RULE_41, 1);
    case 92:
      return reduce(RULE_41, 1);
    case 73:
      return reduce(RULE_41, 1);
    case 68:
      return reduce(RULE_41, 1);
    case 108:
      return reduce(RULE_41, 1);
    case 102:
      return reduce(RULE_41, 1);
    case 93:
      return reduce(RULE_41, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, LPAREN, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action236(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(161);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto236(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 162;
    case 36: return 384;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action237(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_41, 0);
    case 76:
      return reduce(RULE_41, 0);
    case 63:
      return reduce(RULE_41, 0);
    case 78:
      return reduce(RULE_41, 0);
    case 103:
      return reduce(RULE_41, 0);
    case 82:
      return reduce(RULE_41, 0);
    case 85:
      return reduce(RULE_41, 0);
    case 104:
      return reduce(RULE_41, 0);
    case 72:
      return reduce(RULE_41, 0);
    case 86:
      return reduce(RULE_41, 0);
    case 90:
      return reduce(RULE_41, 0);
    case 99:
      return reduce(RULE_41, 0);
    case 88:
      return reduce(RULE_41, 0);
    case 95:
      return reduce(RULE_41, 0);
    case 69:
      return reduce(RULE_41, 0);
    case 70:
      return reduce(RULE_41, 0);
    case 89:
      return reduce(RULE_41, 0);
    case 106:
      return reduce(RULE_41, 0);
    case 97:
      return reduce(RULE_41, 0);
    case 109:
      return reduce(RULE_41, 0);
    case 101:
      return reduce(RULE_41, 0);
    case 84:
      return reduce(RULE_41, 0);
    case 80:
      return reduce(RULE_41, 0);
    case 110:
      return reduce(RULE_41, 0);
    case 66:
      return reduce(RULE_41, 0);
    case 91:
      return reduce(RULE_41, 0);
    case 107:
      return reduce(RULE_41, 0);
    case 73:
      return reduce(RULE_41, 0);
    case 92:
      return reduce(RULE_41, 0);
    case 68:
      return reduce(RULE_41, 0);
    case 108:
      return reduce(RULE_41, 0);
    case 102:
      return reduce(RULE_41, 0);
    case 93:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, LPAREN, CARET, STAR, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action238(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 113:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNDERSCORE, NAME});
    }
  }

  private final int goto238(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 14: return 385;
    default: return -1;
    }
  }

  private final boolean action239(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 113:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNDERSCORE, NAME});
    }
  }

  private final int goto239(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 14: return 386;
    default: return -1;
    }
  }

  private final boolean action240(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 113:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNDERSCORE, DOT, NAME});
    }
  }

  private final int goto240(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 14: return 387;
    default: return -1;
    }
  }

  private final boolean action241(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, ULONG_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, NEW_KEYWORD, INT_KEYWORD, TRUE_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, UNDERSCORE, LSQUARE, LONG_KEYWORD, FLOATING_LITERAL, BOOLEAN_KEYWORD, THIS_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto241(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 128;
    case 11: return 103;
    case 52: return 111;
    case 55: return 157;
    case 37: return 120;
    case 50: return 104;
    case 58: return 122;
    case 54: return 158;
    case 51: return 124;
    case 13: return 388;
    case 53: return 114;
    case 23: return 159;
    case 38: return 52;
    case 21: return 389;
    default: return -1;
    }
  }

  private final boolean action242(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto242(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 390;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action243(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 69:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action244(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_42, 1);
    case 90:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final boolean action245(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(393);
      tokenStack.addFirst(token);
      return true;
    case 69:
      stateStack.addFirst(394);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action246(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto246(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 395;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action247(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_24, 1);
    case 140:
      return reduce(RULE_24, 1);
    case 141:
      return reduce(RULE_24, 1);
    case 142:
      return reduce(RULE_24, 1);
    case 129:
      return reduce(RULE_24, 1);
    case 101:
      return reduce(RULE_24, 1);
    case 116:
      return reduce(RULE_24, 1);
    case 136:
      return reduce(RULE_24, 1);
    case 91:
      return reduce(RULE_24, 1);
    case 143:
      return reduce(RULE_24, 1);
    case 92:
      return reduce(RULE_24, 1);
    case 130:
      return reduce(RULE_24, 1);
    case 114:
      return reduce(RULE_24, 1);
    case 125:
      return reduce(RULE_24, 1);
    case 90:
      return reduce(RULE_24, 1);
    case 59:
      return reduce(RULE_24, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action248(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(91);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(94);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(95);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(97);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(98);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(100);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(101);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(102);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, STATIC_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, FINAL_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final int goto248(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 103;
    case 50: return 104;
    case 26: return 105;
    case 38: return 228;
    case 21: return 229;
    case 32: return 108;
    case 24: return 110;
    case 52: return 111;
    case 54: return 112;
    case 13: return 113;
    case 53: return 114;
    case 29: return 115;
    case 25: return 116;
    case 33: return 117;
    case 55: return 118;
    case 35: return 119;
    case 37: return 120;
    case 58: return 122;
    case 34: return 121;
    case 51: return 124;
    case 30: return 125;
    case 31: return 126;
    case 19: return 127;
    case 12: return 128;
    case 28: return 129;
    case 27: return 130;
    case 23: return 230;
    default: return -1;
    }
  }

  private final boolean action249(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_43, 1);
    case 140:
      return reduce(RULE_43, 1);
    case 141:
      return reduce(RULE_43, 1);
    case 131:
      return reduce(RULE_43, 1);
    case 124:
      return reduce(RULE_43, 1);
    case 142:
      return reduce(RULE_43, 1);
    case 106:
      return reduce(RULE_43, 1);
    case 129:
      return reduce(RULE_43, 1);
    case 144:
      return reduce(RULE_43, 1);
    case 101:
      return reduce(RULE_43, 1);
    case 116:
      return reduce(RULE_43, 1);
    case 136:
      return reduce(RULE_43, 1);
    case 143:
      return reduce(RULE_43, 1);
    case 91:
      return reduce(RULE_43, 1);
    case 92:
      return reduce(RULE_43, 1);
    case 130:
      return reduce(RULE_43, 1);
    case 114:
      return reduce(RULE_43, 1);
    case 137:
      return reduce(RULE_43, 1);
    case 125:
      return reduce(RULE_43, 1);
    case 90:
      return reduce(RULE_43, 1);
    case 59:
      return reduce(RULE_43, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action250(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto250(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 396;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action251(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_44, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 141:
      return reduce(RULE_44, 0);
    case 131:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 106:
      return reduce(RULE_44, 0);
    case 129:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 101:
      return reduce(RULE_44, 0);
    case 116:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 91:
      return reduce(RULE_44, 0);
    case 92:
      return reduce(RULE_44, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 114:
      return reduce(RULE_44, 0);
    case 137:
      return reduce(RULE_44, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 90:
      return reduce(RULE_44, 0);
    case 59:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action252(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(397);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto252(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 398;
    default: return -1;
    }
  }

  private final boolean action253(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_6, 7);
    case 140:
      return reduce(RULE_6, 7);
    case 141:
      return reduce(RULE_6, 7);
    case 131:
      return reduce(RULE_6, 7);
    case 124:
      return reduce(RULE_6, 7);
    case 142:
      return reduce(RULE_6, 7);
    case 129:
      return reduce(RULE_6, 7);
    case 144:
      return reduce(RULE_6, 7);
    case 101:
      return reduce(RULE_6, 7);
    case 116:
      return reduce(RULE_6, 7);
    case 136:
      return reduce(RULE_6, 7);
    case 91:
      return reduce(RULE_6, 7);
    case 143:
      return reduce(RULE_6, 7);
    case 92:
      return reduce(RULE_6, 7);
    case 130:
      return reduce(RULE_6, 7);
    case 114:
      return reduce(RULE_6, 7);
    case 137:
      return reduce(RULE_6, 7);
    case 125:
      return reduce(RULE_6, 7);
    case 90:
      return reduce(RULE_6, 7);
    case 59:
      return reduce(RULE_6, 7);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action254(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto254(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 399;
    default: return -1;
    }
  }

  private final boolean action255(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto255(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 400;
    default: return -1;
    }
  }

  private final boolean action256(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(401);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, LPAREN});
    }
  }

  private final int goto256(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 403;
    default: return -1;
    }
  }

  private final boolean action257(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_45, 5);
    case 140:
      return reduce(RULE_45, 5);
    case 141:
      return reduce(RULE_45, 5);
    case 131:
      return reduce(RULE_45, 5);
    case 124:
      return reduce(RULE_45, 5);
    case 142:
      return reduce(RULE_45, 5);
    case 106:
      return reduce(RULE_45, 5);
    case 129:
      return reduce(RULE_45, 5);
    case 144:
      return reduce(RULE_45, 5);
    case 101:
      return reduce(RULE_45, 5);
    case 116:
      return reduce(RULE_45, 5);
    case 136:
      return reduce(RULE_45, 5);
    case 91:
      return reduce(RULE_45, 5);
    case 143:
      return reduce(RULE_45, 5);
    case 92:
      return reduce(RULE_45, 5);
    case 130:
      return reduce(RULE_45, 5);
    case 114:
      return reduce(RULE_45, 5);
    case 137:
      return reduce(RULE_45, 5);
    case 125:
      return reduce(RULE_45, 5);
    case 90:
      return reduce(RULE_45, 5);
    case 59:
      return reduce(RULE_45, 5);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action258(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_45, 1);
    case 140:
      return reduce(RULE_45, 1);
    case 141:
      return reduce(RULE_45, 1);
    case 131:
      return reduce(RULE_45, 1);
    case 124:
      return reduce(RULE_45, 1);
    case 142:
      return reduce(RULE_45, 1);
    case 106:
      return reduce(RULE_45, 1);
    case 129:
      return reduce(RULE_45, 1);
    case 144:
      return reduce(RULE_45, 1);
    case 101:
      return reduce(RULE_45, 1);
    case 116:
      return reduce(RULE_45, 1);
    case 136:
      return reduce(RULE_45, 1);
    case 91:
      return reduce(RULE_45, 1);
    case 143:
      return reduce(RULE_45, 1);
    case 92:
      return reduce(RULE_45, 1);
    case 130:
      return reduce(RULE_45, 1);
    case 114:
      return reduce(RULE_45, 1);
    case 137:
      return reduce(RULE_45, 1);
    case 125:
      return reduce(RULE_45, 1);
    case 90:
      return reduce(RULE_45, 1);
    case 59:
      return reduce(RULE_45, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action259(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 26);
    case 65:
      return reduce(RULE_5, 26);
    case 63:
      return reduce(RULE_5, 26);
    case 76:
      return reduce(RULE_5, 26);
    case 78:
      return reduce(RULE_5, 26);
    case 85:
      return reduce(RULE_5, 26);
    case 104:
      return reduce(RULE_5, 26);
    case 113:
      return reduce(RULE_5, 26);
    case 72:
      return reduce(RULE_5, 26);
    case 86:
      return reduce(RULE_5, 26);
    case 90:
      return reduce(RULE_5, 26);
    case 99:
      return reduce(RULE_5, 26);
    case 88:
      return reduce(RULE_5, 26);
    case 95:
      return reduce(RULE_5, 26);
    case 69:
      return reduce(RULE_5, 26);
    case 71:
      return reduce(RULE_5, 26);
    case 70:
      return reduce(RULE_5, 26);
    case 89:
      return reduce(RULE_5, 26);
    case 106:
      return reduce(RULE_5, 26);
    case 97:
      return reduce(RULE_5, 26);
    case 109:
      return reduce(RULE_5, 26);
    case 101:
      return reduce(RULE_5, 26);
    case 84:
      return reduce(RULE_5, 26);
    case 80:
      return reduce(RULE_5, 26);
    case 107:
      return reduce(RULE_5, 26);
    case 91:
      return reduce(RULE_5, 26);
    case 110:
      return reduce(RULE_5, 26);
    case 66:
      return reduce(RULE_5, 26);
    case 73:
      return reduce(RULE_5, 26);
    case 92:
      return reduce(RULE_5, 26);
    case 68:
      return reduce(RULE_5, 26);
    case 108:
      return reduce(RULE_5, 26);
    case 93:
      return reduce(RULE_5, 26);
    case 102:
      return reduce(RULE_5, 26);
    case 59:
      return reduce(RULE_5, 26);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action260(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 24);
    case 65:
      return reduce(RULE_5, 24);
    case 63:
      return reduce(RULE_5, 24);
    case 76:
      return reduce(RULE_5, 24);
    case 78:
      return reduce(RULE_5, 24);
    case 85:
      return reduce(RULE_5, 24);
    case 104:
      return reduce(RULE_5, 24);
    case 113:
      return reduce(RULE_5, 24);
    case 72:
      return reduce(RULE_5, 24);
    case 86:
      return reduce(RULE_5, 24);
    case 90:
      return reduce(RULE_5, 24);
    case 99:
      return reduce(RULE_5, 24);
    case 88:
      return reduce(RULE_5, 24);
    case 95:
      return reduce(RULE_5, 24);
    case 69:
      return reduce(RULE_5, 24);
    case 71:
      return reduce(RULE_5, 24);
    case 70:
      return reduce(RULE_5, 24);
    case 89:
      return reduce(RULE_5, 24);
    case 106:
      return reduce(RULE_5, 24);
    case 97:
      return reduce(RULE_5, 24);
    case 109:
      return reduce(RULE_5, 24);
    case 101:
      return reduce(RULE_5, 24);
    case 84:
      return reduce(RULE_5, 24);
    case 80:
      return reduce(RULE_5, 24);
    case 107:
      return reduce(RULE_5, 24);
    case 91:
      return reduce(RULE_5, 24);
    case 110:
      return reduce(RULE_5, 24);
    case 66:
      return reduce(RULE_5, 24);
    case 73:
      return reduce(RULE_5, 24);
    case 92:
      return reduce(RULE_5, 24);
    case 68:
      return reduce(RULE_5, 24);
    case 108:
      return reduce(RULE_5, 24);
    case 93:
      return reduce(RULE_5, 24);
    case 102:
      return reduce(RULE_5, 24);
    case 59:
      return reduce(RULE_5, 24);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action261(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action262(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(161);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto262(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 162;
    case 36: return 405;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action263(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(161);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto263(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 162;
    case 36: return 406;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action264(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 65:
      return reduce(RULE_12, 1);
    case 107:
      return reduce(RULE_12, 1);
    default: throw new BadTokenException(token, new Object[] {ARROW, RPAREN});
    }
  }

  private final boolean action265(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_11, 3);
    case 65:
      return reduce(RULE_11, 3);
    case 107:
      return reduce(RULE_11, 3);
    case 68:
      return reduce(RULE_11, 3);
    case 108:
      return reduce(RULE_11, 3);
    case 90:
      return reduce(RULE_11, 3);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, ARROW, RPAREN, COLON, RSQUARE, LBRACE});
    }
  }

  private final boolean action266(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 65:
      return reduce(RULE_12, 2);
    case 107:
      return reduce(RULE_12, 2);
    default: throw new BadTokenException(token, new Object[] {ARROW, RPAREN});
    }
  }

  private final boolean action267(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 65:
      return reduce(RULE_12, 3);
    case 107:
      return reduce(RULE_12, 3);
    default: throw new BadTokenException(token, new Object[] {ARROW, RPAREN});
    }
  }

  private final boolean action268(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 65:
      return reduce(RULE_12, 0);
    case 107:
      return reduce(RULE_12, 0);
    default: throw new BadTokenException(token, new Object[] {ARROW, RPAREN});
    }
  }

  private final boolean action269(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_11, 2);
    case 65:
      return reduce(RULE_11, 2);
    case 107:
      return reduce(RULE_11, 2);
    case 68:
      return reduce(RULE_11, 2);
    case 108:
      return reduce(RULE_11, 2);
    case 90:
      return reduce(RULE_11, 2);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, ARROW, RPAREN, COLON, RSQUARE, LBRACE});
    }
  }

  private final boolean action270(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_46, 0);
    case 140:
      return reduce(RULE_46, 0);
    case 123:
      return reduce(RULE_46, 0);
    case 133:
      return reduce(RULE_46, 0);
    case 79:
      return reduce(RULE_46, 0);
    case 131:
      return reduce(RULE_46, 0);
    case 60:
      return reduce(RULE_46, 0);
    case 62:
      return reduce(RULE_46, 0);
    case 139:
      return reduce(RULE_46, 0);
    case 127:
      return reduce(RULE_46, 0);
    case 136:
      return reduce(RULE_46, 0);
    case 135:
      return reduce(RULE_46, 0);
    case 113:
      return reduce(RULE_46, 0);
    case 130:
      return reduce(RULE_46, 0);
    case 61:
      return reduce(RULE_46, 0);
    case 137:
      return reduce(RULE_46, 0);
    case 138:
      return reduce(RULE_46, 0);
    case 90:
      return reduce(RULE_46, 0);
    case 121:
      return reduce(RULE_46, 0);
    case 124:
      return reduce(RULE_46, 0);
    case 142:
      return reduce(RULE_46, 0);
    case 145:
      return reduce(RULE_46, 0);
    case 132:
      return reduce(RULE_46, 0);
    case 120:
      return reduce(RULE_46, 0);
    case 129:
      return reduce(RULE_46, 0);
    case 106:
      return reduce(RULE_46, 0);
    case 101:
      return reduce(RULE_46, 0);
    case 116:
      return reduce(RULE_46, 0);
    case 91:
      return reduce(RULE_46, 0);
    case 143:
      return reduce(RULE_46, 0);
    case 75:
      return reduce(RULE_46, 0);
    case 92:
      return reduce(RULE_46, 0);
    case 114:
      return reduce(RULE_46, 0);
    case 125:
      return reduce(RULE_46, 0);
    case 126:
      return reduce(RULE_46, 0);
    case 115:
      return reduce(RULE_46, 0);
    case 59:
      return reduce(RULE_46, 0);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action271(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 30);
    case 65:
      return reduce(RULE_5, 30);
    case 63:
      return reduce(RULE_5, 30);
    case 76:
      return reduce(RULE_5, 30);
    case 78:
      return reduce(RULE_5, 30);
    case 85:
      return reduce(RULE_5, 30);
    case 104:
      return reduce(RULE_5, 30);
    case 113:
      return reduce(RULE_5, 30);
    case 72:
      return reduce(RULE_5, 30);
    case 86:
      return reduce(RULE_5, 30);
    case 90:
      return reduce(RULE_5, 30);
    case 99:
      return reduce(RULE_5, 30);
    case 88:
      return reduce(RULE_5, 30);
    case 95:
      return reduce(RULE_5, 30);
    case 71:
      return reduce(RULE_5, 30);
    case 69:
      return reduce(RULE_5, 30);
    case 70:
      return reduce(RULE_5, 30);
    case 89:
      return reduce(RULE_5, 30);
    case 106:
      return reduce(RULE_5, 30);
    case 97:
      return reduce(RULE_5, 30);
    case 109:
      return reduce(RULE_5, 30);
    case 101:
      return reduce(RULE_5, 30);
    case 84:
      return reduce(RULE_5, 30);
    case 80:
      return reduce(RULE_5, 30);
    case 107:
      return reduce(RULE_5, 30);
    case 91:
      return reduce(RULE_5, 30);
    case 110:
      return reduce(RULE_5, 30);
    case 66:
      return reduce(RULE_5, 30);
    case 73:
      return reduce(RULE_5, 30);
    case 92:
      return reduce(RULE_5, 30);
    case 68:
      return reduce(RULE_5, 30);
    case 108:
      return reduce(RULE_5, 30);
    case 93:
      return reduce(RULE_5, 30);
    case 102:
      return reduce(RULE_5, 30);
    case 59:
      return reduce(RULE_5, 30);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action272(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_28, 7);
    case 76:
      return reduce(RULE_28, 7);
    case 63:
      return reduce(RULE_28, 7);
    case 78:
      return reduce(RULE_28, 7);
    case 85:
      return reduce(RULE_28, 7);
    case 104:
      return reduce(RULE_28, 7);
    case 72:
      return reduce(RULE_28, 7);
    case 86:
      return reduce(RULE_28, 7);
    case 90:
      return reduce(RULE_28, 7);
    case 99:
      return reduce(RULE_28, 7);
    case 88:
      return reduce(RULE_28, 7);
    case 95:
      return reduce(RULE_28, 7);
    case 69:
      return reduce(RULE_28, 7);
    case 70:
      return reduce(RULE_28, 7);
    case 89:
      return reduce(RULE_28, 7);
    case 106:
      return reduce(RULE_28, 7);
    case 97:
      return reduce(RULE_28, 7);
    case 109:
      return reduce(RULE_28, 7);
    case 101:
      return reduce(RULE_28, 7);
    case 84:
      return reduce(RULE_28, 7);
    case 80:
      return reduce(RULE_28, 7);
    case 107:
      return reduce(RULE_28, 7);
    case 66:
      return reduce(RULE_28, 7);
    case 110:
      return reduce(RULE_28, 7);
    case 73:
      return reduce(RULE_28, 7);
    case 68:
      return reduce(RULE_28, 7);
    case 108:
      return reduce(RULE_28, 7);
    case 93:
      return reduce(RULE_28, 7);
    case 102:
      return reduce(RULE_28, 7);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action273(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_28, 8);
    case 76:
      return reduce(RULE_28, 8);
    case 63:
      return reduce(RULE_28, 8);
    case 78:
      return reduce(RULE_28, 8);
    case 85:
      return reduce(RULE_28, 8);
    case 104:
      return reduce(RULE_28, 8);
    case 72:
      return reduce(RULE_28, 8);
    case 86:
      return reduce(RULE_28, 8);
    case 90:
      return reduce(RULE_28, 8);
    case 99:
      return reduce(RULE_28, 8);
    case 88:
      return reduce(RULE_28, 8);
    case 95:
      return reduce(RULE_28, 8);
    case 69:
      return reduce(RULE_28, 8);
    case 70:
      return reduce(RULE_28, 8);
    case 89:
      return reduce(RULE_28, 8);
    case 106:
      return reduce(RULE_28, 8);
    case 97:
      return reduce(RULE_28, 8);
    case 109:
      return reduce(RULE_28, 8);
    case 101:
      return reduce(RULE_28, 8);
    case 84:
      return reduce(RULE_28, 8);
    case 80:
      return reduce(RULE_28, 8);
    case 107:
      return reduce(RULE_28, 8);
    case 66:
      return reduce(RULE_28, 8);
    case 110:
      return reduce(RULE_28, 8);
    case 73:
      return reduce(RULE_28, 8);
    case 68:
      return reduce(RULE_28, 8);
    case 108:
      return reduce(RULE_28, 8);
    case 93:
      return reduce(RULE_28, 8);
    case 102:
      return reduce(RULE_28, 8);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, LPAREN, RPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto273(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action274(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 92:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_21, 1);
    case 63:
      return reduce(RULE_21, 1);
    case 76:
      return reduce(RULE_21, 1);
    case 78:
      return reduce(RULE_21, 1);
    case 103:
      return reduce(RULE_21, 1);
    case 85:
      return reduce(RULE_21, 1);
    case 104:
      return reduce(RULE_21, 1);
    case 72:
      return reduce(RULE_21, 1);
    case 86:
      return reduce(RULE_21, 1);
    case 90:
      return reduce(RULE_21, 1);
    case 99:
      return reduce(RULE_21, 1);
    case 95:
      return reduce(RULE_21, 1);
    case 88:
      return reduce(RULE_21, 1);
    case 71:
      return reduce(RULE_9, 1);
    case 69:
      return reduce(RULE_21, 1);
    case 70:
      return reduce(RULE_21, 1);
    case 89:
      return reduce(RULE_21, 1);
    case 106:
      return reduce(RULE_21, 1);
    case 97:
      return reduce(RULE_21, 1);
    case 109:
      return reduce(RULE_21, 1);
    case 101:
      return reduce(RULE_21, 1);
    case 84:
      return reduce(RULE_21, 1);
    case 80:
      return reduce(RULE_21, 1);
    case 66:
      return reduce(RULE_21, 1);
    case 107:
      return reduce(RULE_21, 1);
    case 91:
      return reduce(RULE_21, 1);
    case 110:
      return reduce(RULE_21, 1);
    case 73:
      return reduce(RULE_21, 1);
    case 68:
      return reduce(RULE_21, 1);
    case 108:
      return reduce(RULE_21, 1);
    case 102:
      return reduce(RULE_21, 1);
    case 93:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action275(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 92:
      stateStack.addFirst(313);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_21, 0);
    case 63:
      return reduce(RULE_21, 0);
    case 76:
      return reduce(RULE_21, 0);
    case 78:
      return reduce(RULE_21, 0);
    case 103:
      return reduce(RULE_21, 0);
    case 85:
      return reduce(RULE_21, 0);
    case 104:
      return reduce(RULE_21, 0);
    case 72:
      return reduce(RULE_21, 0);
    case 86:
      return reduce(RULE_21, 0);
    case 90:
      return reduce(RULE_21, 0);
    case 99:
      return reduce(RULE_21, 0);
    case 95:
      return reduce(RULE_21, 0);
    case 88:
      return reduce(RULE_21, 0);
    case 71:
      return reduce(RULE_9, 0);
    case 69:
      return reduce(RULE_21, 0);
    case 70:
      return reduce(RULE_21, 0);
    case 89:
      return reduce(RULE_21, 0);
    case 106:
      return reduce(RULE_21, 0);
    case 97:
      return reduce(RULE_21, 0);
    case 109:
      return reduce(RULE_21, 0);
    case 101:
      return reduce(RULE_21, 0);
    case 84:
      return reduce(RULE_21, 0);
    case 80:
      return reduce(RULE_21, 0);
    case 66:
      return reduce(RULE_21, 0);
    case 107:
      return reduce(RULE_21, 0);
    case 110:
      return reduce(RULE_21, 0);
    case 91:
      return reduce(RULE_21, 0);
    case 73:
      return reduce(RULE_21, 0);
    case 68:
      return reduce(RULE_21, 0);
    case 108:
      return reduce(RULE_21, 0);
    case 102:
      return reduce(RULE_21, 0);
    case 93:
      return reduce(RULE_21, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, STAR, RPAREN, CARET, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action276(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_28, 5);
    case 76:
      return reduce(RULE_28, 5);
    case 63:
      return reduce(RULE_28, 5);
    case 78:
      return reduce(RULE_28, 5);
    case 85:
      return reduce(RULE_28, 5);
    case 104:
      return reduce(RULE_28, 5);
    case 72:
      return reduce(RULE_28, 5);
    case 86:
      return reduce(RULE_28, 5);
    case 90:
      return reduce(RULE_28, 5);
    case 99:
      return reduce(RULE_28, 5);
    case 88:
      return reduce(RULE_28, 5);
    case 95:
      return reduce(RULE_28, 5);
    case 69:
      return reduce(RULE_28, 5);
    case 70:
      return reduce(RULE_28, 5);
    case 89:
      return reduce(RULE_28, 5);
    case 106:
      return reduce(RULE_28, 5);
    case 97:
      return reduce(RULE_28, 5);
    case 109:
      return reduce(RULE_28, 5);
    case 101:
      return reduce(RULE_28, 5);
    case 84:
      return reduce(RULE_28, 5);
    case 80:
      return reduce(RULE_28, 5);
    case 107:
      return reduce(RULE_28, 5);
    case 66:
      return reduce(RULE_28, 5);
    case 110:
      return reduce(RULE_28, 5);
    case 73:
      return reduce(RULE_28, 5);
    case 68:
      return reduce(RULE_28, 5);
    case 108:
      return reduce(RULE_28, 5);
    case 93:
      return reduce(RULE_28, 5);
    case 102:
      return reduce(RULE_28, 5);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action277(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_28, 6);
    case 76:
      return reduce(RULE_28, 6);
    case 63:
      return reduce(RULE_28, 6);
    case 78:
      return reduce(RULE_28, 6);
    case 85:
      return reduce(RULE_28, 6);
    case 104:
      return reduce(RULE_28, 6);
    case 72:
      return reduce(RULE_28, 6);
    case 86:
      return reduce(RULE_28, 6);
    case 90:
      return reduce(RULE_28, 6);
    case 99:
      return reduce(RULE_28, 6);
    case 88:
      return reduce(RULE_28, 6);
    case 95:
      return reduce(RULE_28, 6);
    case 69:
      return reduce(RULE_28, 6);
    case 70:
      return reduce(RULE_28, 6);
    case 89:
      return reduce(RULE_28, 6);
    case 106:
      return reduce(RULE_28, 6);
    case 97:
      return reduce(RULE_28, 6);
    case 109:
      return reduce(RULE_28, 6);
    case 101:
      return reduce(RULE_28, 6);
    case 84:
      return reduce(RULE_28, 6);
    case 80:
      return reduce(RULE_28, 6);
    case 107:
      return reduce(RULE_28, 6);
    case 66:
      return reduce(RULE_28, 6);
    case 110:
      return reduce(RULE_28, 6);
    case 73:
      return reduce(RULE_28, 6);
    case 68:
      return reduce(RULE_28, 6);
    case 108:
      return reduce(RULE_28, 6);
    case 93:
      return reduce(RULE_28, 6);
    case 102:
      return reduce(RULE_28, 6);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, LPAREN, RPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto277(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action278(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto278(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 407;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action279(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_28, 3);
    case 76:
      return reduce(RULE_28, 3);
    case 63:
      return reduce(RULE_28, 3);
    case 78:
      return reduce(RULE_28, 3);
    case 85:
      return reduce(RULE_28, 3);
    case 104:
      return reduce(RULE_28, 3);
    case 72:
      return reduce(RULE_28, 3);
    case 86:
      return reduce(RULE_28, 3);
    case 90:
      return reduce(RULE_28, 3);
    case 99:
      return reduce(RULE_28, 3);
    case 88:
      return reduce(RULE_28, 3);
    case 95:
      return reduce(RULE_28, 3);
    case 69:
      return reduce(RULE_28, 3);
    case 70:
      return reduce(RULE_28, 3);
    case 89:
      return reduce(RULE_28, 3);
    case 106:
      return reduce(RULE_28, 3);
    case 97:
      return reduce(RULE_28, 3);
    case 109:
      return reduce(RULE_28, 3);
    case 101:
      return reduce(RULE_28, 3);
    case 84:
      return reduce(RULE_28, 3);
    case 80:
      return reduce(RULE_28, 3);
    case 107:
      return reduce(RULE_28, 3);
    case 66:
      return reduce(RULE_28, 3);
    case 110:
      return reduce(RULE_28, 3);
    case 73:
      return reduce(RULE_28, 3);
    case 68:
      return reduce(RULE_28, 3);
    case 108:
      return reduce(RULE_28, 3);
    case 93:
      return reduce(RULE_28, 3);
    case 102:
      return reduce(RULE_28, 3);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action280(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_28, 4);
    case 76:
      return reduce(RULE_28, 4);
    case 63:
      return reduce(RULE_28, 4);
    case 78:
      return reduce(RULE_28, 4);
    case 85:
      return reduce(RULE_28, 4);
    case 104:
      return reduce(RULE_28, 4);
    case 72:
      return reduce(RULE_28, 4);
    case 86:
      return reduce(RULE_28, 4);
    case 90:
      return reduce(RULE_28, 4);
    case 99:
      return reduce(RULE_28, 4);
    case 88:
      return reduce(RULE_28, 4);
    case 95:
      return reduce(RULE_28, 4);
    case 69:
      return reduce(RULE_28, 4);
    case 70:
      return reduce(RULE_28, 4);
    case 89:
      return reduce(RULE_28, 4);
    case 106:
      return reduce(RULE_28, 4);
    case 97:
      return reduce(RULE_28, 4);
    case 109:
      return reduce(RULE_28, 4);
    case 101:
      return reduce(RULE_28, 4);
    case 84:
      return reduce(RULE_28, 4);
    case 80:
      return reduce(RULE_28, 4);
    case 107:
      return reduce(RULE_28, 4);
    case 66:
      return reduce(RULE_28, 4);
    case 110:
      return reduce(RULE_28, 4);
    case 73:
      return reduce(RULE_28, 4);
    case 68:
      return reduce(RULE_28, 4);
    case 108:
      return reduce(RULE_28, 4);
    case 93:
      return reduce(RULE_28, 4);
    case 102:
      return reduce(RULE_28, 4);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, LPAREN, RPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto280(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action281(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto281(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 408;
    case 51: return 124;
    case 44: return 409;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action282(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto282(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 410;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action283(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto283(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 411;
    case 51: return 124;
    case 44: return 412;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action284(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto284(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 413;
    case 51: return 124;
    case 44: return 414;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action285(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto285(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 415;
    case 51: return 124;
    case 44: return 416;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action286(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto286(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 417;
    case 51: return 124;
    case 44: return 418;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action287(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto287(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 419;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 420;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action288(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto288(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 421;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action289(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action290(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto290(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 423;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 424;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action291(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto291(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 425;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    case 47: return 426;
    default: return -1;
    }
  }

  private final boolean action292(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto292(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 427;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 49: return 176;
    case 45: return 428;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    default: return -1;
    }
  }

  private final boolean action293(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto293(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 429;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 430;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action294(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto294(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 431;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 49: return 176;
    case 45: return 432;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    default: return -1;
    }
  }

  private final boolean action295(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto295(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 433;
    case 51: return 124;
    case 44: return 434;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action296(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto296(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 435;
    case 51: return 124;
    case 44: return 436;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action297(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto297(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 437;
    case 51: return 124;
    case 44: return 438;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action298(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto298(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 439;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 440;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action299(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto299(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 441;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 442;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action300(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto300(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 443;
    case 51: return 124;
    case 44: return 444;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action301(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto301(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 445;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action302(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 60:
      stateStack.addFirst(446);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL});
    }
  }

  private final boolean action303(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto303(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 49: return 176;
    case 52: return 177;
    case 48: return 447;
    case 55: return 157;
    case 37: return 170;
    case 50: return 169;
    case 58: return 448;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 274;
    case 38: return 52;
    case 21: return 275;
    default: return -1;
    }
  }

  private final boolean action304(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto304(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 449;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 49: return 176;
    case 45: return 450;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    default: return -1;
    }
  }

  private final boolean action305(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto305(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 451;
    case 51: return 124;
    case 44: return 452;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action306(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto306(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 453;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 454;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action307(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto307(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 49: return 176;
    case 52: return 177;
    case 48: return 455;
    case 55: return 157;
    case 37: return 170;
    case 50: return 169;
    case 58: return 456;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 274;
    case 38: return 52;
    case 21: return 275;
    default: return -1;
    }
  }

  private final boolean action308(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto308(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 457;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 458;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action309(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto309(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 459;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 49: return 176;
    case 45: return 460;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    default: return -1;
    }
  }

  private final boolean action310(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto310(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 461;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    case 47: return 462;
    default: return -1;
    }
  }

  private final boolean action311(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto311(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 463;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 464;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action312(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto312(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 172;
    case 22: return 269;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 41: return 465;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action313(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto313(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 466;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action314(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto314(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 49: return 176;
    case 52: return 177;
    case 48: return 467;
    case 55: return 157;
    case 37: return 170;
    case 50: return 169;
    case 58: return 468;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 274;
    case 38: return 52;
    case 21: return 275;
    default: return -1;
    }
  }

  private final boolean action315(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto315(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 49: return 176;
    case 52: return 177;
    case 48: return 469;
    case 55: return 157;
    case 37: return 170;
    case 50: return 169;
    case 58: return 470;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 274;
    case 38: return 52;
    case 21: return 275;
    default: return -1;
    }
  }

  private final boolean action316(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(471);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action317(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 60:
      stateStack.addFirst(472);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL});
    }
  }

  private final boolean action318(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(473);
      tokenStack.addFirst(token);
      return true;
    case 141:
      return reduce(RULE_47, 0);
    case 140:
      return reduce(RULE_47, 0);
    case 123:
      return reduce(RULE_47, 0);
    case 133:
      return reduce(RULE_47, 0);
    case 79:
      return reduce(RULE_47, 0);
    case 131:
      return reduce(RULE_47, 0);
    case 60:
      return reduce(RULE_47, 0);
    case 62:
      return reduce(RULE_47, 0);
    case 139:
      return reduce(RULE_47, 0);
    case 127:
      return reduce(RULE_47, 0);
    case 136:
      return reduce(RULE_47, 0);
    case 135:
      return reduce(RULE_47, 0);
    case 113:
      return reduce(RULE_47, 0);
    case 130:
      return reduce(RULE_47, 0);
    case 61:
      return reduce(RULE_47, 0);
    case 137:
      return reduce(RULE_47, 0);
    case 138:
      return reduce(RULE_47, 0);
    case 90:
      return reduce(RULE_47, 0);
    case 121:
      return reduce(RULE_47, 0);
    case 124:
      return reduce(RULE_47, 0);
    case 142:
      return reduce(RULE_47, 0);
    case 145:
      return reduce(RULE_47, 0);
    case 132:
      return reduce(RULE_47, 0);
    case 120:
      return reduce(RULE_47, 0);
    case 129:
      return reduce(RULE_47, 0);
    case 106:
      return reduce(RULE_47, 0);
    case 101:
      return reduce(RULE_47, 0);
    case 116:
      return reduce(RULE_47, 0);
    case 91:
      return reduce(RULE_47, 0);
    case 143:
      return reduce(RULE_47, 0);
    case 75:
      return reduce(RULE_47, 0);
    case 92:
      return reduce(RULE_47, 0);
    case 114:
      return reduce(RULE_47, 0);
    case 125:
      return reduce(RULE_47, 0);
    case 126:
      return reduce(RULE_47, 0);
    case 115:
      return reduce(RULE_47, 0);
    case 59:
      return reduce(RULE_47, 0);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, ELSE_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action319(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto319(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 172;
    case 22: return 474;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 41: return 475;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action320(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto320(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 476;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 477;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action321(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto321(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 478;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    case 47: return 479;
    default: return -1;
    }
  }

  private final boolean action322(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto322(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 480;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 481;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action323(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto323(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 482;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 483;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action324(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto324(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 484;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 485;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action325(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto325(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 486;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 487;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action326(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto326(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 488;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 46: return 489;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action327(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto327(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 490;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    case 47: return 491;
    default: return -1;
    }
  }

  private final boolean action328(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto328(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 172;
    case 22: return 265;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 41: return 492;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action329(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto329(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 493;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action330(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto330(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 494;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 49: return 176;
    case 45: return 495;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    default: return -1;
    }
  }

  private final boolean action331(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto331(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 496;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 49: return 176;
    case 45: return 497;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    default: return -1;
    }
  }

  private final boolean action332(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto332(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 498;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 49: return 176;
    case 45: return 499;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    default: return -1;
    }
  }

  private final boolean action333(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto333(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 500;
    case 51: return 124;
    case 38: return 52;
    case 21: return 275;
    case 49: return 176;
    case 45: return 501;
    case 52: return 177;
    case 48: return 178;
    case 54: return 158;
    case 53: return 114;
    case 23: return 274;
    default: return -1;
    }
  }

  private final boolean action334(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_37, 0);
    case 140:
      return reduce(RULE_37, 0);
    case 123:
      return reduce(RULE_37, 0);
    case 133:
      return reduce(RULE_37, 0);
    case 79:
      return reduce(RULE_37, 0);
    case 131:
      return reduce(RULE_37, 0);
    case 60:
      return reduce(RULE_37, 0);
    case 62:
      return reduce(RULE_37, 0);
    case 139:
      return reduce(RULE_37, 0);
    case 127:
      return reduce(RULE_37, 0);
    case 136:
      return reduce(RULE_37, 0);
    case 135:
      return reduce(RULE_37, 0);
    case 113:
      return reduce(RULE_37, 0);
    case 130:
      return reduce(RULE_37, 0);
    case 61:
      return reduce(RULE_37, 0);
    case 137:
      return reduce(RULE_37, 0);
    case 138:
      return reduce(RULE_37, 0);
    case 90:
      return reduce(RULE_37, 0);
    case 121:
      return reduce(RULE_37, 0);
    case 124:
      return reduce(RULE_37, 0);
    case 142:
      return reduce(RULE_37, 0);
    case 145:
      return reduce(RULE_37, 0);
    case 132:
      return reduce(RULE_37, 0);
    case 120:
      return reduce(RULE_37, 0);
    case 129:
      return reduce(RULE_37, 0);
    case 106:
      return reduce(RULE_37, 0);
    case 101:
      return reduce(RULE_37, 0);
    case 116:
      return reduce(RULE_37, 0);
    case 91:
      return reduce(RULE_37, 0);
    case 143:
      return reduce(RULE_37, 0);
    case 75:
      return reduce(RULE_37, 0);
    case 92:
      return reduce(RULE_37, 0);
    case 114:
      return reduce(RULE_37, 0);
    case 125:
      return reduce(RULE_37, 0);
    case 126:
      return reduce(RULE_37, 0);
    case 115:
      return reduce(RULE_37, 0);
    case 59:
      return reduce(RULE_37, 0);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action335(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_48, 1);
    case 63:
      return reduce(RULE_48, 1);
    case 76:
      return reduce(RULE_48, 1);
    case 78:
      return reduce(RULE_48, 1);
    case 103:
      return reduce(RULE_48, 1);
    case 82:
      return reduce(RULE_48, 1);
    case 85:
      return reduce(RULE_48, 1);
    case 104:
      return reduce(RULE_48, 1);
    case 72:
      return reduce(RULE_48, 1);
    case 86:
      return reduce(RULE_48, 1);
    case 90:
      return reduce(RULE_48, 1);
    case 99:
      return reduce(RULE_48, 1);
    case 88:
      return reduce(RULE_48, 1);
    case 95:
      return reduce(RULE_48, 1);
    case 69:
      return reduce(RULE_48, 1);
    case 70:
      return reduce(RULE_48, 1);
    case 89:
      return reduce(RULE_48, 1);
    case 106:
      return reduce(RULE_48, 1);
    case 97:
      return reduce(RULE_48, 1);
    case 109:
      return reduce(RULE_48, 1);
    case 101:
      return reduce(RULE_48, 1);
    case 84:
      return reduce(RULE_48, 1);
    case 80:
      return reduce(RULE_48, 1);
    case 110:
      return reduce(RULE_48, 1);
    case 107:
      return reduce(RULE_48, 1);
    case 66:
      return reduce(RULE_48, 1);
    case 91:
      return reduce(RULE_48, 1);
    case 73:
      return reduce(RULE_48, 1);
    case 92:
      return reduce(RULE_48, 1);
    case 68:
      return reduce(RULE_48, 1);
    case 108:
      return reduce(RULE_48, 1);
    case 93:
      return reduce(RULE_48, 1);
    case 102:
      return reduce(RULE_48, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, CARET, RPAREN, STAR, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action336(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 63:
      stateStack.addFirst(295);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(296);
      tokenStack.addFirst(token);
      return true;
    case 70:
      stateStack.addFirst(297);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 97:
      stateStack.addFirst(300);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(301);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 66:
      stateStack.addFirst(305);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_49, 1);
    case 107:
      return reduce(RULE_49, 1);
    case 106:
      return reduce(RULE_49, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto336(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action337(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_49, 0);
    case 107:
      return reduce(RULE_49, 0);
    case 106:
      return reduce(RULE_49, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN, COMMA, RBRACE});
    }
  }

  private final boolean action338(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(502);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(503);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN, COMMA});
    }
  }

  private final boolean action339(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_22, 12);
    case 140:
      return reduce(RULE_22, 12);
    case 123:
      return reduce(RULE_22, 12);
    case 133:
      return reduce(RULE_22, 12);
    case 79:
      return reduce(RULE_22, 12);
    case 131:
      return reduce(RULE_22, 12);
    case 60:
      return reduce(RULE_22, 12);
    case 62:
      return reduce(RULE_22, 12);
    case 139:
      return reduce(RULE_22, 12);
    case 127:
      return reduce(RULE_22, 12);
    case 136:
      return reduce(RULE_22, 12);
    case 135:
      return reduce(RULE_22, 12);
    case 113:
      return reduce(RULE_22, 12);
    case 130:
      return reduce(RULE_22, 12);
    case 61:
      return reduce(RULE_22, 12);
    case 137:
      return reduce(RULE_22, 12);
    case 138:
      return reduce(RULE_22, 12);
    case 90:
      return reduce(RULE_22, 12);
    case 121:
      return reduce(RULE_22, 12);
    case 124:
      return reduce(RULE_22, 12);
    case 142:
      return reduce(RULE_22, 12);
    case 145:
      return reduce(RULE_22, 12);
    case 132:
      return reduce(RULE_22, 12);
    case 120:
      return reduce(RULE_22, 12);
    case 129:
      return reduce(RULE_22, 12);
    case 106:
      return reduce(RULE_22, 12);
    case 101:
      return reduce(RULE_22, 12);
    case 116:
      return reduce(RULE_22, 12);
    case 91:
      return reduce(RULE_22, 12);
    case 143:
      return reduce(RULE_22, 12);
    case 75:
      return reduce(RULE_22, 12);
    case 92:
      return reduce(RULE_22, 12);
    case 114:
      return reduce(RULE_22, 12);
    case 125:
      return reduce(RULE_22, 12);
    case 126:
      return reduce(RULE_22, 12);
    case 115:
      return reduce(RULE_22, 12);
    case 59:
      return reduce(RULE_22, 12);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action340(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_50, 0);
    case 140:
      return reduce(RULE_50, 0);
    case 123:
      return reduce(RULE_50, 0);
    case 133:
      return reduce(RULE_50, 0);
    case 79:
      return reduce(RULE_50, 0);
    case 131:
      return reduce(RULE_50, 0);
    case 60:
      return reduce(RULE_50, 0);
    case 62:
      return reduce(RULE_50, 0);
    case 139:
      return reduce(RULE_50, 0);
    case 127:
      return reduce(RULE_50, 0);
    case 136:
      return reduce(RULE_50, 0);
    case 135:
      return reduce(RULE_50, 0);
    case 113:
      return reduce(RULE_50, 0);
    case 130:
      return reduce(RULE_50, 0);
    case 61:
      return reduce(RULE_50, 0);
    case 137:
      return reduce(RULE_50, 0);
    case 138:
      return reduce(RULE_50, 0);
    case 90:
      return reduce(RULE_50, 0);
    case 121:
      return reduce(RULE_50, 0);
    case 124:
      return reduce(RULE_50, 0);
    case 142:
      return reduce(RULE_50, 0);
    case 145:
      return reduce(RULE_50, 0);
    case 132:
      return reduce(RULE_50, 0);
    case 120:
      return reduce(RULE_50, 0);
    case 129:
      return reduce(RULE_50, 0);
    case 106:
      return reduce(RULE_50, 0);
    case 101:
      return reduce(RULE_50, 0);
    case 116:
      return reduce(RULE_50, 0);
    case 91:
      return reduce(RULE_50, 0);
    case 143:
      return reduce(RULE_50, 0);
    case 75:
      return reduce(RULE_50, 0);
    case 92:
      return reduce(RULE_50, 0);
    case 114:
      return reduce(RULE_50, 0);
    case 125:
      return reduce(RULE_50, 0);
    case 126:
      return reduce(RULE_50, 0);
    case 115:
      return reduce(RULE_50, 0);
    case 59:
      return reduce(RULE_50, 0);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action341(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto341(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 504;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action342(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action343(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, RSQUARE, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto343(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 506;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action344(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_23, 1);
    case 63:
      return reduce(RULE_23, 1);
    case 76:
      return reduce(RULE_23, 1);
    case 78:
      return reduce(RULE_23, 1);
    case 85:
      return reduce(RULE_23, 1);
    case 104:
      return reduce(RULE_23, 1);
    case 72:
      return reduce(RULE_23, 1);
    case 86:
      return reduce(RULE_23, 1);
    case 90:
      return reduce(RULE_23, 1);
    case 99:
      return reduce(RULE_23, 1);
    case 88:
      return reduce(RULE_23, 1);
    case 95:
      return reduce(RULE_23, 1);
    case 69:
      return reduce(RULE_23, 1);
    case 70:
      return reduce(RULE_23, 1);
    case 89:
      return reduce(RULE_23, 1);
    case 106:
      return reduce(RULE_23, 1);
    case 97:
      return reduce(RULE_23, 1);
    case 109:
      return reduce(RULE_23, 1);
    case 101:
      return reduce(RULE_23, 1);
    case 84:
      return reduce(RULE_23, 1);
    case 80:
      return reduce(RULE_23, 1);
    case 66:
      return reduce(RULE_23, 1);
    case 107:
      return reduce(RULE_23, 1);
    case 91:
      return reduce(RULE_23, 1);
    case 110:
      return reduce(RULE_23, 1);
    case 73:
      return reduce(RULE_23, 1);
    case 92:
      return reduce(RULE_23, 1);
    case 68:
      return reduce(RULE_23, 1);
    case 108:
      return reduce(RULE_23, 1);
    case 93:
      return reduce(RULE_23, 1);
    case 102:
      return reduce(RULE_23, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, RPAREN, LPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action345(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_51, 0);
    case 63:
      return reduce(RULE_51, 0);
    case 76:
      return reduce(RULE_51, 0);
    case 78:
      return reduce(RULE_51, 0);
    case 103:
      return reduce(RULE_51, 0);
    case 82:
      return reduce(RULE_51, 0);
    case 85:
      return reduce(RULE_51, 0);
    case 104:
      return reduce(RULE_51, 0);
    case 72:
      return reduce(RULE_51, 0);
    case 86:
      return reduce(RULE_51, 0);
    case 90:
      return reduce(RULE_51, 0);
    case 99:
      return reduce(RULE_51, 0);
    case 88:
      return reduce(RULE_51, 0);
    case 95:
      return reduce(RULE_51, 0);
    case 69:
      return reduce(RULE_51, 0);
    case 70:
      return reduce(RULE_51, 0);
    case 89:
      return reduce(RULE_51, 0);
    case 106:
      return reduce(RULE_51, 0);
    case 97:
      return reduce(RULE_51, 0);
    case 109:
      return reduce(RULE_51, 0);
    case 101:
      return reduce(RULE_51, 0);
    case 84:
      return reduce(RULE_51, 0);
    case 80:
      return reduce(RULE_51, 0);
    case 91:
      return reduce(RULE_51, 0);
    case 107:
      return reduce(RULE_51, 0);
    case 66:
      return reduce(RULE_51, 0);
    case 110:
      return reduce(RULE_51, 0);
    case 92:
      return reduce(RULE_51, 0);
    case 73:
      return reduce(RULE_51, 0);
    case 68:
      return reduce(RULE_51, 0);
    case 108:
      return reduce(RULE_51, 0);
    case 93:
      return reduce(RULE_51, 0);
    case 102:
      return reduce(RULE_51, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, RPAREN, LPAREN, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action346(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_38, 1);
    case 140:
      return reduce(RULE_38, 1);
    case 123:
      return reduce(RULE_38, 1);
    case 133:
      return reduce(RULE_38, 1);
    case 79:
      return reduce(RULE_38, 1);
    case 131:
      return reduce(RULE_38, 1);
    case 60:
      return reduce(RULE_38, 1);
    case 62:
      return reduce(RULE_38, 1);
    case 139:
      return reduce(RULE_38, 1);
    case 127:
      return reduce(RULE_38, 1);
    case 136:
      return reduce(RULE_38, 1);
    case 135:
      return reduce(RULE_38, 1);
    case 113:
      return reduce(RULE_38, 1);
    case 130:
      return reduce(RULE_38, 1);
    case 61:
      return reduce(RULE_38, 1);
    case 137:
      return reduce(RULE_38, 1);
    case 138:
      return reduce(RULE_38, 1);
    case 90:
      return reduce(RULE_38, 1);
    case 121:
      return reduce(RULE_38, 1);
    case 124:
      return reduce(RULE_38, 1);
    case 142:
      return reduce(RULE_38, 1);
    case 145:
      return reduce(RULE_38, 1);
    case 132:
      return reduce(RULE_38, 1);
    case 120:
      return reduce(RULE_38, 1);
    case 129:
      return reduce(RULE_38, 1);
    case 106:
      return reduce(RULE_38, 1);
    case 101:
      return reduce(RULE_38, 1);
    case 116:
      return reduce(RULE_38, 1);
    case 91:
      return reduce(RULE_38, 1);
    case 143:
      return reduce(RULE_38, 1);
    case 75:
      return reduce(RULE_38, 1);
    case 92:
      return reduce(RULE_38, 1);
    case 114:
      return reduce(RULE_38, 1);
    case 125:
      return reduce(RULE_38, 1);
    case 126:
      return reduce(RULE_38, 1);
    case 115:
      return reduce(RULE_38, 1);
    case 59:
      return reduce(RULE_38, 1);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action347(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto347(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 269;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 195;
    case 21: return 196;
    case 45: return 175;
    case 49: return 176;
    case 39: return 268;
    case 52: return 177;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 197;
    case 47: return 183;
    case 41: return 465;
    default: return -1;
    }
  }

  private final boolean action348(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto348(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 265;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 195;
    case 21: return 196;
    case 45: return 175;
    case 49: return 176;
    case 39: return 264;
    case 52: return 177;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 197;
    case 47: return 183;
    case 41: return 492;
    default: return -1;
    }
  }

  private final boolean action349(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 15);
    case 63:
      return reduce(RULE_13, 15);
    case 76:
      return reduce(RULE_13, 15);
    case 78:
      return reduce(RULE_13, 15);
    case 103:
      return reduce(RULE_13, 15);
    case 82:
      return reduce(RULE_13, 15);
    case 85:
      return reduce(RULE_13, 15);
    case 104:
      return reduce(RULE_13, 15);
    case 72:
      return reduce(RULE_13, 15);
    case 86:
      return reduce(RULE_13, 15);
    case 90:
      return reduce(RULE_13, 15);
    case 99:
      return reduce(RULE_13, 15);
    case 88:
      return reduce(RULE_13, 15);
    case 95:
      return reduce(RULE_13, 15);
    case 69:
      return reduce(RULE_13, 15);
    case 70:
      return reduce(RULE_13, 15);
    case 89:
      return reduce(RULE_13, 15);
    case 106:
      return reduce(RULE_13, 15);
    case 97:
      return reduce(RULE_13, 15);
    case 109:
      return reduce(RULE_13, 15);
    case 101:
      return reduce(RULE_13, 15);
    case 84:
      return reduce(RULE_13, 15);
    case 80:
      return reduce(RULE_13, 15);
    case 110:
      return reduce(RULE_13, 15);
    case 107:
      return reduce(RULE_13, 15);
    case 66:
      return reduce(RULE_13, 15);
    case 91:
      return reduce(RULE_13, 15);
    case 92:
      return reduce(RULE_13, 15);
    case 73:
      return reduce(RULE_13, 15);
    case 68:
      return reduce(RULE_13, 15);
    case 108:
      return reduce(RULE_13, 15);
    case 93:
      return reduce(RULE_13, 15);
    case 102:
      return reduce(RULE_13, 15);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, CARET, RPAREN, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action350(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_46, 1);
    case 140:
      return reduce(RULE_46, 1);
    case 123:
      return reduce(RULE_46, 1);
    case 133:
      return reduce(RULE_46, 1);
    case 79:
      return reduce(RULE_46, 1);
    case 131:
      return reduce(RULE_46, 1);
    case 60:
      return reduce(RULE_46, 1);
    case 62:
      return reduce(RULE_46, 1);
    case 139:
      return reduce(RULE_46, 1);
    case 127:
      return reduce(RULE_46, 1);
    case 136:
      return reduce(RULE_46, 1);
    case 135:
      return reduce(RULE_46, 1);
    case 113:
      return reduce(RULE_46, 1);
    case 130:
      return reduce(RULE_46, 1);
    case 61:
      return reduce(RULE_46, 1);
    case 137:
      return reduce(RULE_46, 1);
    case 138:
      return reduce(RULE_46, 1);
    case 90:
      return reduce(RULE_46, 1);
    case 121:
      return reduce(RULE_46, 1);
    case 124:
      return reduce(RULE_46, 1);
    case 142:
      return reduce(RULE_46, 1);
    case 145:
      return reduce(RULE_46, 1);
    case 132:
      return reduce(RULE_46, 1);
    case 120:
      return reduce(RULE_46, 1);
    case 129:
      return reduce(RULE_46, 1);
    case 106:
      return reduce(RULE_46, 1);
    case 101:
      return reduce(RULE_46, 1);
    case 116:
      return reduce(RULE_46, 1);
    case 91:
      return reduce(RULE_46, 1);
    case 143:
      return reduce(RULE_46, 1);
    case 75:
      return reduce(RULE_46, 1);
    case 92:
      return reduce(RULE_46, 1);
    case 114:
      return reduce(RULE_46, 1);
    case 125:
      return reduce(RULE_46, 1);
    case 126:
      return reduce(RULE_46, 1);
    case 115:
      return reduce(RULE_46, 1);
    case 59:
      return reduce(RULE_46, 1);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action351(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_39, 1);
    case 140:
      return reduce(RULE_39, 1);
    case 123:
      return reduce(RULE_39, 1);
    case 133:
      return reduce(RULE_39, 1);
    case 79:
      return reduce(RULE_39, 1);
    case 131:
      return reduce(RULE_39, 1);
    case 60:
      return reduce(RULE_39, 1);
    case 62:
      return reduce(RULE_39, 1);
    case 139:
      return reduce(RULE_39, 1);
    case 127:
      return reduce(RULE_39, 1);
    case 136:
      return reduce(RULE_39, 1);
    case 135:
      return reduce(RULE_39, 1);
    case 113:
      return reduce(RULE_39, 1);
    case 130:
      return reduce(RULE_39, 1);
    case 61:
      return reduce(RULE_39, 1);
    case 137:
      return reduce(RULE_39, 1);
    case 138:
      return reduce(RULE_39, 1);
    case 90:
      return reduce(RULE_39, 1);
    case 121:
      return reduce(RULE_39, 1);
    case 124:
      return reduce(RULE_39, 1);
    case 142:
      return reduce(RULE_39, 1);
    case 145:
      return reduce(RULE_39, 1);
    case 132:
      return reduce(RULE_39, 1);
    case 120:
      return reduce(RULE_39, 1);
    case 129:
      return reduce(RULE_39, 1);
    case 106:
      return reduce(RULE_39, 1);
    case 101:
      return reduce(RULE_39, 1);
    case 116:
      return reduce(RULE_39, 1);
    case 91:
      return reduce(RULE_39, 1);
    case 143:
      return reduce(RULE_39, 1);
    case 75:
      return reduce(RULE_39, 1);
    case 92:
      return reduce(RULE_39, 1);
    case 114:
      return reduce(RULE_39, 1);
    case 125:
      return reduce(RULE_39, 1);
    case 126:
      return reduce(RULE_39, 1);
    case 115:
      return reduce(RULE_39, 1);
    case 59:
      return reduce(RULE_39, 1);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action352(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_52, 2);
    case 140:
      return reduce(RULE_52, 2);
    case 133:
      return reduce(RULE_52, 2);
    case 123:
      return reduce(RULE_52, 2);
    case 60:
      return reduce(RULE_52, 2);
    case 62:
      return reduce(RULE_52, 2);
    case 139:
      return reduce(RULE_52, 2);
    case 136:
      return reduce(RULE_52, 2);
    case 130:
      return reduce(RULE_52, 2);
    case 61:
      return reduce(RULE_52, 2);
    case 138:
      return reduce(RULE_52, 2);
    case 90:
      return reduce(RULE_52, 2);
    case 121:
      return reduce(RULE_52, 2);
    case 142:
      return reduce(RULE_52, 2);
    case 112:
      return reduce(RULE_52, 2);
    case 132:
      return reduce(RULE_52, 2);
    case 129:
      return reduce(RULE_52, 2);
    case 109:
      return reduce(RULE_52, 2);
    case 101:
      return reduce(RULE_52, 2);
    case 116:
      return reduce(RULE_52, 2);
    case 84:
      return reduce(RULE_52, 2);
    case 91:
      return reduce(RULE_52, 2);
    case 143:
      return reduce(RULE_52, 2);
    case 92:
      return reduce(RULE_52, 2);
    case 114:
      return reduce(RULE_52, 2);
    case 117:
      return reduce(RULE_52, 2);
    case 125:
      return reduce(RULE_52, 2);
    case 93:
      return reduce(RULE_52, 2);
    case 59:
      return reduce(RULE_52, 2);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final boolean action353(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action354(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(508);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SEMICOLON, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto354(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 509;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action355(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_52, 0);
    case 140:
      return reduce(RULE_52, 0);
    case 133:
      return reduce(RULE_52, 0);
    case 123:
      return reduce(RULE_52, 0);
    case 60:
      return reduce(RULE_52, 0);
    case 62:
      return reduce(RULE_52, 0);
    case 139:
      return reduce(RULE_52, 0);
    case 136:
      return reduce(RULE_52, 0);
    case 130:
      return reduce(RULE_52, 0);
    case 61:
      return reduce(RULE_52, 0);
    case 138:
      return reduce(RULE_52, 0);
    case 90:
      return reduce(RULE_52, 0);
    case 121:
      return reduce(RULE_52, 0);
    case 142:
      return reduce(RULE_52, 0);
    case 112:
      return reduce(RULE_52, 0);
    case 132:
      return reduce(RULE_52, 0);
    case 129:
      return reduce(RULE_52, 0);
    case 109:
      return reduce(RULE_52, 0);
    case 101:
      return reduce(RULE_52, 0);
    case 116:
      return reduce(RULE_52, 0);
    case 84:
      return reduce(RULE_52, 0);
    case 91:
      return reduce(RULE_52, 0);
    case 143:
      return reduce(RULE_52, 0);
    case 92:
      return reduce(RULE_52, 0);
    case 114:
      return reduce(RULE_52, 0);
    case 117:
      return reduce(RULE_52, 0);
    case 125:
      return reduce(RULE_52, 0);
    case 93:
      return reduce(RULE_52, 0);
    case 59:
      return reduce(RULE_52, 0);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final boolean action356(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(510);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action357(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto357(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 511;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action358(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_53, 1);
    case 140:
      return reduce(RULE_53, 1);
    case 123:
      return reduce(RULE_53, 1);
    case 133:
      return reduce(RULE_53, 1);
    case 79:
      return reduce(RULE_53, 1);
    case 131:
      return reduce(RULE_53, 1);
    case 60:
      return reduce(RULE_53, 1);
    case 62:
      return reduce(RULE_53, 1);
    case 139:
      return reduce(RULE_53, 1);
    case 127:
      return reduce(RULE_53, 1);
    case 136:
      return reduce(RULE_53, 1);
    case 135:
      return reduce(RULE_53, 1);
    case 113:
      return reduce(RULE_53, 1);
    case 130:
      return reduce(RULE_53, 1);
    case 61:
      return reduce(RULE_53, 1);
    case 137:
      return reduce(RULE_53, 1);
    case 138:
      return reduce(RULE_53, 1);
    case 90:
      return reduce(RULE_53, 1);
    case 121:
      return reduce(RULE_53, 1);
    case 124:
      return reduce(RULE_53, 1);
    case 142:
      return reduce(RULE_53, 1);
    case 112:
      return reduce(RULE_53, 1);
    case 145:
      return reduce(RULE_53, 1);
    case 132:
      return reduce(RULE_53, 1);
    case 120:
      return reduce(RULE_53, 1);
    case 129:
      return reduce(RULE_53, 1);
    case 106:
      return reduce(RULE_53, 1);
    case 101:
      return reduce(RULE_53, 1);
    case 116:
      return reduce(RULE_53, 1);
    case 109:
      return reduce(RULE_53, 1);
    case 84:
      return reduce(RULE_53, 1);
    case 91:
      return reduce(RULE_53, 1);
    case 143:
      return reduce(RULE_53, 1);
    case 75:
      return reduce(RULE_53, 1);
    case 92:
      return reduce(RULE_53, 1);
    case 114:
      return reduce(RULE_53, 1);
    case 117:
      return reduce(RULE_53, 1);
    case 125:
      return reduce(RULE_53, 1);
    case 126:
      return reduce(RULE_53, 1);
    case 115:
      return reduce(RULE_53, 1);
    case 93:
      return reduce(RULE_53, 1);
    case 59:
      return reduce(RULE_53, 1);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, SEMICOLON, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action359(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 113:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(513);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNDERSCORE, NAME});
    }
  }

  private final boolean action360(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 100:
      return reduce(RULE_20, 0);
    case 65:
      return reduce(RULE_11, 0);
    case 71:
      return reduce(RULE_9, 0);
    case 77:
      return reduce(RULE_20, 0);
    case 103:
      return reduce(RULE_21, 0);
    case 64:
      return reduce(RULE_20, 0);
    case 98:
      return reduce(RULE_20, 0);
    case 83:
      return reduce(RULE_20, 0);
    case 91:
      return reduce(RULE_21, 0);
    case 81:
      return reduce(RULE_20, 0);
    case 87:
      return reduce(RULE_20, 0);
    case 74:
      return reduce(RULE_20, 0);
    case 111:
      return reduce(RULE_20, 0);
    case 94:
      return reduce(RULE_20, 0);
    case 96:
      return reduce(RULE_20, 0);
    case 67:
      return reduce(RULE_20, 0);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, ARROW, COMMA, DOUBLE_COLON, DOUBLE_PERCENT_EQUALS, QUESTION_MARK_DOT, DOT, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, LPAREN, DOUBLE_RANGLE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action361(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      return reduce(RULE_18, 0);
    case 100:
      return reduce(RULE_18, 0);
    case 83:
      return reduce(RULE_18, 0);
    case 81:
      return reduce(RULE_18, 0);
    case 77:
      return reduce(RULE_18, 0);
    case 87:
      return reduce(RULE_18, 0);
    case 74:
      return reduce(RULE_18, 0);
    case 111:
      return reduce(RULE_18, 0);
    case 94:
      return reduce(RULE_18, 0);
    case 96:
      return reduce(RULE_18, 0);
    case 67:
      return reduce(RULE_18, 0);
    case 64:
      return reduce(RULE_18, 0);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, PIPE_EQUALS, EQUALS, DOUBLE_RANGLE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, CARET_EQUALS, AMPERSAND_EQUALS});
    }
  }

  private final boolean action362(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(150);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(242);
      tokenStack.addFirst(token);
      return true;
    case 65:
      return reduce(RULE_11, 1);
    case 91:
      return reduce(RULE_21, 1);
    case 71:
      return reduce(RULE_9, 1);
    case 103:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {ARROW, DOUBLE_COLON, LPAREN, COMMA, LSQUARE, QUESTION_MARK_DOT});
    }
  }

  private final boolean action363(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(514);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action364(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto364(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 515;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action365(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_53, 5);
    case 140:
      return reduce(RULE_53, 5);
    case 123:
      return reduce(RULE_53, 5);
    case 133:
      return reduce(RULE_53, 5);
    case 79:
      return reduce(RULE_53, 5);
    case 131:
      return reduce(RULE_53, 5);
    case 60:
      return reduce(RULE_53, 5);
    case 62:
      return reduce(RULE_53, 5);
    case 139:
      return reduce(RULE_53, 5);
    case 127:
      return reduce(RULE_53, 5);
    case 136:
      return reduce(RULE_53, 5);
    case 135:
      return reduce(RULE_53, 5);
    case 113:
      return reduce(RULE_53, 5);
    case 130:
      return reduce(RULE_53, 5);
    case 61:
      return reduce(RULE_53, 5);
    case 137:
      return reduce(RULE_53, 5);
    case 138:
      return reduce(RULE_53, 5);
    case 90:
      return reduce(RULE_53, 5);
    case 121:
      return reduce(RULE_53, 5);
    case 124:
      return reduce(RULE_53, 5);
    case 142:
      return reduce(RULE_53, 5);
    case 112:
      return reduce(RULE_53, 5);
    case 145:
      return reduce(RULE_53, 5);
    case 132:
      return reduce(RULE_53, 5);
    case 120:
      return reduce(RULE_53, 5);
    case 129:
      return reduce(RULE_53, 5);
    case 106:
      return reduce(RULE_53, 5);
    case 101:
      return reduce(RULE_53, 5);
    case 116:
      return reduce(RULE_53, 5);
    case 109:
      return reduce(RULE_53, 5);
    case 84:
      return reduce(RULE_53, 5);
    case 91:
      return reduce(RULE_53, 5);
    case 143:
      return reduce(RULE_53, 5);
    case 75:
      return reduce(RULE_53, 5);
    case 92:
      return reduce(RULE_53, 5);
    case 114:
      return reduce(RULE_53, 5);
    case 117:
      return reduce(RULE_53, 5);
    case 125:
      return reduce(RULE_53, 5);
    case 126:
      return reduce(RULE_53, 5);
    case 115:
      return reduce(RULE_53, 5);
    case 93:
      return reduce(RULE_53, 5);
    case 59:
      return reduce(RULE_53, 5);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, SEMICOLON, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action366(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(516);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action367(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 11);
    case 63:
      return reduce(RULE_13, 11);
    case 76:
      return reduce(RULE_13, 11);
    case 78:
      return reduce(RULE_13, 11);
    case 103:
      return reduce(RULE_13, 11);
    case 82:
      return reduce(RULE_13, 11);
    case 85:
      return reduce(RULE_13, 11);
    case 104:
      return reduce(RULE_13, 11);
    case 72:
      return reduce(RULE_13, 11);
    case 86:
      return reduce(RULE_13, 11);
    case 90:
      return reduce(RULE_13, 11);
    case 99:
      return reduce(RULE_13, 11);
    case 88:
      return reduce(RULE_13, 11);
    case 95:
      return reduce(RULE_13, 11);
    case 69:
      return reduce(RULE_13, 11);
    case 70:
      return reduce(RULE_13, 11);
    case 89:
      return reduce(RULE_13, 11);
    case 106:
      return reduce(RULE_13, 11);
    case 97:
      return reduce(RULE_13, 11);
    case 109:
      return reduce(RULE_13, 11);
    case 101:
      return reduce(RULE_13, 11);
    case 84:
      return reduce(RULE_13, 11);
    case 80:
      return reduce(RULE_13, 11);
    case 110:
      return reduce(RULE_13, 11);
    case 107:
      return reduce(RULE_13, 11);
    case 66:
      return reduce(RULE_13, 11);
    case 91:
      return reduce(RULE_13, 11);
    case 73:
      return reduce(RULE_13, 11);
    case 92:
      return reduce(RULE_13, 11);
    case 68:
      return reduce(RULE_13, 11);
    case 108:
      return reduce(RULE_13, 11);
    case 93:
      return reduce(RULE_13, 11);
    case 102:
      return reduce(RULE_13, 11);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, CARET, RPAREN, STAR, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action368(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      return reduce(RULE_14, 3);
    case 69:
      return reduce(RULE_14, 3);
    case 77:
      return reduce(RULE_14, 3);
    case 103:
      return reduce(RULE_13, 10);
    case 82:
      return reduce(RULE_13, 10);
    case 64:
      return reduce(RULE_14, 3);
    case 98:
      return reduce(RULE_14, 3);
    case 83:
      return reduce(RULE_14, 3);
    case 109:
      return reduce(RULE_14, 3);
    case 91:
      return reduce(RULE_13, 10);
    case 107:
      return reduce(RULE_14, 3);
    case 81:
      return reduce(RULE_14, 3);
    case 92:
      return reduce(RULE_13, 10);
    case 87:
      return reduce(RULE_14, 3);
    case 74:
      return reduce(RULE_14, 3);
    case 94:
      return reduce(RULE_14, 3);
    case 111:
      return reduce(RULE_14, 3);
    case 96:
      return reduce(RULE_14, 3);
    case 67:
      return reduce(RULE_14, 3);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, COMMA, DOUBLE_PERCENT_EQUALS, QUESTION_MARK_DOT, DOT, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, SEMICOLON, LPAREN, RPAREN, DOUBLE_RANGLE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, STAR_EQUALS, MINUS_EQUALS, PERCENT_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action369(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 0);
    case 107:
      return reduce(RULE_54, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action370(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 9);
    case 107:
      return reduce(RULE_54, 9);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action371(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action372(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 7);
    case 107:
      return reduce(RULE_54, 7);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action373(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 5);
    case 107:
      return reduce(RULE_54, 5);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action374(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 3);
    case 107:
      return reduce(RULE_54, 3);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action375(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 6);
    case 107:
      return reduce(RULE_54, 6);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action376(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 1);
    case 107:
      return reduce(RULE_54, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action377(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 2);
    case 107:
      return reduce(RULE_54, 2);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action378(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 4);
    case 107:
      return reduce(RULE_54, 4);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action379(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 10);
    case 107:
      return reduce(RULE_54, 10);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action380(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_54, 8);
    case 107:
      return reduce(RULE_54, 8);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action381(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, ULONG_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, NEW_KEYWORD, INT_KEYWORD, TRUE_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, UNDERSCORE, LSQUARE, LONG_KEYWORD, FLOATING_LITERAL, BOOLEAN_KEYWORD, THIS_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto381(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 128;
    case 11: return 103;
    case 52: return 111;
    case 55: return 157;
    case 37: return 120;
    case 50: return 104;
    case 58: return 122;
    case 54: return 158;
    case 51: return 124;
    case 13: return 361;
    case 53: return 114;
    case 23: return 159;
    case 38: return 52;
    case 21: return 389;
    default: return -1;
    }
  }

  private final boolean action382(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      return reduce(RULE_14, 4);
    case 69:
      return reduce(RULE_14, 4);
    case 77:
      return reduce(RULE_14, 4);
    case 103:
      return reduce(RULE_13, 13);
    case 82:
      return reduce(RULE_13, 13);
    case 64:
      return reduce(RULE_14, 4);
    case 98:
      return reduce(RULE_14, 4);
    case 83:
      return reduce(RULE_14, 4);
    case 109:
      return reduce(RULE_14, 4);
    case 91:
      return reduce(RULE_13, 13);
    case 107:
      return reduce(RULE_14, 4);
    case 81:
      return reduce(RULE_14, 4);
    case 92:
      return reduce(RULE_13, 13);
    case 87:
      return reduce(RULE_14, 4);
    case 74:
      return reduce(RULE_14, 4);
    case 94:
      return reduce(RULE_14, 4);
    case 111:
      return reduce(RULE_14, 4);
    case 96:
      return reduce(RULE_14, 4);
    case 67:
      return reduce(RULE_14, 4);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, COMMA, DOUBLE_PERCENT_EQUALS, QUESTION_MARK_DOT, DOT, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, SEMICOLON, LPAREN, RPAREN, DOUBLE_RANGLE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, STAR_EQUALS, MINUS_EQUALS, PERCENT_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action383(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 12);
    case 63:
      return reduce(RULE_13, 12);
    case 76:
      return reduce(RULE_13, 12);
    case 78:
      return reduce(RULE_13, 12);
    case 103:
      return reduce(RULE_13, 12);
    case 82:
      return reduce(RULE_13, 12);
    case 85:
      return reduce(RULE_13, 12);
    case 104:
      return reduce(RULE_13, 12);
    case 72:
      return reduce(RULE_13, 12);
    case 86:
      return reduce(RULE_13, 12);
    case 90:
      return reduce(RULE_13, 12);
    case 99:
      return reduce(RULE_13, 12);
    case 88:
      return reduce(RULE_13, 12);
    case 95:
      return reduce(RULE_13, 12);
    case 69:
      return reduce(RULE_13, 12);
    case 70:
      return reduce(RULE_13, 12);
    case 89:
      return reduce(RULE_13, 12);
    case 106:
      return reduce(RULE_13, 12);
    case 97:
      return reduce(RULE_13, 12);
    case 109:
      return reduce(RULE_13, 12);
    case 101:
      return reduce(RULE_13, 12);
    case 84:
      return reduce(RULE_13, 12);
    case 80:
      return reduce(RULE_13, 12);
    case 110:
      return reduce(RULE_13, 12);
    case 107:
      return reduce(RULE_13, 12);
    case 66:
      return reduce(RULE_13, 12);
    case 91:
      return reduce(RULE_13, 12);
    case 73:
      return reduce(RULE_13, 12);
    case 92:
      return reduce(RULE_13, 12);
    case 68:
      return reduce(RULE_13, 12);
    case 108:
      return reduce(RULE_13, 12);
    case 93:
      return reduce(RULE_13, 12);
    case 102:
      return reduce(RULE_13, 12);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, CARET, RPAREN, STAR, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action384(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action385(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 69:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action386(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(522);
      tokenStack.addFirst(token);
      return true;
    case 69:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action387(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(524);
      tokenStack.addFirst(token);
      return true;
    case 69:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action388(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      return reduce(RULE_18, 1);
    case 100:
      return reduce(RULE_18, 1);
    case 83:
      return reduce(RULE_18, 1);
    case 81:
      return reduce(RULE_18, 1);
    case 77:
      return reduce(RULE_18, 1);
    case 87:
      return reduce(RULE_18, 1);
    case 74:
      return reduce(RULE_18, 1);
    case 111:
      return reduce(RULE_18, 1);
    case 94:
      return reduce(RULE_18, 1);
    case 96:
      return reduce(RULE_18, 1);
    case 67:
      return reduce(RULE_18, 1);
    case 64:
      return reduce(RULE_18, 1);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, PIPE_EQUALS, EQUALS, DOUBLE_RANGLE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, CARET_EQUALS, AMPERSAND_EQUALS});
    }
  }

  private final boolean action389(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 82:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 100:
      return reduce(RULE_20, 0);
    case 71:
      return reduce(RULE_9, 0);
    case 77:
      return reduce(RULE_20, 0);
    case 103:
      return reduce(RULE_21, 0);
    case 64:
      return reduce(RULE_20, 0);
    case 98:
      return reduce(RULE_20, 0);
    case 83:
      return reduce(RULE_20, 0);
    case 91:
      return reduce(RULE_21, 0);
    case 81:
      return reduce(RULE_20, 0);
    case 87:
      return reduce(RULE_20, 0);
    case 74:
      return reduce(RULE_20, 0);
    case 111:
      return reduce(RULE_20, 0);
    case 94:
      return reduce(RULE_20, 0);
    case 96:
      return reduce(RULE_20, 0);
    case 67:
      return reduce(RULE_20, 0);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, COMMA, DOUBLE_COLON, DOUBLE_PERCENT_EQUALS, QUESTION_MARK_DOT, DOT, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, LPAREN, DOUBLE_RANGLE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action390(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action391(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto391(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 526;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action392(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_53, 9);
    case 140:
      return reduce(RULE_53, 9);
    case 123:
      return reduce(RULE_53, 9);
    case 133:
      return reduce(RULE_53, 9);
    case 79:
      return reduce(RULE_53, 9);
    case 131:
      return reduce(RULE_53, 9);
    case 60:
      return reduce(RULE_53, 9);
    case 62:
      return reduce(RULE_53, 9);
    case 139:
      return reduce(RULE_53, 9);
    case 127:
      return reduce(RULE_53, 9);
    case 136:
      return reduce(RULE_53, 9);
    case 135:
      return reduce(RULE_53, 9);
    case 113:
      return reduce(RULE_53, 9);
    case 130:
      return reduce(RULE_53, 9);
    case 61:
      return reduce(RULE_53, 9);
    case 137:
      return reduce(RULE_53, 9);
    case 138:
      return reduce(RULE_53, 9);
    case 90:
      return reduce(RULE_53, 9);
    case 121:
      return reduce(RULE_53, 9);
    case 124:
      return reduce(RULE_53, 9);
    case 142:
      return reduce(RULE_53, 9);
    case 112:
      return reduce(RULE_53, 9);
    case 145:
      return reduce(RULE_53, 9);
    case 132:
      return reduce(RULE_53, 9);
    case 120:
      return reduce(RULE_53, 9);
    case 129:
      return reduce(RULE_53, 9);
    case 106:
      return reduce(RULE_53, 9);
    case 109:
      return reduce(RULE_53, 9);
    case 101:
      return reduce(RULE_53, 9);
    case 116:
      return reduce(RULE_53, 9);
    case 84:
      return reduce(RULE_53, 9);
    case 91:
      return reduce(RULE_53, 9);
    case 143:
      return reduce(RULE_53, 9);
    case 75:
      return reduce(RULE_53, 9);
    case 92:
      return reduce(RULE_53, 9);
    case 114:
      return reduce(RULE_53, 9);
    case 117:
      return reduce(RULE_53, 9);
    case 125:
      return reduce(RULE_53, 9);
    case 93:
      return reduce(RULE_53, 9);
    case 126:
      return reduce(RULE_53, 9);
    case 115:
      return reduce(RULE_53, 9);
    case 59:
      return reduce(RULE_53, 9);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, MINUS, NAME});
    }
  }

  private final boolean action393(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_42, 0);
    case 90:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final boolean action394(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_24, 0);
    case 140:
      return reduce(RULE_24, 0);
    case 141:
      return reduce(RULE_24, 0);
    case 142:
      return reduce(RULE_24, 0);
    case 129:
      return reduce(RULE_24, 0);
    case 101:
      return reduce(RULE_24, 0);
    case 116:
      return reduce(RULE_24, 0);
    case 136:
      return reduce(RULE_24, 0);
    case 91:
      return reduce(RULE_24, 0);
    case 143:
      return reduce(RULE_24, 0);
    case 92:
      return reduce(RULE_24, 0);
    case 130:
      return reduce(RULE_24, 0);
    case 114:
      return reduce(RULE_24, 0);
    case 125:
      return reduce(RULE_24, 0);
    case 90:
      return reduce(RULE_24, 0);
    case 59:
      return reduce(RULE_24, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto394(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 20: return 527;
    case 19: return 247;
    default: return -1;
    }
  }

  private final boolean action395(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action396(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action397(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_45, 4);
    case 140:
      return reduce(RULE_45, 4);
    case 141:
      return reduce(RULE_45, 4);
    case 131:
      return reduce(RULE_45, 4);
    case 124:
      return reduce(RULE_45, 4);
    case 142:
      return reduce(RULE_45, 4);
    case 106:
      return reduce(RULE_45, 4);
    case 129:
      return reduce(RULE_45, 4);
    case 144:
      return reduce(RULE_45, 4);
    case 101:
      return reduce(RULE_45, 4);
    case 116:
      return reduce(RULE_45, 4);
    case 136:
      return reduce(RULE_45, 4);
    case 91:
      return reduce(RULE_45, 4);
    case 143:
      return reduce(RULE_45, 4);
    case 92:
      return reduce(RULE_45, 4);
    case 130:
      return reduce(RULE_45, 4);
    case 114:
      return reduce(RULE_45, 4);
    case 137:
      return reduce(RULE_45, 4);
    case 125:
      return reduce(RULE_45, 4);
    case 90:
      return reduce(RULE_45, 4);
    case 59:
      return reduce(RULE_45, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action398(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_45, 0);
    case 140:
      return reduce(RULE_45, 0);
    case 141:
      return reduce(RULE_45, 0);
    case 131:
      return reduce(RULE_45, 0);
    case 124:
      return reduce(RULE_45, 0);
    case 142:
      return reduce(RULE_45, 0);
    case 106:
      return reduce(RULE_45, 0);
    case 129:
      return reduce(RULE_45, 0);
    case 144:
      return reduce(RULE_45, 0);
    case 101:
      return reduce(RULE_45, 0);
    case 116:
      return reduce(RULE_45, 0);
    case 136:
      return reduce(RULE_45, 0);
    case 91:
      return reduce(RULE_45, 0);
    case 143:
      return reduce(RULE_45, 0);
    case 92:
      return reduce(RULE_45, 0);
    case 130:
      return reduce(RULE_45, 0);
    case 114:
      return reduce(RULE_45, 0);
    case 137:
      return reduce(RULE_45, 0);
    case 125:
      return reduce(RULE_45, 0);
    case 90:
      return reduce(RULE_45, 0);
    case 59:
      return reduce(RULE_45, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action399(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(530);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto399(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 531;
    default: return -1;
    }
  }

  private final boolean action400(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_43, 0);
    case 140:
      return reduce(RULE_43, 0);
    case 141:
      return reduce(RULE_43, 0);
    case 131:
      return reduce(RULE_43, 0);
    case 124:
      return reduce(RULE_43, 0);
    case 142:
      return reduce(RULE_43, 0);
    case 106:
      return reduce(RULE_43, 0);
    case 129:
      return reduce(RULE_43, 0);
    case 144:
      return reduce(RULE_43, 0);
    case 101:
      return reduce(RULE_43, 0);
    case 116:
      return reduce(RULE_43, 0);
    case 136:
      return reduce(RULE_43, 0);
    case 91:
      return reduce(RULE_43, 0);
    case 143:
      return reduce(RULE_43, 0);
    case 92:
      return reduce(RULE_43, 0);
    case 130:
      return reduce(RULE_43, 0);
    case 114:
      return reduce(RULE_43, 0);
    case 137:
      return reduce(RULE_43, 0);
    case 125:
      return reduce(RULE_43, 0);
    case 90:
      return reduce(RULE_43, 0);
    case 59:
      return reduce(RULE_43, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action401(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto401(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 532;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action402(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_44, 2);
    case 140:
      return reduce(RULE_44, 2);
    case 141:
      return reduce(RULE_44, 2);
    case 131:
      return reduce(RULE_44, 2);
    case 124:
      return reduce(RULE_44, 2);
    case 142:
      return reduce(RULE_44, 2);
    case 106:
      return reduce(RULE_44, 2);
    case 129:
      return reduce(RULE_44, 2);
    case 144:
      return reduce(RULE_44, 2);
    case 101:
      return reduce(RULE_44, 2);
    case 116:
      return reduce(RULE_44, 2);
    case 136:
      return reduce(RULE_44, 2);
    case 91:
      return reduce(RULE_44, 2);
    case 143:
      return reduce(RULE_44, 2);
    case 92:
      return reduce(RULE_44, 2);
    case 130:
      return reduce(RULE_44, 2);
    case 114:
      return reduce(RULE_44, 2);
    case 137:
      return reduce(RULE_44, 2);
    case 125:
      return reduce(RULE_44, 2);
    case 90:
      return reduce(RULE_44, 2);
    case 59:
      return reduce(RULE_44, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action403(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto403(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 534;
    default: return -1;
    }
  }

  private final boolean action404(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 33);
    case 65:
      return reduce(RULE_5, 33);
    case 63:
      return reduce(RULE_5, 33);
    case 76:
      return reduce(RULE_5, 33);
    case 78:
      return reduce(RULE_5, 33);
    case 85:
      return reduce(RULE_5, 33);
    case 104:
      return reduce(RULE_5, 33);
    case 113:
      return reduce(RULE_5, 33);
    case 72:
      return reduce(RULE_5, 33);
    case 86:
      return reduce(RULE_5, 33);
    case 90:
      return reduce(RULE_5, 33);
    case 99:
      return reduce(RULE_5, 33);
    case 88:
      return reduce(RULE_5, 33);
    case 95:
      return reduce(RULE_5, 33);
    case 71:
      return reduce(RULE_5, 33);
    case 69:
      return reduce(RULE_5, 33);
    case 70:
      return reduce(RULE_5, 33);
    case 89:
      return reduce(RULE_5, 33);
    case 106:
      return reduce(RULE_5, 33);
    case 97:
      return reduce(RULE_5, 33);
    case 109:
      return reduce(RULE_5, 33);
    case 101:
      return reduce(RULE_5, 33);
    case 84:
      return reduce(RULE_5, 33);
    case 80:
      return reduce(RULE_5, 33);
    case 107:
      return reduce(RULE_5, 33);
    case 91:
      return reduce(RULE_5, 33);
    case 110:
      return reduce(RULE_5, 33);
    case 66:
      return reduce(RULE_5, 33);
    case 73:
      return reduce(RULE_5, 33);
    case 92:
      return reduce(RULE_5, 33);
    case 68:
      return reduce(RULE_5, 33);
    case 108:
      return reduce(RULE_5, 33);
    case 93:
      return reduce(RULE_5, 33);
    case 102:
      return reduce(RULE_5, 33);
    case 59:
      return reduce(RULE_5, 33);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action405(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action406(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action407(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 104:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE});
    }
  }

  private final boolean action408(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 6);
    case 63:
      return reduce(RULE_30, 6);
    case 78:
      return reduce(RULE_30, 6);
    case 70:
      return reduce(RULE_30, 6);
    case 106:
      return reduce(RULE_30, 6);
    case 97:
      return reduce(RULE_30, 6);
    case 109:
      return reduce(RULE_30, 6);
    case 101:
      return reduce(RULE_30, 6);
    case 107:
      return reduce(RULE_30, 6);
    case 66:
      return reduce(RULE_30, 6);
    case 68:
      return reduce(RULE_30, 6);
    case 108:
      return reduce(RULE_30, 6);
    case 90:
      return reduce(RULE_30, 6);
    case 102:
      return reduce(RULE_30, 6);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto408(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action409(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 5);
    case 63:
      return reduce(RULE_30, 5);
    case 78:
      return reduce(RULE_30, 5);
    case 70:
      return reduce(RULE_30, 5);
    case 106:
      return reduce(RULE_30, 5);
    case 97:
      return reduce(RULE_30, 5);
    case 109:
      return reduce(RULE_30, 5);
    case 101:
      return reduce(RULE_30, 5);
    case 107:
      return reduce(RULE_30, 5);
    case 66:
      return reduce(RULE_30, 5);
    case 68:
      return reduce(RULE_30, 5);
    case 108:
      return reduce(RULE_30, 5);
    case 90:
      return reduce(RULE_30, 5);
    case 102:
      return reduce(RULE_30, 5);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action410(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 68:
      stateStack.addFirst(538);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COLON});
    }
  }

  private final boolean action411(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 10);
    case 63:
      return reduce(RULE_30, 10);
    case 78:
      return reduce(RULE_30, 10);
    case 70:
      return reduce(RULE_30, 10);
    case 106:
      return reduce(RULE_30, 10);
    case 97:
      return reduce(RULE_30, 10);
    case 109:
      return reduce(RULE_30, 10);
    case 101:
      return reduce(RULE_30, 10);
    case 107:
      return reduce(RULE_30, 10);
    case 66:
      return reduce(RULE_30, 10);
    case 68:
      return reduce(RULE_30, 10);
    case 108:
      return reduce(RULE_30, 10);
    case 90:
      return reduce(RULE_30, 10);
    case 102:
      return reduce(RULE_30, 10);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto411(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action412(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 9);
    case 63:
      return reduce(RULE_30, 9);
    case 78:
      return reduce(RULE_30, 9);
    case 70:
      return reduce(RULE_30, 9);
    case 106:
      return reduce(RULE_30, 9);
    case 97:
      return reduce(RULE_30, 9);
    case 109:
      return reduce(RULE_30, 9);
    case 101:
      return reduce(RULE_30, 9);
    case 107:
      return reduce(RULE_30, 9);
    case 66:
      return reduce(RULE_30, 9);
    case 68:
      return reduce(RULE_30, 9);
    case 108:
      return reduce(RULE_30, 9);
    case 90:
      return reduce(RULE_30, 9);
    case 102:
      return reduce(RULE_30, 9);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action413(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 2);
    case 63:
      return reduce(RULE_30, 2);
    case 78:
      return reduce(RULE_30, 2);
    case 70:
      return reduce(RULE_30, 2);
    case 106:
      return reduce(RULE_30, 2);
    case 97:
      return reduce(RULE_30, 2);
    case 109:
      return reduce(RULE_30, 2);
    case 101:
      return reduce(RULE_30, 2);
    case 107:
      return reduce(RULE_30, 2);
    case 66:
      return reduce(RULE_30, 2);
    case 68:
      return reduce(RULE_30, 2);
    case 108:
      return reduce(RULE_30, 2);
    case 90:
      return reduce(RULE_30, 2);
    case 102:
      return reduce(RULE_30, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto413(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action414(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 1);
    case 63:
      return reduce(RULE_30, 1);
    case 78:
      return reduce(RULE_30, 1);
    case 70:
      return reduce(RULE_30, 1);
    case 106:
      return reduce(RULE_30, 1);
    case 97:
      return reduce(RULE_30, 1);
    case 109:
      return reduce(RULE_30, 1);
    case 101:
      return reduce(RULE_30, 1);
    case 107:
      return reduce(RULE_30, 1);
    case 66:
      return reduce(RULE_30, 1);
    case 68:
      return reduce(RULE_30, 1);
    case 108:
      return reduce(RULE_30, 1);
    case 90:
      return reduce(RULE_30, 1);
    case 102:
      return reduce(RULE_30, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action415(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 18);
    case 63:
      return reduce(RULE_30, 18);
    case 78:
      return reduce(RULE_30, 18);
    case 70:
      return reduce(RULE_30, 18);
    case 106:
      return reduce(RULE_30, 18);
    case 97:
      return reduce(RULE_30, 18);
    case 109:
      return reduce(RULE_30, 18);
    case 101:
      return reduce(RULE_30, 18);
    case 107:
      return reduce(RULE_30, 18);
    case 66:
      return reduce(RULE_30, 18);
    case 68:
      return reduce(RULE_30, 18);
    case 108:
      return reduce(RULE_30, 18);
    case 90:
      return reduce(RULE_30, 18);
    case 102:
      return reduce(RULE_30, 18);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto415(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action416(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 17);
    case 63:
      return reduce(RULE_30, 17);
    case 78:
      return reduce(RULE_30, 17);
    case 70:
      return reduce(RULE_30, 17);
    case 106:
      return reduce(RULE_30, 17);
    case 97:
      return reduce(RULE_30, 17);
    case 109:
      return reduce(RULE_30, 17);
    case 101:
      return reduce(RULE_30, 17);
    case 107:
      return reduce(RULE_30, 17);
    case 66:
      return reduce(RULE_30, 17);
    case 68:
      return reduce(RULE_30, 17);
    case 108:
      return reduce(RULE_30, 17);
    case 90:
      return reduce(RULE_30, 17);
    case 102:
      return reduce(RULE_30, 17);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action417(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 14);
    case 63:
      return reduce(RULE_30, 14);
    case 78:
      return reduce(RULE_30, 14);
    case 70:
      return reduce(RULE_30, 14);
    case 106:
      return reduce(RULE_30, 14);
    case 97:
      return reduce(RULE_30, 14);
    case 109:
      return reduce(RULE_30, 14);
    case 101:
      return reduce(RULE_30, 14);
    case 107:
      return reduce(RULE_30, 14);
    case 66:
      return reduce(RULE_30, 14);
    case 68:
      return reduce(RULE_30, 14);
    case 108:
      return reduce(RULE_30, 14);
    case 90:
      return reduce(RULE_30, 14);
    case 102:
      return reduce(RULE_30, 14);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto417(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action418(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 13);
    case 63:
      return reduce(RULE_30, 13);
    case 78:
      return reduce(RULE_30, 13);
    case 70:
      return reduce(RULE_30, 13);
    case 106:
      return reduce(RULE_30, 13);
    case 97:
      return reduce(RULE_30, 13);
    case 109:
      return reduce(RULE_30, 13);
    case 101:
      return reduce(RULE_30, 13);
    case 107:
      return reduce(RULE_30, 13);
    case 66:
      return reduce(RULE_30, 13);
    case 68:
      return reduce(RULE_30, 13);
    case 108:
      return reduce(RULE_30, 13);
    case 90:
      return reduce(RULE_30, 13);
    case 102:
      return reduce(RULE_30, 13);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action419(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 63:
      stateStack.addFirst(295);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(296);
      tokenStack.addFirst(token);
      return true;
    case 70:
      stateStack.addFirst(297);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 97:
      stateStack.addFirst(300);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(301);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 66:
      stateStack.addFirst(305);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_27, 6);
    case 69:
      return reduce(RULE_27, 6);
    case 107:
      return reduce(RULE_27, 6);
    case 68:
      return reduce(RULE_27, 6);
    case 108:
      return reduce(RULE_27, 6);
    case 90:
      return reduce(RULE_27, 6);
    case 106:
      return reduce(RULE_27, 6);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto419(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action420(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_27, 5);
    case 69:
      return reduce(RULE_27, 5);
    case 107:
      return reduce(RULE_27, 5);
    case 68:
      return reduce(RULE_27, 5);
    case 108:
      return reduce(RULE_27, 5);
    case 90:
      return reduce(RULE_27, 5);
    case 106:
      return reduce(RULE_27, 5);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COMMA, COLON, RSQUARE, LBRACE, RBRACE});
    }
  }

  private final boolean action421(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action422(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 13);
    case 76:
      return reduce(RULE_13, 13);
    case 63:
      return reduce(RULE_13, 13);
    case 78:
      return reduce(RULE_13, 13);
    case 103:
      return reduce(RULE_13, 13);
    case 82:
      return reduce(RULE_13, 13);
    case 85:
      return reduce(RULE_13, 13);
    case 104:
      return reduce(RULE_13, 13);
    case 72:
      return reduce(RULE_13, 13);
    case 86:
      return reduce(RULE_13, 13);
    case 90:
      return reduce(RULE_13, 13);
    case 99:
      return reduce(RULE_13, 13);
    case 88:
      return reduce(RULE_13, 13);
    case 95:
      return reduce(RULE_13, 13);
    case 69:
      return reduce(RULE_13, 13);
    case 70:
      return reduce(RULE_13, 13);
    case 89:
      return reduce(RULE_13, 13);
    case 106:
      return reduce(RULE_13, 13);
    case 97:
      return reduce(RULE_13, 13);
    case 109:
      return reduce(RULE_13, 13);
    case 101:
      return reduce(RULE_13, 13);
    case 84:
      return reduce(RULE_13, 13);
    case 80:
      return reduce(RULE_13, 13);
    case 110:
      return reduce(RULE_13, 13);
    case 66:
      return reduce(RULE_13, 13);
    case 107:
      return reduce(RULE_13, 13);
    case 91:
      return reduce(RULE_13, 13);
    case 92:
      return reduce(RULE_13, 13);
    case 73:
      return reduce(RULE_13, 13);
    case 68:
      return reduce(RULE_13, 13);
    case 108:
      return reduce(RULE_13, 13);
    case 102:
      return reduce(RULE_13, 13);
    case 93:
      return reduce(RULE_13, 13);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, RPAREN, CARET, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action423(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 24);
    case 63:
      return reduce(RULE_35, 24);
    case 78:
      return reduce(RULE_35, 24);
    case 70:
      return reduce(RULE_35, 24);
    case 106:
      return reduce(RULE_35, 24);
    case 97:
      return reduce(RULE_35, 24);
    case 109:
      return reduce(RULE_35, 24);
    case 101:
      return reduce(RULE_35, 24);
    case 107:
      return reduce(RULE_35, 24);
    case 66:
      return reduce(RULE_35, 24);
    case 68:
      return reduce(RULE_35, 24);
    case 108:
      return reduce(RULE_35, 24);
    case 90:
      return reduce(RULE_35, 24);
    case 102:
      return reduce(RULE_35, 24);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto423(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action424(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 23);
    case 63:
      return reduce(RULE_35, 23);
    case 78:
      return reduce(RULE_35, 23);
    case 70:
      return reduce(RULE_35, 23);
    case 106:
      return reduce(RULE_35, 23);
    case 97:
      return reduce(RULE_35, 23);
    case 109:
      return reduce(RULE_35, 23);
    case 101:
      return reduce(RULE_35, 23);
    case 107:
      return reduce(RULE_35, 23);
    case 66:
      return reduce(RULE_35, 23);
    case 68:
      return reduce(RULE_35, 23);
    case 108:
      return reduce(RULE_35, 23);
    case 90:
      return reduce(RULE_35, 23);
    case 102:
      return reduce(RULE_35, 23);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action425(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_36, 4);
    case 99:
      return reduce(RULE_36, 4);
    case 88:
      return reduce(RULE_36, 4);
    case 63:
      return reduce(RULE_36, 4);
    case 69:
      return reduce(RULE_36, 4);
    case 78:
      return reduce(RULE_36, 4);
    case 70:
      return reduce(RULE_36, 4);
    case 89:
      return reduce(RULE_36, 4);
    case 85:
      return reduce(RULE_36, 4);
    case 106:
      return reduce(RULE_36, 4);
    case 97:
      return reduce(RULE_36, 4);
    case 101:
      return reduce(RULE_36, 4);
    case 109:
      return reduce(RULE_36, 4);
    case 66:
      return reduce(RULE_36, 4);
    case 104:
      return reduce(RULE_36, 4);
    case 107:
      return reduce(RULE_36, 4);
    case 72:
      return reduce(RULE_36, 4);
    case 68:
      return reduce(RULE_36, 4);
    case 108:
      return reduce(RULE_36, 4);
    case 102:
      return reduce(RULE_36, 4);
    case 90:
      return reduce(RULE_36, 4);
    case 93:
      return reduce(RULE_36, 4);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto425(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action426(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 95:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(333);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_36, 3);
    case 99:
      return reduce(RULE_36, 3);
    case 88:
      return reduce(RULE_36, 3);
    case 63:
      return reduce(RULE_36, 3);
    case 69:
      return reduce(RULE_36, 3);
    case 78:
      return reduce(RULE_36, 3);
    case 70:
      return reduce(RULE_36, 3);
    case 89:
      return reduce(RULE_36, 3);
    case 85:
      return reduce(RULE_36, 3);
    case 106:
      return reduce(RULE_36, 3);
    case 97:
      return reduce(RULE_36, 3);
    case 101:
      return reduce(RULE_36, 3);
    case 109:
      return reduce(RULE_36, 3);
    case 66:
      return reduce(RULE_36, 3);
    case 104:
      return reduce(RULE_36, 3);
    case 107:
      return reduce(RULE_36, 3);
    case 72:
      return reduce(RULE_36, 3);
    case 68:
      return reduce(RULE_36, 3);
    case 108:
      return reduce(RULE_36, 3);
    case 102:
      return reduce(RULE_36, 3);
    case 90:
      return reduce(RULE_36, 3);
    case 93:
      return reduce(RULE_36, 3);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, STAR, CARET, RPAREN, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action427(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 12);
    case 76:
      return reduce(RULE_31, 12);
    case 63:
      return reduce(RULE_31, 12);
    case 78:
      return reduce(RULE_31, 12);
    case 85:
      return reduce(RULE_31, 12);
    case 104:
      return reduce(RULE_31, 12);
    case 72:
      return reduce(RULE_31, 12);
    case 86:
      return reduce(RULE_31, 12);
    case 90:
      return reduce(RULE_31, 12);
    case 99:
      return reduce(RULE_31, 12);
    case 88:
      return reduce(RULE_31, 12);
    case 95:
      return reduce(RULE_31, 12);
    case 69:
      return reduce(RULE_31, 12);
    case 70:
      return reduce(RULE_31, 12);
    case 89:
      return reduce(RULE_31, 12);
    case 106:
      return reduce(RULE_31, 12);
    case 97:
      return reduce(RULE_31, 12);
    case 109:
      return reduce(RULE_31, 12);
    case 101:
      return reduce(RULE_31, 12);
    case 107:
      return reduce(RULE_31, 12);
    case 110:
      return reduce(RULE_31, 12);
    case 66:
      return reduce(RULE_31, 12);
    case 68:
      return reduce(RULE_31, 12);
    case 108:
      return reduce(RULE_31, 12);
    case 93:
      return reduce(RULE_31, 12);
    case 102:
      return reduce(RULE_31, 12);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, RPAREN, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto427(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action428(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 80:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 11);
    case 76:
      return reduce(RULE_31, 11);
    case 63:
      return reduce(RULE_31, 11);
    case 78:
      return reduce(RULE_31, 11);
    case 85:
      return reduce(RULE_31, 11);
    case 104:
      return reduce(RULE_31, 11);
    case 72:
      return reduce(RULE_31, 11);
    case 86:
      return reduce(RULE_31, 11);
    case 90:
      return reduce(RULE_31, 11);
    case 99:
      return reduce(RULE_31, 11);
    case 88:
      return reduce(RULE_31, 11);
    case 95:
      return reduce(RULE_31, 11);
    case 69:
      return reduce(RULE_31, 11);
    case 70:
      return reduce(RULE_31, 11);
    case 89:
      return reduce(RULE_31, 11);
    case 106:
      return reduce(RULE_31, 11);
    case 97:
      return reduce(RULE_31, 11);
    case 109:
      return reduce(RULE_31, 11);
    case 101:
      return reduce(RULE_31, 11);
    case 107:
      return reduce(RULE_31, 11);
    case 110:
      return reduce(RULE_31, 11);
    case 66:
      return reduce(RULE_31, 11);
    case 68:
      return reduce(RULE_31, 11);
    case 108:
      return reduce(RULE_31, 11);
    case 93:
      return reduce(RULE_31, 11);
    case 102:
      return reduce(RULE_31, 11);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action429(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 12);
    case 63:
      return reduce(RULE_35, 12);
    case 78:
      return reduce(RULE_35, 12);
    case 70:
      return reduce(RULE_35, 12);
    case 106:
      return reduce(RULE_35, 12);
    case 97:
      return reduce(RULE_35, 12);
    case 109:
      return reduce(RULE_35, 12);
    case 101:
      return reduce(RULE_35, 12);
    case 107:
      return reduce(RULE_35, 12);
    case 66:
      return reduce(RULE_35, 12);
    case 68:
      return reduce(RULE_35, 12);
    case 108:
      return reduce(RULE_35, 12);
    case 90:
      return reduce(RULE_35, 12);
    case 102:
      return reduce(RULE_35, 12);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto429(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action430(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 11);
    case 63:
      return reduce(RULE_35, 11);
    case 78:
      return reduce(RULE_35, 11);
    case 70:
      return reduce(RULE_35, 11);
    case 106:
      return reduce(RULE_35, 11);
    case 97:
      return reduce(RULE_35, 11);
    case 109:
      return reduce(RULE_35, 11);
    case 101:
      return reduce(RULE_35, 11);
    case 107:
      return reduce(RULE_35, 11);
    case 66:
      return reduce(RULE_35, 11);
    case 68:
      return reduce(RULE_35, 11);
    case 108:
      return reduce(RULE_35, 11);
    case 90:
      return reduce(RULE_35, 11);
    case 102:
      return reduce(RULE_35, 11);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action431(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 16);
    case 76:
      return reduce(RULE_31, 16);
    case 63:
      return reduce(RULE_31, 16);
    case 78:
      return reduce(RULE_31, 16);
    case 85:
      return reduce(RULE_31, 16);
    case 104:
      return reduce(RULE_31, 16);
    case 72:
      return reduce(RULE_31, 16);
    case 86:
      return reduce(RULE_31, 16);
    case 90:
      return reduce(RULE_31, 16);
    case 99:
      return reduce(RULE_31, 16);
    case 88:
      return reduce(RULE_31, 16);
    case 95:
      return reduce(RULE_31, 16);
    case 69:
      return reduce(RULE_31, 16);
    case 70:
      return reduce(RULE_31, 16);
    case 89:
      return reduce(RULE_31, 16);
    case 106:
      return reduce(RULE_31, 16);
    case 97:
      return reduce(RULE_31, 16);
    case 109:
      return reduce(RULE_31, 16);
    case 101:
      return reduce(RULE_31, 16);
    case 107:
      return reduce(RULE_31, 16);
    case 110:
      return reduce(RULE_31, 16);
    case 66:
      return reduce(RULE_31, 16);
    case 68:
      return reduce(RULE_31, 16);
    case 108:
      return reduce(RULE_31, 16);
    case 93:
      return reduce(RULE_31, 16);
    case 102:
      return reduce(RULE_31, 16);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, RPAREN, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto431(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action432(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 80:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 15);
    case 76:
      return reduce(RULE_31, 15);
    case 63:
      return reduce(RULE_31, 15);
    case 78:
      return reduce(RULE_31, 15);
    case 85:
      return reduce(RULE_31, 15);
    case 104:
      return reduce(RULE_31, 15);
    case 72:
      return reduce(RULE_31, 15);
    case 86:
      return reduce(RULE_31, 15);
    case 90:
      return reduce(RULE_31, 15);
    case 99:
      return reduce(RULE_31, 15);
    case 88:
      return reduce(RULE_31, 15);
    case 95:
      return reduce(RULE_31, 15);
    case 69:
      return reduce(RULE_31, 15);
    case 70:
      return reduce(RULE_31, 15);
    case 89:
      return reduce(RULE_31, 15);
    case 106:
      return reduce(RULE_31, 15);
    case 97:
      return reduce(RULE_31, 15);
    case 109:
      return reduce(RULE_31, 15);
    case 101:
      return reduce(RULE_31, 15);
    case 107:
      return reduce(RULE_31, 15);
    case 110:
      return reduce(RULE_31, 15);
    case 66:
      return reduce(RULE_31, 15);
    case 68:
      return reduce(RULE_31, 15);
    case 108:
      return reduce(RULE_31, 15);
    case 93:
      return reduce(RULE_31, 15);
    case 102:
      return reduce(RULE_31, 15);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action433(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 4);
    case 63:
      return reduce(RULE_30, 4);
    case 78:
      return reduce(RULE_30, 4);
    case 70:
      return reduce(RULE_30, 4);
    case 106:
      return reduce(RULE_30, 4);
    case 97:
      return reduce(RULE_30, 4);
    case 109:
      return reduce(RULE_30, 4);
    case 101:
      return reduce(RULE_30, 4);
    case 107:
      return reduce(RULE_30, 4);
    case 66:
      return reduce(RULE_30, 4);
    case 68:
      return reduce(RULE_30, 4);
    case 108:
      return reduce(RULE_30, 4);
    case 90:
      return reduce(RULE_30, 4);
    case 102:
      return reduce(RULE_30, 4);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto433(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action434(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 3);
    case 63:
      return reduce(RULE_30, 3);
    case 78:
      return reduce(RULE_30, 3);
    case 70:
      return reduce(RULE_30, 3);
    case 106:
      return reduce(RULE_30, 3);
    case 97:
      return reduce(RULE_30, 3);
    case 109:
      return reduce(RULE_30, 3);
    case 101:
      return reduce(RULE_30, 3);
    case 107:
      return reduce(RULE_30, 3);
    case 66:
      return reduce(RULE_30, 3);
    case 68:
      return reduce(RULE_30, 3);
    case 108:
      return reduce(RULE_30, 3);
    case 90:
      return reduce(RULE_30, 3);
    case 102:
      return reduce(RULE_30, 3);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action435(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 20);
    case 63:
      return reduce(RULE_30, 20);
    case 78:
      return reduce(RULE_30, 20);
    case 70:
      return reduce(RULE_30, 20);
    case 106:
      return reduce(RULE_30, 20);
    case 97:
      return reduce(RULE_30, 20);
    case 109:
      return reduce(RULE_30, 20);
    case 101:
      return reduce(RULE_30, 20);
    case 107:
      return reduce(RULE_30, 20);
    case 66:
      return reduce(RULE_30, 20);
    case 68:
      return reduce(RULE_30, 20);
    case 108:
      return reduce(RULE_30, 20);
    case 90:
      return reduce(RULE_30, 20);
    case 102:
      return reduce(RULE_30, 20);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto435(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action436(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 19);
    case 63:
      return reduce(RULE_30, 19);
    case 78:
      return reduce(RULE_30, 19);
    case 70:
      return reduce(RULE_30, 19);
    case 106:
      return reduce(RULE_30, 19);
    case 97:
      return reduce(RULE_30, 19);
    case 109:
      return reduce(RULE_30, 19);
    case 101:
      return reduce(RULE_30, 19);
    case 107:
      return reduce(RULE_30, 19);
    case 66:
      return reduce(RULE_30, 19);
    case 68:
      return reduce(RULE_30, 19);
    case 108:
      return reduce(RULE_30, 19);
    case 90:
      return reduce(RULE_30, 19);
    case 102:
      return reduce(RULE_30, 19);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action437(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 16);
    case 63:
      return reduce(RULE_30, 16);
    case 78:
      return reduce(RULE_30, 16);
    case 70:
      return reduce(RULE_30, 16);
    case 106:
      return reduce(RULE_30, 16);
    case 97:
      return reduce(RULE_30, 16);
    case 109:
      return reduce(RULE_30, 16);
    case 101:
      return reduce(RULE_30, 16);
    case 107:
      return reduce(RULE_30, 16);
    case 66:
      return reduce(RULE_30, 16);
    case 68:
      return reduce(RULE_30, 16);
    case 108:
      return reduce(RULE_30, 16);
    case 90:
      return reduce(RULE_30, 16);
    case 102:
      return reduce(RULE_30, 16);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto437(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action438(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 15);
    case 63:
      return reduce(RULE_30, 15);
    case 78:
      return reduce(RULE_30, 15);
    case 70:
      return reduce(RULE_30, 15);
    case 106:
      return reduce(RULE_30, 15);
    case 97:
      return reduce(RULE_30, 15);
    case 109:
      return reduce(RULE_30, 15);
    case 101:
      return reduce(RULE_30, 15);
    case 107:
      return reduce(RULE_30, 15);
    case 66:
      return reduce(RULE_30, 15);
    case 68:
      return reduce(RULE_30, 15);
    case 108:
      return reduce(RULE_30, 15);
    case 90:
      return reduce(RULE_30, 15);
    case 102:
      return reduce(RULE_30, 15);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action439(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 16);
    case 63:
      return reduce(RULE_35, 16);
    case 78:
      return reduce(RULE_35, 16);
    case 70:
      return reduce(RULE_35, 16);
    case 106:
      return reduce(RULE_35, 16);
    case 97:
      return reduce(RULE_35, 16);
    case 109:
      return reduce(RULE_35, 16);
    case 101:
      return reduce(RULE_35, 16);
    case 107:
      return reduce(RULE_35, 16);
    case 66:
      return reduce(RULE_35, 16);
    case 68:
      return reduce(RULE_35, 16);
    case 108:
      return reduce(RULE_35, 16);
    case 90:
      return reduce(RULE_35, 16);
    case 102:
      return reduce(RULE_35, 16);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto439(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action440(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 15);
    case 63:
      return reduce(RULE_35, 15);
    case 78:
      return reduce(RULE_35, 15);
    case 70:
      return reduce(RULE_35, 15);
    case 106:
      return reduce(RULE_35, 15);
    case 97:
      return reduce(RULE_35, 15);
    case 109:
      return reduce(RULE_35, 15);
    case 101:
      return reduce(RULE_35, 15);
    case 107:
      return reduce(RULE_35, 15);
    case 66:
      return reduce(RULE_35, 15);
    case 68:
      return reduce(RULE_35, 15);
    case 108:
      return reduce(RULE_35, 15);
    case 90:
      return reduce(RULE_35, 15);
    case 102:
      return reduce(RULE_35, 15);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action441(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 8);
    case 63:
      return reduce(RULE_35, 8);
    case 78:
      return reduce(RULE_35, 8);
    case 70:
      return reduce(RULE_35, 8);
    case 106:
      return reduce(RULE_35, 8);
    case 97:
      return reduce(RULE_35, 8);
    case 109:
      return reduce(RULE_35, 8);
    case 101:
      return reduce(RULE_35, 8);
    case 107:
      return reduce(RULE_35, 8);
    case 66:
      return reduce(RULE_35, 8);
    case 68:
      return reduce(RULE_35, 8);
    case 108:
      return reduce(RULE_35, 8);
    case 90:
      return reduce(RULE_35, 8);
    case 102:
      return reduce(RULE_35, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto441(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action442(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 7);
    case 63:
      return reduce(RULE_35, 7);
    case 78:
      return reduce(RULE_35, 7);
    case 70:
      return reduce(RULE_35, 7);
    case 106:
      return reduce(RULE_35, 7);
    case 97:
      return reduce(RULE_35, 7);
    case 109:
      return reduce(RULE_35, 7);
    case 101:
      return reduce(RULE_35, 7);
    case 107:
      return reduce(RULE_35, 7);
    case 66:
      return reduce(RULE_35, 7);
    case 68:
      return reduce(RULE_35, 7);
    case 108:
      return reduce(RULE_35, 7);
    case 90:
      return reduce(RULE_35, 7);
    case 102:
      return reduce(RULE_35, 7);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action443(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 8);
    case 63:
      return reduce(RULE_30, 8);
    case 78:
      return reduce(RULE_30, 8);
    case 70:
      return reduce(RULE_30, 8);
    case 106:
      return reduce(RULE_30, 8);
    case 97:
      return reduce(RULE_30, 8);
    case 109:
      return reduce(RULE_30, 8);
    case 101:
      return reduce(RULE_30, 8);
    case 107:
      return reduce(RULE_30, 8);
    case 66:
      return reduce(RULE_30, 8);
    case 68:
      return reduce(RULE_30, 8);
    case 108:
      return reduce(RULE_30, 8);
    case 90:
      return reduce(RULE_30, 8);
    case 102:
      return reduce(RULE_30, 8);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto443(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action444(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 7);
    case 63:
      return reduce(RULE_30, 7);
    case 78:
      return reduce(RULE_30, 7);
    case 70:
      return reduce(RULE_30, 7);
    case 106:
      return reduce(RULE_30, 7);
    case 97:
      return reduce(RULE_30, 7);
    case 109:
      return reduce(RULE_30, 7);
    case 101:
      return reduce(RULE_30, 7);
    case 107:
      return reduce(RULE_30, 7);
    case 66:
      return reduce(RULE_30, 7);
    case 68:
      return reduce(RULE_30, 7);
    case 108:
      return reduce(RULE_30, 7);
    case 90:
      return reduce(RULE_30, 7);
    case 102:
      return reduce(RULE_30, 7);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action445(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 68:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COLON});
    }
  }

  private final boolean action446(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_32, 2);
    case 63:
      return reduce(RULE_32, 2);
    case 76:
      return reduce(RULE_32, 2);
    case 78:
      return reduce(RULE_32, 2);
    case 85:
      return reduce(RULE_32, 2);
    case 104:
      return reduce(RULE_32, 2);
    case 72:
      return reduce(RULE_32, 2);
    case 86:
      return reduce(RULE_32, 2);
    case 90:
      return reduce(RULE_32, 2);
    case 99:
      return reduce(RULE_32, 2);
    case 95:
      return reduce(RULE_32, 2);
    case 88:
      return reduce(RULE_32, 2);
    case 69:
      return reduce(RULE_32, 2);
    case 70:
      return reduce(RULE_32, 2);
    case 89:
      return reduce(RULE_32, 2);
    case 106:
      return reduce(RULE_32, 2);
    case 97:
      return reduce(RULE_32, 2);
    case 109:
      return reduce(RULE_32, 2);
    case 101:
      return reduce(RULE_32, 2);
    case 84:
      return reduce(RULE_32, 2);
    case 80:
      return reduce(RULE_32, 2);
    case 107:
      return reduce(RULE_32, 2);
    case 66:
      return reduce(RULE_32, 2);
    case 110:
      return reduce(RULE_32, 2);
    case 73:
      return reduce(RULE_32, 2);
    case 68:
      return reduce(RULE_32, 2);
    case 108:
      return reduce(RULE_32, 2);
    case 102:
      return reduce(RULE_32, 2);
    case 93:
      return reduce(RULE_32, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action447(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_33, 7);
    case 63:
      return reduce(RULE_33, 7);
    case 76:
      return reduce(RULE_33, 7);
    case 78:
      return reduce(RULE_33, 7);
    case 85:
      return reduce(RULE_33, 7);
    case 104:
      return reduce(RULE_33, 7);
    case 72:
      return reduce(RULE_33, 7);
    case 86:
      return reduce(RULE_33, 7);
    case 90:
      return reduce(RULE_33, 7);
    case 99:
      return reduce(RULE_33, 7);
    case 95:
      return reduce(RULE_33, 7);
    case 88:
      return reduce(RULE_33, 7);
    case 69:
      return reduce(RULE_33, 7);
    case 70:
      return reduce(RULE_33, 7);
    case 89:
      return reduce(RULE_33, 7);
    case 106:
      return reduce(RULE_33, 7);
    case 97:
      return reduce(RULE_33, 7);
    case 101:
      return reduce(RULE_33, 7);
    case 109:
      return reduce(RULE_33, 7);
    case 80:
      return reduce(RULE_33, 7);
    case 107:
      return reduce(RULE_33, 7);
    case 66:
      return reduce(RULE_33, 7);
    case 110:
      return reduce(RULE_33, 7);
    case 73:
      return reduce(RULE_33, 7);
    case 68:
      return reduce(RULE_33, 7);
    case 108:
      return reduce(RULE_33, 7);
    case 102:
      return reduce(RULE_33, 7);
    case 93:
      return reduce(RULE_33, 7);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action448(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_33, 8);
    case 63:
      return reduce(RULE_33, 8);
    case 76:
      return reduce(RULE_33, 8);
    case 78:
      return reduce(RULE_33, 8);
    case 85:
      return reduce(RULE_33, 8);
    case 104:
      return reduce(RULE_33, 8);
    case 72:
      return reduce(RULE_33, 8);
    case 86:
      return reduce(RULE_33, 8);
    case 90:
      return reduce(RULE_33, 8);
    case 99:
      return reduce(RULE_33, 8);
    case 95:
      return reduce(RULE_33, 8);
    case 88:
      return reduce(RULE_33, 8);
    case 69:
      return reduce(RULE_33, 8);
    case 70:
      return reduce(RULE_33, 8);
    case 89:
      return reduce(RULE_33, 8);
    case 106:
      return reduce(RULE_33, 8);
    case 97:
      return reduce(RULE_33, 8);
    case 101:
      return reduce(RULE_33, 8);
    case 109:
      return reduce(RULE_33, 8);
    case 80:
      return reduce(RULE_33, 8);
    case 107:
      return reduce(RULE_33, 8);
    case 66:
      return reduce(RULE_33, 8);
    case 110:
      return reduce(RULE_33, 8);
    case 73:
      return reduce(RULE_33, 8);
    case 68:
      return reduce(RULE_33, 8);
    case 108:
      return reduce(RULE_33, 8);
    case 102:
      return reduce(RULE_33, 8);
    case 93:
      return reduce(RULE_33, 8);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, LPAREN, RPAREN, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto448(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action449(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 4);
    case 76:
      return reduce(RULE_31, 4);
    case 63:
      return reduce(RULE_31, 4);
    case 78:
      return reduce(RULE_31, 4);
    case 85:
      return reduce(RULE_31, 4);
    case 104:
      return reduce(RULE_31, 4);
    case 72:
      return reduce(RULE_31, 4);
    case 86:
      return reduce(RULE_31, 4);
    case 90:
      return reduce(RULE_31, 4);
    case 99:
      return reduce(RULE_31, 4);
    case 88:
      return reduce(RULE_31, 4);
    case 95:
      return reduce(RULE_31, 4);
    case 69:
      return reduce(RULE_31, 4);
    case 70:
      return reduce(RULE_31, 4);
    case 89:
      return reduce(RULE_31, 4);
    case 106:
      return reduce(RULE_31, 4);
    case 97:
      return reduce(RULE_31, 4);
    case 109:
      return reduce(RULE_31, 4);
    case 101:
      return reduce(RULE_31, 4);
    case 107:
      return reduce(RULE_31, 4);
    case 110:
      return reduce(RULE_31, 4);
    case 66:
      return reduce(RULE_31, 4);
    case 68:
      return reduce(RULE_31, 4);
    case 108:
      return reduce(RULE_31, 4);
    case 93:
      return reduce(RULE_31, 4);
    case 102:
      return reduce(RULE_31, 4);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, RPAREN, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto449(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action450(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 80:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 3);
    case 76:
      return reduce(RULE_31, 3);
    case 63:
      return reduce(RULE_31, 3);
    case 78:
      return reduce(RULE_31, 3);
    case 85:
      return reduce(RULE_31, 3);
    case 104:
      return reduce(RULE_31, 3);
    case 72:
      return reduce(RULE_31, 3);
    case 86:
      return reduce(RULE_31, 3);
    case 90:
      return reduce(RULE_31, 3);
    case 99:
      return reduce(RULE_31, 3);
    case 88:
      return reduce(RULE_31, 3);
    case 95:
      return reduce(RULE_31, 3);
    case 69:
      return reduce(RULE_31, 3);
    case 70:
      return reduce(RULE_31, 3);
    case 89:
      return reduce(RULE_31, 3);
    case 106:
      return reduce(RULE_31, 3);
    case 97:
      return reduce(RULE_31, 3);
    case 109:
      return reduce(RULE_31, 3);
    case 101:
      return reduce(RULE_31, 3);
    case 107:
      return reduce(RULE_31, 3);
    case 110:
      return reduce(RULE_31, 3);
    case 66:
      return reduce(RULE_31, 3);
    case 68:
      return reduce(RULE_31, 3);
    case 108:
      return reduce(RULE_31, 3);
    case 93:
      return reduce(RULE_31, 3);
    case 102:
      return reduce(RULE_31, 3);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action451(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_30, 12);
    case 63:
      return reduce(RULE_30, 12);
    case 78:
      return reduce(RULE_30, 12);
    case 70:
      return reduce(RULE_30, 12);
    case 106:
      return reduce(RULE_30, 12);
    case 97:
      return reduce(RULE_30, 12);
    case 109:
      return reduce(RULE_30, 12);
    case 101:
      return reduce(RULE_30, 12);
    case 107:
      return reduce(RULE_30, 12);
    case 66:
      return reduce(RULE_30, 12);
    case 68:
      return reduce(RULE_30, 12);
    case 108:
      return reduce(RULE_30, 12);
    case 90:
      return reduce(RULE_30, 12);
    case 102:
      return reduce(RULE_30, 12);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto451(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action452(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_30, 11);
    case 63:
      return reduce(RULE_30, 11);
    case 78:
      return reduce(RULE_30, 11);
    case 70:
      return reduce(RULE_30, 11);
    case 106:
      return reduce(RULE_30, 11);
    case 97:
      return reduce(RULE_30, 11);
    case 109:
      return reduce(RULE_30, 11);
    case 101:
      return reduce(RULE_30, 11);
    case 107:
      return reduce(RULE_30, 11);
    case 66:
      return reduce(RULE_30, 11);
    case 68:
      return reduce(RULE_30, 11);
    case 108:
      return reduce(RULE_30, 11);
    case 90:
      return reduce(RULE_30, 11);
    case 102:
      return reduce(RULE_30, 11);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE});
    }
  }

  private final boolean action453(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 20);
    case 63:
      return reduce(RULE_35, 20);
    case 78:
      return reduce(RULE_35, 20);
    case 70:
      return reduce(RULE_35, 20);
    case 106:
      return reduce(RULE_35, 20);
    case 97:
      return reduce(RULE_35, 20);
    case 109:
      return reduce(RULE_35, 20);
    case 101:
      return reduce(RULE_35, 20);
    case 107:
      return reduce(RULE_35, 20);
    case 66:
      return reduce(RULE_35, 20);
    case 68:
      return reduce(RULE_35, 20);
    case 108:
      return reduce(RULE_35, 20);
    case 90:
      return reduce(RULE_35, 20);
    case 102:
      return reduce(RULE_35, 20);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto453(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action454(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 19);
    case 63:
      return reduce(RULE_35, 19);
    case 78:
      return reduce(RULE_35, 19);
    case 70:
      return reduce(RULE_35, 19);
    case 106:
      return reduce(RULE_35, 19);
    case 97:
      return reduce(RULE_35, 19);
    case 109:
      return reduce(RULE_35, 19);
    case 101:
      return reduce(RULE_35, 19);
    case 107:
      return reduce(RULE_35, 19);
    case 66:
      return reduce(RULE_35, 19);
    case 68:
      return reduce(RULE_35, 19);
    case 108:
      return reduce(RULE_35, 19);
    case 90:
      return reduce(RULE_35, 19);
    case 102:
      return reduce(RULE_35, 19);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action455(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_33, 3);
    case 63:
      return reduce(RULE_33, 3);
    case 76:
      return reduce(RULE_33, 3);
    case 78:
      return reduce(RULE_33, 3);
    case 85:
      return reduce(RULE_33, 3);
    case 104:
      return reduce(RULE_33, 3);
    case 72:
      return reduce(RULE_33, 3);
    case 86:
      return reduce(RULE_33, 3);
    case 90:
      return reduce(RULE_33, 3);
    case 99:
      return reduce(RULE_33, 3);
    case 95:
      return reduce(RULE_33, 3);
    case 88:
      return reduce(RULE_33, 3);
    case 69:
      return reduce(RULE_33, 3);
    case 70:
      return reduce(RULE_33, 3);
    case 89:
      return reduce(RULE_33, 3);
    case 106:
      return reduce(RULE_33, 3);
    case 97:
      return reduce(RULE_33, 3);
    case 101:
      return reduce(RULE_33, 3);
    case 109:
      return reduce(RULE_33, 3);
    case 80:
      return reduce(RULE_33, 3);
    case 107:
      return reduce(RULE_33, 3);
    case 66:
      return reduce(RULE_33, 3);
    case 110:
      return reduce(RULE_33, 3);
    case 73:
      return reduce(RULE_33, 3);
    case 68:
      return reduce(RULE_33, 3);
    case 108:
      return reduce(RULE_33, 3);
    case 102:
      return reduce(RULE_33, 3);
    case 93:
      return reduce(RULE_33, 3);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action456(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_33, 4);
    case 63:
      return reduce(RULE_33, 4);
    case 76:
      return reduce(RULE_33, 4);
    case 78:
      return reduce(RULE_33, 4);
    case 85:
      return reduce(RULE_33, 4);
    case 104:
      return reduce(RULE_33, 4);
    case 72:
      return reduce(RULE_33, 4);
    case 86:
      return reduce(RULE_33, 4);
    case 90:
      return reduce(RULE_33, 4);
    case 99:
      return reduce(RULE_33, 4);
    case 95:
      return reduce(RULE_33, 4);
    case 88:
      return reduce(RULE_33, 4);
    case 69:
      return reduce(RULE_33, 4);
    case 70:
      return reduce(RULE_33, 4);
    case 89:
      return reduce(RULE_33, 4);
    case 106:
      return reduce(RULE_33, 4);
    case 97:
      return reduce(RULE_33, 4);
    case 101:
      return reduce(RULE_33, 4);
    case 109:
      return reduce(RULE_33, 4);
    case 80:
      return reduce(RULE_33, 4);
    case 107:
      return reduce(RULE_33, 4);
    case 66:
      return reduce(RULE_33, 4);
    case 110:
      return reduce(RULE_33, 4);
    case 73:
      return reduce(RULE_33, 4);
    case 68:
      return reduce(RULE_33, 4);
    case 108:
      return reduce(RULE_33, 4);
    case 102:
      return reduce(RULE_33, 4);
    case 93:
      return reduce(RULE_33, 4);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, LPAREN, RPAREN, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto456(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action457(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 4);
    case 63:
      return reduce(RULE_35, 4);
    case 78:
      return reduce(RULE_35, 4);
    case 70:
      return reduce(RULE_35, 4);
    case 106:
      return reduce(RULE_35, 4);
    case 97:
      return reduce(RULE_35, 4);
    case 109:
      return reduce(RULE_35, 4);
    case 101:
      return reduce(RULE_35, 4);
    case 107:
      return reduce(RULE_35, 4);
    case 66:
      return reduce(RULE_35, 4);
    case 68:
      return reduce(RULE_35, 4);
    case 108:
      return reduce(RULE_35, 4);
    case 90:
      return reduce(RULE_35, 4);
    case 102:
      return reduce(RULE_35, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto457(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action458(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 3);
    case 63:
      return reduce(RULE_35, 3);
    case 78:
      return reduce(RULE_35, 3);
    case 70:
      return reduce(RULE_35, 3);
    case 106:
      return reduce(RULE_35, 3);
    case 97:
      return reduce(RULE_35, 3);
    case 109:
      return reduce(RULE_35, 3);
    case 101:
      return reduce(RULE_35, 3);
    case 107:
      return reduce(RULE_35, 3);
    case 66:
      return reduce(RULE_35, 3);
    case 68:
      return reduce(RULE_35, 3);
    case 108:
      return reduce(RULE_35, 3);
    case 90:
      return reduce(RULE_35, 3);
    case 102:
      return reduce(RULE_35, 3);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action459(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 8);
    case 76:
      return reduce(RULE_31, 8);
    case 63:
      return reduce(RULE_31, 8);
    case 78:
      return reduce(RULE_31, 8);
    case 85:
      return reduce(RULE_31, 8);
    case 104:
      return reduce(RULE_31, 8);
    case 72:
      return reduce(RULE_31, 8);
    case 86:
      return reduce(RULE_31, 8);
    case 90:
      return reduce(RULE_31, 8);
    case 99:
      return reduce(RULE_31, 8);
    case 88:
      return reduce(RULE_31, 8);
    case 95:
      return reduce(RULE_31, 8);
    case 69:
      return reduce(RULE_31, 8);
    case 70:
      return reduce(RULE_31, 8);
    case 89:
      return reduce(RULE_31, 8);
    case 106:
      return reduce(RULE_31, 8);
    case 97:
      return reduce(RULE_31, 8);
    case 109:
      return reduce(RULE_31, 8);
    case 101:
      return reduce(RULE_31, 8);
    case 107:
      return reduce(RULE_31, 8);
    case 110:
      return reduce(RULE_31, 8);
    case 66:
      return reduce(RULE_31, 8);
    case 68:
      return reduce(RULE_31, 8);
    case 108:
      return reduce(RULE_31, 8);
    case 93:
      return reduce(RULE_31, 8);
    case 102:
      return reduce(RULE_31, 8);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, RPAREN, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto459(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action460(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 80:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 7);
    case 76:
      return reduce(RULE_31, 7);
    case 63:
      return reduce(RULE_31, 7);
    case 78:
      return reduce(RULE_31, 7);
    case 85:
      return reduce(RULE_31, 7);
    case 104:
      return reduce(RULE_31, 7);
    case 72:
      return reduce(RULE_31, 7);
    case 86:
      return reduce(RULE_31, 7);
    case 90:
      return reduce(RULE_31, 7);
    case 99:
      return reduce(RULE_31, 7);
    case 88:
      return reduce(RULE_31, 7);
    case 95:
      return reduce(RULE_31, 7);
    case 69:
      return reduce(RULE_31, 7);
    case 70:
      return reduce(RULE_31, 7);
    case 89:
      return reduce(RULE_31, 7);
    case 106:
      return reduce(RULE_31, 7);
    case 97:
      return reduce(RULE_31, 7);
    case 109:
      return reduce(RULE_31, 7);
    case 101:
      return reduce(RULE_31, 7);
    case 107:
      return reduce(RULE_31, 7);
    case 110:
      return reduce(RULE_31, 7);
    case 66:
      return reduce(RULE_31, 7);
    case 68:
      return reduce(RULE_31, 7);
    case 108:
      return reduce(RULE_31, 7);
    case 93:
      return reduce(RULE_31, 7);
    case 102:
      return reduce(RULE_31, 7);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action461(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_36, 8);
    case 99:
      return reduce(RULE_36, 8);
    case 88:
      return reduce(RULE_36, 8);
    case 63:
      return reduce(RULE_36, 8);
    case 69:
      return reduce(RULE_36, 8);
    case 78:
      return reduce(RULE_36, 8);
    case 70:
      return reduce(RULE_36, 8);
    case 89:
      return reduce(RULE_36, 8);
    case 85:
      return reduce(RULE_36, 8);
    case 106:
      return reduce(RULE_36, 8);
    case 97:
      return reduce(RULE_36, 8);
    case 101:
      return reduce(RULE_36, 8);
    case 109:
      return reduce(RULE_36, 8);
    case 66:
      return reduce(RULE_36, 8);
    case 104:
      return reduce(RULE_36, 8);
    case 107:
      return reduce(RULE_36, 8);
    case 72:
      return reduce(RULE_36, 8);
    case 68:
      return reduce(RULE_36, 8);
    case 108:
      return reduce(RULE_36, 8);
    case 102:
      return reduce(RULE_36, 8);
    case 90:
      return reduce(RULE_36, 8);
    case 93:
      return reduce(RULE_36, 8);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto461(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action462(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 95:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(333);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_36, 7);
    case 99:
      return reduce(RULE_36, 7);
    case 88:
      return reduce(RULE_36, 7);
    case 63:
      return reduce(RULE_36, 7);
    case 69:
      return reduce(RULE_36, 7);
    case 78:
      return reduce(RULE_36, 7);
    case 70:
      return reduce(RULE_36, 7);
    case 89:
      return reduce(RULE_36, 7);
    case 85:
      return reduce(RULE_36, 7);
    case 106:
      return reduce(RULE_36, 7);
    case 97:
      return reduce(RULE_36, 7);
    case 101:
      return reduce(RULE_36, 7);
    case 109:
      return reduce(RULE_36, 7);
    case 66:
      return reduce(RULE_36, 7);
    case 104:
      return reduce(RULE_36, 7);
    case 107:
      return reduce(RULE_36, 7);
    case 72:
      return reduce(RULE_36, 7);
    case 68:
      return reduce(RULE_36, 7);
    case 108:
      return reduce(RULE_36, 7);
    case 102:
      return reduce(RULE_36, 7);
    case 90:
      return reduce(RULE_36, 7);
    case 93:
      return reduce(RULE_36, 7);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, STAR, CARET, RPAREN, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action463(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 63:
      stateStack.addFirst(295);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(296);
      tokenStack.addFirst(token);
      return true;
    case 70:
      stateStack.addFirst(297);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 97:
      stateStack.addFirst(300);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(301);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 66:
      stateStack.addFirst(305);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_27, 8);
    case 69:
      return reduce(RULE_27, 8);
    case 107:
      return reduce(RULE_27, 8);
    case 68:
      return reduce(RULE_27, 8);
    case 108:
      return reduce(RULE_27, 8);
    case 90:
      return reduce(RULE_27, 8);
    case 106:
      return reduce(RULE_27, 8);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto463(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action464(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_27, 7);
    case 69:
      return reduce(RULE_27, 7);
    case 107:
      return reduce(RULE_27, 7);
    case 68:
      return reduce(RULE_27, 7);
    case 108:
      return reduce(RULE_27, 7);
    case 90:
      return reduce(RULE_27, 7);
    case 106:
      return reduce(RULE_27, 7);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COMMA, COLON, RSQUARE, LBRACE, RBRACE});
    }
  }

  private final boolean action465(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_34, 0);
    case 107:
      return reduce(RULE_34, 0);
    case 68:
      return reduce(RULE_34, 0);
    case 108:
      return reduce(RULE_34, 0);
    case 90:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COLON, RSQUARE, LBRACE});
    }
  }

  private final boolean action466(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action467(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_33, 5);
    case 63:
      return reduce(RULE_33, 5);
    case 76:
      return reduce(RULE_33, 5);
    case 78:
      return reduce(RULE_33, 5);
    case 85:
      return reduce(RULE_33, 5);
    case 104:
      return reduce(RULE_33, 5);
    case 72:
      return reduce(RULE_33, 5);
    case 86:
      return reduce(RULE_33, 5);
    case 90:
      return reduce(RULE_33, 5);
    case 99:
      return reduce(RULE_33, 5);
    case 95:
      return reduce(RULE_33, 5);
    case 88:
      return reduce(RULE_33, 5);
    case 69:
      return reduce(RULE_33, 5);
    case 70:
      return reduce(RULE_33, 5);
    case 89:
      return reduce(RULE_33, 5);
    case 106:
      return reduce(RULE_33, 5);
    case 97:
      return reduce(RULE_33, 5);
    case 101:
      return reduce(RULE_33, 5);
    case 109:
      return reduce(RULE_33, 5);
    case 80:
      return reduce(RULE_33, 5);
    case 107:
      return reduce(RULE_33, 5);
    case 66:
      return reduce(RULE_33, 5);
    case 110:
      return reduce(RULE_33, 5);
    case 73:
      return reduce(RULE_33, 5);
    case 68:
      return reduce(RULE_33, 5);
    case 108:
      return reduce(RULE_33, 5);
    case 102:
      return reduce(RULE_33, 5);
    case 93:
      return reduce(RULE_33, 5);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action468(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_33, 6);
    case 63:
      return reduce(RULE_33, 6);
    case 76:
      return reduce(RULE_33, 6);
    case 78:
      return reduce(RULE_33, 6);
    case 85:
      return reduce(RULE_33, 6);
    case 104:
      return reduce(RULE_33, 6);
    case 72:
      return reduce(RULE_33, 6);
    case 86:
      return reduce(RULE_33, 6);
    case 90:
      return reduce(RULE_33, 6);
    case 99:
      return reduce(RULE_33, 6);
    case 95:
      return reduce(RULE_33, 6);
    case 88:
      return reduce(RULE_33, 6);
    case 69:
      return reduce(RULE_33, 6);
    case 70:
      return reduce(RULE_33, 6);
    case 89:
      return reduce(RULE_33, 6);
    case 106:
      return reduce(RULE_33, 6);
    case 97:
      return reduce(RULE_33, 6);
    case 101:
      return reduce(RULE_33, 6);
    case 109:
      return reduce(RULE_33, 6);
    case 80:
      return reduce(RULE_33, 6);
    case 107:
      return reduce(RULE_33, 6);
    case 66:
      return reduce(RULE_33, 6);
    case 110:
      return reduce(RULE_33, 6);
    case 73:
      return reduce(RULE_33, 6);
    case 68:
      return reduce(RULE_33, 6);
    case 108:
      return reduce(RULE_33, 6);
    case 102:
      return reduce(RULE_33, 6);
    case 93:
      return reduce(RULE_33, 6);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, LPAREN, RPAREN, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto468(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action469(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_33, 1);
    case 63:
      return reduce(RULE_33, 1);
    case 76:
      return reduce(RULE_33, 1);
    case 78:
      return reduce(RULE_33, 1);
    case 85:
      return reduce(RULE_33, 1);
    case 104:
      return reduce(RULE_33, 1);
    case 72:
      return reduce(RULE_33, 1);
    case 86:
      return reduce(RULE_33, 1);
    case 90:
      return reduce(RULE_33, 1);
    case 99:
      return reduce(RULE_33, 1);
    case 95:
      return reduce(RULE_33, 1);
    case 88:
      return reduce(RULE_33, 1);
    case 69:
      return reduce(RULE_33, 1);
    case 70:
      return reduce(RULE_33, 1);
    case 89:
      return reduce(RULE_33, 1);
    case 106:
      return reduce(RULE_33, 1);
    case 97:
      return reduce(RULE_33, 1);
    case 101:
      return reduce(RULE_33, 1);
    case 109:
      return reduce(RULE_33, 1);
    case 80:
      return reduce(RULE_33, 1);
    case 107:
      return reduce(RULE_33, 1);
    case 66:
      return reduce(RULE_33, 1);
    case 110:
      return reduce(RULE_33, 1);
    case 73:
      return reduce(RULE_33, 1);
    case 68:
      return reduce(RULE_33, 1);
    case 108:
      return reduce(RULE_33, 1);
    case 102:
      return reduce(RULE_33, 1);
    case 93:
      return reduce(RULE_33, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action470(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_33, 2);
    case 63:
      return reduce(RULE_33, 2);
    case 76:
      return reduce(RULE_33, 2);
    case 78:
      return reduce(RULE_33, 2);
    case 85:
      return reduce(RULE_33, 2);
    case 104:
      return reduce(RULE_33, 2);
    case 72:
      return reduce(RULE_33, 2);
    case 86:
      return reduce(RULE_33, 2);
    case 90:
      return reduce(RULE_33, 2);
    case 99:
      return reduce(RULE_33, 2);
    case 95:
      return reduce(RULE_33, 2);
    case 88:
      return reduce(RULE_33, 2);
    case 69:
      return reduce(RULE_33, 2);
    case 70:
      return reduce(RULE_33, 2);
    case 89:
      return reduce(RULE_33, 2);
    case 106:
      return reduce(RULE_33, 2);
    case 97:
      return reduce(RULE_33, 2);
    case 101:
      return reduce(RULE_33, 2);
    case 109:
      return reduce(RULE_33, 2);
    case 80:
      return reduce(RULE_33, 2);
    case 107:
      return reduce(RULE_33, 2);
    case 66:
      return reduce(RULE_33, 2);
    case 110:
      return reduce(RULE_33, 2);
    case 73:
      return reduce(RULE_33, 2);
    case 68:
      return reduce(RULE_33, 2);
    case 108:
      return reduce(RULE_33, 2);
    case 102:
      return reduce(RULE_33, 2);
    case 93:
      return reduce(RULE_33, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, LPAREN, RPAREN, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto470(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action471(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 10);
    case 76:
      return reduce(RULE_13, 10);
    case 63:
      return reduce(RULE_13, 10);
    case 78:
      return reduce(RULE_13, 10);
    case 103:
      return reduce(RULE_13, 10);
    case 82:
      return reduce(RULE_13, 10);
    case 85:
      return reduce(RULE_13, 10);
    case 104:
      return reduce(RULE_13, 10);
    case 72:
      return reduce(RULE_13, 10);
    case 86:
      return reduce(RULE_13, 10);
    case 90:
      return reduce(RULE_13, 10);
    case 99:
      return reduce(RULE_13, 10);
    case 88:
      return reduce(RULE_13, 10);
    case 95:
      return reduce(RULE_13, 10);
    case 69:
      return reduce(RULE_13, 10);
    case 70:
      return reduce(RULE_13, 10);
    case 89:
      return reduce(RULE_13, 10);
    case 106:
      return reduce(RULE_13, 10);
    case 97:
      return reduce(RULE_13, 10);
    case 109:
      return reduce(RULE_13, 10);
    case 101:
      return reduce(RULE_13, 10);
    case 84:
      return reduce(RULE_13, 10);
    case 80:
      return reduce(RULE_13, 10);
    case 110:
      return reduce(RULE_13, 10);
    case 66:
      return reduce(RULE_13, 10);
    case 107:
      return reduce(RULE_13, 10);
    case 91:
      return reduce(RULE_13, 10);
    case 92:
      return reduce(RULE_13, 10);
    case 73:
      return reduce(RULE_13, 10);
    case 68:
      return reduce(RULE_13, 10);
    case 108:
      return reduce(RULE_13, 10);
    case 102:
      return reduce(RULE_13, 10);
    case 93:
      return reduce(RULE_13, 10);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, RPAREN, CARET, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action472(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_32, 1);
    case 63:
      return reduce(RULE_32, 1);
    case 76:
      return reduce(RULE_32, 1);
    case 78:
      return reduce(RULE_32, 1);
    case 85:
      return reduce(RULE_32, 1);
    case 104:
      return reduce(RULE_32, 1);
    case 72:
      return reduce(RULE_32, 1);
    case 86:
      return reduce(RULE_32, 1);
    case 90:
      return reduce(RULE_32, 1);
    case 99:
      return reduce(RULE_32, 1);
    case 95:
      return reduce(RULE_32, 1);
    case 88:
      return reduce(RULE_32, 1);
    case 69:
      return reduce(RULE_32, 1);
    case 70:
      return reduce(RULE_32, 1);
    case 89:
      return reduce(RULE_32, 1);
    case 106:
      return reduce(RULE_32, 1);
    case 97:
      return reduce(RULE_32, 1);
    case 109:
      return reduce(RULE_32, 1);
    case 101:
      return reduce(RULE_32, 1);
    case 84:
      return reduce(RULE_32, 1);
    case 80:
      return reduce(RULE_32, 1);
    case 107:
      return reduce(RULE_32, 1);
    case 66:
      return reduce(RULE_32, 1);
    case 110:
      return reduce(RULE_32, 1);
    case 73:
      return reduce(RULE_32, 1);
    case 68:
      return reduce(RULE_32, 1);
    case 108:
      return reduce(RULE_32, 1);
    case 102:
      return reduce(RULE_32, 1);
    case 93:
      return reduce(RULE_32, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action473(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 127:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IF_KEYWORD, LBRACE});
    }
  }

  private final int goto473(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 542;
    case 31: return 543;
    default: return -1;
    }
  }

  private final boolean action474(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_34, 3);
    case 107:
      return reduce(RULE_34, 3);
    case 68:
      return reduce(RULE_34, 3);
    case 108:
      return reduce(RULE_34, 3);
    case 90:
      return reduce(RULE_34, 3);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COLON, RSQUARE, LBRACE});
    }
  }

  private final boolean action475(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_34, 2);
    case 107:
      return reduce(RULE_34, 2);
    case 68:
      return reduce(RULE_34, 2);
    case 108:
      return reduce(RULE_34, 2);
    case 90:
      return reduce(RULE_34, 2);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COLON, RSQUARE, LBRACE});
    }
  }

  private final boolean action476(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 22);
    case 63:
      return reduce(RULE_35, 22);
    case 78:
      return reduce(RULE_35, 22);
    case 70:
      return reduce(RULE_35, 22);
    case 106:
      return reduce(RULE_35, 22);
    case 97:
      return reduce(RULE_35, 22);
    case 109:
      return reduce(RULE_35, 22);
    case 101:
      return reduce(RULE_35, 22);
    case 107:
      return reduce(RULE_35, 22);
    case 66:
      return reduce(RULE_35, 22);
    case 68:
      return reduce(RULE_35, 22);
    case 108:
      return reduce(RULE_35, 22);
    case 90:
      return reduce(RULE_35, 22);
    case 102:
      return reduce(RULE_35, 22);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto476(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action477(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 21);
    case 63:
      return reduce(RULE_35, 21);
    case 78:
      return reduce(RULE_35, 21);
    case 70:
      return reduce(RULE_35, 21);
    case 106:
      return reduce(RULE_35, 21);
    case 97:
      return reduce(RULE_35, 21);
    case 109:
      return reduce(RULE_35, 21);
    case 101:
      return reduce(RULE_35, 21);
    case 107:
      return reduce(RULE_35, 21);
    case 66:
      return reduce(RULE_35, 21);
    case 68:
      return reduce(RULE_35, 21);
    case 108:
      return reduce(RULE_35, 21);
    case 90:
      return reduce(RULE_35, 21);
    case 102:
      return reduce(RULE_35, 21);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action478(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_36, 2);
    case 99:
      return reduce(RULE_36, 2);
    case 88:
      return reduce(RULE_36, 2);
    case 63:
      return reduce(RULE_36, 2);
    case 69:
      return reduce(RULE_36, 2);
    case 78:
      return reduce(RULE_36, 2);
    case 70:
      return reduce(RULE_36, 2);
    case 89:
      return reduce(RULE_36, 2);
    case 85:
      return reduce(RULE_36, 2);
    case 106:
      return reduce(RULE_36, 2);
    case 97:
      return reduce(RULE_36, 2);
    case 101:
      return reduce(RULE_36, 2);
    case 109:
      return reduce(RULE_36, 2);
    case 66:
      return reduce(RULE_36, 2);
    case 104:
      return reduce(RULE_36, 2);
    case 107:
      return reduce(RULE_36, 2);
    case 72:
      return reduce(RULE_36, 2);
    case 68:
      return reduce(RULE_36, 2);
    case 108:
      return reduce(RULE_36, 2);
    case 102:
      return reduce(RULE_36, 2);
    case 90:
      return reduce(RULE_36, 2);
    case 93:
      return reduce(RULE_36, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto478(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action479(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 95:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(333);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_36, 1);
    case 99:
      return reduce(RULE_36, 1);
    case 88:
      return reduce(RULE_36, 1);
    case 63:
      return reduce(RULE_36, 1);
    case 69:
      return reduce(RULE_36, 1);
    case 78:
      return reduce(RULE_36, 1);
    case 70:
      return reduce(RULE_36, 1);
    case 89:
      return reduce(RULE_36, 1);
    case 85:
      return reduce(RULE_36, 1);
    case 106:
      return reduce(RULE_36, 1);
    case 97:
      return reduce(RULE_36, 1);
    case 101:
      return reduce(RULE_36, 1);
    case 109:
      return reduce(RULE_36, 1);
    case 66:
      return reduce(RULE_36, 1);
    case 104:
      return reduce(RULE_36, 1);
    case 107:
      return reduce(RULE_36, 1);
    case 72:
      return reduce(RULE_36, 1);
    case 68:
      return reduce(RULE_36, 1);
    case 108:
      return reduce(RULE_36, 1);
    case 102:
      return reduce(RULE_36, 1);
    case 90:
      return reduce(RULE_36, 1);
    case 93:
      return reduce(RULE_36, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, STAR, CARET, RPAREN, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action480(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 10);
    case 63:
      return reduce(RULE_35, 10);
    case 78:
      return reduce(RULE_35, 10);
    case 70:
      return reduce(RULE_35, 10);
    case 106:
      return reduce(RULE_35, 10);
    case 97:
      return reduce(RULE_35, 10);
    case 109:
      return reduce(RULE_35, 10);
    case 101:
      return reduce(RULE_35, 10);
    case 107:
      return reduce(RULE_35, 10);
    case 66:
      return reduce(RULE_35, 10);
    case 68:
      return reduce(RULE_35, 10);
    case 108:
      return reduce(RULE_35, 10);
    case 90:
      return reduce(RULE_35, 10);
    case 102:
      return reduce(RULE_35, 10);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto480(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action481(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 9);
    case 63:
      return reduce(RULE_35, 9);
    case 78:
      return reduce(RULE_35, 9);
    case 70:
      return reduce(RULE_35, 9);
    case 106:
      return reduce(RULE_35, 9);
    case 97:
      return reduce(RULE_35, 9);
    case 109:
      return reduce(RULE_35, 9);
    case 101:
      return reduce(RULE_35, 9);
    case 107:
      return reduce(RULE_35, 9);
    case 66:
      return reduce(RULE_35, 9);
    case 68:
      return reduce(RULE_35, 9);
    case 108:
      return reduce(RULE_35, 9);
    case 90:
      return reduce(RULE_35, 9);
    case 102:
      return reduce(RULE_35, 9);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action482(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 18);
    case 63:
      return reduce(RULE_35, 18);
    case 78:
      return reduce(RULE_35, 18);
    case 70:
      return reduce(RULE_35, 18);
    case 106:
      return reduce(RULE_35, 18);
    case 97:
      return reduce(RULE_35, 18);
    case 109:
      return reduce(RULE_35, 18);
    case 101:
      return reduce(RULE_35, 18);
    case 107:
      return reduce(RULE_35, 18);
    case 66:
      return reduce(RULE_35, 18);
    case 68:
      return reduce(RULE_35, 18);
    case 108:
      return reduce(RULE_35, 18);
    case 90:
      return reduce(RULE_35, 18);
    case 102:
      return reduce(RULE_35, 18);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto482(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action483(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 17);
    case 63:
      return reduce(RULE_35, 17);
    case 78:
      return reduce(RULE_35, 17);
    case 70:
      return reduce(RULE_35, 17);
    case 106:
      return reduce(RULE_35, 17);
    case 97:
      return reduce(RULE_35, 17);
    case 109:
      return reduce(RULE_35, 17);
    case 101:
      return reduce(RULE_35, 17);
    case 107:
      return reduce(RULE_35, 17);
    case 66:
      return reduce(RULE_35, 17);
    case 68:
      return reduce(RULE_35, 17);
    case 108:
      return reduce(RULE_35, 17);
    case 90:
      return reduce(RULE_35, 17);
    case 102:
      return reduce(RULE_35, 17);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action484(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 2);
    case 63:
      return reduce(RULE_35, 2);
    case 78:
      return reduce(RULE_35, 2);
    case 70:
      return reduce(RULE_35, 2);
    case 106:
      return reduce(RULE_35, 2);
    case 97:
      return reduce(RULE_35, 2);
    case 109:
      return reduce(RULE_35, 2);
    case 101:
      return reduce(RULE_35, 2);
    case 107:
      return reduce(RULE_35, 2);
    case 66:
      return reduce(RULE_35, 2);
    case 68:
      return reduce(RULE_35, 2);
    case 108:
      return reduce(RULE_35, 2);
    case 90:
      return reduce(RULE_35, 2);
    case 102:
      return reduce(RULE_35, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto484(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action485(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 1);
    case 63:
      return reduce(RULE_35, 1);
    case 78:
      return reduce(RULE_35, 1);
    case 70:
      return reduce(RULE_35, 1);
    case 106:
      return reduce(RULE_35, 1);
    case 97:
      return reduce(RULE_35, 1);
    case 109:
      return reduce(RULE_35, 1);
    case 101:
      return reduce(RULE_35, 1);
    case 107:
      return reduce(RULE_35, 1);
    case 66:
      return reduce(RULE_35, 1);
    case 68:
      return reduce(RULE_35, 1);
    case 108:
      return reduce(RULE_35, 1);
    case 90:
      return reduce(RULE_35, 1);
    case 102:
      return reduce(RULE_35, 1);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action486(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 14);
    case 63:
      return reduce(RULE_35, 14);
    case 78:
      return reduce(RULE_35, 14);
    case 70:
      return reduce(RULE_35, 14);
    case 106:
      return reduce(RULE_35, 14);
    case 97:
      return reduce(RULE_35, 14);
    case 109:
      return reduce(RULE_35, 14);
    case 101:
      return reduce(RULE_35, 14);
    case 107:
      return reduce(RULE_35, 14);
    case 66:
      return reduce(RULE_35, 14);
    case 68:
      return reduce(RULE_35, 14);
    case 108:
      return reduce(RULE_35, 14);
    case 90:
      return reduce(RULE_35, 14);
    case 102:
      return reduce(RULE_35, 14);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto486(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action487(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 13);
    case 63:
      return reduce(RULE_35, 13);
    case 78:
      return reduce(RULE_35, 13);
    case 70:
      return reduce(RULE_35, 13);
    case 106:
      return reduce(RULE_35, 13);
    case 97:
      return reduce(RULE_35, 13);
    case 109:
      return reduce(RULE_35, 13);
    case 101:
      return reduce(RULE_35, 13);
    case 107:
      return reduce(RULE_35, 13);
    case 66:
      return reduce(RULE_35, 13);
    case 68:
      return reduce(RULE_35, 13);
    case 108:
      return reduce(RULE_35, 13);
    case 90:
      return reduce(RULE_35, 13);
    case 102:
      return reduce(RULE_35, 13);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action488(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 6);
    case 63:
      return reduce(RULE_35, 6);
    case 78:
      return reduce(RULE_35, 6);
    case 70:
      return reduce(RULE_35, 6);
    case 106:
      return reduce(RULE_35, 6);
    case 97:
      return reduce(RULE_35, 6);
    case 109:
      return reduce(RULE_35, 6);
    case 101:
      return reduce(RULE_35, 6);
    case 107:
      return reduce(RULE_35, 6);
    case 66:
      return reduce(RULE_35, 6);
    case 68:
      return reduce(RULE_35, 6);
    case 108:
      return reduce(RULE_35, 6);
    case 90:
      return reduce(RULE_35, 6);
    case 102:
      return reduce(RULE_35, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, FORWARD_SLASH, LBRACE, PLUS, PERCENT, COMMA, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, LPAREN, RPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto488(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action489(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_35, 5);
    case 63:
      return reduce(RULE_35, 5);
    case 78:
      return reduce(RULE_35, 5);
    case 70:
      return reduce(RULE_35, 5);
    case 106:
      return reduce(RULE_35, 5);
    case 97:
      return reduce(RULE_35, 5);
    case 109:
      return reduce(RULE_35, 5);
    case 101:
      return reduce(RULE_35, 5);
    case 107:
      return reduce(RULE_35, 5);
    case 66:
      return reduce(RULE_35, 5);
    case 68:
      return reduce(RULE_35, 5);
    case 108:
      return reduce(RULE_35, 5);
    case 90:
      return reduce(RULE_35, 5);
    case 102:
      return reduce(RULE_35, 5);
    default: throw new BadTokenException(token, new Object[] {PLUS, COMMA, AMPERSAND, DOUBLE_PIPE, DOUBLE_AMPERSAND, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, RPAREN, CARET, COLON, RSQUARE, QUESTION_MARK_COLON, LBRACE, MINUS});
    }
  }

  private final boolean action490(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_36, 6);
    case 99:
      return reduce(RULE_36, 6);
    case 88:
      return reduce(RULE_36, 6);
    case 63:
      return reduce(RULE_36, 6);
    case 69:
      return reduce(RULE_36, 6);
    case 78:
      return reduce(RULE_36, 6);
    case 70:
      return reduce(RULE_36, 6);
    case 89:
      return reduce(RULE_36, 6);
    case 85:
      return reduce(RULE_36, 6);
    case 106:
      return reduce(RULE_36, 6);
    case 97:
      return reduce(RULE_36, 6);
    case 101:
      return reduce(RULE_36, 6);
    case 109:
      return reduce(RULE_36, 6);
    case 66:
      return reduce(RULE_36, 6);
    case 104:
      return reduce(RULE_36, 6);
    case 107:
      return reduce(RULE_36, 6);
    case 72:
      return reduce(RULE_36, 6);
    case 68:
      return reduce(RULE_36, 6);
    case 108:
      return reduce(RULE_36, 6);
    case 102:
      return reduce(RULE_36, 6);
    case 90:
      return reduce(RULE_36, 6);
    case 93:
      return reduce(RULE_36, 6);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto490(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action491(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 95:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(333);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_36, 5);
    case 99:
      return reduce(RULE_36, 5);
    case 88:
      return reduce(RULE_36, 5);
    case 63:
      return reduce(RULE_36, 5);
    case 69:
      return reduce(RULE_36, 5);
    case 78:
      return reduce(RULE_36, 5);
    case 70:
      return reduce(RULE_36, 5);
    case 89:
      return reduce(RULE_36, 5);
    case 85:
      return reduce(RULE_36, 5);
    case 106:
      return reduce(RULE_36, 5);
    case 97:
      return reduce(RULE_36, 5);
    case 101:
      return reduce(RULE_36, 5);
    case 109:
      return reduce(RULE_36, 5);
    case 66:
      return reduce(RULE_36, 5);
    case 104:
      return reduce(RULE_36, 5);
    case 107:
      return reduce(RULE_36, 5);
    case 72:
      return reduce(RULE_36, 5);
    case 68:
      return reduce(RULE_36, 5);
    case 108:
      return reduce(RULE_36, 5);
    case 102:
      return reduce(RULE_36, 5);
    case 90:
      return reduce(RULE_36, 5);
    case 93:
      return reduce(RULE_36, 5);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, SEMICOLON, STAR, CARET, RPAREN, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action492(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_34, 1);
    case 107:
      return reduce(RULE_34, 1);
    case 68:
      return reduce(RULE_34, 1);
    case 108:
      return reduce(RULE_34, 1);
    case 90:
      return reduce(RULE_34, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COLON, RSQUARE, LBRACE});
    }
  }

  private final boolean action493(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(544);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action494(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 10);
    case 76:
      return reduce(RULE_31, 10);
    case 63:
      return reduce(RULE_31, 10);
    case 78:
      return reduce(RULE_31, 10);
    case 85:
      return reduce(RULE_31, 10);
    case 104:
      return reduce(RULE_31, 10);
    case 72:
      return reduce(RULE_31, 10);
    case 86:
      return reduce(RULE_31, 10);
    case 90:
      return reduce(RULE_31, 10);
    case 99:
      return reduce(RULE_31, 10);
    case 88:
      return reduce(RULE_31, 10);
    case 95:
      return reduce(RULE_31, 10);
    case 69:
      return reduce(RULE_31, 10);
    case 70:
      return reduce(RULE_31, 10);
    case 89:
      return reduce(RULE_31, 10);
    case 106:
      return reduce(RULE_31, 10);
    case 97:
      return reduce(RULE_31, 10);
    case 109:
      return reduce(RULE_31, 10);
    case 101:
      return reduce(RULE_31, 10);
    case 107:
      return reduce(RULE_31, 10);
    case 110:
      return reduce(RULE_31, 10);
    case 66:
      return reduce(RULE_31, 10);
    case 68:
      return reduce(RULE_31, 10);
    case 108:
      return reduce(RULE_31, 10);
    case 93:
      return reduce(RULE_31, 10);
    case 102:
      return reduce(RULE_31, 10);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, RPAREN, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto494(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action495(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 80:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 9);
    case 76:
      return reduce(RULE_31, 9);
    case 63:
      return reduce(RULE_31, 9);
    case 78:
      return reduce(RULE_31, 9);
    case 85:
      return reduce(RULE_31, 9);
    case 104:
      return reduce(RULE_31, 9);
    case 72:
      return reduce(RULE_31, 9);
    case 86:
      return reduce(RULE_31, 9);
    case 90:
      return reduce(RULE_31, 9);
    case 99:
      return reduce(RULE_31, 9);
    case 88:
      return reduce(RULE_31, 9);
    case 95:
      return reduce(RULE_31, 9);
    case 69:
      return reduce(RULE_31, 9);
    case 70:
      return reduce(RULE_31, 9);
    case 89:
      return reduce(RULE_31, 9);
    case 106:
      return reduce(RULE_31, 9);
    case 97:
      return reduce(RULE_31, 9);
    case 109:
      return reduce(RULE_31, 9);
    case 101:
      return reduce(RULE_31, 9);
    case 107:
      return reduce(RULE_31, 9);
    case 110:
      return reduce(RULE_31, 9);
    case 66:
      return reduce(RULE_31, 9);
    case 68:
      return reduce(RULE_31, 9);
    case 108:
      return reduce(RULE_31, 9);
    case 93:
      return reduce(RULE_31, 9);
    case 102:
      return reduce(RULE_31, 9);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action496(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 14);
    case 76:
      return reduce(RULE_31, 14);
    case 63:
      return reduce(RULE_31, 14);
    case 78:
      return reduce(RULE_31, 14);
    case 85:
      return reduce(RULE_31, 14);
    case 104:
      return reduce(RULE_31, 14);
    case 72:
      return reduce(RULE_31, 14);
    case 86:
      return reduce(RULE_31, 14);
    case 90:
      return reduce(RULE_31, 14);
    case 99:
      return reduce(RULE_31, 14);
    case 88:
      return reduce(RULE_31, 14);
    case 95:
      return reduce(RULE_31, 14);
    case 69:
      return reduce(RULE_31, 14);
    case 70:
      return reduce(RULE_31, 14);
    case 89:
      return reduce(RULE_31, 14);
    case 106:
      return reduce(RULE_31, 14);
    case 97:
      return reduce(RULE_31, 14);
    case 109:
      return reduce(RULE_31, 14);
    case 101:
      return reduce(RULE_31, 14);
    case 107:
      return reduce(RULE_31, 14);
    case 110:
      return reduce(RULE_31, 14);
    case 66:
      return reduce(RULE_31, 14);
    case 68:
      return reduce(RULE_31, 14);
    case 108:
      return reduce(RULE_31, 14);
    case 93:
      return reduce(RULE_31, 14);
    case 102:
      return reduce(RULE_31, 14);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, RPAREN, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto496(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action497(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 80:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 13);
    case 76:
      return reduce(RULE_31, 13);
    case 63:
      return reduce(RULE_31, 13);
    case 78:
      return reduce(RULE_31, 13);
    case 85:
      return reduce(RULE_31, 13);
    case 104:
      return reduce(RULE_31, 13);
    case 72:
      return reduce(RULE_31, 13);
    case 86:
      return reduce(RULE_31, 13);
    case 90:
      return reduce(RULE_31, 13);
    case 99:
      return reduce(RULE_31, 13);
    case 88:
      return reduce(RULE_31, 13);
    case 95:
      return reduce(RULE_31, 13);
    case 69:
      return reduce(RULE_31, 13);
    case 70:
      return reduce(RULE_31, 13);
    case 89:
      return reduce(RULE_31, 13);
    case 106:
      return reduce(RULE_31, 13);
    case 97:
      return reduce(RULE_31, 13);
    case 109:
      return reduce(RULE_31, 13);
    case 101:
      return reduce(RULE_31, 13);
    case 107:
      return reduce(RULE_31, 13);
    case 110:
      return reduce(RULE_31, 13);
    case 66:
      return reduce(RULE_31, 13);
    case 68:
      return reduce(RULE_31, 13);
    case 108:
      return reduce(RULE_31, 13);
    case 93:
      return reduce(RULE_31, 13);
    case 102:
      return reduce(RULE_31, 13);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action498(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 2);
    case 76:
      return reduce(RULE_31, 2);
    case 63:
      return reduce(RULE_31, 2);
    case 78:
      return reduce(RULE_31, 2);
    case 85:
      return reduce(RULE_31, 2);
    case 104:
      return reduce(RULE_31, 2);
    case 72:
      return reduce(RULE_31, 2);
    case 86:
      return reduce(RULE_31, 2);
    case 90:
      return reduce(RULE_31, 2);
    case 99:
      return reduce(RULE_31, 2);
    case 88:
      return reduce(RULE_31, 2);
    case 95:
      return reduce(RULE_31, 2);
    case 69:
      return reduce(RULE_31, 2);
    case 70:
      return reduce(RULE_31, 2);
    case 89:
      return reduce(RULE_31, 2);
    case 106:
      return reduce(RULE_31, 2);
    case 97:
      return reduce(RULE_31, 2);
    case 109:
      return reduce(RULE_31, 2);
    case 101:
      return reduce(RULE_31, 2);
    case 107:
      return reduce(RULE_31, 2);
    case 110:
      return reduce(RULE_31, 2);
    case 66:
      return reduce(RULE_31, 2);
    case 68:
      return reduce(RULE_31, 2);
    case 108:
      return reduce(RULE_31, 2);
    case 93:
      return reduce(RULE_31, 2);
    case 102:
      return reduce(RULE_31, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, RPAREN, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto498(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action499(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 80:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 1);
    case 76:
      return reduce(RULE_31, 1);
    case 63:
      return reduce(RULE_31, 1);
    case 78:
      return reduce(RULE_31, 1);
    case 85:
      return reduce(RULE_31, 1);
    case 104:
      return reduce(RULE_31, 1);
    case 72:
      return reduce(RULE_31, 1);
    case 86:
      return reduce(RULE_31, 1);
    case 90:
      return reduce(RULE_31, 1);
    case 99:
      return reduce(RULE_31, 1);
    case 88:
      return reduce(RULE_31, 1);
    case 95:
      return reduce(RULE_31, 1);
    case 69:
      return reduce(RULE_31, 1);
    case 70:
      return reduce(RULE_31, 1);
    case 89:
      return reduce(RULE_31, 1);
    case 106:
      return reduce(RULE_31, 1);
    case 97:
      return reduce(RULE_31, 1);
    case 109:
      return reduce(RULE_31, 1);
    case 101:
      return reduce(RULE_31, 1);
    case 107:
      return reduce(RULE_31, 1);
    case 110:
      return reduce(RULE_31, 1);
    case 66:
      return reduce(RULE_31, 1);
    case 68:
      return reduce(RULE_31, 1);
    case 108:
      return reduce(RULE_31, 1);
    case 93:
      return reduce(RULE_31, 1);
    case 102:
      return reduce(RULE_31, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action500(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 6);
    case 76:
      return reduce(RULE_31, 6);
    case 63:
      return reduce(RULE_31, 6);
    case 78:
      return reduce(RULE_31, 6);
    case 85:
      return reduce(RULE_31, 6);
    case 104:
      return reduce(RULE_31, 6);
    case 72:
      return reduce(RULE_31, 6);
    case 86:
      return reduce(RULE_31, 6);
    case 90:
      return reduce(RULE_31, 6);
    case 99:
      return reduce(RULE_31, 6);
    case 88:
      return reduce(RULE_31, 6);
    case 95:
      return reduce(RULE_31, 6);
    case 69:
      return reduce(RULE_31, 6);
    case 70:
      return reduce(RULE_31, 6);
    case 89:
      return reduce(RULE_31, 6);
    case 106:
      return reduce(RULE_31, 6);
    case 97:
      return reduce(RULE_31, 6);
    case 109:
      return reduce(RULE_31, 6);
    case 101:
      return reduce(RULE_31, 6);
    case 107:
      return reduce(RULE_31, 6);
    case 110:
      return reduce(RULE_31, 6);
    case 66:
      return reduce(RULE_31, 6);
    case 68:
      return reduce(RULE_31, 6);
    case 108:
      return reduce(RULE_31, 6);
    case 93:
      return reduce(RULE_31, 6);
    case 102:
      return reduce(RULE_31, 6);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, RPAREN, LPAREN, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final int goto500(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action501(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 80:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_31, 5);
    case 76:
      return reduce(RULE_31, 5);
    case 63:
      return reduce(RULE_31, 5);
    case 78:
      return reduce(RULE_31, 5);
    case 85:
      return reduce(RULE_31, 5);
    case 104:
      return reduce(RULE_31, 5);
    case 72:
      return reduce(RULE_31, 5);
    case 86:
      return reduce(RULE_31, 5);
    case 90:
      return reduce(RULE_31, 5);
    case 99:
      return reduce(RULE_31, 5);
    case 88:
      return reduce(RULE_31, 5);
    case 95:
      return reduce(RULE_31, 5);
    case 69:
      return reduce(RULE_31, 5);
    case 70:
      return reduce(RULE_31, 5);
    case 89:
      return reduce(RULE_31, 5);
    case 106:
      return reduce(RULE_31, 5);
    case 97:
      return reduce(RULE_31, 5);
    case 109:
      return reduce(RULE_31, 5);
    case 101:
      return reduce(RULE_31, 5);
    case 107:
      return reduce(RULE_31, 5);
    case 110:
      return reduce(RULE_31, 5);
    case 66:
      return reduce(RULE_31, 5);
    case 68:
      return reduce(RULE_31, 5);
    case 108:
      return reduce(RULE_31, 5);
    case 93:
      return reduce(RULE_31, 5);
    case 102:
      return reduce(RULE_31, 5);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action502(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto502(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 545;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 546;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action503(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_48, 0);
    case 76:
      return reduce(RULE_48, 0);
    case 63:
      return reduce(RULE_48, 0);
    case 78:
      return reduce(RULE_48, 0);
    case 103:
      return reduce(RULE_48, 0);
    case 82:
      return reduce(RULE_48, 0);
    case 85:
      return reduce(RULE_48, 0);
    case 104:
      return reduce(RULE_48, 0);
    case 72:
      return reduce(RULE_48, 0);
    case 86:
      return reduce(RULE_48, 0);
    case 90:
      return reduce(RULE_48, 0);
    case 99:
      return reduce(RULE_48, 0);
    case 88:
      return reduce(RULE_48, 0);
    case 95:
      return reduce(RULE_48, 0);
    case 69:
      return reduce(RULE_48, 0);
    case 70:
      return reduce(RULE_48, 0);
    case 89:
      return reduce(RULE_48, 0);
    case 106:
      return reduce(RULE_48, 0);
    case 97:
      return reduce(RULE_48, 0);
    case 109:
      return reduce(RULE_48, 0);
    case 101:
      return reduce(RULE_48, 0);
    case 84:
      return reduce(RULE_48, 0);
    case 80:
      return reduce(RULE_48, 0);
    case 66:
      return reduce(RULE_48, 0);
    case 91:
      return reduce(RULE_48, 0);
    case 107:
      return reduce(RULE_48, 0);
    case 110:
      return reduce(RULE_48, 0);
    case 92:
      return reduce(RULE_48, 0);
    case 73:
      return reduce(RULE_48, 0);
    case 68:
      return reduce(RULE_48, 0);
    case 108:
      return reduce(RULE_48, 0);
    case 102:
      return reduce(RULE_48, 0);
    case 93:
      return reduce(RULE_48, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, RPAREN, LPAREN, CARET, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action504(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 90:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action505(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_55, 0);
    case 140:
      return reduce(RULE_55, 0);
    case 141:
      return reduce(RULE_55, 0);
    case 142:
      return reduce(RULE_55, 0);
    case 129:
      return reduce(RULE_55, 0);
    case 101:
      return reduce(RULE_55, 0);
    case 116:
      return reduce(RULE_55, 0);
    case 136:
      return reduce(RULE_55, 0);
    case 91:
      return reduce(RULE_55, 0);
    case 143:
      return reduce(RULE_55, 0);
    case 92:
      return reduce(RULE_55, 0);
    case 130:
      return reduce(RULE_55, 0);
    case 114:
      return reduce(RULE_55, 0);
    case 125:
      return reduce(RULE_55, 0);
    case 90:
      return reduce(RULE_55, 0);
    case 59:
      return reduce(RULE_55, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action506(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action507(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_52, 1);
    case 141:
      return reduce(RULE_52, 1);
    case 123:
      return reduce(RULE_52, 1);
    case 133:
      return reduce(RULE_52, 1);
    case 60:
      return reduce(RULE_52, 1);
    case 62:
      return reduce(RULE_52, 1);
    case 139:
      return reduce(RULE_52, 1);
    case 136:
      return reduce(RULE_52, 1);
    case 130:
      return reduce(RULE_52, 1);
    case 61:
      return reduce(RULE_52, 1);
    case 138:
      return reduce(RULE_52, 1);
    case 90:
      return reduce(RULE_52, 1);
    case 121:
      return reduce(RULE_52, 1);
    case 142:
      return reduce(RULE_52, 1);
    case 112:
      return reduce(RULE_52, 1);
    case 132:
      return reduce(RULE_52, 1);
    case 129:
      return reduce(RULE_52, 1);
    case 109:
      return reduce(RULE_52, 1);
    case 101:
      return reduce(RULE_52, 1);
    case 116:
      return reduce(RULE_52, 1);
    case 84:
      return reduce(RULE_52, 1);
    case 91:
      return reduce(RULE_52, 1);
    case 143:
      return reduce(RULE_52, 1);
    case 92:
      return reduce(RULE_52, 1);
    case 114:
      return reduce(RULE_52, 1);
    case 117:
      return reduce(RULE_52, 1);
    case 125:
      return reduce(RULE_52, 1);
    case 93:
      return reduce(RULE_52, 1);
    case 59:
      return reduce(RULE_52, 1);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final boolean action508(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 107:
      return reduce(RULE_56, 5);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, DOUBLE_PLUS, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, RPAREN, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, NAME});
    }
  }

  private final int goto508(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 103;
    case 55: return 551;
    case 50: return 104;
    case 37: return 120;
    case 58: return 122;
    case 34: return 552;
    case 51: return 124;
    case 38: return 52;
    case 21: return 389;
    case 18: return 553;
    case 12: return 128;
    case 52: return 111;
    case 54: return 158;
    case 13: return 554;
    case 53: return 114;
    case 23: return 159;
    default: return -1;
    }
  }

  private final boolean action509(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action510(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      return reduce(RULE_14, 0);
    case 69:
      return reduce(RULE_14, 0);
    case 77:
      return reduce(RULE_14, 0);
    case 103:
      return reduce(RULE_13, 5);
    case 82:
      return reduce(RULE_13, 5);
    case 64:
      return reduce(RULE_14, 0);
    case 98:
      return reduce(RULE_14, 0);
    case 83:
      return reduce(RULE_14, 0);
    case 109:
      return reduce(RULE_14, 0);
    case 91:
      return reduce(RULE_13, 5);
    case 107:
      return reduce(RULE_14, 0);
    case 81:
      return reduce(RULE_14, 0);
    case 92:
      return reduce(RULE_13, 5);
    case 87:
      return reduce(RULE_14, 0);
    case 74:
      return reduce(RULE_14, 0);
    case 111:
      return reduce(RULE_14, 0);
    case 94:
      return reduce(RULE_14, 0);
    case 96:
      return reduce(RULE_14, 0);
    case 67:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, COMMA, DOUBLE_PERCENT_EQUALS, QUESTION_MARK_DOT, DOT, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, SEMICOLON, LPAREN, RPAREN, DOUBLE_RANGLE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action511(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action512(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      return reduce(RULE_40, 3);
    case 109:
      return reduce(RULE_40, 3);
    case 69:
      return reduce(RULE_40, 3);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action513(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      return reduce(RULE_40, 2);
    case 109:
      return reduce(RULE_40, 2);
    case 69:
      return reduce(RULE_40, 2);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action514(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      return reduce(RULE_14, 1);
    case 69:
      return reduce(RULE_14, 1);
    case 77:
      return reduce(RULE_14, 1);
    case 103:
      return reduce(RULE_13, 6);
    case 82:
      return reduce(RULE_13, 6);
    case 64:
      return reduce(RULE_14, 1);
    case 98:
      return reduce(RULE_14, 1);
    case 83:
      return reduce(RULE_14, 1);
    case 109:
      return reduce(RULE_14, 1);
    case 91:
      return reduce(RULE_13, 6);
    case 107:
      return reduce(RULE_14, 1);
    case 81:
      return reduce(RULE_14, 1);
    case 92:
      return reduce(RULE_13, 6);
    case 87:
      return reduce(RULE_14, 1);
    case 74:
      return reduce(RULE_14, 1);
    case 111:
      return reduce(RULE_14, 1);
    case 94:
      return reduce(RULE_14, 1);
    case 96:
      return reduce(RULE_14, 1);
    case 67:
      return reduce(RULE_14, 1);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, COMMA, DOUBLE_PERCENT_EQUALS, QUESTION_MARK_DOT, DOT, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, SEMICOLON, LPAREN, RPAREN, DOUBLE_RANGLE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action515(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action516(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 28);
    case 65:
      return reduce(RULE_5, 28);
    case 63:
      return reduce(RULE_5, 28);
    case 76:
      return reduce(RULE_5, 28);
    case 78:
      return reduce(RULE_5, 28);
    case 85:
      return reduce(RULE_5, 28);
    case 104:
      return reduce(RULE_5, 28);
    case 113:
      return reduce(RULE_5, 28);
    case 72:
      return reduce(RULE_5, 28);
    case 86:
      return reduce(RULE_5, 28);
    case 90:
      return reduce(RULE_5, 28);
    case 99:
      return reduce(RULE_5, 28);
    case 88:
      return reduce(RULE_5, 28);
    case 95:
      return reduce(RULE_5, 28);
    case 71:
      return reduce(RULE_5, 28);
    case 69:
      return reduce(RULE_5, 28);
    case 70:
      return reduce(RULE_5, 28);
    case 89:
      return reduce(RULE_5, 28);
    case 106:
      return reduce(RULE_5, 28);
    case 97:
      return reduce(RULE_5, 28);
    case 109:
      return reduce(RULE_5, 28);
    case 101:
      return reduce(RULE_5, 28);
    case 84:
      return reduce(RULE_5, 28);
    case 80:
      return reduce(RULE_5, 28);
    case 107:
      return reduce(RULE_5, 28);
    case 91:
      return reduce(RULE_5, 28);
    case 110:
      return reduce(RULE_5, 28);
    case 66:
      return reduce(RULE_5, 28);
    case 73:
      return reduce(RULE_5, 28);
    case 92:
      return reduce(RULE_5, 28);
    case 68:
      return reduce(RULE_5, 28);
    case 108:
      return reduce(RULE_5, 28);
    case 93:
      return reduce(RULE_5, 28);
    case 102:
      return reduce(RULE_5, 28);
    case 59:
      return reduce(RULE_5, 28);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, DOUBLE_COLON, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action517(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_53, 0);
    case 141:
      return reduce(RULE_53, 0);
    case 131:
      return reduce(RULE_53, 0);
    case 79:
      return reduce(RULE_53, 0);
    case 133:
      return reduce(RULE_53, 0);
    case 123:
      return reduce(RULE_53, 0);
    case 60:
      return reduce(RULE_53, 0);
    case 62:
      return reduce(RULE_53, 0);
    case 139:
      return reduce(RULE_53, 0);
    case 127:
      return reduce(RULE_53, 0);
    case 136:
      return reduce(RULE_53, 0);
    case 135:
      return reduce(RULE_53, 0);
    case 113:
      return reduce(RULE_53, 0);
    case 130:
      return reduce(RULE_53, 0);
    case 61:
      return reduce(RULE_53, 0);
    case 137:
      return reduce(RULE_53, 0);
    case 138:
      return reduce(RULE_53, 0);
    case 90:
      return reduce(RULE_53, 0);
    case 121:
      return reduce(RULE_53, 0);
    case 124:
      return reduce(RULE_53, 0);
    case 142:
      return reduce(RULE_53, 0);
    case 112:
      return reduce(RULE_53, 0);
    case 145:
      return reduce(RULE_53, 0);
    case 132:
      return reduce(RULE_53, 0);
    case 120:
      return reduce(RULE_53, 0);
    case 106:
      return reduce(RULE_53, 0);
    case 129:
      return reduce(RULE_53, 0);
    case 116:
      return reduce(RULE_53, 0);
    case 101:
      return reduce(RULE_53, 0);
    case 109:
      return reduce(RULE_53, 0);
    case 84:
      return reduce(RULE_53, 0);
    case 143:
      return reduce(RULE_53, 0);
    case 91:
      return reduce(RULE_53, 0);
    case 75:
      return reduce(RULE_53, 0);
    case 92:
      return reduce(RULE_53, 0);
    case 114:
      return reduce(RULE_53, 0);
    case 117:
      return reduce(RULE_53, 0);
    case 125:
      return reduce(RULE_53, 0);
    case 115:
      return reduce(RULE_53, 0);
    case 126:
      return reduce(RULE_53, 0);
    case 93:
      return reduce(RULE_53, 0);
    case 59:
      return reduce(RULE_53, 0);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action518(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 29);
    case 65:
      return reduce(RULE_5, 29);
    case 63:
      return reduce(RULE_5, 29);
    case 76:
      return reduce(RULE_5, 29);
    case 78:
      return reduce(RULE_5, 29);
    case 85:
      return reduce(RULE_5, 29);
    case 104:
      return reduce(RULE_5, 29);
    case 113:
      return reduce(RULE_5, 29);
    case 72:
      return reduce(RULE_5, 29);
    case 86:
      return reduce(RULE_5, 29);
    case 90:
      return reduce(RULE_5, 29);
    case 99:
      return reduce(RULE_5, 29);
    case 88:
      return reduce(RULE_5, 29);
    case 95:
      return reduce(RULE_5, 29);
    case 69:
      return reduce(RULE_5, 29);
    case 71:
      return reduce(RULE_5, 29);
    case 70:
      return reduce(RULE_5, 29);
    case 89:
      return reduce(RULE_5, 29);
    case 106:
      return reduce(RULE_5, 29);
    case 97:
      return reduce(RULE_5, 29);
    case 109:
      return reduce(RULE_5, 29);
    case 101:
      return reduce(RULE_5, 29);
    case 84:
      return reduce(RULE_5, 29);
    case 80:
      return reduce(RULE_5, 29);
    case 107:
      return reduce(RULE_5, 29);
    case 91:
      return reduce(RULE_5, 29);
    case 110:
      return reduce(RULE_5, 29);
    case 66:
      return reduce(RULE_5, 29);
    case 73:
      return reduce(RULE_5, 29);
    case 92:
      return reduce(RULE_5, 29);
    case 68:
      return reduce(RULE_5, 29);
    case 108:
      return reduce(RULE_5, 29);
    case 93:
      return reduce(RULE_5, 29);
    case 102:
      return reduce(RULE_5, 29);
    case 59:
      return reduce(RULE_5, 29);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action519(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto519(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 558;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action520(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_53, 11);
    case 141:
      return reduce(RULE_53, 11);
    case 131:
      return reduce(RULE_53, 11);
    case 79:
      return reduce(RULE_53, 11);
    case 133:
      return reduce(RULE_53, 11);
    case 123:
      return reduce(RULE_53, 11);
    case 60:
      return reduce(RULE_53, 11);
    case 62:
      return reduce(RULE_53, 11);
    case 139:
      return reduce(RULE_53, 11);
    case 127:
      return reduce(RULE_53, 11);
    case 136:
      return reduce(RULE_53, 11);
    case 135:
      return reduce(RULE_53, 11);
    case 113:
      return reduce(RULE_53, 11);
    case 130:
      return reduce(RULE_53, 11);
    case 61:
      return reduce(RULE_53, 11);
    case 137:
      return reduce(RULE_53, 11);
    case 138:
      return reduce(RULE_53, 11);
    case 90:
      return reduce(RULE_53, 11);
    case 121:
      return reduce(RULE_53, 11);
    case 124:
      return reduce(RULE_53, 11);
    case 142:
      return reduce(RULE_53, 11);
    case 112:
      return reduce(RULE_53, 11);
    case 145:
      return reduce(RULE_53, 11);
    case 132:
      return reduce(RULE_53, 11);
    case 120:
      return reduce(RULE_53, 11);
    case 106:
      return reduce(RULE_53, 11);
    case 129:
      return reduce(RULE_53, 11);
    case 116:
      return reduce(RULE_53, 11);
    case 101:
      return reduce(RULE_53, 11);
    case 109:
      return reduce(RULE_53, 11);
    case 84:
      return reduce(RULE_53, 11);
    case 143:
      return reduce(RULE_53, 11);
    case 91:
      return reduce(RULE_53, 11);
    case 75:
      return reduce(RULE_53, 11);
    case 92:
      return reduce(RULE_53, 11);
    case 114:
      return reduce(RULE_53, 11);
    case 117:
      return reduce(RULE_53, 11);
    case 125:
      return reduce(RULE_53, 11);
    case 115:
      return reduce(RULE_53, 11);
    case 126:
      return reduce(RULE_53, 11);
    case 93:
      return reduce(RULE_53, 11);
    case 59:
      return reduce(RULE_53, 11);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action521(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto521(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 559;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action522(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_53, 2);
    case 141:
      return reduce(RULE_53, 2);
    case 131:
      return reduce(RULE_53, 2);
    case 79:
      return reduce(RULE_53, 2);
    case 133:
      return reduce(RULE_53, 2);
    case 123:
      return reduce(RULE_53, 2);
    case 60:
      return reduce(RULE_53, 2);
    case 62:
      return reduce(RULE_53, 2);
    case 139:
      return reduce(RULE_53, 2);
    case 127:
      return reduce(RULE_53, 2);
    case 136:
      return reduce(RULE_53, 2);
    case 135:
      return reduce(RULE_53, 2);
    case 113:
      return reduce(RULE_53, 2);
    case 130:
      return reduce(RULE_53, 2);
    case 61:
      return reduce(RULE_53, 2);
    case 137:
      return reduce(RULE_53, 2);
    case 138:
      return reduce(RULE_53, 2);
    case 90:
      return reduce(RULE_53, 2);
    case 121:
      return reduce(RULE_53, 2);
    case 124:
      return reduce(RULE_53, 2);
    case 142:
      return reduce(RULE_53, 2);
    case 112:
      return reduce(RULE_53, 2);
    case 145:
      return reduce(RULE_53, 2);
    case 132:
      return reduce(RULE_53, 2);
    case 120:
      return reduce(RULE_53, 2);
    case 106:
      return reduce(RULE_53, 2);
    case 129:
      return reduce(RULE_53, 2);
    case 116:
      return reduce(RULE_53, 2);
    case 101:
      return reduce(RULE_53, 2);
    case 109:
      return reduce(RULE_53, 2);
    case 84:
      return reduce(RULE_53, 2);
    case 143:
      return reduce(RULE_53, 2);
    case 91:
      return reduce(RULE_53, 2);
    case 75:
      return reduce(RULE_53, 2);
    case 92:
      return reduce(RULE_53, 2);
    case 114:
      return reduce(RULE_53, 2);
    case 117:
      return reduce(RULE_53, 2);
    case 125:
      return reduce(RULE_53, 2);
    case 115:
      return reduce(RULE_53, 2);
    case 126:
      return reduce(RULE_53, 2);
    case 93:
      return reduce(RULE_53, 2);
    case 59:
      return reduce(RULE_53, 2);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action523(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto523(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 40: return 560;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action524(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_53, 7);
    case 141:
      return reduce(RULE_53, 7);
    case 131:
      return reduce(RULE_53, 7);
    case 79:
      return reduce(RULE_53, 7);
    case 133:
      return reduce(RULE_53, 7);
    case 123:
      return reduce(RULE_53, 7);
    case 60:
      return reduce(RULE_53, 7);
    case 62:
      return reduce(RULE_53, 7);
    case 139:
      return reduce(RULE_53, 7);
    case 127:
      return reduce(RULE_53, 7);
    case 136:
      return reduce(RULE_53, 7);
    case 135:
      return reduce(RULE_53, 7);
    case 113:
      return reduce(RULE_53, 7);
    case 130:
      return reduce(RULE_53, 7);
    case 61:
      return reduce(RULE_53, 7);
    case 137:
      return reduce(RULE_53, 7);
    case 138:
      return reduce(RULE_53, 7);
    case 90:
      return reduce(RULE_53, 7);
    case 121:
      return reduce(RULE_53, 7);
    case 124:
      return reduce(RULE_53, 7);
    case 142:
      return reduce(RULE_53, 7);
    case 112:
      return reduce(RULE_53, 7);
    case 145:
      return reduce(RULE_53, 7);
    case 132:
      return reduce(RULE_53, 7);
    case 120:
      return reduce(RULE_53, 7);
    case 106:
      return reduce(RULE_53, 7);
    case 129:
      return reduce(RULE_53, 7);
    case 116:
      return reduce(RULE_53, 7);
    case 101:
      return reduce(RULE_53, 7);
    case 109:
      return reduce(RULE_53, 7);
    case 84:
      return reduce(RULE_53, 7);
    case 143:
      return reduce(RULE_53, 7);
    case 91:
      return reduce(RULE_53, 7);
    case 75:
      return reduce(RULE_53, 7);
    case 92:
      return reduce(RULE_53, 7);
    case 114:
      return reduce(RULE_53, 7);
    case 117:
      return reduce(RULE_53, 7);
    case 125:
      return reduce(RULE_53, 7);
    case 115:
      return reduce(RULE_53, 7);
    case 126:
      return reduce(RULE_53, 7);
    case 93:
      return reduce(RULE_53, 7);
    case 59:
      return reduce(RULE_53, 7);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action525(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      return reduce(RULE_14, 2);
    case 69:
      return reduce(RULE_14, 2);
    case 77:
      return reduce(RULE_14, 2);
    case 103:
      return reduce(RULE_13, 7);
    case 82:
      return reduce(RULE_13, 7);
    case 64:
      return reduce(RULE_14, 2);
    case 98:
      return reduce(RULE_14, 2);
    case 83:
      return reduce(RULE_14, 2);
    case 109:
      return reduce(RULE_14, 2);
    case 91:
      return reduce(RULE_13, 7);
    case 107:
      return reduce(RULE_14, 2);
    case 81:
      return reduce(RULE_14, 2);
    case 92:
      return reduce(RULE_13, 7);
    case 87:
      return reduce(RULE_14, 2);
    case 74:
      return reduce(RULE_14, 2);
    case 111:
      return reduce(RULE_14, 2);
    case 94:
      return reduce(RULE_14, 2);
    case 96:
      return reduce(RULE_14, 2);
    case 67:
      return reduce(RULE_14, 2);
    default: throw new BadTokenException(token, new Object[] {PLUS_EQUALS, COMMA, DOUBLE_PERCENT_EQUALS, QUESTION_MARK_DOT, DOT, AMPERSAND_EQUALS, PIPE_EQUALS, EQUALS, SEMICOLON, LPAREN, RPAREN, DOUBLE_RANGLE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action526(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action527(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto527(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 562;
    case 23: return 51;
    case 38: return 52;
    case 21: return 54;
    default: return -1;
    }
  }

  private final boolean action528(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_57, 0);
    case 107:
      return reduce(RULE_57, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN, COMMA});
    }
  }

  private final boolean action529(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_44, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 141:
      return reduce(RULE_44, 1);
    case 131:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 106:
      return reduce(RULE_44, 1);
    case 129:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 101:
      return reduce(RULE_44, 1);
    case 116:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 91:
      return reduce(RULE_44, 1);
    case 92:
      return reduce(RULE_44, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 114:
      return reduce(RULE_44, 1);
    case 137:
      return reduce(RULE_44, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 90:
      return reduce(RULE_44, 1);
    case 59:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action530(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_45, 7);
    case 140:
      return reduce(RULE_45, 7);
    case 141:
      return reduce(RULE_45, 7);
    case 131:
      return reduce(RULE_45, 7);
    case 124:
      return reduce(RULE_45, 7);
    case 142:
      return reduce(RULE_45, 7);
    case 106:
      return reduce(RULE_45, 7);
    case 129:
      return reduce(RULE_45, 7);
    case 144:
      return reduce(RULE_45, 7);
    case 101:
      return reduce(RULE_45, 7);
    case 116:
      return reduce(RULE_45, 7);
    case 136:
      return reduce(RULE_45, 7);
    case 143:
      return reduce(RULE_45, 7);
    case 91:
      return reduce(RULE_45, 7);
    case 92:
      return reduce(RULE_45, 7);
    case 130:
      return reduce(RULE_45, 7);
    case 114:
      return reduce(RULE_45, 7);
    case 137:
      return reduce(RULE_45, 7);
    case 125:
      return reduce(RULE_45, 7);
    case 90:
      return reduce(RULE_45, 7);
    case 59:
      return reduce(RULE_45, 7);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action531(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_45, 3);
    case 140:
      return reduce(RULE_45, 3);
    case 141:
      return reduce(RULE_45, 3);
    case 131:
      return reduce(RULE_45, 3);
    case 124:
      return reduce(RULE_45, 3);
    case 142:
      return reduce(RULE_45, 3);
    case 106:
      return reduce(RULE_45, 3);
    case 129:
      return reduce(RULE_45, 3);
    case 144:
      return reduce(RULE_45, 3);
    case 101:
      return reduce(RULE_45, 3);
    case 116:
      return reduce(RULE_45, 3);
    case 136:
      return reduce(RULE_45, 3);
    case 143:
      return reduce(RULE_45, 3);
    case 91:
      return reduce(RULE_45, 3);
    case 92:
      return reduce(RULE_45, 3);
    case 130:
      return reduce(RULE_45, 3);
    case 114:
      return reduce(RULE_45, 3);
    case 137:
      return reduce(RULE_45, 3);
    case 125:
      return reduce(RULE_45, 3);
    case 90:
      return reduce(RULE_45, 3);
    case 59:
      return reduce(RULE_45, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action532(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(563);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action533(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_45, 6);
    case 140:
      return reduce(RULE_45, 6);
    case 141:
      return reduce(RULE_45, 6);
    case 131:
      return reduce(RULE_45, 6);
    case 124:
      return reduce(RULE_45, 6);
    case 142:
      return reduce(RULE_45, 6);
    case 106:
      return reduce(RULE_45, 6);
    case 129:
      return reduce(RULE_45, 6);
    case 144:
      return reduce(RULE_45, 6);
    case 101:
      return reduce(RULE_45, 6);
    case 116:
      return reduce(RULE_45, 6);
    case 136:
      return reduce(RULE_45, 6);
    case 143:
      return reduce(RULE_45, 6);
    case 91:
      return reduce(RULE_45, 6);
    case 92:
      return reduce(RULE_45, 6);
    case 130:
      return reduce(RULE_45, 6);
    case 114:
      return reduce(RULE_45, 6);
    case 137:
      return reduce(RULE_45, 6);
    case 125:
      return reduce(RULE_45, 6);
    case 90:
      return reduce(RULE_45, 6);
    case 59:
      return reduce(RULE_45, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action534(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_45, 2);
    case 140:
      return reduce(RULE_45, 2);
    case 141:
      return reduce(RULE_45, 2);
    case 131:
      return reduce(RULE_45, 2);
    case 124:
      return reduce(RULE_45, 2);
    case 142:
      return reduce(RULE_45, 2);
    case 106:
      return reduce(RULE_45, 2);
    case 129:
      return reduce(RULE_45, 2);
    case 144:
      return reduce(RULE_45, 2);
    case 101:
      return reduce(RULE_45, 2);
    case 116:
      return reduce(RULE_45, 2);
    case 136:
      return reduce(RULE_45, 2);
    case 143:
      return reduce(RULE_45, 2);
    case 91:
      return reduce(RULE_45, 2);
    case 92:
      return reduce(RULE_45, 2);
    case 130:
      return reduce(RULE_45, 2);
    case 114:
      return reduce(RULE_45, 2);
    case 137:
      return reduce(RULE_45, 2);
    case 125:
      return reduce(RULE_45, 2);
    case 90:
      return reduce(RULE_45, 2);
    case 59:
      return reduce(RULE_45, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action535(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 31);
    case 65:
      return reduce(RULE_5, 31);
    case 63:
      return reduce(RULE_5, 31);
    case 76:
      return reduce(RULE_5, 31);
    case 78:
      return reduce(RULE_5, 31);
    case 85:
      return reduce(RULE_5, 31);
    case 104:
      return reduce(RULE_5, 31);
    case 113:
      return reduce(RULE_5, 31);
    case 72:
      return reduce(RULE_5, 31);
    case 86:
      return reduce(RULE_5, 31);
    case 90:
      return reduce(RULE_5, 31);
    case 99:
      return reduce(RULE_5, 31);
    case 88:
      return reduce(RULE_5, 31);
    case 95:
      return reduce(RULE_5, 31);
    case 69:
      return reduce(RULE_5, 31);
    case 71:
      return reduce(RULE_5, 31);
    case 70:
      return reduce(RULE_5, 31);
    case 89:
      return reduce(RULE_5, 31);
    case 106:
      return reduce(RULE_5, 31);
    case 97:
      return reduce(RULE_5, 31);
    case 109:
      return reduce(RULE_5, 31);
    case 101:
      return reduce(RULE_5, 31);
    case 84:
      return reduce(RULE_5, 31);
    case 80:
      return reduce(RULE_5, 31);
    case 107:
      return reduce(RULE_5, 31);
    case 91:
      return reduce(RULE_5, 31);
    case 110:
      return reduce(RULE_5, 31);
    case 66:
      return reduce(RULE_5, 31);
    case 73:
      return reduce(RULE_5, 31);
    case 92:
      return reduce(RULE_5, 31);
    case 68:
      return reduce(RULE_5, 31);
    case 108:
      return reduce(RULE_5, 31);
    case 93:
      return reduce(RULE_5, 31);
    case 102:
      return reduce(RULE_5, 31);
    case 59:
      return reduce(RULE_5, 31);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action536(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_5, 32);
    case 65:
      return reduce(RULE_5, 32);
    case 63:
      return reduce(RULE_5, 32);
    case 76:
      return reduce(RULE_5, 32);
    case 78:
      return reduce(RULE_5, 32);
    case 85:
      return reduce(RULE_5, 32);
    case 104:
      return reduce(RULE_5, 32);
    case 113:
      return reduce(RULE_5, 32);
    case 72:
      return reduce(RULE_5, 32);
    case 86:
      return reduce(RULE_5, 32);
    case 90:
      return reduce(RULE_5, 32);
    case 99:
      return reduce(RULE_5, 32);
    case 88:
      return reduce(RULE_5, 32);
    case 95:
      return reduce(RULE_5, 32);
    case 69:
      return reduce(RULE_5, 32);
    case 71:
      return reduce(RULE_5, 32);
    case 70:
      return reduce(RULE_5, 32);
    case 89:
      return reduce(RULE_5, 32);
    case 106:
      return reduce(RULE_5, 32);
    case 97:
      return reduce(RULE_5, 32);
    case 109:
      return reduce(RULE_5, 32);
    case 101:
      return reduce(RULE_5, 32);
    case 84:
      return reduce(RULE_5, 32);
    case 80:
      return reduce(RULE_5, 32);
    case 107:
      return reduce(RULE_5, 32);
    case 91:
      return reduce(RULE_5, 32);
    case 110:
      return reduce(RULE_5, 32);
    case 66:
      return reduce(RULE_5, 32);
    case 73:
      return reduce(RULE_5, 32);
    case 92:
      return reduce(RULE_5, 32);
    case 68:
      return reduce(RULE_5, 32);
    case 108:
      return reduce(RULE_5, 32);
    case 93:
      return reduce(RULE_5, 32);
    case 102:
      return reduce(RULE_5, 32);
    case 59:
      return reduce(RULE_5, 32);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, ARROW, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, UNDERSCORE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_COLON, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, STAR, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS, NAME});
    }
  }

  private final boolean action537(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto537(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 49: return 564;
    case 52: return 177;
    case 55: return 157;
    case 37: return 170;
    case 50: return 169;
    case 58: return 565;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 274;
    case 38: return 52;
    case 21: return 275;
    default: return -1;
    }
  }

  private final boolean action538(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto538(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 566;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 567;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action539(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 5);
    case 63:
      return reduce(RULE_13, 5);
    case 76:
      return reduce(RULE_13, 5);
    case 78:
      return reduce(RULE_13, 5);
    case 103:
      return reduce(RULE_13, 5);
    case 82:
      return reduce(RULE_13, 5);
    case 85:
      return reduce(RULE_13, 5);
    case 104:
      return reduce(RULE_13, 5);
    case 72:
      return reduce(RULE_13, 5);
    case 86:
      return reduce(RULE_13, 5);
    case 90:
      return reduce(RULE_13, 5);
    case 99:
      return reduce(RULE_13, 5);
    case 88:
      return reduce(RULE_13, 5);
    case 95:
      return reduce(RULE_13, 5);
    case 69:
      return reduce(RULE_13, 5);
    case 70:
      return reduce(RULE_13, 5);
    case 89:
      return reduce(RULE_13, 5);
    case 106:
      return reduce(RULE_13, 5);
    case 97:
      return reduce(RULE_13, 5);
    case 109:
      return reduce(RULE_13, 5);
    case 101:
      return reduce(RULE_13, 5);
    case 84:
      return reduce(RULE_13, 5);
    case 80:
      return reduce(RULE_13, 5);
    case 107:
      return reduce(RULE_13, 5);
    case 91:
      return reduce(RULE_13, 5);
    case 66:
      return reduce(RULE_13, 5);
    case 110:
      return reduce(RULE_13, 5);
    case 73:
      return reduce(RULE_13, 5);
    case 92:
      return reduce(RULE_13, 5);
    case 68:
      return reduce(RULE_13, 5);
    case 108:
      return reduce(RULE_13, 5);
    case 93:
      return reduce(RULE_13, 5);
    case 102:
      return reduce(RULE_13, 5);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, LPAREN, RPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action540(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto540(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 568;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 569;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action541(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 6);
    case 63:
      return reduce(RULE_13, 6);
    case 76:
      return reduce(RULE_13, 6);
    case 78:
      return reduce(RULE_13, 6);
    case 103:
      return reduce(RULE_13, 6);
    case 82:
      return reduce(RULE_13, 6);
    case 85:
      return reduce(RULE_13, 6);
    case 104:
      return reduce(RULE_13, 6);
    case 72:
      return reduce(RULE_13, 6);
    case 86:
      return reduce(RULE_13, 6);
    case 90:
      return reduce(RULE_13, 6);
    case 99:
      return reduce(RULE_13, 6);
    case 88:
      return reduce(RULE_13, 6);
    case 95:
      return reduce(RULE_13, 6);
    case 69:
      return reduce(RULE_13, 6);
    case 70:
      return reduce(RULE_13, 6);
    case 89:
      return reduce(RULE_13, 6);
    case 106:
      return reduce(RULE_13, 6);
    case 97:
      return reduce(RULE_13, 6);
    case 109:
      return reduce(RULE_13, 6);
    case 101:
      return reduce(RULE_13, 6);
    case 84:
      return reduce(RULE_13, 6);
    case 80:
      return reduce(RULE_13, 6);
    case 91:
      return reduce(RULE_13, 6);
    case 110:
      return reduce(RULE_13, 6);
    case 107:
      return reduce(RULE_13, 6);
    case 66:
      return reduce(RULE_13, 6);
    case 73:
      return reduce(RULE_13, 6);
    case 92:
      return reduce(RULE_13, 6);
    case 68:
      return reduce(RULE_13, 6);
    case 108:
      return reduce(RULE_13, 6);
    case 93:
      return reduce(RULE_13, 6);
    case 102:
      return reduce(RULE_13, 6);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action542(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_47, 1);
    case 140:
      return reduce(RULE_47, 1);
    case 123:
      return reduce(RULE_47, 1);
    case 133:
      return reduce(RULE_47, 1);
    case 79:
      return reduce(RULE_47, 1);
    case 131:
      return reduce(RULE_47, 1);
    case 60:
      return reduce(RULE_47, 1);
    case 62:
      return reduce(RULE_47, 1);
    case 139:
      return reduce(RULE_47, 1);
    case 127:
      return reduce(RULE_47, 1);
    case 136:
      return reduce(RULE_47, 1);
    case 135:
      return reduce(RULE_47, 1);
    case 113:
      return reduce(RULE_47, 1);
    case 130:
      return reduce(RULE_47, 1);
    case 61:
      return reduce(RULE_47, 1);
    case 137:
      return reduce(RULE_47, 1);
    case 138:
      return reduce(RULE_47, 1);
    case 90:
      return reduce(RULE_47, 1);
    case 121:
      return reduce(RULE_47, 1);
    case 124:
      return reduce(RULE_47, 1);
    case 142:
      return reduce(RULE_47, 1);
    case 145:
      return reduce(RULE_47, 1);
    case 132:
      return reduce(RULE_47, 1);
    case 120:
      return reduce(RULE_47, 1);
    case 129:
      return reduce(RULE_47, 1);
    case 106:
      return reduce(RULE_47, 1);
    case 101:
      return reduce(RULE_47, 1);
    case 116:
      return reduce(RULE_47, 1);
    case 91:
      return reduce(RULE_47, 1);
    case 143:
      return reduce(RULE_47, 1);
    case 75:
      return reduce(RULE_47, 1);
    case 92:
      return reduce(RULE_47, 1);
    case 114:
      return reduce(RULE_47, 1);
    case 125:
      return reduce(RULE_47, 1);
    case 126:
      return reduce(RULE_47, 1);
    case 115:
      return reduce(RULE_47, 1);
    case 59:
      return reduce(RULE_47, 1);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action543(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_47, 2);
    case 140:
      return reduce(RULE_47, 2);
    case 123:
      return reduce(RULE_47, 2);
    case 133:
      return reduce(RULE_47, 2);
    case 79:
      return reduce(RULE_47, 2);
    case 131:
      return reduce(RULE_47, 2);
    case 60:
      return reduce(RULE_47, 2);
    case 62:
      return reduce(RULE_47, 2);
    case 139:
      return reduce(RULE_47, 2);
    case 127:
      return reduce(RULE_47, 2);
    case 136:
      return reduce(RULE_47, 2);
    case 135:
      return reduce(RULE_47, 2);
    case 113:
      return reduce(RULE_47, 2);
    case 130:
      return reduce(RULE_47, 2);
    case 61:
      return reduce(RULE_47, 2);
    case 137:
      return reduce(RULE_47, 2);
    case 138:
      return reduce(RULE_47, 2);
    case 90:
      return reduce(RULE_47, 2);
    case 121:
      return reduce(RULE_47, 2);
    case 124:
      return reduce(RULE_47, 2);
    case 142:
      return reduce(RULE_47, 2);
    case 145:
      return reduce(RULE_47, 2);
    case 132:
      return reduce(RULE_47, 2);
    case 120:
      return reduce(RULE_47, 2);
    case 129:
      return reduce(RULE_47, 2);
    case 106:
      return reduce(RULE_47, 2);
    case 101:
      return reduce(RULE_47, 2);
    case 116:
      return reduce(RULE_47, 2);
    case 91:
      return reduce(RULE_47, 2);
    case 143:
      return reduce(RULE_47, 2);
    case 75:
      return reduce(RULE_47, 2);
    case 92:
      return reduce(RULE_47, 2);
    case 114:
      return reduce(RULE_47, 2);
    case 125:
      return reduce(RULE_47, 2);
    case 126:
      return reduce(RULE_47, 2);
    case 115:
      return reduce(RULE_47, 2);
    case 59:
      return reduce(RULE_47, 2);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action544(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 7);
    case 63:
      return reduce(RULE_13, 7);
    case 76:
      return reduce(RULE_13, 7);
    case 78:
      return reduce(RULE_13, 7);
    case 103:
      return reduce(RULE_13, 7);
    case 82:
      return reduce(RULE_13, 7);
    case 85:
      return reduce(RULE_13, 7);
    case 104:
      return reduce(RULE_13, 7);
    case 72:
      return reduce(RULE_13, 7);
    case 86:
      return reduce(RULE_13, 7);
    case 90:
      return reduce(RULE_13, 7);
    case 99:
      return reduce(RULE_13, 7);
    case 88:
      return reduce(RULE_13, 7);
    case 95:
      return reduce(RULE_13, 7);
    case 69:
      return reduce(RULE_13, 7);
    case 70:
      return reduce(RULE_13, 7);
    case 89:
      return reduce(RULE_13, 7);
    case 106:
      return reduce(RULE_13, 7);
    case 97:
      return reduce(RULE_13, 7);
    case 109:
      return reduce(RULE_13, 7);
    case 101:
      return reduce(RULE_13, 7);
    case 84:
      return reduce(RULE_13, 7);
    case 80:
      return reduce(RULE_13, 7);
    case 91:
      return reduce(RULE_13, 7);
    case 110:
      return reduce(RULE_13, 7);
    case 107:
      return reduce(RULE_13, 7);
    case 66:
      return reduce(RULE_13, 7);
    case 73:
      return reduce(RULE_13, 7);
    case 92:
      return reduce(RULE_13, 7);
    case 68:
      return reduce(RULE_13, 7);
    case 108:
      return reduce(RULE_13, 7);
    case 93:
      return reduce(RULE_13, 7);
    case 102:
      return reduce(RULE_13, 7);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, CARET, RPAREN, STAR, LPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action545(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 63:
      stateStack.addFirst(295);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(296);
      tokenStack.addFirst(token);
      return true;
    case 70:
      stateStack.addFirst(297);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 97:
      stateStack.addFirst(300);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(301);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 66:
      stateStack.addFirst(305);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    case 69:
      return reduce(RULE_49, 3);
    case 107:
      return reduce(RULE_49, 3);
    case 106:
      return reduce(RULE_49, 3);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto545(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action546(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_49, 2);
    case 107:
      return reduce(RULE_49, 2);
    case 106:
      return reduce(RULE_49, 2);
    default: throw new BadTokenException(token, new Object[] {RPAREN, COMMA, RBRACE});
    }
  }

  private final boolean action547(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(570);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto547(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 58: return 336;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 275;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 48: return 178;
    case 42: return 337;
    case 54: return 158;
    case 56: return 571;
    case 46: return 181;
    case 53: return 114;
    case 23: return 274;
    case 47: return 183;
    default: return -1;
    }
  }

  private final boolean action548(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_55, 1);
    case 140:
      return reduce(RULE_55, 1);
    case 141:
      return reduce(RULE_55, 1);
    case 142:
      return reduce(RULE_55, 1);
    case 129:
      return reduce(RULE_55, 1);
    case 101:
      return reduce(RULE_55, 1);
    case 116:
      return reduce(RULE_55, 1);
    case 136:
      return reduce(RULE_55, 1);
    case 91:
      return reduce(RULE_55, 1);
    case 143:
      return reduce(RULE_55, 1);
    case 92:
      return reduce(RULE_55, 1);
    case 130:
      return reduce(RULE_55, 1);
    case 114:
      return reduce(RULE_55, 1);
    case 125:
      return reduce(RULE_55, 1);
    case 90:
      return reduce(RULE_55, 1);
    case 59:
      return reduce(RULE_55, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action549(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, ULONG_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, NEW_KEYWORD, INT_KEYWORD, TRUE_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, UNDERSCORE, LSQUARE, LONG_KEYWORD, FLOATING_LITERAL, BOOLEAN_KEYWORD, THIS_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto549(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 155;
    case 11: return 572;
    case 52: return 111;
    case 55: return 157;
    case 37: return 120;
    case 50: return 104;
    case 58: return 122;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 159;
    case 38: return 52;
    case 21: return 160;
    default: return -1;
    }
  }

  private final boolean action550(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, ULONG_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, NEW_KEYWORD, INT_KEYWORD, TRUE_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, SHORT_KEYWORD, LPAREN, USHORT_KEYWORD, UNDERSCORE, LSQUARE, LONG_KEYWORD, FLOATING_LITERAL, BOOLEAN_KEYWORD, THIS_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final int goto550(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 155;
    case 11: return 573;
    case 52: return 111;
    case 55: return 157;
    case 37: return 120;
    case 50: return 104;
    case 58: return 122;
    case 54: return 158;
    case 51: return 124;
    case 53: return 114;
    case 23: return 159;
    case 38: return 52;
    case 21: return 160;
    default: return -1;
    }
  }

  private final boolean action551(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      return reduce(RULE_56, 4);
    case 91:
      return reduce(RULE_13, 14);
    case 92:
      return reduce(RULE_13, 14);
    case 103:
      return reduce(RULE_13, 14);
    case 82:
      return reduce(RULE_13, 14);
    default: throw new BadTokenException(token, new Object[] {LPAREN, RPAREN, LSQUARE, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action552(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      return reduce(RULE_56, 3);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action553(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(574);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action554(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 100:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 83:
      stateStack.addFirst(575);
      tokenStack.addFirst(token);
      return true;
    case 81:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(218);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(219);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(220);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(221);
      tokenStack.addFirst(token);
      return true;
    case 111:
      stateStack.addFirst(222);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(223);
      tokenStack.addFirst(token);
      return true;
    case 67:
      stateStack.addFirst(224);
      tokenStack.addFirst(token);
      return true;
    case 64:
      stateStack.addFirst(225);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {PIPE_EQUALS, PLUS_EQUALS, EQUALS, DOUBLE_RANGLE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, STAR_EQUALS, MINUS_EQUALS, PERCENT_EQUALS, CARET_EQUALS, AMPERSAND_EQUALS});
    }
  }

  private final boolean action555(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 107:
      return reduce(RULE_56, 5);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, DOUBLE_PLUS, FALSE_KEYWORD, NULL_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, RPAREN, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, NAME});
    }
  }

  private final int goto555(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 103;
    case 55: return 551;
    case 50: return 104;
    case 37: return 120;
    case 58: return 122;
    case 34: return 552;
    case 51: return 124;
    case 38: return 52;
    case 21: return 389;
    case 18: return 576;
    case 12: return 128;
    case 52: return 111;
    case 54: return 158;
    case 13: return 554;
    case 53: return 114;
    case 23: return 159;
    default: return -1;
    }
  }

  private final boolean action556(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_53, 3);
    case 140:
      return reduce(RULE_53, 3);
    case 123:
      return reduce(RULE_53, 3);
    case 133:
      return reduce(RULE_53, 3);
    case 79:
      return reduce(RULE_53, 3);
    case 131:
      return reduce(RULE_53, 3);
    case 60:
      return reduce(RULE_53, 3);
    case 62:
      return reduce(RULE_53, 3);
    case 139:
      return reduce(RULE_53, 3);
    case 127:
      return reduce(RULE_53, 3);
    case 136:
      return reduce(RULE_53, 3);
    case 135:
      return reduce(RULE_53, 3);
    case 113:
      return reduce(RULE_53, 3);
    case 130:
      return reduce(RULE_53, 3);
    case 61:
      return reduce(RULE_53, 3);
    case 137:
      return reduce(RULE_53, 3);
    case 138:
      return reduce(RULE_53, 3);
    case 90:
      return reduce(RULE_53, 3);
    case 121:
      return reduce(RULE_53, 3);
    case 124:
      return reduce(RULE_53, 3);
    case 142:
      return reduce(RULE_53, 3);
    case 112:
      return reduce(RULE_53, 3);
    case 145:
      return reduce(RULE_53, 3);
    case 132:
      return reduce(RULE_53, 3);
    case 120:
      return reduce(RULE_53, 3);
    case 129:
      return reduce(RULE_53, 3);
    case 106:
      return reduce(RULE_53, 3);
    case 101:
      return reduce(RULE_53, 3);
    case 116:
      return reduce(RULE_53, 3);
    case 109:
      return reduce(RULE_53, 3);
    case 84:
      return reduce(RULE_53, 3);
    case 91:
      return reduce(RULE_53, 3);
    case 143:
      return reduce(RULE_53, 3);
    case 75:
      return reduce(RULE_53, 3);
    case 92:
      return reduce(RULE_53, 3);
    case 114:
      return reduce(RULE_53, 3);
    case 117:
      return reduce(RULE_53, 3);
    case 125:
      return reduce(RULE_53, 3);
    case 126:
      return reduce(RULE_53, 3);
    case 115:
      return reduce(RULE_53, 3);
    case 93:
      return reduce(RULE_53, 3);
    case 59:
      return reduce(RULE_53, 3);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, SEMICOLON, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action557(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_53, 6);
    case 140:
      return reduce(RULE_53, 6);
    case 123:
      return reduce(RULE_53, 6);
    case 133:
      return reduce(RULE_53, 6);
    case 79:
      return reduce(RULE_53, 6);
    case 131:
      return reduce(RULE_53, 6);
    case 60:
      return reduce(RULE_53, 6);
    case 62:
      return reduce(RULE_53, 6);
    case 139:
      return reduce(RULE_53, 6);
    case 127:
      return reduce(RULE_53, 6);
    case 136:
      return reduce(RULE_53, 6);
    case 135:
      return reduce(RULE_53, 6);
    case 113:
      return reduce(RULE_53, 6);
    case 130:
      return reduce(RULE_53, 6);
    case 61:
      return reduce(RULE_53, 6);
    case 137:
      return reduce(RULE_53, 6);
    case 138:
      return reduce(RULE_53, 6);
    case 90:
      return reduce(RULE_53, 6);
    case 121:
      return reduce(RULE_53, 6);
    case 124:
      return reduce(RULE_53, 6);
    case 142:
      return reduce(RULE_53, 6);
    case 112:
      return reduce(RULE_53, 6);
    case 145:
      return reduce(RULE_53, 6);
    case 132:
      return reduce(RULE_53, 6);
    case 120:
      return reduce(RULE_53, 6);
    case 129:
      return reduce(RULE_53, 6);
    case 106:
      return reduce(RULE_53, 6);
    case 101:
      return reduce(RULE_53, 6);
    case 116:
      return reduce(RULE_53, 6);
    case 109:
      return reduce(RULE_53, 6);
    case 84:
      return reduce(RULE_53, 6);
    case 91:
      return reduce(RULE_53, 6);
    case 143:
      return reduce(RULE_53, 6);
    case 75:
      return reduce(RULE_53, 6);
    case 92:
      return reduce(RULE_53, 6);
    case 114:
      return reduce(RULE_53, 6);
    case 117:
      return reduce(RULE_53, 6);
    case 125:
      return reduce(RULE_53, 6);
    case 126:
      return reduce(RULE_53, 6);
    case 115:
      return reduce(RULE_53, 6);
    case 93:
      return reduce(RULE_53, 6);
    case 59:
      return reduce(RULE_53, 6);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, SEMICOLON, BYTE_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action558(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(577);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action559(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(578);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action560(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(579);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action561(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_53, 10);
    case 140:
      return reduce(RULE_53, 10);
    case 123:
      return reduce(RULE_53, 10);
    case 133:
      return reduce(RULE_53, 10);
    case 79:
      return reduce(RULE_53, 10);
    case 131:
      return reduce(RULE_53, 10);
    case 60:
      return reduce(RULE_53, 10);
    case 62:
      return reduce(RULE_53, 10);
    case 139:
      return reduce(RULE_53, 10);
    case 127:
      return reduce(RULE_53, 10);
    case 136:
      return reduce(RULE_53, 10);
    case 135:
      return reduce(RULE_53, 10);
    case 113:
      return reduce(RULE_53, 10);
    case 130:
      return reduce(RULE_53, 10);
    case 61:
      return reduce(RULE_53, 10);
    case 137:
      return reduce(RULE_53, 10);
    case 138:
      return reduce(RULE_53, 10);
    case 90:
      return reduce(RULE_53, 10);
    case 121:
      return reduce(RULE_53, 10);
    case 124:
      return reduce(RULE_53, 10);
    case 142:
      return reduce(RULE_53, 10);
    case 112:
      return reduce(RULE_53, 10);
    case 145:
      return reduce(RULE_53, 10);
    case 132:
      return reduce(RULE_53, 10);
    case 120:
      return reduce(RULE_53, 10);
    case 129:
      return reduce(RULE_53, 10);
    case 106:
      return reduce(RULE_53, 10);
    case 109:
      return reduce(RULE_53, 10);
    case 101:
      return reduce(RULE_53, 10);
    case 116:
      return reduce(RULE_53, 10);
    case 84:
      return reduce(RULE_53, 10);
    case 91:
      return reduce(RULE_53, 10);
    case 143:
      return reduce(RULE_53, 10);
    case 75:
      return reduce(RULE_53, 10);
    case 92:
      return reduce(RULE_53, 10);
    case 114:
      return reduce(RULE_53, 10);
    case 117:
      return reduce(RULE_53, 10);
    case 125:
      return reduce(RULE_53, 10);
    case 93:
      return reduce(RULE_53, 10);
    case 126:
      return reduce(RULE_53, 10);
    case 115:
      return reduce(RULE_53, 10);
    case 59:
      return reduce(RULE_53, 10);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, SEMICOLON, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, MINUS, NAME});
    }
  }

  private final boolean action562(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 59:
      stateStack.addFirst(580);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action563(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_44, 3);
    case 140:
      return reduce(RULE_44, 3);
    case 141:
      return reduce(RULE_44, 3);
    case 131:
      return reduce(RULE_44, 3);
    case 124:
      return reduce(RULE_44, 3);
    case 142:
      return reduce(RULE_44, 3);
    case 106:
      return reduce(RULE_44, 3);
    case 129:
      return reduce(RULE_44, 3);
    case 144:
      return reduce(RULE_44, 3);
    case 101:
      return reduce(RULE_44, 3);
    case 116:
      return reduce(RULE_44, 3);
    case 136:
      return reduce(RULE_44, 3);
    case 91:
      return reduce(RULE_44, 3);
    case 143:
      return reduce(RULE_44, 3);
    case 92:
      return reduce(RULE_44, 3);
    case 130:
      return reduce(RULE_44, 3);
    case 114:
      return reduce(RULE_44, 3);
    case 137:
      return reduce(RULE_44, 3);
    case 125:
      return reduce(RULE_44, 3);
    case 90:
      return reduce(RULE_44, 3);
    case 59:
      return reduce(RULE_44, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, RBRACE, INT_KEYWORD, VOID_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, SHORT_KEYWORD, USHORT_KEYWORD, LPAREN, LSQUARE, LONG_KEYWORD, BOOLEAN_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, LBRACE, NAME});
    }
  }

  private final boolean action564(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_28, 1);
    case 63:
      return reduce(RULE_28, 1);
    case 76:
      return reduce(RULE_28, 1);
    case 78:
      return reduce(RULE_28, 1);
    case 85:
      return reduce(RULE_28, 1);
    case 104:
      return reduce(RULE_28, 1);
    case 72:
      return reduce(RULE_28, 1);
    case 86:
      return reduce(RULE_28, 1);
    case 90:
      return reduce(RULE_28, 1);
    case 99:
      return reduce(RULE_28, 1);
    case 95:
      return reduce(RULE_28, 1);
    case 88:
      return reduce(RULE_28, 1);
    case 69:
      return reduce(RULE_28, 1);
    case 70:
      return reduce(RULE_28, 1);
    case 89:
      return reduce(RULE_28, 1);
    case 106:
      return reduce(RULE_28, 1);
    case 97:
      return reduce(RULE_28, 1);
    case 109:
      return reduce(RULE_28, 1);
    case 101:
      return reduce(RULE_28, 1);
    case 84:
      return reduce(RULE_28, 1);
    case 80:
      return reduce(RULE_28, 1);
    case 107:
      return reduce(RULE_28, 1);
    case 66:
      return reduce(RULE_28, 1);
    case 110:
      return reduce(RULE_28, 1);
    case 73:
      return reduce(RULE_28, 1);
    case 68:
      return reduce(RULE_28, 1);
    case 108:
      return reduce(RULE_28, 1);
    case 102:
      return reduce(RULE_28, 1);
    case 93:
      return reduce(RULE_28, 1);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, CARET, STAR, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action565(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_28, 2);
    case 63:
      return reduce(RULE_28, 2);
    case 76:
      return reduce(RULE_28, 2);
    case 78:
      return reduce(RULE_28, 2);
    case 85:
      return reduce(RULE_28, 2);
    case 104:
      return reduce(RULE_28, 2);
    case 72:
      return reduce(RULE_28, 2);
    case 86:
      return reduce(RULE_28, 2);
    case 90:
      return reduce(RULE_28, 2);
    case 99:
      return reduce(RULE_28, 2);
    case 95:
      return reduce(RULE_28, 2);
    case 88:
      return reduce(RULE_28, 2);
    case 69:
      return reduce(RULE_28, 2);
    case 70:
      return reduce(RULE_28, 2);
    case 89:
      return reduce(RULE_28, 2);
    case 106:
      return reduce(RULE_28, 2);
    case 97:
      return reduce(RULE_28, 2);
    case 109:
      return reduce(RULE_28, 2);
    case 101:
      return reduce(RULE_28, 2);
    case 84:
      return reduce(RULE_28, 2);
    case 80:
      return reduce(RULE_28, 2);
    case 107:
      return reduce(RULE_28, 2);
    case 66:
      return reduce(RULE_28, 2);
    case 110:
      return reduce(RULE_28, 2);
    case 73:
      return reduce(RULE_28, 2);
    case 68:
      return reduce(RULE_28, 2);
    case 108:
      return reduce(RULE_28, 2);
    case 102:
      return reduce(RULE_28, 2);
    case 93:
      return reduce(RULE_28, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, PERCENT, LANGLE, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, STAR, CARET, LPAREN, RPAREN, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto565(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action566(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 63:
      stateStack.addFirst(295);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(296);
      tokenStack.addFirst(token);
      return true;
    case 70:
      stateStack.addFirst(297);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 97:
      stateStack.addFirst(300);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(301);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 66:
      stateStack.addFirst(305);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_27, 2);
    case 69:
      return reduce(RULE_27, 2);
    case 107:
      return reduce(RULE_27, 2);
    case 68:
      return reduce(RULE_27, 2);
    case 108:
      return reduce(RULE_27, 2);
    case 90:
      return reduce(RULE_27, 2);
    case 106:
      return reduce(RULE_27, 2);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto566(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action567(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_27, 1);
    case 69:
      return reduce(RULE_27, 1);
    case 107:
      return reduce(RULE_27, 1);
    case 68:
      return reduce(RULE_27, 1);
    case 108:
      return reduce(RULE_27, 1);
    case 90:
      return reduce(RULE_27, 1);
    case 106:
      return reduce(RULE_27, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COMMA, COLON, RSQUARE, LBRACE, RBRACE});
    }
  }

  private final boolean action568(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 63:
      stateStack.addFirst(295);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(296);
      tokenStack.addFirst(token);
      return true;
    case 70:
      stateStack.addFirst(297);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(234);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 85:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 97:
      stateStack.addFirst(300);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(301);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(304);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 66:
      stateStack.addFirst(305);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_27, 4);
    case 69:
      return reduce(RULE_27, 4);
    case 107:
      return reduce(RULE_27, 4);
    case 68:
      return reduce(RULE_27, 4);
    case 108:
      return reduce(RULE_27, 4);
    case 90:
      return reduce(RULE_27, 4);
    case 106:
      return reduce(RULE_27, 4);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, LPAREN, CARET, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final int goto568(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 10: return 235;
    default: return -1;
    }
  }

  private final boolean action569(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_27, 3);
    case 69:
      return reduce(RULE_27, 3);
    case 107:
      return reduce(RULE_27, 3);
    case 68:
      return reduce(RULE_27, 3);
    case 108:
      return reduce(RULE_27, 3);
    case 90:
      return reduce(RULE_27, 3);
    case 106:
      return reduce(RULE_27, 3);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN, COMMA, COLON, RSQUARE, LBRACE, RBRACE});
    }
  }

  private final boolean action570(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 8);
    case 76:
      return reduce(RULE_13, 8);
    case 63:
      return reduce(RULE_13, 8);
    case 78:
      return reduce(RULE_13, 8);
    case 103:
      return reduce(RULE_13, 8);
    case 82:
      return reduce(RULE_13, 8);
    case 85:
      return reduce(RULE_13, 8);
    case 104:
      return reduce(RULE_13, 8);
    case 72:
      return reduce(RULE_13, 8);
    case 86:
      return reduce(RULE_13, 8);
    case 90:
      return reduce(RULE_13, 8);
    case 99:
      return reduce(RULE_13, 8);
    case 88:
      return reduce(RULE_13, 8);
    case 95:
      return reduce(RULE_13, 8);
    case 69:
      return reduce(RULE_13, 8);
    case 70:
      return reduce(RULE_13, 8);
    case 89:
      return reduce(RULE_13, 8);
    case 106:
      return reduce(RULE_13, 8);
    case 97:
      return reduce(RULE_13, 8);
    case 109:
      return reduce(RULE_13, 8);
    case 101:
      return reduce(RULE_13, 8);
    case 84:
      return reduce(RULE_13, 8);
    case 80:
      return reduce(RULE_13, 8);
    case 91:
      return reduce(RULE_13, 8);
    case 66:
      return reduce(RULE_13, 8);
    case 110:
      return reduce(RULE_13, 8);
    case 107:
      return reduce(RULE_13, 8);
    case 73:
      return reduce(RULE_13, 8);
    case 92:
      return reduce(RULE_13, 8);
    case 68:
      return reduce(RULE_13, 8);
    case 108:
      return reduce(RULE_13, 8);
    case 102:
      return reduce(RULE_13, 8);
    case 93:
      return reduce(RULE_13, 8);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, AMPERSAND, DOUBLE_PERCENT, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, RPAREN, STAR, CARET, LPAREN, LSQUARE, DOUBLE_LANGLE, COLON, RSQUARE, MINUS, QUESTION_MARK_COLON});
    }
  }

  private final boolean action571(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      stateStack.addFirst(502);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(581);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, RBRACE});
    }
  }

  private final boolean action572(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      return reduce(RULE_56, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action573(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      return reduce(RULE_56, 1);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action574(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto574(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 582;
    default: return -1;
    }
  }

  private final boolean action575(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 60:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 62:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(37);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 61:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(154);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(96);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 59:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, SHORT_KEYWORD, LONG_KEYWORD, FLOATING_LITERAL, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, ULONG_KEYWORD, TILDE, NEW_KEYWORD, INT_KEYWORD, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, USHORT_KEYWORD, LPAREN, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, NAME});
    }
  }

  private final int goto575(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 43: return 168;
    case 55: return 157;
    case 50: return 169;
    case 37: return 170;
    case 22: return 171;
    case 58: return 172;
    case 51: return 124;
    case 44: return 173;
    case 38: return 52;
    case 21: return 174;
    case 45: return 175;
    case 49: return 176;
    case 52: return 177;
    case 40: return 583;
    case 48: return 178;
    case 42: return 180;
    case 54: return 158;
    case 46: return 181;
    case 53: return 114;
    case 23: return 182;
    case 47: return 183;
    case 41: return 184;
    default: return -1;
    }
  }

  private final boolean action576(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(584);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action577(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_53, 12);
    case 141:
      return reduce(RULE_53, 12);
    case 131:
      return reduce(RULE_53, 12);
    case 79:
      return reduce(RULE_53, 12);
    case 133:
      return reduce(RULE_53, 12);
    case 123:
      return reduce(RULE_53, 12);
    case 60:
      return reduce(RULE_53, 12);
    case 62:
      return reduce(RULE_53, 12);
    case 139:
      return reduce(RULE_53, 12);
    case 127:
      return reduce(RULE_53, 12);
    case 136:
      return reduce(RULE_53, 12);
    case 135:
      return reduce(RULE_53, 12);
    case 113:
      return reduce(RULE_53, 12);
    case 130:
      return reduce(RULE_53, 12);
    case 61:
      return reduce(RULE_53, 12);
    case 137:
      return reduce(RULE_53, 12);
    case 138:
      return reduce(RULE_53, 12);
    case 90:
      return reduce(RULE_53, 12);
    case 121:
      return reduce(RULE_53, 12);
    case 124:
      return reduce(RULE_53, 12);
    case 142:
      return reduce(RULE_53, 12);
    case 112:
      return reduce(RULE_53, 12);
    case 145:
      return reduce(RULE_53, 12);
    case 132:
      return reduce(RULE_53, 12);
    case 120:
      return reduce(RULE_53, 12);
    case 106:
      return reduce(RULE_53, 12);
    case 129:
      return reduce(RULE_53, 12);
    case 116:
      return reduce(RULE_53, 12);
    case 101:
      return reduce(RULE_53, 12);
    case 109:
      return reduce(RULE_53, 12);
    case 84:
      return reduce(RULE_53, 12);
    case 143:
      return reduce(RULE_53, 12);
    case 91:
      return reduce(RULE_53, 12);
    case 75:
      return reduce(RULE_53, 12);
    case 92:
      return reduce(RULE_53, 12);
    case 114:
      return reduce(RULE_53, 12);
    case 117:
      return reduce(RULE_53, 12);
    case 125:
      return reduce(RULE_53, 12);
    case 115:
      return reduce(RULE_53, 12);
    case 126:
      return reduce(RULE_53, 12);
    case 93:
      return reduce(RULE_53, 12);
    case 59:
      return reduce(RULE_53, 12);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action578(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_53, 4);
    case 141:
      return reduce(RULE_53, 4);
    case 131:
      return reduce(RULE_53, 4);
    case 79:
      return reduce(RULE_53, 4);
    case 133:
      return reduce(RULE_53, 4);
    case 123:
      return reduce(RULE_53, 4);
    case 60:
      return reduce(RULE_53, 4);
    case 62:
      return reduce(RULE_53, 4);
    case 139:
      return reduce(RULE_53, 4);
    case 127:
      return reduce(RULE_53, 4);
    case 136:
      return reduce(RULE_53, 4);
    case 135:
      return reduce(RULE_53, 4);
    case 113:
      return reduce(RULE_53, 4);
    case 130:
      return reduce(RULE_53, 4);
    case 61:
      return reduce(RULE_53, 4);
    case 137:
      return reduce(RULE_53, 4);
    case 138:
      return reduce(RULE_53, 4);
    case 90:
      return reduce(RULE_53, 4);
    case 121:
      return reduce(RULE_53, 4);
    case 124:
      return reduce(RULE_53, 4);
    case 142:
      return reduce(RULE_53, 4);
    case 112:
      return reduce(RULE_53, 4);
    case 145:
      return reduce(RULE_53, 4);
    case 132:
      return reduce(RULE_53, 4);
    case 120:
      return reduce(RULE_53, 4);
    case 106:
      return reduce(RULE_53, 4);
    case 129:
      return reduce(RULE_53, 4);
    case 116:
      return reduce(RULE_53, 4);
    case 101:
      return reduce(RULE_53, 4);
    case 109:
      return reduce(RULE_53, 4);
    case 84:
      return reduce(RULE_53, 4);
    case 143:
      return reduce(RULE_53, 4);
    case 91:
      return reduce(RULE_53, 4);
    case 75:
      return reduce(RULE_53, 4);
    case 92:
      return reduce(RULE_53, 4);
    case 114:
      return reduce(RULE_53, 4);
    case 117:
      return reduce(RULE_53, 4);
    case 125:
      return reduce(RULE_53, 4);
    case 115:
      return reduce(RULE_53, 4);
    case 126:
      return reduce(RULE_53, 4);
    case 93:
      return reduce(RULE_53, 4);
    case 59:
      return reduce(RULE_53, 4);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action579(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_53, 8);
    case 141:
      return reduce(RULE_53, 8);
    case 131:
      return reduce(RULE_53, 8);
    case 79:
      return reduce(RULE_53, 8);
    case 133:
      return reduce(RULE_53, 8);
    case 123:
      return reduce(RULE_53, 8);
    case 60:
      return reduce(RULE_53, 8);
    case 62:
      return reduce(RULE_53, 8);
    case 139:
      return reduce(RULE_53, 8);
    case 127:
      return reduce(RULE_53, 8);
    case 136:
      return reduce(RULE_53, 8);
    case 135:
      return reduce(RULE_53, 8);
    case 113:
      return reduce(RULE_53, 8);
    case 130:
      return reduce(RULE_53, 8);
    case 61:
      return reduce(RULE_53, 8);
    case 137:
      return reduce(RULE_53, 8);
    case 138:
      return reduce(RULE_53, 8);
    case 90:
      return reduce(RULE_53, 8);
    case 121:
      return reduce(RULE_53, 8);
    case 124:
      return reduce(RULE_53, 8);
    case 142:
      return reduce(RULE_53, 8);
    case 112:
      return reduce(RULE_53, 8);
    case 145:
      return reduce(RULE_53, 8);
    case 132:
      return reduce(RULE_53, 8);
    case 120:
      return reduce(RULE_53, 8);
    case 106:
      return reduce(RULE_53, 8);
    case 129:
      return reduce(RULE_53, 8);
    case 116:
      return reduce(RULE_53, 8);
    case 101:
      return reduce(RULE_53, 8);
    case 109:
      return reduce(RULE_53, 8);
    case 84:
      return reduce(RULE_53, 8);
    case 143:
      return reduce(RULE_53, 8);
    case 91:
      return reduce(RULE_53, 8);
    case 75:
      return reduce(RULE_53, 8);
    case 92:
      return reduce(RULE_53, 8);
    case 114:
      return reduce(RULE_53, 8);
    case 117:
      return reduce(RULE_53, 8);
    case 125:
      return reduce(RULE_53, 8);
    case 115:
      return reduce(RULE_53, 8);
    case 126:
      return reduce(RULE_53, 8);
    case 93:
      return reduce(RULE_53, 8);
    case 59:
      return reduce(RULE_53, 8);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, TILDE, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, SEMICOLON, QUESTION_MARK, BYTE_KEYWORD, EXCLAIMATION_MARK, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, CAST_KEYWORD, FLOAT_KEYWORD, MINUS, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

  private final boolean action580(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 69:
      return reduce(RULE_57, 1);
    case 107:
      return reduce(RULE_57, 1);
    default: throw new BadTokenException(token, new Object[] {RPAREN, COMMA});
    }
  }

  private final boolean action581(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_13, 9);
    case 63:
      return reduce(RULE_13, 9);
    case 76:
      return reduce(RULE_13, 9);
    case 78:
      return reduce(RULE_13, 9);
    case 103:
      return reduce(RULE_13, 9);
    case 82:
      return reduce(RULE_13, 9);
    case 85:
      return reduce(RULE_13, 9);
    case 104:
      return reduce(RULE_13, 9);
    case 72:
      return reduce(RULE_13, 9);
    case 86:
      return reduce(RULE_13, 9);
    case 90:
      return reduce(RULE_13, 9);
    case 99:
      return reduce(RULE_13, 9);
    case 88:
      return reduce(RULE_13, 9);
    case 95:
      return reduce(RULE_13, 9);
    case 69:
      return reduce(RULE_13, 9);
    case 70:
      return reduce(RULE_13, 9);
    case 89:
      return reduce(RULE_13, 9);
    case 106:
      return reduce(RULE_13, 9);
    case 97:
      return reduce(RULE_13, 9);
    case 109:
      return reduce(RULE_13, 9);
    case 101:
      return reduce(RULE_13, 9);
    case 84:
      return reduce(RULE_13, 9);
    case 80:
      return reduce(RULE_13, 9);
    case 110:
      return reduce(RULE_13, 9);
    case 107:
      return reduce(RULE_13, 9);
    case 66:
      return reduce(RULE_13, 9);
    case 91:
      return reduce(RULE_13, 9);
    case 92:
      return reduce(RULE_13, 9);
    case 73:
      return reduce(RULE_13, 9);
    case 68:
      return reduce(RULE_13, 9);
    case 108:
      return reduce(RULE_13, 9);
    case 93:
      return reduce(RULE_13, 9);
    case 102:
      return reduce(RULE_13, 9);
    default: throw new BadTokenException(token, new Object[] {RANGLE_EQUALS, DOUBLE_PERCENT, AMPERSAND, DOUBLE_PIPE, QUESTION_MARK_DOT, DOT, EXCLAIMATION_MARK_EQUALS, RANGLE, DOUBLE_EQUALS, FORWARD_SLASH, LBRACE, PLUS, LANGLE, PERCENT, COMMA, DOUBLE_AMPERSAND, LANGLE_EQUALS, RBRACE, PIPE, SEMICOLON, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_RANGLE, LPAREN, CARET, RPAREN, STAR, DOUBLE_LANGLE, LSQUARE, COLON, RSQUARE, QUESTION_MARK_COLON, MINUS});
    }
  }

  private final boolean action582(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 141:
      return reduce(RULE_58, 1);
    case 140:
      return reduce(RULE_58, 1);
    case 123:
      return reduce(RULE_58, 1);
    case 133:
      return reduce(RULE_58, 1);
    case 79:
      return reduce(RULE_58, 1);
    case 131:
      return reduce(RULE_58, 1);
    case 60:
      return reduce(RULE_58, 1);
    case 62:
      return reduce(RULE_58, 1);
    case 139:
      return reduce(RULE_58, 1);
    case 127:
      return reduce(RULE_58, 1);
    case 136:
      return reduce(RULE_58, 1);
    case 135:
      return reduce(RULE_58, 1);
    case 113:
      return reduce(RULE_58, 1);
    case 130:
      return reduce(RULE_58, 1);
    case 61:
      return reduce(RULE_58, 1);
    case 137:
      return reduce(RULE_58, 1);
    case 138:
      return reduce(RULE_58, 1);
    case 90:
      return reduce(RULE_58, 1);
    case 121:
      return reduce(RULE_58, 1);
    case 124:
      return reduce(RULE_58, 1);
    case 142:
      return reduce(RULE_58, 1);
    case 145:
      return reduce(RULE_58, 1);
    case 132:
      return reduce(RULE_58, 1);
    case 120:
      return reduce(RULE_58, 1);
    case 129:
      return reduce(RULE_58, 1);
    case 106:
      return reduce(RULE_58, 1);
    case 101:
      return reduce(RULE_58, 1);
    case 116:
      return reduce(RULE_58, 1);
    case 91:
      return reduce(RULE_58, 1);
    case 143:
      return reduce(RULE_58, 1);
    case 75:
      return reduce(RULE_58, 1);
    case 92:
      return reduce(RULE_58, 1);
    case 114:
      return reduce(RULE_58, 1);
    case 125:
      return reduce(RULE_58, 1);
    case 126:
      return reduce(RULE_58, 1);
    case 115:
      return reduce(RULE_58, 1);
    case 59:
      return reduce(RULE_58, 1);
    default: throw new BadTokenException(token, new Object[] {UBYTE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, DOUBLE_PLUS, NULL_KEYWORD, FALSE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, RBRACE, INT_KEYWORD, BYTE_KEYWORD, QUESTION_MARK, USHORT_KEYWORD, LPAREN, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, BREAK_KEYWORD, FOR_KEYWORD, NAME});
    }
  }

  private final boolean action583(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      return reduce(RULE_56, 2);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action584(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 90:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto584(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 585;
    default: return -1;
    }
  }

  private final boolean action585(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      return reduce(RULE_58, 0);
    case 141:
      return reduce(RULE_58, 0);
    case 131:
      return reduce(RULE_58, 0);
    case 79:
      return reduce(RULE_58, 0);
    case 133:
      return reduce(RULE_58, 0);
    case 123:
      return reduce(RULE_58, 0);
    case 60:
      return reduce(RULE_58, 0);
    case 62:
      return reduce(RULE_58, 0);
    case 139:
      return reduce(RULE_58, 0);
    case 127:
      return reduce(RULE_58, 0);
    case 136:
      return reduce(RULE_58, 0);
    case 135:
      return reduce(RULE_58, 0);
    case 113:
      return reduce(RULE_58, 0);
    case 130:
      return reduce(RULE_58, 0);
    case 61:
      return reduce(RULE_58, 0);
    case 137:
      return reduce(RULE_58, 0);
    case 138:
      return reduce(RULE_58, 0);
    case 90:
      return reduce(RULE_58, 0);
    case 121:
      return reduce(RULE_58, 0);
    case 124:
      return reduce(RULE_58, 0);
    case 142:
      return reduce(RULE_58, 0);
    case 145:
      return reduce(RULE_58, 0);
    case 132:
      return reduce(RULE_58, 0);
    case 120:
      return reduce(RULE_58, 0);
    case 106:
      return reduce(RULE_58, 0);
    case 129:
      return reduce(RULE_58, 0);
    case 116:
      return reduce(RULE_58, 0);
    case 101:
      return reduce(RULE_58, 0);
    case 143:
      return reduce(RULE_58, 0);
    case 91:
      return reduce(RULE_58, 0);
    case 75:
      return reduce(RULE_58, 0);
    case 92:
      return reduce(RULE_58, 0);
    case 114:
      return reduce(RULE_58, 0);
    case 125:
      return reduce(RULE_58, 0);
    case 115:
      return reduce(RULE_58, 0);
    case 126:
      return reduce(RULE_58, 0);
    case 59:
      return reduce(RULE_58, 0);
    default: throw new BadTokenException(token, new Object[] {UINT_KEYWORD, UBYTE_KEYWORD, FALSE_KEYWORD, NULL_KEYWORD, DOUBLE_PLUS, NATIVE_KEYWORD, INTEGER_LITERAL, STRING_LITERAL, TRUE_KEYWORD, IF_KEYWORD, SHORT_KEYWORD, RETURN_KEYWORD, UNDERSCORE, LONG_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, THIS_KEYWORD, LBRACE, DOUBLE_KEYWORD, FINAL_KEYWORD, ULONG_KEYWORD, WHILE_KEYWORD, NEW_KEYWORD, CONTINUE_KEYWORD, INT_KEYWORD, RBRACE, QUESTION_MARK, BYTE_KEYWORD, LPAREN, USHORT_KEYWORD, DOUBLE_MINUS, LSQUARE, BOOLEAN_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, NAME});
    }
  }

}
