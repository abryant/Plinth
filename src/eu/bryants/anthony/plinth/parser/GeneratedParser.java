package eu.bryants.anthony.plinth.parser;

import static eu.bryants.anthony.plinth.parser.ParseType.*;

import java.util.Deque;
import java.util.LinkedList;

import parser.BadTokenException;
import parser.ParseException;
import parser.Production;
import parser.Rule;
import parser.Token;
import parser.Tokenizer;
import eu.bryants.anthony.plinth.parser.rules.ClassDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.CompilationUnitRule;
import eu.bryants.anthony.plinth.parser.rules.CompoundDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.InterfaceDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.AdditiveExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ComparisonExpressionLessThanQNameRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ConditionalExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.CreationExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.DimensionsRule;
import eu.bryants.anthony.plinth.parser.rules.expression.EqualityExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionListRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionNotLessThanQNameRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.FunctionCallExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.LogicalExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.MultiplicativeExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryNotThisRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryRule;
import eu.bryants.anthony.plinth.parser.rules.expression.QNameExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.QNameOrLessThanExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ShiftExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.TupleExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.TupleIndexExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.UnaryExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.member.ConstructorRule;
import eu.bryants.anthony.plinth.parser.rules.member.FieldRule;
import eu.bryants.anthony.plinth.parser.rules.member.InitialiserRule;
import eu.bryants.anthony.plinth.parser.rules.member.MemberListRule;
import eu.bryants.anthony.plinth.parser.rules.member.MethodRule;
import eu.bryants.anthony.plinth.parser.rules.member.PropertyRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ArgumentListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ArgumentsRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeNoQNameRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeRule;
import eu.bryants.anthony.plinth.parser.rules.misc.CatchTypeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.DeclarationAssigneeListNotSingleNameRule;
import eu.bryants.anthony.plinth.parser.rules.misc.DeclarationAssigneeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ForInitRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ForUpdateRule;
import eu.bryants.anthony.plinth.parser.rules.misc.FunctionTypeDefaultParameterListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.FunctionTypeDefaultParameterRule;
import eu.bryants.anthony.plinth.parser.rules.misc.FunctionTypeParametersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ImplementsClauseRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ImportsRule;
import eu.bryants.anthony.plinth.parser.rules.misc.InterfaceListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.NestedQNameListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.OptionalModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ParameterListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ParametersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.PropertyMethodListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.PropertyMethodRule;
import eu.bryants.anthony.plinth.parser.rules.misc.QNameListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.QNameRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ThrowsClauseRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ThrowsListRule;
import eu.bryants.anthony.plinth.parser.rules.statement.AssignStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.BlockRule;
import eu.bryants.anthony.plinth.parser.rules.statement.BreakStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ContinueStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ForStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.IfStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.PrefixIncDecStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ReturnStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ShorthandAssignmentRule;
import eu.bryants.anthony.plinth.parser.rules.statement.StatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.StatementsRule;
import eu.bryants.anthony.plinth.parser.rules.statement.TryCatchStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.TryFinallyStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.WhileStatementRule;
import eu.bryants.anthony.plinth.parser.rules.type.ArrayTypeTrailingArgsRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.ArrayTypeTrailingArgsRule;
import eu.bryants.anthony.plinth.parser.rules.type.BasicTypeRule;
import eu.bryants.anthony.plinth.parser.rules.type.NamedTypeNoModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.type.OptionalTypeParametersRule;
import eu.bryants.anthony.plinth.parser.rules.type.ReturnTypeRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentListDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentListRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentNotQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeBoundListDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeBoundListRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeBoundListRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeListNotQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeNoSimpleArgumentsRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeNoTrailingArgumentsRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeNotQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeParameterListRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeParameterListRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeParameterRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeParameterRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeTrailingArgsRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeTrailingArgsRule;
import eu.bryants.anthony.plinth.parser.rules.type.WildcardTypeArgumentDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.WildcardTypeArgumentRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.WildcardTypeArgumentRule;

/*
 * Created on 2 Oct 2012
 */

/**
 * @author Anthony Bryant
 */
public class GeneratedParser
{
  // Generated parser in 80544ms
  private static final ImportsRule RULE_0 = new ImportsRule();
  private static final OptionalModifiersRule RULE_1 = new OptionalModifiersRule();
  private static final GeneratedStartRule RULE_2 = new GeneratedStartRule();
  private static final CompilationUnitRule RULE_3 = new CompilationUnitRule();
  private static final QNameRule RULE_4 = new QNameRule();
  private static final ModifiersRule RULE_5 = new ModifiersRule();
  private static final OptionalTypeParametersRule RULE_6 = new OptionalTypeParametersRule();
  private static final ImplementsClauseRule RULE_7 = new ImplementsClauseRule();
  private static final TypeParameterRule RULE_8 = new TypeParameterRule();
  private static final TypeParameterListRAngleRule RULE_9 = new TypeParameterListRAngleRule();
  private static final TypeParameterListRule RULE_10 = new TypeParameterListRule();
  private static final MemberListRule RULE_11 = new MemberListRule();
  private static final TypeParameterRAngleRule RULE_12 = new TypeParameterRAngleRule();
  private static final InterfaceListRule RULE_13 = new InterfaceListRule();
  private static final NamedTypeNoModifiersRule RULE_14 = new NamedTypeNoModifiersRule();
  private static final BasicTypeRule RULE_15 = new BasicTypeRule();
  private static final TypeBoundListRAngleRule RULE_16 = new TypeBoundListRAngleRule();
  private static final TypeNotQNameRule RULE_17 = new TypeNotQNameRule();
  private static final TypeTrailingArgsRule RULE_18 = new TypeTrailingArgsRule();
  private static final TypeRule RULE_19 = new TypeRule();
  private static final TypeTrailingArgsRAngleRule RULE_20 = new TypeTrailingArgsRAngleRule();
  private static final TypeBoundListRule RULE_21 = new TypeBoundListRule();
  private static final TypeRAngleRule RULE_22 = new TypeRAngleRule();
  private static final InterfaceDefinitionRule RULE_23 = new InterfaceDefinitionRule();
  private static final InitialiserRule RULE_24 = new InitialiserRule();
  private static final CompoundDefinitionRule RULE_25 = new CompoundDefinitionRule();
  private static final QNameListRule RULE_26 = new QNameListRule();
  private static final TypeListNotQNameRule RULE_27 = new TypeListNotQNameRule();
  private static final FunctionTypeDefaultParameterListRule RULE_28 = new FunctionTypeDefaultParameterListRule();
  private static final FunctionTypeParametersRule RULE_29 = new FunctionTypeParametersRule();
  private static final WildcardTypeArgumentRule RULE_30 = new WildcardTypeArgumentRule();
  private static final TypeArgumentRAngleRule RULE_31 = new TypeArgumentRAngleRule();
  private static final TypeArgumentListRAngleRule RULE_32 = new TypeArgumentListRAngleRule();
  private static final TypeArgumentNotQNameRule RULE_33 = new TypeArgumentNotQNameRule();
  private static final PrimaryNotThisRule RULE_34 = new PrimaryNotThisRule();
  private static final AssigneeNoQNameRule RULE_35 = new AssigneeNoQNameRule();
  private static final BlockRule RULE_36 = new BlockRule();
  private static final PrimaryRule RULE_37 = new PrimaryRule();
  private static final StatementRule RULE_38 = new StatementRule();
  private static final TypeNoSimpleArgumentsRule RULE_39 = new TypeNoSimpleArgumentsRule();
  private static final AssigneeListRule RULE_40 = new AssigneeListRule();
  private static final AssigneeRule RULE_41 = new AssigneeRule();
  private static final QNameExpressionRule RULE_42 = new QNameExpressionRule();
  private static final StatementsRule RULE_43 = new StatementsRule();
  private static final ThrowsClauseRule RULE_44 = new ThrowsClauseRule();
  private static final ClassDefinitionRule RULE_45 = new ClassDefinitionRule();
  private static final TypeNoTrailingArgumentsRule RULE_46 = new TypeNoTrailingArgumentsRule();
  private static final ArrayTypeTrailingArgsRule RULE_47 = new ArrayTypeTrailingArgsRule();
  private static final ArrayTypeTrailingArgsRAngleRule RULE_48 = new ArrayTypeTrailingArgsRAngleRule();
  private static final NestedQNameListRule RULE_49 = new NestedQNameListRule();
  private static final ReturnTypeRule RULE_50 = new ReturnTypeRule();
  private static final TypeArgumentListDoubleRAngleRule RULE_51 = new TypeArgumentListDoubleRAngleRule();
  private static final TypeArgumentDoubleRAngleRule RULE_52 = new TypeArgumentDoubleRAngleRule();
  private static final WildcardTypeArgumentRAngleRule RULE_53 = new WildcardTypeArgumentRAngleRule();
  private static final ContinueStatementRule RULE_54 = new ContinueStatementRule();
  private static final ConditionalExpressionRule RULE_55 = new ConditionalExpressionRule();
  private static final MultiplicativeExpressionRule RULE_56 = new MultiplicativeExpressionRule();
  private static final LogicalExpressionRule RULE_57 = new LogicalExpressionRule();
  private static final EqualityExpressionRule RULE_58 = new EqualityExpressionRule();
  private static final ExpressionRule RULE_59 = new ExpressionRule();
  private static final TupleExpressionRule RULE_60 = new TupleExpressionRule();
  private static final QNameOrLessThanExpressionRule RULE_61 = new QNameOrLessThanExpressionRule();
  private static final TupleIndexExpressionRule RULE_62 = new TupleIndexExpressionRule();
  private static final AdditiveExpressionRule RULE_63 = new AdditiveExpressionRule();
  private static final UnaryExpressionRule RULE_64 = new UnaryExpressionRule();
  private static final ShiftExpressionRule RULE_65 = new ShiftExpressionRule();
  private static final ExpressionNotLessThanQNameRule RULE_66 = new ExpressionNotLessThanQNameRule();
  private static final BreakStatementRule RULE_67 = new BreakStatementRule();
  private static final ReturnStatementRule RULE_68 = new ReturnStatementRule();
  private static final DeclarationAssigneeListRule RULE_69 = new DeclarationAssigneeListRule();
  private static final DeclarationAssigneeListNotSingleNameRule RULE_70 = new DeclarationAssigneeListNotSingleNameRule();
  private static final FunctionCallExpressionRule RULE_71 = new FunctionCallExpressionRule();
  private static final ParametersRule RULE_72 = new ParametersRule();
  private static final FieldRule RULE_73 = new FieldRule();
  private static final WildcardTypeArgumentDoubleRAngleRule RULE_74 = new WildcardTypeArgumentDoubleRAngleRule();
  private static final TypeDoubleRAngleRule RULE_75 = new TypeDoubleRAngleRule();
  private static final IfStatementRule RULE_76 = new IfStatementRule();
  private static final ForInitRule RULE_77 = new ForInitRule();
  private static final CreationExpressionRule RULE_78 = new CreationExpressionRule();
  private static final PrefixIncDecStatementRule RULE_79 = new PrefixIncDecStatementRule();
  private static final WhileStatementRule RULE_80 = new WhileStatementRule();
  private static final ArgumentsRule RULE_81 = new ArgumentsRule();
  private static final ArgumentListRule RULE_82 = new ArgumentListRule();
  private static final ShorthandAssignmentRule RULE_83 = new ShorthandAssignmentRule();
  private static final AssignStatementRule RULE_84 = new AssignStatementRule();
  private static final CatchTypeListRule RULE_85 = new CatchTypeListRule();
  private static final TryFinallyStatementRule RULE_86 = new TryFinallyStatementRule();
  private static final ParameterListRule RULE_87 = new ParameterListRule();
  private static final ThrowsListRule RULE_88 = new ThrowsListRule();
  private static final ConstructorRule RULE_89 = new ConstructorRule();
  private static final PropertyMethodListRule RULE_90 = new PropertyMethodListRule();
  private static final FunctionTypeDefaultParameterRule RULE_91 = new FunctionTypeDefaultParameterRule();
  private static final TypeBoundListDoubleRAngleRule RULE_92 = new TypeBoundListDoubleRAngleRule();
  private static final ComparisonExpressionLessThanQNameRule RULE_93 = new ComparisonExpressionLessThanQNameRule();
  private static final ForUpdateRule RULE_94 = new ForUpdateRule();
  private static final DimensionsRule RULE_95 = new DimensionsRule();
  private static final MethodRule RULE_96 = new MethodRule();
  private static final TryCatchStatementRule RULE_97 = new TryCatchStatementRule();
  private static final PropertyRule RULE_98 = new PropertyRule();
  private static final ForStatementRule RULE_99 = new ForStatementRule();
  private static final ExpressionListRule RULE_100 = new ExpressionListRule();
  private static final PropertyMethodRule RULE_101 = new PropertyMethodRule();

  private Deque<Integer> stateStack = new LinkedList<Integer>();
  private Deque<Token<ParseType>> tokenStack = new LinkedList<Token<ParseType>>();
  private Tokenizer<ParseType> tokenizer;

  private boolean accepted = false;

  public GeneratedParser(Tokenizer<ParseType> tokenizer)
  {
    this.tokenizer = tokenizer;
  }

  private final boolean reduce(Rule<ParseType> rule, int productionIndex) throws ParseException
  {
    Production<ParseType> production = rule.getProductions()[productionIndex];
    ParseType[] productionTypes = production.getTypes();
    if (stateStack.size() <= productionTypes.length || tokenStack.size() < productionTypes.length)
    {
      throw new ParseException("Bad reduction of rule, not enough elements");
    }

    // get the list of token values
    Object[] values = new Object[productionTypes.length];
    for (int i = values.length - 1; i >= 0; i--)
    {
      Token<ParseType> t = tokenStack.removeFirst();
      if (!t.getType().equals(productionTypes[i]))
      {
        throw new ParseException("Bad reduction of rule, invalid token type");
      }
      values[i] = t.getValue();

      // remove the top state from the state stack
      stateStack.removeFirst();
    }

    Object result = rule.match(production, values);
    Token<ParseType> nonTerminal = new Token<ParseType>(rule.getType(), result);

    Integer topState = stateStack.peekFirst();
    Integer gotoState = findGotoState(topState, nonTerminal.getType());

    stateStack.addFirst(gotoState);
    tokenStack.addFirst(nonTerminal);

    return false;
  }

  private static class GeneratedStartRule extends Rule<ParseType>
  {
    private static final long serialVersionUID = 1L;

    public GeneratedStartRule()
    {
      super(GENERATED_START_RULE, new Production<ParseType>(COMPILATION_UNIT));
    }

    @Override
    public Object match(Production<ParseType> production, Object[] args) throws ParseException
    {
      ParseType[] productionTypes = production.getTypes();
      if (productionTypes.length == 1 && productionTypes[0] == COMPILATION_UNIT)
      {
        return args[0];
      }
      throw badTypeList();
    }
  }

  public Token<ParseType> parse() throws ParseException, BadTokenException
  {
    stateStack.addFirst(0);
    Token<ParseType> lookahead = tokenizer.next();

    while (true)
    {
      Integer state = stateStack.peekFirst();
      boolean used = false;
      switch (state)
      {
      case 0: used = action0(lookahead); break;
      case 1: used = action1(lookahead); break;
      case 2: used = action2(lookahead); break;
      case 3: used = action3(lookahead); break;
      case 4: used = action4(lookahead); break;
      case 5: used = action5(lookahead); break;
      case 6: used = action6(lookahead); break;
      case 7: used = action7(lookahead); break;
      case 8: used = action8(lookahead); break;
      case 9: used = action9(lookahead); break;
      case 10: used = action10(lookahead); break;
      case 11: used = action11(lookahead); break;
      case 12: used = action12(lookahead); break;
      case 13: used = action13(lookahead); break;
      case 14: used = action14(lookahead); break;
      case 15: used = action15(lookahead); break;
      case 16: used = action16(lookahead); break;
      case 17: used = action17(lookahead); break;
      case 18: used = action18(lookahead); break;
      case 19: used = action19(lookahead); break;
      case 20: used = action20(lookahead); break;
      case 21: used = action21(lookahead); break;
      case 22: used = action22(lookahead); break;
      case 23: used = action23(lookahead); break;
      case 24: used = action24(lookahead); break;
      case 25: used = action25(lookahead); break;
      case 26: used = action26(lookahead); break;
      case 27: used = action27(lookahead); break;
      case 28: used = action28(lookahead); break;
      case 29: used = action29(lookahead); break;
      case 30: used = action30(lookahead); break;
      case 31: used = action31(lookahead); break;
      case 32: used = action32(lookahead); break;
      case 33: used = action33(lookahead); break;
      case 34: used = action34(lookahead); break;
      case 35: used = action35(lookahead); break;
      case 36: used = action36(lookahead); break;
      case 37: used = action37(lookahead); break;
      case 38: used = action38(lookahead); break;
      case 39: used = action39(lookahead); break;
      case 40: used = action40(lookahead); break;
      case 41: used = action41(lookahead); break;
      case 42: used = action42(lookahead); break;
      case 43: used = action43(lookahead); break;
      case 44: used = action44(lookahead); break;
      case 45: used = action45(lookahead); break;
      case 46: used = action46(lookahead); break;
      case 47: used = action47(lookahead); break;
      case 48: used = action48(lookahead); break;
      case 49: used = action49(lookahead); break;
      case 50: used = action50(lookahead); break;
      case 51: used = action51(lookahead); break;
      case 52: used = action52(lookahead); break;
      case 53: used = action53(lookahead); break;
      case 54: used = action54(lookahead); break;
      case 55: used = action55(lookahead); break;
      case 56: used = action56(lookahead); break;
      case 57: used = action57(lookahead); break;
      case 58: used = action58(lookahead); break;
      case 59: used = action59(lookahead); break;
      case 60: used = action60(lookahead); break;
      case 61: used = action61(lookahead); break;
      case 62: used = action62(lookahead); break;
      case 63: used = action63(lookahead); break;
      case 64: used = action64(lookahead); break;
      case 65: used = action65(lookahead); break;
      case 66: used = action66(lookahead); break;
      case 67: used = action67(lookahead); break;
      case 68: used = action68(lookahead); break;
      case 69: used = action69(lookahead); break;
      case 70: used = action70(lookahead); break;
      case 71: used = action71(lookahead); break;
      case 72: used = action72(lookahead); break;
      case 73: used = action73(lookahead); break;
      case 74: used = action74(lookahead); break;
      case 75: used = action75(lookahead); break;
      case 76: used = action76(lookahead); break;
      case 77: used = action77(lookahead); break;
      case 78: used = action78(lookahead); break;
      case 79: used = action79(lookahead); break;
      case 80: used = action80(lookahead); break;
      case 81: used = action81(lookahead); break;
      case 82: used = action82(lookahead); break;
      case 83: used = action83(lookahead); break;
      case 84: used = action84(lookahead); break;
      case 85: used = action85(lookahead); break;
      case 86: used = action86(lookahead); break;
      case 87: used = action87(lookahead); break;
      case 88: used = action88(lookahead); break;
      case 89: used = action89(lookahead); break;
      case 90: used = action90(lookahead); break;
      case 91: used = action91(lookahead); break;
      case 92: used = action92(lookahead); break;
      case 93: used = action93(lookahead); break;
      case 94: used = action94(lookahead); break;
      case 95: used = action95(lookahead); break;
      case 96: used = action96(lookahead); break;
      case 97: used = action97(lookahead); break;
      case 98: used = action98(lookahead); break;
      case 99: used = action99(lookahead); break;
      case 100: used = action100(lookahead); break;
      case 101: used = action101(lookahead); break;
      case 102: used = action102(lookahead); break;
      case 103: used = action103(lookahead); break;
      case 104: used = action104(lookahead); break;
      case 105: used = action105(lookahead); break;
      case 106: used = action106(lookahead); break;
      case 107: used = action107(lookahead); break;
      case 108: used = action108(lookahead); break;
      case 109: used = action109(lookahead); break;
      case 110: used = action110(lookahead); break;
      case 111: used = action111(lookahead); break;
      case 112: used = action112(lookahead); break;
      case 113: used = action113(lookahead); break;
      case 114: used = action114(lookahead); break;
      case 115: used = action115(lookahead); break;
      case 116: used = action116(lookahead); break;
      case 117: used = action117(lookahead); break;
      case 118: used = action118(lookahead); break;
      case 119: used = action119(lookahead); break;
      case 120: used = action120(lookahead); break;
      case 121: used = action121(lookahead); break;
      case 122: used = action122(lookahead); break;
      case 123: used = action123(lookahead); break;
      case 124: used = action124(lookahead); break;
      case 125: used = action125(lookahead); break;
      case 126: used = action126(lookahead); break;
      case 127: used = action127(lookahead); break;
      case 128: used = action128(lookahead); break;
      case 129: used = action129(lookahead); break;
      case 130: used = action130(lookahead); break;
      case 131: used = action131(lookahead); break;
      case 132: used = action132(lookahead); break;
      case 133: used = action133(lookahead); break;
      case 134: used = action134(lookahead); break;
      case 135: used = action135(lookahead); break;
      case 136: used = action136(lookahead); break;
      case 137: used = action137(lookahead); break;
      case 138: used = action138(lookahead); break;
      case 139: used = action139(lookahead); break;
      case 140: used = action140(lookahead); break;
      case 141: used = action141(lookahead); break;
      case 142: used = action142(lookahead); break;
      case 143: used = action143(lookahead); break;
      case 144: used = action144(lookahead); break;
      case 145: used = action145(lookahead); break;
      case 146: used = action146(lookahead); break;
      case 147: used = action147(lookahead); break;
      case 148: used = action148(lookahead); break;
      case 149: used = action149(lookahead); break;
      case 150: used = action150(lookahead); break;
      case 151: used = action151(lookahead); break;
      case 152: used = action152(lookahead); break;
      case 153: used = action153(lookahead); break;
      case 154: used = action154(lookahead); break;
      case 155: used = action155(lookahead); break;
      case 156: used = action156(lookahead); break;
      case 157: used = action157(lookahead); break;
      case 158: used = action158(lookahead); break;
      case 159: used = action159(lookahead); break;
      case 160: used = action160(lookahead); break;
      case 161: used = action161(lookahead); break;
      case 162: used = action162(lookahead); break;
      case 163: used = action163(lookahead); break;
      case 164: used = action164(lookahead); break;
      case 165: used = action165(lookahead); break;
      case 166: used = action166(lookahead); break;
      case 167: used = action167(lookahead); break;
      case 168: used = action168(lookahead); break;
      case 169: used = action169(lookahead); break;
      case 170: used = action170(lookahead); break;
      case 171: used = action171(lookahead); break;
      case 172: used = action172(lookahead); break;
      case 173: used = action173(lookahead); break;
      case 174: used = action174(lookahead); break;
      case 175: used = action175(lookahead); break;
      case 176: used = action176(lookahead); break;
      case 177: used = action177(lookahead); break;
      case 178: used = action178(lookahead); break;
      case 179: used = action179(lookahead); break;
      case 180: used = action180(lookahead); break;
      case 181: used = action181(lookahead); break;
      case 182: used = action182(lookahead); break;
      case 183: used = action183(lookahead); break;
      case 184: used = action184(lookahead); break;
      case 185: used = action185(lookahead); break;
      case 186: used = action186(lookahead); break;
      case 187: used = action187(lookahead); break;
      case 188: used = action188(lookahead); break;
      case 189: used = action189(lookahead); break;
      case 190: used = action190(lookahead); break;
      case 191: used = action191(lookahead); break;
      case 192: used = action192(lookahead); break;
      case 193: used = action193(lookahead); break;
      case 194: used = action194(lookahead); break;
      case 195: used = action195(lookahead); break;
      case 196: used = action196(lookahead); break;
      case 197: used = action197(lookahead); break;
      case 198: used = action198(lookahead); break;
      case 199: used = action199(lookahead); break;
      case 200: used = action200(lookahead); break;
      case 201: used = action201(lookahead); break;
      case 202: used = action202(lookahead); break;
      case 203: used = action203(lookahead); break;
      case 204: used = action204(lookahead); break;
      case 205: used = action205(lookahead); break;
      case 206: used = action206(lookahead); break;
      case 207: used = action207(lookahead); break;
      case 208: used = action208(lookahead); break;
      case 209: used = action209(lookahead); break;
      case 210: used = action210(lookahead); break;
      case 211: used = action211(lookahead); break;
      case 212: used = action212(lookahead); break;
      case 213: used = action213(lookahead); break;
      case 214: used = action214(lookahead); break;
      case 215: used = action215(lookahead); break;
      case 216: used = action216(lookahead); break;
      case 217: used = action217(lookahead); break;
      case 218: used = action218(lookahead); break;
      case 219: used = action219(lookahead); break;
      case 220: used = action220(lookahead); break;
      case 221: used = action221(lookahead); break;
      case 222: used = action222(lookahead); break;
      case 223: used = action223(lookahead); break;
      case 224: used = action224(lookahead); break;
      case 225: used = action225(lookahead); break;
      case 226: used = action226(lookahead); break;
      case 227: used = action227(lookahead); break;
      case 228: used = action228(lookahead); break;
      case 229: used = action229(lookahead); break;
      case 230: used = action230(lookahead); break;
      case 231: used = action231(lookahead); break;
      case 232: used = action232(lookahead); break;
      case 233: used = action233(lookahead); break;
      case 234: used = action234(lookahead); break;
      case 235: used = action235(lookahead); break;
      case 236: used = action236(lookahead); break;
      case 237: used = action237(lookahead); break;
      case 238: used = action238(lookahead); break;
      case 239: used = action239(lookahead); break;
      case 240: used = action240(lookahead); break;
      case 241: used = action241(lookahead); break;
      case 242: used = action242(lookahead); break;
      case 243: used = action243(lookahead); break;
      case 244: used = action244(lookahead); break;
      case 245: used = action245(lookahead); break;
      case 246: used = action246(lookahead); break;
      case 247: used = action247(lookahead); break;
      case 248: used = action248(lookahead); break;
      case 249: used = action249(lookahead); break;
      case 250: used = action250(lookahead); break;
      case 251: used = action251(lookahead); break;
      case 252: used = action252(lookahead); break;
      case 253: used = action253(lookahead); break;
      case 254: used = action254(lookahead); break;
      case 255: used = action255(lookahead); break;
      case 256: used = action256(lookahead); break;
      case 257: used = action257(lookahead); break;
      case 258: used = action258(lookahead); break;
      case 259: used = action259(lookahead); break;
      case 260: used = action260(lookahead); break;
      case 261: used = action261(lookahead); break;
      case 262: used = action262(lookahead); break;
      case 263: used = action263(lookahead); break;
      case 264: used = action264(lookahead); break;
      case 265: used = action265(lookahead); break;
      case 266: used = action266(lookahead); break;
      case 267: used = action267(lookahead); break;
      case 268: used = action268(lookahead); break;
      case 269: used = action269(lookahead); break;
      case 270: used = action270(lookahead); break;
      case 271: used = action271(lookahead); break;
      case 272: used = action272(lookahead); break;
      case 273: used = action273(lookahead); break;
      case 274: used = action274(lookahead); break;
      case 275: used = action275(lookahead); break;
      case 276: used = action276(lookahead); break;
      case 277: used = action277(lookahead); break;
      case 278: used = action278(lookahead); break;
      case 279: used = action279(lookahead); break;
      case 280: used = action280(lookahead); break;
      case 281: used = action281(lookahead); break;
      case 282: used = action282(lookahead); break;
      case 283: used = action283(lookahead); break;
      case 284: used = action284(lookahead); break;
      case 285: used = action285(lookahead); break;
      case 286: used = action286(lookahead); break;
      case 287: used = action287(lookahead); break;
      case 288: used = action288(lookahead); break;
      case 289: used = action289(lookahead); break;
      case 290: used = action290(lookahead); break;
      case 291: used = action291(lookahead); break;
      case 292: used = action292(lookahead); break;
      case 293: used = action293(lookahead); break;
      case 294: used = action294(lookahead); break;
      case 295: used = action295(lookahead); break;
      case 296: used = action296(lookahead); break;
      case 297: used = action297(lookahead); break;
      case 298: used = action298(lookahead); break;
      case 299: used = action299(lookahead); break;
      case 300: used = action300(lookahead); break;
      case 301: used = action301(lookahead); break;
      case 302: used = action302(lookahead); break;
      case 303: used = action303(lookahead); break;
      case 304: used = action304(lookahead); break;
      case 305: used = action305(lookahead); break;
      case 306: used = action306(lookahead); break;
      case 307: used = action307(lookahead); break;
      case 308: used = action308(lookahead); break;
      case 309: used = action309(lookahead); break;
      case 310: used = action310(lookahead); break;
      case 311: used = action311(lookahead); break;
      case 312: used = action312(lookahead); break;
      case 313: used = action313(lookahead); break;
      case 314: used = action314(lookahead); break;
      case 315: used = action315(lookahead); break;
      case 316: used = action316(lookahead); break;
      case 317: used = action317(lookahead); break;
      case 318: used = action318(lookahead); break;
      case 319: used = action319(lookahead); break;
      case 320: used = action320(lookahead); break;
      case 321: used = action321(lookahead); break;
      case 322: used = action322(lookahead); break;
      case 323: used = action323(lookahead); break;
      case 324: used = action324(lookahead); break;
      case 325: used = action325(lookahead); break;
      case 326: used = action326(lookahead); break;
      case 327: used = action327(lookahead); break;
      case 328: used = action328(lookahead); break;
      case 329: used = action329(lookahead); break;
      case 330: used = action330(lookahead); break;
      case 331: used = action331(lookahead); break;
      case 332: used = action332(lookahead); break;
      case 333: used = action333(lookahead); break;
      case 334: used = action334(lookahead); break;
      case 335: used = action335(lookahead); break;
      case 336: used = action336(lookahead); break;
      case 337: used = action337(lookahead); break;
      case 338: used = action338(lookahead); break;
      case 339: used = action339(lookahead); break;
      case 340: used = action340(lookahead); break;
      case 341: used = action341(lookahead); break;
      case 342: used = action342(lookahead); break;
      case 343: used = action343(lookahead); break;
      case 344: used = action344(lookahead); break;
      case 345: used = action345(lookahead); break;
      case 346: used = action346(lookahead); break;
      case 347: used = action347(lookahead); break;
      case 348: used = action348(lookahead); break;
      case 349: used = action349(lookahead); break;
      case 350: used = action350(lookahead); break;
      case 351: used = action351(lookahead); break;
      case 352: used = action352(lookahead); break;
      case 353: used = action353(lookahead); break;
      case 354: used = action354(lookahead); break;
      case 355: used = action355(lookahead); break;
      case 356: used = action356(lookahead); break;
      case 357: used = action357(lookahead); break;
      case 358: used = action358(lookahead); break;
      case 359: used = action359(lookahead); break;
      case 360: used = action360(lookahead); break;
      case 361: used = action361(lookahead); break;
      case 362: used = action362(lookahead); break;
      case 363: used = action363(lookahead); break;
      case 364: used = action364(lookahead); break;
      case 365: used = action365(lookahead); break;
      case 366: used = action366(lookahead); break;
      case 367: used = action367(lookahead); break;
      case 368: used = action368(lookahead); break;
      case 369: used = action369(lookahead); break;
      case 370: used = action370(lookahead); break;
      case 371: used = action371(lookahead); break;
      case 372: used = action372(lookahead); break;
      case 373: used = action373(lookahead); break;
      case 374: used = action374(lookahead); break;
      case 375: used = action375(lookahead); break;
      case 376: used = action376(lookahead); break;
      case 377: used = action377(lookahead); break;
      case 378: used = action378(lookahead); break;
      case 379: used = action379(lookahead); break;
      case 380: used = action380(lookahead); break;
      case 381: used = action381(lookahead); break;
      case 382: used = action382(lookahead); break;
      case 383: used = action383(lookahead); break;
      case 384: used = action384(lookahead); break;
      case 385: used = action385(lookahead); break;
      case 386: used = action386(lookahead); break;
      case 387: used = action387(lookahead); break;
      case 388: used = action388(lookahead); break;
      case 389: used = action389(lookahead); break;
      case 390: used = action390(lookahead); break;
      case 391: used = action391(lookahead); break;
      case 392: used = action392(lookahead); break;
      case 393: used = action393(lookahead); break;
      case 394: used = action394(lookahead); break;
      case 395: used = action395(lookahead); break;
      case 396: used = action396(lookahead); break;
      case 397: used = action397(lookahead); break;
      case 398: used = action398(lookahead); break;
      case 399: used = action399(lookahead); break;
      case 400: used = action400(lookahead); break;
      case 401: used = action401(lookahead); break;
      case 402: used = action402(lookahead); break;
      case 403: used = action403(lookahead); break;
      case 404: used = action404(lookahead); break;
      case 405: used = action405(lookahead); break;
      case 406: used = action406(lookahead); break;
      case 407: used = action407(lookahead); break;
      case 408: used = action408(lookahead); break;
      case 409: used = action409(lookahead); break;
      case 410: used = action410(lookahead); break;
      case 411: used = action411(lookahead); break;
      case 412: used = action412(lookahead); break;
      case 413: used = action413(lookahead); break;
      case 414: used = action414(lookahead); break;
      case 415: used = action415(lookahead); break;
      case 416: used = action416(lookahead); break;
      case 417: used = action417(lookahead); break;
      case 418: used = action418(lookahead); break;
      case 419: used = action419(lookahead); break;
      case 420: used = action420(lookahead); break;
      case 421: used = action421(lookahead); break;
      case 422: used = action422(lookahead); break;
      case 423: used = action423(lookahead); break;
      case 424: used = action424(lookahead); break;
      case 425: used = action425(lookahead); break;
      case 426: used = action426(lookahead); break;
      case 427: used = action427(lookahead); break;
      case 428: used = action428(lookahead); break;
      case 429: used = action429(lookahead); break;
      case 430: used = action430(lookahead); break;
      case 431: used = action431(lookahead); break;
      case 432: used = action432(lookahead); break;
      case 433: used = action433(lookahead); break;
      case 434: used = action434(lookahead); break;
      case 435: used = action435(lookahead); break;
      case 436: used = action436(lookahead); break;
      case 437: used = action437(lookahead); break;
      case 438: used = action438(lookahead); break;
      case 439: used = action439(lookahead); break;
      case 440: used = action440(lookahead); break;
      case 441: used = action441(lookahead); break;
      case 442: used = action442(lookahead); break;
      case 443: used = action443(lookahead); break;
      case 444: used = action444(lookahead); break;
      case 445: used = action445(lookahead); break;
      case 446: used = action446(lookahead); break;
      case 447: used = action447(lookahead); break;
      case 448: used = action448(lookahead); break;
      case 449: used = action449(lookahead); break;
      case 450: used = action450(lookahead); break;
      case 451: used = action451(lookahead); break;
      case 452: used = action452(lookahead); break;
      case 453: used = action453(lookahead); break;
      case 454: used = action454(lookahead); break;
      case 455: used = action455(lookahead); break;
      case 456: used = action456(lookahead); break;
      case 457: used = action457(lookahead); break;
      case 458: used = action458(lookahead); break;
      case 459: used = action459(lookahead); break;
      case 460: used = action460(lookahead); break;
      case 461: used = action461(lookahead); break;
      case 462: used = action462(lookahead); break;
      case 463: used = action463(lookahead); break;
      case 464: used = action464(lookahead); break;
      case 465: used = action465(lookahead); break;
      case 466: used = action466(lookahead); break;
      case 467: used = action467(lookahead); break;
      case 468: used = action468(lookahead); break;
      case 469: used = action469(lookahead); break;
      case 470: used = action470(lookahead); break;
      case 471: used = action471(lookahead); break;
      case 472: used = action472(lookahead); break;
      case 473: used = action473(lookahead); break;
      case 474: used = action474(lookahead); break;
      case 475: used = action475(lookahead); break;
      case 476: used = action476(lookahead); break;
      case 477: used = action477(lookahead); break;
      case 478: used = action478(lookahead); break;
      case 479: used = action479(lookahead); break;
      case 480: used = action480(lookahead); break;
      case 481: used = action481(lookahead); break;
      case 482: used = action482(lookahead); break;
      case 483: used = action483(lookahead); break;
      case 484: used = action484(lookahead); break;
      case 485: used = action485(lookahead); break;
      case 486: used = action486(lookahead); break;
      case 487: used = action487(lookahead); break;
      case 488: used = action488(lookahead); break;
      case 489: used = action489(lookahead); break;
      case 490: used = action490(lookahead); break;
      case 491: used = action491(lookahead); break;
      case 492: used = action492(lookahead); break;
      case 493: used = action493(lookahead); break;
      case 494: used = action494(lookahead); break;
      case 495: used = action495(lookahead); break;
      case 496: used = action496(lookahead); break;
      case 497: used = action497(lookahead); break;
      case 498: used = action498(lookahead); break;
      case 499: used = action499(lookahead); break;
      case 500: used = action500(lookahead); break;
      case 501: used = action501(lookahead); break;
      case 502: used = action502(lookahead); break;
      case 503: used = action503(lookahead); break;
      case 504: used = action504(lookahead); break;
      case 505: used = action505(lookahead); break;
      case 506: used = action506(lookahead); break;
      case 507: used = action507(lookahead); break;
      case 508: used = action508(lookahead); break;
      case 509: used = action509(lookahead); break;
      case 510: used = action510(lookahead); break;
      case 511: used = action511(lookahead); break;
      case 512: used = action512(lookahead); break;
      case 513: used = action513(lookahead); break;
      case 514: used = action514(lookahead); break;
      case 515: used = action515(lookahead); break;
      case 516: used = action516(lookahead); break;
      case 517: used = action517(lookahead); break;
      case 518: used = action518(lookahead); break;
      case 519: used = action519(lookahead); break;
      case 520: used = action520(lookahead); break;
      case 521: used = action521(lookahead); break;
      case 522: used = action522(lookahead); break;
      case 523: used = action523(lookahead); break;
      case 524: used = action524(lookahead); break;
      case 525: used = action525(lookahead); break;
      case 526: used = action526(lookahead); break;
      case 527: used = action527(lookahead); break;
      case 528: used = action528(lookahead); break;
      case 529: used = action529(lookahead); break;
      case 530: used = action530(lookahead); break;
      case 531: used = action531(lookahead); break;
      case 532: used = action532(lookahead); break;
      case 533: used = action533(lookahead); break;
      case 534: used = action534(lookahead); break;
      case 535: used = action535(lookahead); break;
      case 536: used = action536(lookahead); break;
      case 537: used = action537(lookahead); break;
      case 538: used = action538(lookahead); break;
      case 539: used = action539(lookahead); break;
      case 540: used = action540(lookahead); break;
      case 541: used = action541(lookahead); break;
      case 542: used = action542(lookahead); break;
      case 543: used = action543(lookahead); break;
      case 544: used = action544(lookahead); break;
      case 545: used = action545(lookahead); break;
      case 546: used = action546(lookahead); break;
      case 547: used = action547(lookahead); break;
      case 548: used = action548(lookahead); break;
      case 549: used = action549(lookahead); break;
      case 550: used = action550(lookahead); break;
      case 551: used = action551(lookahead); break;
      case 552: used = action552(lookahead); break;
      case 553: used = action553(lookahead); break;
      case 554: used = action554(lookahead); break;
      case 555: used = action555(lookahead); break;
      case 556: used = action556(lookahead); break;
      case 557: used = action557(lookahead); break;
      case 558: used = action558(lookahead); break;
      case 559: used = action559(lookahead); break;
      case 560: used = action560(lookahead); break;
      case 561: used = action561(lookahead); break;
      case 562: used = action562(lookahead); break;
      case 563: used = action563(lookahead); break;
      case 564: used = action564(lookahead); break;
      case 565: used = action565(lookahead); break;
      case 566: used = action566(lookahead); break;
      case 567: used = action567(lookahead); break;
      case 568: used = action568(lookahead); break;
      case 569: used = action569(lookahead); break;
      case 570: used = action570(lookahead); break;
      case 571: used = action571(lookahead); break;
      case 572: used = action572(lookahead); break;
      case 573: used = action573(lookahead); break;
      case 574: used = action574(lookahead); break;
      case 575: used = action575(lookahead); break;
      case 576: used = action576(lookahead); break;
      case 577: used = action577(lookahead); break;
      case 578: used = action578(lookahead); break;
      case 579: used = action579(lookahead); break;
      case 580: used = action580(lookahead); break;
      case 581: used = action581(lookahead); break;
      case 582: used = action582(lookahead); break;
      case 583: used = action583(lookahead); break;
      case 584: used = action584(lookahead); break;
      case 585: used = action585(lookahead); break;
      case 586: used = action586(lookahead); break;
      case 587: used = action587(lookahead); break;
      case 588: used = action588(lookahead); break;
      case 589: used = action589(lookahead); break;
      case 590: used = action590(lookahead); break;
      case 591: used = action591(lookahead); break;
      case 592: used = action592(lookahead); break;
      case 593: used = action593(lookahead); break;
      case 594: used = action594(lookahead); break;
      case 595: used = action595(lookahead); break;
      case 596: used = action596(lookahead); break;
      case 597: used = action597(lookahead); break;
      case 598: used = action598(lookahead); break;
      case 599: used = action599(lookahead); break;
      case 600: used = action600(lookahead); break;
      case 601: used = action601(lookahead); break;
      case 602: used = action602(lookahead); break;
      case 603: used = action603(lookahead); break;
      case 604: used = action604(lookahead); break;
      case 605: used = action605(lookahead); break;
      case 606: used = action606(lookahead); break;
      case 607: used = action607(lookahead); break;
      case 608: used = action608(lookahead); break;
      case 609: used = action609(lookahead); break;
      case 610: used = action610(lookahead); break;
      case 611: used = action611(lookahead); break;
      case 612: used = action612(lookahead); break;
      case 613: used = action613(lookahead); break;
      case 614: used = action614(lookahead); break;
      case 615: used = action615(lookahead); break;
      case 616: used = action616(lookahead); break;
      case 617: used = action617(lookahead); break;
      case 618: used = action618(lookahead); break;
      case 619: used = action619(lookahead); break;
      case 620: used = action620(lookahead); break;
      case 621: used = action621(lookahead); break;
      case 622: used = action622(lookahead); break;
      case 623: used = action623(lookahead); break;
      case 624: used = action624(lookahead); break;
      case 625: used = action625(lookahead); break;
      case 626: used = action626(lookahead); break;
      case 627: used = action627(lookahead); break;
      case 628: used = action628(lookahead); break;
      case 629: used = action629(lookahead); break;
      case 630: used = action630(lookahead); break;
      case 631: used = action631(lookahead); break;
      case 632: used = action632(lookahead); break;
      case 633: used = action633(lookahead); break;
      case 634: used = action634(lookahead); break;
      case 635: used = action635(lookahead); break;
      case 636: used = action636(lookahead); break;
      case 637: used = action637(lookahead); break;
      case 638: used = action638(lookahead); break;
      case 639: used = action639(lookahead); break;
      case 640: used = action640(lookahead); break;
      case 641: used = action641(lookahead); break;
      case 642: used = action642(lookahead); break;
      case 643: used = action643(lookahead); break;
      case 644: used = action644(lookahead); break;
      case 645: used = action645(lookahead); break;
      case 646: used = action646(lookahead); break;
      case 647: used = action647(lookahead); break;
      case 648: used = action648(lookahead); break;
      case 649: used = action649(lookahead); break;
      case 650: used = action650(lookahead); break;
      case 651: used = action651(lookahead); break;
      case 652: used = action652(lookahead); break;
      case 653: used = action653(lookahead); break;
      case 654: used = action654(lookahead); break;
      case 655: used = action655(lookahead); break;
      case 656: used = action656(lookahead); break;
      case 657: used = action657(lookahead); break;
      case 658: used = action658(lookahead); break;
      case 659: used = action659(lookahead); break;
      case 660: used = action660(lookahead); break;
      case 661: used = action661(lookahead); break;
      case 662: used = action662(lookahead); break;
      case 663: used = action663(lookahead); break;
      case 664: used = action664(lookahead); break;
      case 665: used = action665(lookahead); break;
      case 666: used = action666(lookahead); break;
      case 667: used = action667(lookahead); break;
      case 668: used = action668(lookahead); break;
      case 669: used = action669(lookahead); break;
      case 670: used = action670(lookahead); break;
      case 671: used = action671(lookahead); break;
      case 672: used = action672(lookahead); break;
      case 673: used = action673(lookahead); break;
      case 674: used = action674(lookahead); break;
      case 675: used = action675(lookahead); break;
      case 676: used = action676(lookahead); break;
      case 677: used = action677(lookahead); break;
      case 678: used = action678(lookahead); break;
      case 679: used = action679(lookahead); break;
      case 680: used = action680(lookahead); break;
      case 681: used = action681(lookahead); break;
      case 682: used = action682(lookahead); break;
      case 683: used = action683(lookahead); break;
      case 684: used = action684(lookahead); break;
      case 685: used = action685(lookahead); break;
      case 686: used = action686(lookahead); break;
      case 687: used = action687(lookahead); break;
      case 688: used = action688(lookahead); break;
      case 689: used = action689(lookahead); break;
      case 690: used = action690(lookahead); break;
      case 691: used = action691(lookahead); break;
      case 692: used = action692(lookahead); break;
      case 693: used = action693(lookahead); break;
      case 694: used = action694(lookahead); break;
      case 695: used = action695(lookahead); break;
      case 696: used = action696(lookahead); break;
      case 697: used = action697(lookahead); break;
      case 698: used = action698(lookahead); break;
      case 699: used = action699(lookahead); break;
      case 700: used = action700(lookahead); break;
      case 701: used = action701(lookahead); break;
      case 702: used = action702(lookahead); break;
      case 703: used = action703(lookahead); break;
      case 704: used = action704(lookahead); break;
      case 705: used = action705(lookahead); break;
      case 706: used = action706(lookahead); break;
      case 707: used = action707(lookahead); break;
      case 708: used = action708(lookahead); break;
      case 709: used = action709(lookahead); break;
      case 710: used = action710(lookahead); break;
      case 711: used = action711(lookahead); break;
      case 712: used = action712(lookahead); break;
      case 713: used = action713(lookahead); break;
      case 714: used = action714(lookahead); break;
      case 715: used = action715(lookahead); break;
      case 716: used = action716(lookahead); break;
      case 717: used = action717(lookahead); break;
      case 718: used = action718(lookahead); break;
      case 719: used = action719(lookahead); break;
      case 720: used = action720(lookahead); break;
      case 721: used = action721(lookahead); break;
      case 722: used = action722(lookahead); break;
      case 723: used = action723(lookahead); break;
      case 724: used = action724(lookahead); break;
      case 725: used = action725(lookahead); break;
      case 726: used = action726(lookahead); break;
      case 727: used = action727(lookahead); break;
      case 728: used = action728(lookahead); break;
      case 729: used = action729(lookahead); break;
      case 730: used = action730(lookahead); break;
      case 731: used = action731(lookahead); break;
      case 732: used = action732(lookahead); break;
      case 733: used = action733(lookahead); break;
      case 734: used = action734(lookahead); break;
      case 735: used = action735(lookahead); break;
      case 736: used = action736(lookahead); break;
      case 737: used = action737(lookahead); break;
      case 738: used = action738(lookahead); break;
      case 739: used = action739(lookahead); break;
      case 740: used = action740(lookahead); break;
      case 741: used = action741(lookahead); break;
      case 742: used = action742(lookahead); break;
      case 743: used = action743(lookahead); break;
      case 744: used = action744(lookahead); break;
      case 745: used = action745(lookahead); break;
      case 746: used = action746(lookahead); break;
      case 747: used = action747(lookahead); break;
      case 748: used = action748(lookahead); break;
      case 749: used = action749(lookahead); break;
      case 750: used = action750(lookahead); break;
      case 751: used = action751(lookahead); break;
      case 752: used = action752(lookahead); break;
      case 753: used = action753(lookahead); break;
      case 754: used = action754(lookahead); break;
      case 755: used = action755(lookahead); break;
      case 756: used = action756(lookahead); break;
      case 757: used = action757(lookahead); break;
      case 758: used = action758(lookahead); break;
      case 759: used = action759(lookahead); break;
      case 760: used = action760(lookahead); break;
      case 761: used = action761(lookahead); break;
      case 762: used = action762(lookahead); break;
      case 763: used = action763(lookahead); break;
      case 764: used = action764(lookahead); break;
      case 765: used = action765(lookahead); break;
      case 766: used = action766(lookahead); break;
      case 767: used = action767(lookahead); break;
      case 768: used = action768(lookahead); break;
      case 769: used = action769(lookahead); break;
      case 770: used = action770(lookahead); break;
      case 771: used = action771(lookahead); break;
      case 772: used = action772(lookahead); break;
      case 773: used = action773(lookahead); break;
      case 774: used = action774(lookahead); break;
      case 775: used = action775(lookahead); break;
      case 776: used = action776(lookahead); break;
      case 777: used = action777(lookahead); break;
      case 778: used = action778(lookahead); break;
      case 779: used = action779(lookahead); break;
      case 780: used = action780(lookahead); break;
      case 781: used = action781(lookahead); break;
      case 782: used = action782(lookahead); break;
      case 783: used = action783(lookahead); break;
      case 784: used = action784(lookahead); break;
      case 785: used = action785(lookahead); break;
      case 786: used = action786(lookahead); break;
      case 787: used = action787(lookahead); break;
      case 788: used = action788(lookahead); break;
      case 789: used = action789(lookahead); break;
      case 790: used = action790(lookahead); break;
      case 791: used = action791(lookahead); break;
      case 792: used = action792(lookahead); break;
      case 793: used = action793(lookahead); break;
      case 794: used = action794(lookahead); break;
      case 795: used = action795(lookahead); break;
      case 796: used = action796(lookahead); break;
      case 797: used = action797(lookahead); break;
      case 798: used = action798(lookahead); break;
      case 799: used = action799(lookahead); break;
      case 800: used = action800(lookahead); break;
      case 801: used = action801(lookahead); break;
      case 802: used = action802(lookahead); break;
      case 803: used = action803(lookahead); break;
      case 804: used = action804(lookahead); break;
      case 805: used = action805(lookahead); break;
      case 806: used = action806(lookahead); break;
      case 807: used = action807(lookahead); break;
      case 808: used = action808(lookahead); break;
      case 809: used = action809(lookahead); break;
      case 810: used = action810(lookahead); break;
      case 811: used = action811(lookahead); break;
      case 812: used = action812(lookahead); break;
      case 813: used = action813(lookahead); break;
      case 814: used = action814(lookahead); break;
      case 815: used = action815(lookahead); break;
      case 816: used = action816(lookahead); break;
      case 817: used = action817(lookahead); break;
      case 818: used = action818(lookahead); break;
      case 819: used = action819(lookahead); break;
      case 820: used = action820(lookahead); break;
      case 821: used = action821(lookahead); break;
      case 822: used = action822(lookahead); break;
      case 823: used = action823(lookahead); break;
      case 824: used = action824(lookahead); break;
      case 825: used = action825(lookahead); break;
      case 826: used = action826(lookahead); break;
      case 827: used = action827(lookahead); break;
      case 828: used = action828(lookahead); break;
      case 829: used = action829(lookahead); break;
      case 830: used = action830(lookahead); break;
      case 831: used = action831(lookahead); break;
      case 832: used = action832(lookahead); break;
      case 833: used = action833(lookahead); break;
      case 834: used = action834(lookahead); break;
      case 835: used = action835(lookahead); break;
      case 836: used = action836(lookahead); break;
      case 837: used = action837(lookahead); break;
      case 838: used = action838(lookahead); break;
      case 839: used = action839(lookahead); break;
      case 840: used = action840(lookahead); break;
      case 841: used = action841(lookahead); break;
      case 842: used = action842(lookahead); break;
      case 843: used = action843(lookahead); break;
      case 844: used = action844(lookahead); break;
      case 845: used = action845(lookahead); break;
      case 846: used = action846(lookahead); break;
      case 847: used = action847(lookahead); break;
      case 848: used = action848(lookahead); break;
      case 849: used = action849(lookahead); break;
      case 850: used = action850(lookahead); break;
      case 851: used = action851(lookahead); break;
      case 852: used = action852(lookahead); break;
      case 853: used = action853(lookahead); break;
      case 854: used = action854(lookahead); break;
      case 855: used = action855(lookahead); break;
      case 856: used = action856(lookahead); break;
      case 857: used = action857(lookahead); break;
      case 858: used = action858(lookahead); break;
      case 859: used = action859(lookahead); break;
      case 860: used = action860(lookahead); break;
      case 861: used = action861(lookahead); break;
      case 862: used = action862(lookahead); break;
      case 863: used = action863(lookahead); break;
      case 864: used = action864(lookahead); break;
      case 865: used = action865(lookahead); break;
      case 866: used = action866(lookahead); break;
      case 867: used = action867(lookahead); break;
      case 868: used = action868(lookahead); break;
      case 869: used = action869(lookahead); break;
      case 870: used = action870(lookahead); break;
      case 871: used = action871(lookahead); break;
      case 872: used = action872(lookahead); break;
      case 873: used = action873(lookahead); break;
      case 874: used = action874(lookahead); break;
      case 875: used = action875(lookahead); break;
      case 876: used = action876(lookahead); break;
      case 877: used = action877(lookahead); break;
      case 878: used = action878(lookahead); break;
      case 879: used = action879(lookahead); break;
      case 880: used = action880(lookahead); break;
      case 881: used = action881(lookahead); break;
      case 882: used = action882(lookahead); break;
      case 883: used = action883(lookahead); break;
      case 884: used = action884(lookahead); break;
      case 885: used = action885(lookahead); break;
      case 886: used = action886(lookahead); break;
      case 887: used = action887(lookahead); break;
      case 888: used = action888(lookahead); break;
      case 889: used = action889(lookahead); break;
      case 890: used = action890(lookahead); break;
      case 891: used = action891(lookahead); break;
      case 892: used = action892(lookahead); break;
      case 893: used = action893(lookahead); break;
      case 894: used = action894(lookahead); break;
      case 895: used = action895(lookahead); break;
      case 896: used = action896(lookahead); break;
      case 897: used = action897(lookahead); break;
      case 898: used = action898(lookahead); break;
      case 899: used = action899(lookahead); break;
      case 900: used = action900(lookahead); break;
      case 901: used = action901(lookahead); break;
      case 902: used = action902(lookahead); break;
      case 903: used = action903(lookahead); break;
      case 904: used = action904(lookahead); break;
      case 905: used = action905(lookahead); break;
      case 906: used = action906(lookahead); break;
      case 907: used = action907(lookahead); break;
      case 908: used = action908(lookahead); break;
      case 909: used = action909(lookahead); break;
      case 910: used = action910(lookahead); break;
      case 911: used = action911(lookahead); break;
      case 912: used = action912(lookahead); break;
      case 913: used = action913(lookahead); break;
      case 914: used = action914(lookahead); break;
      case 915: used = action915(lookahead); break;
      case 916: used = action916(lookahead); break;
      case 917: used = action917(lookahead); break;
      case 918: used = action918(lookahead); break;
      case 919: used = action919(lookahead); break;
      case 920: used = action920(lookahead); break;
      case 921: used = action921(lookahead); break;
      case 922: used = action922(lookahead); break;
      case 923: used = action923(lookahead); break;
      case 924: used = action924(lookahead); break;
      case 925: used = action925(lookahead); break;
      case 926: used = action926(lookahead); break;
      case 927: used = action927(lookahead); break;
      case 928: used = action928(lookahead); break;
      case 929: used = action929(lookahead); break;
      case 930: used = action930(lookahead); break;
      case 931: used = action931(lookahead); break;
      case 932: used = action932(lookahead); break;
      case 933: used = action933(lookahead); break;
      case 934: used = action934(lookahead); break;
      case 935: used = action935(lookahead); break;
      case 936: used = action936(lookahead); break;
      case 937: used = action937(lookahead); break;
      case 938: used = action938(lookahead); break;
      case 939: used = action939(lookahead); break;
      case 940: used = action940(lookahead); break;
      case 941: used = action941(lookahead); break;
      case 942: used = action942(lookahead); break;
      case 943: used = action943(lookahead); break;
      case 944: used = action944(lookahead); break;
      case 945: used = action945(lookahead); break;
      case 946: used = action946(lookahead); break;
      case 947: used = action947(lookahead); break;
      case 948: used = action948(lookahead); break;
      case 949: used = action949(lookahead); break;
      case 950: used = action950(lookahead); break;
      case 951: used = action951(lookahead); break;
      case 952: used = action952(lookahead); break;
      case 953: used = action953(lookahead); break;
      case 954: used = action954(lookahead); break;
      case 955: used = action955(lookahead); break;
      case 956: used = action956(lookahead); break;
      case 957: used = action957(lookahead); break;
      case 958: used = action958(lookahead); break;
      case 959: used = action959(lookahead); break;
      case 960: used = action960(lookahead); break;
      case 961: used = action961(lookahead); break;
      case 962: used = action962(lookahead); break;
      case 963: used = action963(lookahead); break;
      case 964: used = action964(lookahead); break;
      case 965: used = action965(lookahead); break;
      case 966: used = action966(lookahead); break;
      case 967: used = action967(lookahead); break;
      case 968: used = action968(lookahead); break;
      case 969: used = action969(lookahead); break;
      case 970: used = action970(lookahead); break;
      case 971: used = action971(lookahead); break;
      case 972: used = action972(lookahead); break;
      case 973: used = action973(lookahead); break;
      case 974: used = action974(lookahead); break;
      case 975: used = action975(lookahead); break;
      case 976: used = action976(lookahead); break;
      case 977: used = action977(lookahead); break;
      case 978: used = action978(lookahead); break;
      case 979: used = action979(lookahead); break;
      case 980: used = action980(lookahead); break;
      case 981: used = action981(lookahead); break;
      case 982: used = action982(lookahead); break;
      case 983: used = action983(lookahead); break;
      case 984: used = action984(lookahead); break;
      case 985: used = action985(lookahead); break;
      case 986: used = action986(lookahead); break;
      case 987: used = action987(lookahead); break;
      case 988: used = action988(lookahead); break;
      case 989: used = action989(lookahead); break;
      case 990: used = action990(lookahead); break;
      case 991: used = action991(lookahead); break;
      case 992: used = action992(lookahead); break;
      case 993: used = action993(lookahead); break;
      case 994: used = action994(lookahead); break;
      case 995: used = action995(lookahead); break;
      case 996: used = action996(lookahead); break;
      case 997: used = action997(lookahead); break;
      case 998: used = action998(lookahead); break;
      case 999: used = action999(lookahead); break;
      case 1000: used = action1000(lookahead); break;
      case 1001: used = action1001(lookahead); break;
      case 1002: used = action1002(lookahead); break;
      case 1003: used = action1003(lookahead); break;
      case 1004: used = action1004(lookahead); break;
      case 1005: used = action1005(lookahead); break;
      case 1006: used = action1006(lookahead); break;
      case 1007: used = action1007(lookahead); break;
      case 1008: used = action1008(lookahead); break;
      case 1009: used = action1009(lookahead); break;
      case 1010: used = action1010(lookahead); break;
      case 1011: used = action1011(lookahead); break;
      case 1012: used = action1012(lookahead); break;
      case 1013: used = action1013(lookahead); break;
      case 1014: used = action1014(lookahead); break;
      case 1015: used = action1015(lookahead); break;
      case 1016: used = action1016(lookahead); break;
      case 1017: used = action1017(lookahead); break;
      case 1018: used = action1018(lookahead); break;
      case 1019: used = action1019(lookahead); break;
      case 1020: used = action1020(lookahead); break;
      case 1021: used = action1021(lookahead); break;
      case 1022: used = action1022(lookahead); break;
      case 1023: used = action1023(lookahead); break;
      case 1024: used = action1024(lookahead); break;
      case 1025: used = action1025(lookahead); break;
      case 1026: used = action1026(lookahead); break;
      case 1027: used = action1027(lookahead); break;
      case 1028: used = action1028(lookahead); break;
      case 1029: used = action1029(lookahead); break;
      case 1030: used = action1030(lookahead); break;
      case 1031: used = action1031(lookahead); break;
      case 1032: used = action1032(lookahead); break;
      case 1033: used = action1033(lookahead); break;
      case 1034: used = action1034(lookahead); break;
      case 1035: used = action1035(lookahead); break;
      case 1036: used = action1036(lookahead); break;
      case 1037: used = action1037(lookahead); break;
      case 1038: used = action1038(lookahead); break;
      case 1039: used = action1039(lookahead); break;
      case 1040: used = action1040(lookahead); break;
      case 1041: used = action1041(lookahead); break;
      case 1042: used = action1042(lookahead); break;
      case 1043: used = action1043(lookahead); break;
      case 1044: used = action1044(lookahead); break;
      case 1045: used = action1045(lookahead); break;
      case 1046: used = action1046(lookahead); break;
      case 1047: used = action1047(lookahead); break;
      case 1048: used = action1048(lookahead); break;
      case 1049: used = action1049(lookahead); break;
      case 1050: used = action1050(lookahead); break;
      case 1051: used = action1051(lookahead); break;
      case 1052: used = action1052(lookahead); break;
      case 1053: used = action1053(lookahead); break;
      case 1054: used = action1054(lookahead); break;
      case 1055: used = action1055(lookahead); break;
      case 1056: used = action1056(lookahead); break;
      case 1057: used = action1057(lookahead); break;
      case 1058: used = action1058(lookahead); break;
      case 1059: used = action1059(lookahead); break;
      case 1060: used = action1060(lookahead); break;
      case 1061: used = action1061(lookahead); break;
      case 1062: used = action1062(lookahead); break;
      case 1063: used = action1063(lookahead); break;
      case 1064: used = action1064(lookahead); break;
      case 1065: used = action1065(lookahead); break;
      case 1066: used = action1066(lookahead); break;
      case 1067: used = action1067(lookahead); break;
      case 1068: used = action1068(lookahead); break;
      default: throw new IllegalStateException();
      }
      if (accepted)
      {
        return tokenStack.removeFirst();
      }
      if (used)
      {
        lookahead = tokenizer.next();
      }
    }
  }

  private final int findGotoState(int state, ParseType tokenType)
  {
    switch (state)
    {
    case 0: return goto0(tokenType);
    case 1: return goto1(tokenType);
    case 2: return goto2(tokenType);
    case 20: return goto20(tokenType);
    case 21: return goto21(tokenType);
    case 39: return goto39(tokenType);
    case 40: return goto40(tokenType);
    case 41: return goto41(tokenType);
    case 45: return goto45(tokenType);
    case 47: return goto47(tokenType);
    case 55: return goto55(tokenType);
    case 56: return goto56(tokenType);
    case 57: return goto57(tokenType);
    case 58: return goto58(tokenType);
    case 60: return goto60(tokenType);
    case 62: return goto62(tokenType);
    case 64: return goto64(tokenType);
    case 65: return goto65(tokenType);
    case 69: return goto69(tokenType);
    case 71: return goto71(tokenType);
    case 72: return goto72(tokenType);
    case 73: return goto73(tokenType);
    case 75: return goto75(tokenType);
    case 82: return goto82(tokenType);
    case 85: return goto85(tokenType);
    case 86: return goto86(tokenType);
    case 107: return goto107(tokenType);
    case 108: return goto108(tokenType);
    case 109: return goto109(tokenType);
    case 110: return goto110(tokenType);
    case 112: return goto112(tokenType);
    case 113: return goto113(tokenType);
    case 115: return goto115(tokenType);
    case 123: return goto123(tokenType);
    case 130: return goto130(tokenType);
    case 140: return goto140(tokenType);
    case 142: return goto142(tokenType);
    case 143: return goto143(tokenType);
    case 150: return goto150(tokenType);
    case 159: return goto159(tokenType);
    case 160: return goto160(tokenType);
    case 168: return goto168(tokenType);
    case 169: return goto169(tokenType);
    case 170: return goto170(tokenType);
    case 173: return goto173(tokenType);
    case 175: return goto175(tokenType);
    case 176: return goto176(tokenType);
    case 187: return goto187(tokenType);
    case 189: return goto189(tokenType);
    case 195: return goto195(tokenType);
    case 197: return goto197(tokenType);
    case 198: return goto198(tokenType);
    case 199: return goto199(tokenType);
    case 201: return goto201(tokenType);
    case 202: return goto202(tokenType);
    case 203: return goto203(tokenType);
    case 205: return goto205(tokenType);
    case 206: return goto206(tokenType);
    case 208: return goto208(tokenType);
    case 210: return goto210(tokenType);
    case 213: return goto213(tokenType);
    case 215: return goto215(tokenType);
    case 218: return goto218(tokenType);
    case 224: return goto224(tokenType);
    case 226: return goto226(tokenType);
    case 228: return goto228(tokenType);
    case 236: return goto236(tokenType);
    case 238: return goto238(tokenType);
    case 243: return goto243(tokenType);
    case 245: return goto245(tokenType);
    case 246: return goto246(tokenType);
    case 247: return goto247(tokenType);
    case 248: return goto248(tokenType);
    case 249: return goto249(tokenType);
    case 251: return goto251(tokenType);
    case 254: return goto254(tokenType);
    case 255: return goto255(tokenType);
    case 257: return goto257(tokenType);
    case 262: return goto262(tokenType);
    case 263: return goto263(tokenType);
    case 265: return goto265(tokenType);
    case 272: return goto272(tokenType);
    case 273: return goto273(tokenType);
    case 276: return goto276(tokenType);
    case 277: return goto277(tokenType);
    case 278: return goto278(tokenType);
    case 279: return goto279(tokenType);
    case 281: return goto281(tokenType);
    case 283: return goto283(tokenType);
    case 285: return goto285(tokenType);
    case 287: return goto287(tokenType);
    case 289: return goto289(tokenType);
    case 291: return goto291(tokenType);
    case 292: return goto292(tokenType);
    case 309: return goto309(tokenType);
    case 311: return goto311(tokenType);
    case 312: return goto312(tokenType);
    case 313: return goto313(tokenType);
    case 314: return goto314(tokenType);
    case 315: return goto315(tokenType);
    case 318: return goto318(tokenType);
    case 320: return goto320(tokenType);
    case 321: return goto321(tokenType);
    case 324: return goto324(tokenType);
    case 325: return goto325(tokenType);
    case 326: return goto326(tokenType);
    case 327: return goto327(tokenType);
    case 329: return goto329(tokenType);
    case 331: return goto331(tokenType);
    case 343: return goto343(tokenType);
    case 349: return goto349(tokenType);
    case 358: return goto358(tokenType);
    case 361: return goto361(tokenType);
    case 362: return goto362(tokenType);
    case 364: return goto364(tokenType);
    case 374: return goto374(tokenType);
    case 375: return goto375(tokenType);
    case 376: return goto376(tokenType);
    case 377: return goto377(tokenType);
    case 378: return goto378(tokenType);
    case 380: return goto380(tokenType);
    case 381: return goto381(tokenType);
    case 386: return goto386(tokenType);
    case 387: return goto387(tokenType);
    case 389: return goto389(tokenType);
    case 391: return goto391(tokenType);
    case 392: return goto392(tokenType);
    case 393: return goto393(tokenType);
    case 394: return goto394(tokenType);
    case 395: return goto395(tokenType);
    case 396: return goto396(tokenType);
    case 397: return goto397(tokenType);
    case 398: return goto398(tokenType);
    case 399: return goto399(tokenType);
    case 400: return goto400(tokenType);
    case 401: return goto401(tokenType);
    case 402: return goto402(tokenType);
    case 408: return goto408(tokenType);
    case 410: return goto410(tokenType);
    case 411: return goto411(tokenType);
    case 412: return goto412(tokenType);
    case 414: return goto414(tokenType);
    case 415: return goto415(tokenType);
    case 417: return goto417(tokenType);
    case 419: return goto419(tokenType);
    case 427: return goto427(tokenType);
    case 431: return goto431(tokenType);
    case 432: return goto432(tokenType);
    case 435: return goto435(tokenType);
    case 437: return goto437(tokenType);
    case 438: return goto438(tokenType);
    case 439: return goto439(tokenType);
    case 441: return goto441(tokenType);
    case 442: return goto442(tokenType);
    case 443: return goto443(tokenType);
    case 444: return goto444(tokenType);
    case 446: return goto446(tokenType);
    case 450: return goto450(tokenType);
    case 451: return goto451(tokenType);
    case 453: return goto453(tokenType);
    case 454: return goto454(tokenType);
    case 455: return goto455(tokenType);
    case 470: return goto470(tokenType);
    case 472: return goto472(tokenType);
    case 473: return goto473(tokenType);
    case 485: return goto485(tokenType);
    case 486: return goto486(tokenType);
    case 488: return goto488(tokenType);
    case 490: return goto490(tokenType);
    case 492: return goto492(tokenType);
    case 500: return goto500(tokenType);
    case 501: return goto501(tokenType);
    case 503: return goto503(tokenType);
    case 505: return goto505(tokenType);
    case 506: return goto506(tokenType);
    case 511: return goto511(tokenType);
    case 512: return goto512(tokenType);
    case 514: return goto514(tokenType);
    case 516: return goto516(tokenType);
    case 517: return goto517(tokenType);
    case 518: return goto518(tokenType);
    case 519: return goto519(tokenType);
    case 520: return goto520(tokenType);
    case 521: return goto521(tokenType);
    case 522: return goto522(tokenType);
    case 523: return goto523(tokenType);
    case 524: return goto524(tokenType);
    case 525: return goto525(tokenType);
    case 526: return goto526(tokenType);
    case 527: return goto527(tokenType);
    case 528: return goto528(tokenType);
    case 529: return goto529(tokenType);
    case 530: return goto530(tokenType);
    case 531: return goto531(tokenType);
    case 532: return goto532(tokenType);
    case 533: return goto533(tokenType);
    case 534: return goto534(tokenType);
    case 535: return goto535(tokenType);
    case 537: return goto537(tokenType);
    case 538: return goto538(tokenType);
    case 539: return goto539(tokenType);
    case 540: return goto540(tokenType);
    case 541: return goto541(tokenType);
    case 542: return goto542(tokenType);
    case 543: return goto543(tokenType);
    case 545: return goto545(tokenType);
    case 546: return goto546(tokenType);
    case 547: return goto547(tokenType);
    case 548: return goto548(tokenType);
    case 549: return goto549(tokenType);
    case 552: return goto552(tokenType);
    case 553: return goto553(tokenType);
    case 554: return goto554(tokenType);
    case 555: return goto555(tokenType);
    case 556: return goto556(tokenType);
    case 557: return goto557(tokenType);
    case 558: return goto558(tokenType);
    case 559: return goto559(tokenType);
    case 560: return goto560(tokenType);
    case 561: return goto561(tokenType);
    case 562: return goto562(tokenType);
    case 563: return goto563(tokenType);
    case 564: return goto564(tokenType);
    case 565: return goto565(tokenType);
    case 567: return goto567(tokenType);
    case 568: return goto568(tokenType);
    case 569: return goto569(tokenType);
    case 570: return goto570(tokenType);
    case 571: return goto571(tokenType);
    case 572: return goto572(tokenType);
    case 573: return goto573(tokenType);
    case 575: return goto575(tokenType);
    case 576: return goto576(tokenType);
    case 580: return goto580(tokenType);
    case 581: return goto581(tokenType);
    case 582: return goto582(tokenType);
    case 584: return goto584(tokenType);
    case 590: return goto590(tokenType);
    case 591: return goto591(tokenType);
    case 592: return goto592(tokenType);
    case 595: return goto595(tokenType);
    case 598: return goto598(tokenType);
    case 614: return goto614(tokenType);
    case 629: return goto629(tokenType);
    case 630: return goto630(tokenType);
    case 631: return goto631(tokenType);
    case 632: return goto632(tokenType);
    case 642: return goto642(tokenType);
    case 649: return goto649(tokenType);
    case 651: return goto651(tokenType);
    case 655: return goto655(tokenType);
    case 658: return goto658(tokenType);
    case 662: return goto662(tokenType);
    case 665: return goto665(tokenType);
    case 667: return goto667(tokenType);
    case 673: return goto673(tokenType);
    case 674: return goto674(tokenType);
    case 675: return goto675(tokenType);
    case 676: return goto676(tokenType);
    case 678: return goto678(tokenType);
    case 679: return goto679(tokenType);
    case 686: return goto686(tokenType);
    case 688: return goto688(tokenType);
    case 689: return goto689(tokenType);
    case 693: return goto693(tokenType);
    case 708: return goto708(tokenType);
    case 709: return goto709(tokenType);
    case 712: return goto712(tokenType);
    case 729: return goto729(tokenType);
    case 733: return goto733(tokenType);
    case 738: return goto738(tokenType);
    case 741: return goto741(tokenType);
    case 743: return goto743(tokenType);
    case 752: return goto752(tokenType);
    case 754: return goto754(tokenType);
    case 757: return goto757(tokenType);
    case 759: return goto759(tokenType);
    case 762: return goto762(tokenType);
    case 763: return goto763(tokenType);
    case 766: return goto766(tokenType);
    case 767: return goto767(tokenType);
    case 769: return goto769(tokenType);
    case 773: return goto773(tokenType);
    case 775: return goto775(tokenType);
    case 777: return goto777(tokenType);
    case 779: return goto779(tokenType);
    case 782: return goto782(tokenType);
    case 800: return goto800(tokenType);
    case 803: return goto803(tokenType);
    case 810: return goto810(tokenType);
    case 812: return goto812(tokenType);
    case 814: return goto814(tokenType);
    case 817: return goto817(tokenType);
    case 819: return goto819(tokenType);
    case 821: return goto821(tokenType);
    case 823: return goto823(tokenType);
    case 826: return goto826(tokenType);
    case 827: return goto827(tokenType);
    case 831: return goto831(tokenType);
    case 837: return goto837(tokenType);
    case 838: return goto838(tokenType);
    case 839: return goto839(tokenType);
    case 840: return goto840(tokenType);
    case 842: return goto842(tokenType);
    case 843: return goto843(tokenType);
    case 844: return goto844(tokenType);
    case 845: return goto845(tokenType);
    case 856: return goto856(tokenType);
    case 857: return goto857(tokenType);
    case 858: return goto858(tokenType);
    case 860: return goto860(tokenType);
    case 862: return goto862(tokenType);
    case 865: return goto865(tokenType);
    case 866: return goto866(tokenType);
    case 877: return goto877(tokenType);
    case 879: return goto879(tokenType);
    case 883: return goto883(tokenType);
    case 887: return goto887(tokenType);
    case 888: return goto888(tokenType);
    case 889: return goto889(tokenType);
    case 893: return goto893(tokenType);
    case 897: return goto897(tokenType);
    case 898: return goto898(tokenType);
    case 899: return goto899(tokenType);
    case 904: return goto904(tokenType);
    case 906: return goto906(tokenType);
    case 908: return goto908(tokenType);
    case 909: return goto909(tokenType);
    case 913: return goto913(tokenType);
    case 915: return goto915(tokenType);
    case 916: return goto916(tokenType);
    case 918: return goto918(tokenType);
    case 921: return goto921(tokenType);
    case 922: return goto922(tokenType);
    case 927: return goto927(tokenType);
    case 928: return goto928(tokenType);
    case 929: return goto929(tokenType);
    case 930: return goto930(tokenType);
    case 931: return goto931(tokenType);
    case 932: return goto932(tokenType);
    case 948: return goto948(tokenType);
    case 955: return goto955(tokenType);
    case 958: return goto958(tokenType);
    case 965: return goto965(tokenType);
    case 988: return goto988(tokenType);
    case 992: return goto992(tokenType);
    case 993: return goto993(tokenType);
    case 995: return goto995(tokenType);
    case 1013: return goto1013(tokenType);
    case 1014: return goto1014(tokenType);
    case 1015: return goto1015(tokenType);
    case 1016: return goto1016(tokenType);
    case 1018: return goto1018(tokenType);
    case 1019: return goto1019(tokenType);
    case 1023: return goto1023(tokenType);
    case 1025: return goto1025(tokenType);
    case 1026: return goto1026(tokenType);
    case 1027: return goto1027(tokenType);
    case 1028: return goto1028(tokenType);
    case 1029: return goto1029(tokenType);
    case 1031: return goto1031(tokenType);
    case 1032: return goto1032(tokenType);
    case 1034: return goto1034(tokenType);
    case 1035: return goto1035(tokenType);
    case 1036: return goto1036(tokenType);
    case 1037: return goto1037(tokenType);
    case 1038: return goto1038(tokenType);
    case 1046: return goto1046(tokenType);
    case 1047: return goto1047(tokenType);
    case 1049: return goto1049(tokenType);
    case 1050: return goto1050(tokenType);
    case 1051: return goto1051(tokenType);
    case 1052: return goto1052(tokenType);
    case 1053: return goto1053(tokenType);
    case 1054: return goto1054(tokenType);
    case 1061: return goto1061(tokenType);
    case 1062: return goto1062(tokenType);
    case 1063: return goto1063(tokenType);
    case 1064: return goto1064(tokenType);
    case 1065: return goto1065(tokenType);
    case 1066: return goto1066(tokenType);
    default: break;
    }
    throw new IllegalArgumentException();
  }

  private final boolean action0(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 0);
    }
    switch (token.getType().ordinal())
    {
    case 195:
      stateStack.addFirst(1);
      tokenStack.addFirst(token);
      return true;
    case 162: case 184: case 211: case 190: case 188: case 182: case 106: case 176: case 191: case 198: case 201: case 168: case 169:
      return reduce(RULE_0, 0);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, IMPORT_KEYWORD, MUTABLE_KEYWORD, PACKAGE_KEYWORD, INTERFACE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD});
    }
  }

  private final int goto0(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 1: return 2;
    case 2: return 3;
    default: return -1;
    }
  }

  private final boolean action1(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto1(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 5;
    default: return -1;
    }
  }

  private final boolean action2(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      accepted = true;
      return reduce(RULE_2, 0);
    }
    switch (token.getType().ordinal())
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 188: case 168: case 169:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD});
    }
  }

  private final int goto2(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 4: return 15;
    case 32: return 16;
    case 31: return 17;
    case 5: return 18;
    case 3: return 19;
    default: return -1;
    }
  }

  private final boolean action3(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 0);
    }
    switch (token.getType().ordinal())
    {
    case 184:
      stateStack.addFirst(20);
      tokenStack.addFirst(token);
      return true;
    case 162: case 211: case 190: case 188: case 106: case 182: case 176: case 191: case 201: case 198: case 168: case 169:
      return reduce(RULE_3, 0);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, UNBACKED_KEYWORD, IMPORT_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, FINAL_KEYWORD, NATIVE_KEYWORD, SELFISH_KEYWORD, STATIC_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action4(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 120: case 103: case 122: case 145: case 140: case 135: case 118: case 123: case 130: case 142: case 157: case 133: case 191: case 110: case 201: case 152: case 128: case 182: case 199: case 158: case 151: case 117: case 185: case 198: case 112: case 171: case 136: case 159: case 119: case 153: case 143: case 156: case 150: case 139: case 180: case 161: case 137: case 162: case 132: case 127: case 134: case 183: case 211: case 147: case 108: case 174: case 138: case 113: case 155: case 109: case 124: case 148: case 131: case 146: case 144: case 154: case 126: case 115: case 205: case 176: case 141: case 116: case 114: case 202:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_LANGLE_EQUALS, NAME, DOUBLE_PERCENT, PIPE, LSQUARE, HASH, DOUBLE_EQUALS, DOUBLE_PERCENT_EQUALS, EQUALS, SEMICOLON, MINUS_EQUALS, FORWARD_SLASH, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, STAR_EQUALS, DOUBLE_LANGLE, RANGLE_EQUALS, PERCENT, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, LANGLE_EQUALS, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, DOUBLE_RANGLE_EQUALS, FORWARD_SLASH_EQUALS, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, PLUS, AMPERSAND, EXTENDS_KEYWORD, LBRACE, CARET_EQUALS, RPAREN, AMPERSAND_EQUALS, PLUS_EQUALS, DOUBLE_PIPE, PERCENT_EQUALS, PIPE_EQUALS, EXCLAIMATION_MARK, RBRACE, DOUBLE_RANGLE, COMMA, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, MINUS, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action5(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(21);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT});
    }
  }

  private final boolean action6(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action7(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 12);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action8(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action9(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 18);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action10(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action11(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action12(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(23);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 14);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, CLASS_KEYWORD, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action13(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 10);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action14(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action15(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 3);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 211: case 190: case 188: case 182: case 106: case 176: case 191: case 198: case 201: case 168: case 169:
      return reduce(RULE_3, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, null, UNBACKED_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action16(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 188:
      stateStack.addFirst(24);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTERFACE_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action17(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 213: case 149: case 187: case 188: case 208: case 199: case 103: case 200: case 172: case 171: case 168: case 140: case 209: case 169: case 189: case 135: case 165: case 139: case 138: case 194: case 180: case 163: case 210: case 178:
      return reduce(RULE_1, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, BYTE_KEYWORD, UNBACKED_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action18(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 4);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 211: case 190: case 188: case 182: case 106: case 176: case 191: case 198: case 201: case 168: case 169:
      return reduce(RULE_3, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, null, UNBACKED_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action19(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 2);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 211: case 190: case 188: case 182: case 106: case 176: case 191: case 198: case 201: case 168: case 169:
      return reduce(RULE_3, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, null, UNBACKED_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action20(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto20(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 36;
    default: return -1;
    }
  }

  private final boolean action21(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 0);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 184: case 190: case 188: case 182: case 106: case 198: case 168: case 169: case 211: case 176: case 191: case 201:
      return reduce(RULE_0, 0);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, IMPORT_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD});
    }
  }

  private final int goto21(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 2: return 37;
    default: return -1;
    }
  }

  private final boolean action22(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action23(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 135: case 189: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 16);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, CLASS_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action24(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action25(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action26(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action27(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, CLASS_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action28(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 13);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, CLASS_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action29(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, CLASS_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action30(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, CLASS_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action31(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 19);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, CLASS_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action32(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, CLASS_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action33(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 15);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, LSQUARE, CLASS_KEYWORD, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action34(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 11);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, CLASS_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action35(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 103: case 200: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 9);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, SHORT_KEYWORD, NAME, CLASS_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action36(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT});
    }
  }

  private final boolean action37(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 1);
    }
    switch (token.getType().ordinal())
    {
    case 184:
      stateStack.addFirst(20);
      tokenStack.addFirst(token);
      return true;
    case 162: case 211: case 190: case 188: case 182: case 106: case 176: case 191: case 198: case 201: case 168: case 169:
      return reduce(RULE_3, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, null, UNBACKED_KEYWORD, IMPORT_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action38(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 120: case 103: case 145: case 122: case 140: case 135: case 118: case 123: case 130: case 157: case 142: case 133: case 191: case 110: case 201: case 152: case 128: case 182: case 199: case 158: case 151: case 117: case 185: case 198: case 112: case 171: case 136: case 159: case 119: case 153: case 143: case 156: case 139: case 150: case 180: case 161: case 137: case 162: case 132: case 127: case 134: case 183: case 211: case 147: case 108: case 174: case 138: case 113: case 155: case 109: case 124: case 148: case 131: case 144: case 146: case 154: case 126: case 115: case 205: case 176: case 116: case 141: case 114: case 202:
      return reduce(RULE_4, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_LANGLE_EQUALS, NAME, PIPE, DOUBLE_PERCENT, LSQUARE, HASH, DOUBLE_EQUALS, DOUBLE_PERCENT_EQUALS, EQUALS, MINUS_EQUALS, SEMICOLON, FORWARD_SLASH, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, STAR_EQUALS, DOUBLE_LANGLE, RANGLE_EQUALS, PERCENT, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, UNDERSCORE, LANGLE_EQUALS, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, DOUBLE_RANGLE_EQUALS, FORWARD_SLASH_EQUALS, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, PLUS, AMPERSAND, EXTENDS_KEYWORD, LBRACE, CARET_EQUALS, RPAREN, AMPERSAND_EQUALS, PLUS_EQUALS, DOUBLE_PIPE, PIPE_EQUALS, PERCENT_EQUALS, EXCLAIMATION_MARK, RBRACE, DOUBLE_RANGLE, COMMA, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, DOUBLE_AMPERSAND, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action39(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    case 174: case 138:
      return reduce(RULE_6, 0);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, LBRACE, LANGLE});
    }
  }

  private final int goto39(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 82: return 46;
    default: return -1;
    }
  }

  private final boolean action40(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    case 183: case 174: case 138:
      return reduce(RULE_6, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE, LANGLE});
    }
  }

  private final int goto40(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 82: return 47;
    default: return -1;
    }
  }

  private final boolean action41(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    case 138:
      return reduce(RULE_6, 0);
    default: throw new BadTokenException(token, new Object[] {LBRACE, LANGLE});
    }
  }

  private final int goto41(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 82: return 48;
    default: return -1;
    }
  }

  private final boolean action42(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 188: case 196: case 106: case 200: case 103: case 140: case 168: case 189: case 135: case 211: case 165: case 138: case 214: case 191: case 201: case 178: case 213: case 182: case 199: case 198: case 172: case 171: case 169: case 209: case 176: case 139: case 194: case 180: case 163: case 210:
      return reduce(RULE_5, 17);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, INTERFACE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, CLASS_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, COMPOUND_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, GETTER_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action43(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 1);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 184: case 211: case 190: case 188: case 182: case 106: case 176: case 191: case 198: case 201: case 168: case 169:
      return reduce(RULE_0, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, null, UNBACKED_KEYWORD, IMPORT_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action44(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 158:
      stateStack.addFirst(49);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, STAR});
    }
  }

  private final boolean action45(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(50);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto45(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 79: return 51;
    case 80: return 52;
    case 81: return 53;
    case 78: return 54;
    default: return -1;
    }
  }

  private final boolean action46(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 174:
      stateStack.addFirst(55);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(56);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action47(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183:
      stateStack.addFirst(57);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(58);
      tokenStack.addFirst(token);
      return true;
    case 138:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final int goto47(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 29: return 59;
    default: return -1;
    }
  }

  private final boolean action48(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(60);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action49(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action50(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 174:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_8, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EXTENDS_KEYWORD, RANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action51(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183: case 174: case 138:
      return reduce(RULE_9, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action52(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action53(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183: case 174: case 138:
      return reduce(RULE_6, 1);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action54(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      return reduce(RULE_10, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action55(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto55(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 30: return 66;
    case 62: return 67;
    case 33: return 68;
    default: return -1;
    }
  }

  private final boolean action56(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto56(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 69;
    default: return -1;
    }
  }

  private final boolean action57(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto57(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 30: return 70;
    case 62: return 67;
    case 33: return 68;
    default: return -1;
    }
  }

  private final boolean action58(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto58(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 68;
    case 62: return 71;
    default: return -1;
    }
  }

  private final boolean action59(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action60(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto60(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 73;
    default: return -1;
    }
  }

  private final boolean action61(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 2);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 184: case 211: case 190: case 188: case 182: case 106: case 176: case 191: case 198: case 201: case 168: case 169:
      return reduce(RULE_0, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, null, UNBACKED_KEYWORD, IMPORT_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action62(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto62(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 91;
    case 76: return 92;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 96;
    case 66: return 97;
    case 75: return 98;
    case 56: return 99;
    case 35: return 100;
    case 53: return 101;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action63(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183: case 174: case 138:
      return reduce(RULE_12, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action64(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto64(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 91;
    case 76: return 103;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 96;
    case 66: return 97;
    case 75: return 104;
    case 56: return 99;
    case 35: return 100;
    case 53: return 101;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action65(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(50);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto65(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 79: return 105;
    case 78: return 106;
    default: return -1;
    }
  }

  private final boolean action66(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(107);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(108);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action67(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 138:
      return reduce(RULE_13, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action68(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(109);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 182: case 106: case 199: case 198: case 171: case 183: case 154: case 211: case 115: case 157: case 176: case 139: case 138: case 191: case 201: case 180:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, LANGLE, IMPLEMENTS_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, SEMICOLON, FINAL_KEYWORD, LBRACE, LPAREN, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD, DOT});
    }
  }

  private final boolean action69(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(116);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 196:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto69(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 9: return 117;
    case 59: return 93;
    case 33: return 118;
    case 56: return 119;
    case 53: return 120;
    case 8: return 121;
    case 10: return 122;
    case 31: return 123;
    case 32: return 124;
    case 7: return 125;
    case 63: return 94;
    case 65: return 95;
    case 38: return 126;
    case 35: return 127;
    case 11: return 128;
    default: return -1;
    }
  }

  private final boolean action70(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(107);
      tokenStack.addFirst(token);
      return true;
    case 138:
      return reduce(RULE_7, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action71(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183:
      stateStack.addFirst(57);
      tokenStack.addFirst(token);
      return true;
    case 138:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, LBRACE});
    }
  }

  private final int goto71(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 29: return 129;
    default: return -1;
    }
  }

  private final boolean action72(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto72(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 130;
    default: return -1;
    }
  }

  private final boolean action73(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(131);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 196:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto73(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 9: return 117;
    case 59: return 93;
    case 33: return 118;
    case 56: return 119;
    case 53: return 120;
    case 8: return 121;
    case 10: return 122;
    case 31: return 123;
    case 32: return 124;
    case 7: return 125;
    case 63: return 94;
    case 65: return 95;
    case 38: return 126;
    case 35: return 127;
    case 11: return 128;
    default: return -1;
    }
  }

  private final boolean action74(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 15);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action75(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(137);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(140);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(143);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto75(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 148;
    case 35: return 149;
    default: return -1;
    }
  }

  private final boolean action76(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 10);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action77(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 19);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action78(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 14);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action79(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action80(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(150);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action81(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 11);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action82(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(152);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, OBJECT_KEYWORD, LSQUARE});
    }
  }

  private final int goto82(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 153;
    default: return -1;
    }
  }

  private final boolean action83(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action84(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 18);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action85(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto85(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 34: return 154;
    case 61: return 155;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 156;
    case 56: return 157;
    case 35: return 158;
    default: return -1;
    }
  }

  private final boolean action86(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(159);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(160);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, ARROW, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto86(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 161;
    case 59: return 93;
    case 63: return 94;
    case 26: return 162;
    case 65: return 95;
    case 33: return 163;
    case 56: return 164;
    case 35: return 165;
    case 27: return 166;
    default: return -1;
    }
  }

  private final boolean action87(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 34);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action88(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action89(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action90(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action91(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_16, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action92(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183: case 174: case 138:
      return reduce(RULE_12, 1);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action93(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_17, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action94(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_17, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action95(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_18, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action96(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 115: case 108: case 174: case 202:
      return reduce(RULE_19, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, EXTENDS_KEYWORD, RANGLE, DOT, LANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action97(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 107: case 112: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 206: case 116: case 194: case 114: case 202:
      return reduce(RULE_20, 4);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, STRING_LITERAL, CARET, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, TRUE_KEYWORD, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action98(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(170);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_8, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, SUPER_KEYWORD});
    }
  }

  private final boolean action99(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 115: case 108: case 174: case 202:
      return reduce(RULE_19, 2);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, EXTENDS_KEYWORD, RANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action100(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(172);
      tokenStack.addFirst(token);
      return true;
    case 115: case 108: case 174: case 202:
      return reduce(RULE_19, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, EXTENDS_KEYWORD, RANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action101(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 108: case 174: case 202:
      return reduce(RULE_21, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, EXTENDS_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action102(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 107: case 112: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 206: case 116: case 194: case 114: case 202:
      return reduce(RULE_22, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, STRING_LITERAL, CARET, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, TRUE_KEYWORD, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action103(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183: case 174: case 138:
      return reduce(RULE_12, 2);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action104(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(173);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_8, 2);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, EXTENDS_KEYWORD});
    }
  }

  private final boolean action105(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183: case 174: case 138:
      return reduce(RULE_9, 1);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action106(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      return reduce(RULE_10, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action107(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto107(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 62: return 174;
    case 33: return 68;
    default: return -1;
    }
  }

  private final boolean action108(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto108(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 175;
    default: return -1;
    }
  }

  private final boolean action109(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto109(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 177;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 72: return 181;
    case 59: return 93;
    case 63: return 94;
    case 69: return 182;
    case 65: return 95;
    case 33: return 183;
    case 66: return 97;
    case 56: return 184;
    case 35: return 185;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action110(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(186);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(143);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto110(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 188;
    case 35: return 149;
    default: return -1;
    }
  }

  private final boolean action111(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(189);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action112(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, OBJECT_KEYWORD, LSQUARE});
    }
  }

  private final int goto112(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 191;
    default: return -1;
    }
  }

  private final boolean action113(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(159);
      tokenStack.addFirst(token);
      return true;
    case 170:
      stateStack.addFirst(193);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(196);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(160);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 207:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 204:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(199);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(202);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 197:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 215:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(210);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto113(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 50: return 216;
    case 43: return 217;
    case 39: return 218;
    case 44: return 219;
    case 99: return 220;
    case 59: return 221;
    case 45: return 222;
    case 16: return 223;
    case 56: return 224;
    case 96: return 225;
    case 31: return 226;
    case 42: return 227;
    case 28: return 161;
    case 97: return 228;
    case 14: return 229;
    case 49: return 230;
    case 38: return 231;
    case 46: return 232;
    case 98: return 233;
    case 27: return 166;
    case 41: return 234;
    case 51: return 235;
    case 33: return 236;
    case 47: return 237;
    case 102: return 238;
    case 57: return 239;
    case 63: return 94;
    case 40: return 240;
    case 48: return 241;
    case 65: return 242;
    case 26: return 162;
    case 35: return 243;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action114(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(245);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action115(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(246);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto115(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 22: return 247;
    default: return -1;
    }
  }

  private final boolean action116(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_23, 0);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 211: case 190: case 188: case 106: case 182: case 176: case 191: case 201: case 198: case 168: case 169:
      return reduce(RULE_23, 0);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, FINAL_KEYWORD, NATIVE_KEYWORD, SELFISH_KEYWORD, STATIC_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action117(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action118(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180:
      return reduce(RULE_19, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, LANGLE, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action119(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180:
      return reduce(RULE_19, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action120(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action121(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action122(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action123(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(250);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(251);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 196:
      return reduce(RULE_1, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, BYTE_KEYWORD, UNBACKED_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto123(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 38: return 252;
    case 56: return 119;
    case 35: return 127;
    case 53: return 253;
    default: return -1;
    }
  }

  private final boolean action124(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 196:
      stateStack.addFirst(254);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {PROPERTY_KEYWORD});
    }
  }

  private final boolean action125(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action126(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 187: case 208: case 196: case 106: case 200: case 103: case 140: case 189: case 135: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_24, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action127(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180:
      return reduce(RULE_19, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action128(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action129(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(255);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action130(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(256);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 196:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto130(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 9: return 117;
    case 59: return 93;
    case 33: return 118;
    case 56: return 119;
    case 53: return 120;
    case 8: return 121;
    case 10: return 122;
    case 31: return 123;
    case 32: return 124;
    case 7: return 125;
    case 63: return 94;
    case 65: return 95;
    case 38: return 126;
    case 35: return 127;
    case 11: return 128;
    default: return -1;
    }
  }

  private final boolean action131(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_25, 0);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 211: case 190: case 188: case 106: case 182: case 176: case 191: case 201: case 198: case 168: case 169:
      return reduce(RULE_25, 0);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, FINAL_KEYWORD, NATIVE_KEYWORD, SELFISH_KEYWORD, STATIC_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action132(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 17);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action133(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 12);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action134(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 21);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action135(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 16);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action136(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action137(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(257);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action138(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 13);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action139(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action140(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(258);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(259);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, OBJECT_KEYWORD, LSQUARE});
    }
  }

  private final int goto140(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 260;
    default: return -1;
    }
  }

  private final boolean action141(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 20);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action142(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto142(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 34: return 154;
    case 61: return 261;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 156;
    case 56: return 157;
    case 35: return 158;
    default: return -1;
    }
  }

  private final boolean action143(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(262);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(263);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, ARROW, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto143(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 264;
    case 59: return 93;
    case 63: return 94;
    case 26: return 162;
    case 65: return 95;
    case 33: return 163;
    case 56: return 164;
    case 35: return 165;
    case 27: return 166;
    default: return -1;
    }
  }

  private final boolean action144(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 35);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action145(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action146(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 9);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action147(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action148(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 126: case 115: case 108: case 174: case 117: case 152: case 202:
      return reduce(RULE_15, 41);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, AMPERSAND, EXTENDS_KEYWORD, DOUBLE_COLON, RANGLE, DOT, LANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action149(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 40);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action150(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto150(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 266;
    case 63: return 267;
    case 65: return 95;
    case 33: return 268;
    case 58: return 269;
    case 66: return 97;
    case 35: return 270;
    case 64: return 271;
    default: return -1;
    }
  }

  private final boolean action151(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 36);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action152(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action153(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 126: case 115: case 108: case 174: case 117: case 152: case 202:
      return reduce(RULE_15, 42);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, AMPERSAND, EXTENDS_KEYWORD, DOUBLE_COLON, RANGLE, DOT, LANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action154(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      stateStack.addFirst(274);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action155(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      stateStack.addFirst(275);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action156(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN, DOT, LANGLE});
    }
  }

  private final boolean action157(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(277);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_27, 4);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action158(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(278);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action159(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(279);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, OBJECT_KEYWORD, ARROW, LSQUARE});
    }
  }

  private final int goto159(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 191;
    default: return -1;
    }
  }

  private final boolean action160(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto160(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 52: return 281;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 282;
    default: return -1;
    }
  }

  private final boolean action161(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(283);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(284);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH});
    }
  }

  private final boolean action162(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 110: case 135:
      return reduce(RULE_28, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, ARROW, HASH});
    }
  }

  private final boolean action163(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(285);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(286);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 110: case 135:
      return reduce(RULE_29, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, NAME, ARROW, DOT, LANGLE, HASH});
    }
  }

  private final boolean action164(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(287);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(288);
      tokenStack.addFirst(token);
      return true;
    case 110: case 135:
      return reduce(RULE_29, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, NAME, ARROW, HASH});
    }
  }

  private final boolean action165(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(289);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 110: case 135:
      return reduce(RULE_29, 2);
    default: throw new BadTokenException(token, new Object[] {COMMA, NAME, ARROW, HASH});
    }
  }

  private final boolean action166(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 110: case 135:
      return reduce(RULE_29, 3);
    default: throw new BadTokenException(token, new Object[] {COMMA, ARROW, HASH});
    }
  }

  private final boolean action167(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 116: case 206: case 194: case 114: case 202:
      return reduce(RULE_22, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, TRUE_KEYWORD, DOUBLE_AMPERSAND, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action168(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto168(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 293;
    case 71: return 294;
    case 59: return 93;
    case 72: return 181;
    case 33: return 295;
    case 56: return 296;
    case 74: return 297;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 55: return 298;
    case 63: return 94;
    case 69: return 299;
    case 65: return 95;
    case 66: return 97;
    case 68: return 300;
    case 35: return 301;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action169(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto169(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 302;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 96;
    case 66: return 97;
    case 56: return 99;
    case 35: return 100;
    case 53: return 303;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action170(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto170(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 91;
    case 76: return 304;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 96;
    case 66: return 97;
    case 75: return 305;
    case 56: return 99;
    case 35: return 100;
    case 53: return 101;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action171(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 116: case 206: case 194: case 114: case 202:
      return reduce(RULE_22, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, TRUE_KEYWORD, DOUBLE_AMPERSAND, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action172(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 116: case 206: case 194: case 114: case 202:
      return reduce(RULE_22, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, TRUE_KEYWORD, DOUBLE_AMPERSAND, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action173(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto173(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 91;
    case 76: return 306;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 96;
    case 66: return 97;
    case 75: return 307;
    case 56: return 99;
    case 35: return 100;
    case 53: return 101;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action174(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 138:
      return reduce(RULE_13, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action175(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 196:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto175(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 9: return 117;
    case 59: return 93;
    case 33: return 118;
    case 56: return 119;
    case 53: return 120;
    case 8: return 121;
    case 10: return 122;
    case 31: return 123;
    case 32: return 124;
    case 7: return 125;
    case 63: return 94;
    case 65: return 95;
    case 38: return 126;
    case 35: return 127;
    case 11: return 128;
    default: return -1;
    }
  }

  private final boolean action176(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(137);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(140);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(309);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(143);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 0);
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, COMMA, EXTENDS_KEYWORD, LPAREN, LBRACE, OBJECT_KEYWORD, BOOLEAN_KEYWORD, RANGLE, ULONG_KEYWORD, SUPER_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto176(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 148;
    case 35: return 149;
    default: return -1;
    }
  }

  private final boolean action177(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 182: case 106: case 199: case 198: case 171: case 183: case 154: case 211: case 115: case 157: case 176: case 139: case 138: case 191: case 201: case 180:
      return reduce(RULE_14, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, SEMICOLON, FINAL_KEYWORD, LBRACE, LPAREN, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final boolean action178(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_31, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action179(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_31, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action180(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_32, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action181(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      return reduce(RULE_33, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action182(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(312);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action183(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(313);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, RANGLE, DOT, LANGLE});
    }
  }

  private final boolean action184(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_33, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, RANGLE});
    }
  }

  private final boolean action185(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(172);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, RANGLE});
    }
  }

  private final boolean action186(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(315);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action187(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(258);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(316);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, OBJECT_KEYWORD, LSQUARE});
    }
  }

  private final int goto187(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 317;
    default: return -1;
    }
  }

  private final boolean action188(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(318);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161:
      return reduce(RULE_15, 41);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE});
    }
  }

  private final boolean action189(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LPAREN, LBRACE, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto189(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 266;
    case 63: return 267;
    case 65: return 95;
    case 58: return 269;
    case 33: return 319;
    case 35: return 270;
    default: return -1;
    }
  }

  private final boolean action190(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action191(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161:
      return reduce(RULE_15, 42);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE});
    }
  }

  private final boolean action192(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 139: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_34, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action193(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 104:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL, SEMICOLON});
    }
  }

  private final boolean action194(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 139: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action195(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto195(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 349;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action196(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 104:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL, SEMICOLON});
    }
  }

  private final boolean action197(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto197(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 359;
    default: return -1;
    }
  }

  private final boolean action198(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto198(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 360;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action199(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto199(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 362;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 363;
    default: return -1;
    }
  }

  private final boolean action200(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 139: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_34, 21);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action201(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto201(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 62: return 364;
    case 33: return 68;
    default: return -1;
    }
  }

  private final boolean action202(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto202(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 239;
    case 102: return 238;
    case 96: return 225;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 14: return 365;
    case 65: return 351;
    case 33: return 366;
    case 35: return 367;
    case 98: return 353;
    case 15: return 368;
    default: return -1;
    }
  }

  private final boolean action203(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto203(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 61: return 155;
    case 86: return 333;
    case 99: return 335;
    case 59: return 221;
    case 56: return 157;
    case 93: return 337;
    case 84: return 369;
    case 95: return 344;
    case 96: return 347;
    case 89: return 348;
    case 97: return 228;
    case 98: return 353;
    case 91: return 355;
    case 94: return 354;
    case 33: return 370;
    case 87: return 338;
    case 90: return 339;
    case 85: return 341;
    case 34: return 154;
    case 57: return 345;
    case 102: return 343;
    case 92: return 346;
    case 63: return 94;
    case 88: return 350;
    case 65: return 242;
    case 35: return 371;
    default: return -1;
    }
  }

  private final boolean action204(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 113: case 120: case 155: case 127: case 109: case 148: case 144: case 146: case 134: case 159: case 123: case 115: case 130: case 142: case 157:
      return reduce(RULE_35, 5);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, RPAREN, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, SEMICOLON, MINUS_EQUALS});
    }
  }

  private final boolean action205(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(372);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto205(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 373;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action206(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(375);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, OBJECT_KEYWORD, LSQUARE});
    }
  }

  private final int goto206(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 62: return 376;
    case 33: return 68;
    case 101: return 377;
    default: return -1;
    }
  }

  private final boolean action207(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 139: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_34, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action208(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto208(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 378;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action209(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 139: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_34, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action210(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto210(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 239;
    case 102: return 238;
    case 96: return 225;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 14: return 379;
    case 65: return 351;
    case 33: return 366;
    case 35: return 367;
    case 98: return 353;
    case 15: return 368;
    default: return -1;
    }
  }

  private final boolean action211(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(380);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LANGLE});
    }
  }

  private final boolean action212(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 167: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 199: case 179: case 198: case 107: case 171: case 125: case 139: case 180: case 163: case 161: case 210: case 197: case 162: case 187: case 208: case 196: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 214: case 105: case 177: case 121: case 166: case 172: case 173: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_36, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, CATCH_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, VOID_KEYWORD, FLOATING_LITERAL, FINALLY_KEYWORD, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, ELSE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action213(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 151: case 140: case 128:
      return reduce(RULE_37, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK_DOT, LPAREN, LSQUARE, DOT});
    }
  }

  private final int goto213(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 382;
    default: return -1;
    }
  }

  private final boolean action214(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 139: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_34, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action215(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(383);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN, DOT});
    }
  }

  private final int goto215(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 384;
    default: return -1;
    }
  }

  private final boolean action216(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 9);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action217(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action218(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 170:
      stateStack.addFirst(193);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(196);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 207:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 204:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(199);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(202);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 197:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 215:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(210);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(385);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto218(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 50: return 216;
    case 43: return 217;
    case 44: return 219;
    case 99: return 220;
    case 59: return 221;
    case 45: return 222;
    case 16: return 223;
    case 56: return 386;
    case 96: return 225;
    case 31: return 226;
    case 42: return 227;
    case 97: return 228;
    case 49: return 230;
    case 14: return 229;
    case 38: return 231;
    case 46: return 232;
    case 98: return 233;
    case 41: return 234;
    case 51: return 235;
    case 33: return 387;
    case 47: return 237;
    case 102: return 238;
    case 57: return 239;
    case 63: return 94;
    case 40: return 388;
    case 48: return 241;
    case 65: return 242;
    case 35: return 389;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action219(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 5);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action220(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(390);
      tokenStack.addFirst(token);
      return true;
    case 151: case 139: case 140: case 128:
      return reduce(RULE_34, 17);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, QUESTION_MARK_DOT, LPAREN, LSQUARE, DOT});
    }
  }

  private final boolean action221(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_39, 0);
    case 126: case 115: case 155: case 103: case 110: case 161: case 152: case 135:
      return reduce(RULE_17, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, RPAREN, NAME, DOUBLE_COLON, ARROW, RANGLE, UNDERSCORE, HASH});
    }
  }

  private final boolean action222(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 4);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action223(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(393);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(394);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(395);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(396);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(397);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(398);
      tokenStack.addFirst(token);
      return true;
    case 146:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(400);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(401);
      tokenStack.addFirst(token);
      return true;
    case 159:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, CARET_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, STAR_EQUALS});
    }
  }

  private final boolean action224(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(287);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(403);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 110: case 135:
      return reduce(RULE_29, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, NAME, ARROW, UNDERSCORE, HASH});
    }
  }

  private final int goto224(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 405;
    case 17: return 406;
    default: return -1;
    }
  }

  private final boolean action225(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(407);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(408);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(409);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK_DOT, LSQUARE, DOT});
    }
  }

  private final boolean action226(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, BYTE_KEYWORD, UNBACKED_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto226(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 410;
    case 56: return 411;
    case 35: return 412;
    default: return -1;
    }
  }

  private final boolean action227(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action228(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_37, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto228(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 413;
    default: return -1;
    }
  }

  private final boolean action229(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123: case 113: case 130: case 120: case 142: case 127: case 109: case 148: case 146: case 144: case 134: case 159:
      return reduce(RULE_40, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, CARET_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, STAR_EQUALS});
    }
  }

  private final boolean action230(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 167:
      stateStack.addFirst(414);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(415);
      tokenStack.addFirst(token);
      return true;
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 8);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, CATCH_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, IF_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, FINALLY_KEYWORD, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action231(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action232(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 6);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action233(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(416);
      tokenStack.addFirst(token);
      return true;
    case 151: case 139: case 140: case 128:
      return reduce(RULE_34, 19);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, QUESTION_MARK_DOT, LPAREN, LSQUARE, DOT});
    }
  }

  private final boolean action234(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action235(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 10);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action236(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(417);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(418);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(419);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 151: case 139:
      return reduce(RULE_42, 0);
    case 135: case 110:
      return reduce(RULE_29, 1);
    case 113: case 120: case 127: case 109: case 148: case 146: case 144: case 134: case 159: case 123: case 130: case 142:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, NAME, QUESTION_MARK_DOT, DOUBLE_COLON, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, LANGLE, HASH, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, MINUS_EQUALS, LPAREN, ARROW, UNDERSCORE, DOT});
    }
  }

  private final int goto236(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 420;
    case 17: return 421;
    default: return -1;
    }
  }

  private final boolean action237(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 7);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action238(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK_DOT, LPAREN});
    }
  }

  private final int goto238(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action239(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      stateStack.addFirst(424);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action240(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_43, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action241(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(425);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action242(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_39, 3);
    case 126: case 115: case 155: case 103: case 110: case 161: case 152: case 135:
      return reduce(RULE_18, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, RPAREN, NAME, DOUBLE_COLON, ARROW, RANGLE, UNDERSCORE, HASH});
    }
  }

  private final boolean action243(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(289);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(426);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(427);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 151: case 139:
      return reduce(RULE_42, 1);
    case 110: case 135:
      return reduce(RULE_29, 2);
    default: throw new BadTokenException(token, new Object[] {COMMA, QUESTION_MARK_DOT, NAME, LPAREN, DOUBLE_COLON, ARROW, LSQUARE, UNDERSCORE, DOT, HASH});
    }
  }

  private final int goto243(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 429;
    case 17: return 430;
    default: return -1;
    }
  }

  private final boolean action244(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(431);
      tokenStack.addFirst(token);
      return true;
    case 123: case 113: case 130: case 120: case 142: case 127: case 109: case 148: case 146: case 144: case 134: case 159:
      return reduce(RULE_41, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, CARET_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, STAR_EQUALS});
    }
  }

  private final boolean action245(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(246);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto245(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 22: return 432;
    default: return -1;
    }
  }

  private final boolean action246(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 111:
      stateStack.addFirst(433);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(434);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 213: case 149: case 187: case 208: case 103: case 200: case 172: case 140: case 209: case 189: case 135: case 165: case 139: case 138: case 194: case 163: case 210: case 178:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, AT, IMMUTABLE_KEYWORD, RPAREN, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto246(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 17;
    case 32: return 435;
    case 23: return 436;
    default: return -1;
    }
  }

  private final boolean action247(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 157: case 138:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto247(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 438;
    default: return -1;
    }
  }

  private final boolean action248(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto248(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 293;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 72: return 181;
    case 59: return 93;
    case 69: return 182;
    case 63: return 94;
    case 65: return 95;
    case 33: return 183;
    case 66: return 97;
    case 56: return 184;
    case 35: return 185;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action249(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(439);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(440);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(246);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, LPAREN});
    }
  }

  private final int goto249(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 22: return 441;
    default: return -1;
    }
  }

  private final boolean action250(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(442);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action251(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(246);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto251(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 22: return 443;
    default: return -1;
    }
  }

  private final boolean action252(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_24, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action253(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(444);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action254(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto254(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 445;
    default: return -1;
    }
  }

  private final boolean action255(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto255(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 446;
    default: return -1;
    }
  }

  private final boolean action256(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_45, 0);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 211: case 190: case 188: case 182: case 106: case 176: case 191: case 198: case 201: case 168: case 169:
      return reduce(RULE_45, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, null, UNBACKED_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action257(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto257(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 266;
    case 63: return 447;
    case 65: return 95;
    case 58: return 448;
    case 33: return 268;
    case 66: return 97;
    case 35: return 270;
    case 64: return 449;
    default: return -1;
    }
  }

  private final boolean action258(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 37);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action259(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(450);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action260(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(451);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 126: case 115: case 108: case 174: case 117: case 152: case 202:
      return reduce(RULE_15, 43);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, AMPERSAND, EXTENDS_KEYWORD, DOUBLE_COLON, RANGLE, DOT, LANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action261(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      stateStack.addFirst(452);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action262(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(453);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, ARROW, OBJECT_KEYWORD, LSQUARE});
    }
  }

  private final int goto262(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 191;
    default: return -1;
    }
  }

  private final boolean action263(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto263(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 52: return 454;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 282;
    default: return -1;
    }
  }

  private final boolean action264(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(455);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(456);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH});
    }
  }

  private final boolean action265(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto265(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 457;
    case 71: return 294;
    case 59: return 93;
    case 72: return 181;
    case 33: return 295;
    case 56: return 296;
    case 74: return 297;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 55: return 298;
    case 63: return 94;
    case 69: return 299;
    case 65: return 95;
    case 66: return 97;
    case 68: return 458;
    case 35: return 301;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action266(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 116: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_46, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action267(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_47, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action268(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 126: case 115: case 108: case 174: case 117: case 152: case 202:
      return reduce(RULE_46, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, AMPERSAND, EXTENDS_KEYWORD, DOUBLE_COLON, RANGLE, DOT, LANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action269(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 22);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action270(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 116: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_46, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action271(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 206: case 116: case 194: case 114: case 202:
      return reduce(RULE_48, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, TRUE_KEYWORD, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action272(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto272(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 266;
    case 63: return 459;
    case 65: return 95;
    case 58: return 460;
    case 33: return 268;
    case 66: return 97;
    case 35: return 270;
    case 64: return 461;
    default: return -1;
    }
  }

  private final boolean action273(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto273(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 462;
    case 71: return 294;
    case 59: return 93;
    case 72: return 181;
    case 33: return 295;
    case 56: return 296;
    case 74: return 297;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 55: return 298;
    case 63: return 94;
    case 69: return 299;
    case 65: return 95;
    case 66: return 97;
    case 68: return 463;
    case 35: return 301;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action274(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 122: case 140: case 135: case 118: case 157: case 133: case 191: case 201: case 110: case 152: case 128: case 182: case 199: case 151: case 158: case 117: case 185: case 198: case 112: case 171: case 136: case 119: case 153: case 143: case 156: case 150: case 139: case 180: case 161: case 137: case 162: case 132: case 211: case 147: case 108: case 174: case 138: case 155: case 124: case 131: case 154: case 126: case 115: case 205: case 176: case 141: case 116: case 114: case 202:
      return reduce(RULE_49, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_PERCENT, LSQUARE, HASH, DOUBLE_EQUALS, SEMICOLON, FORWARD_SLASH, NATIVE_KEYWORD, ARROW, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, PERCENT, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, LANGLE_EQUALS, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, EXTENDS_KEYWORD, LBRACE, RPAREN, DOUBLE_PIPE, EXCLAIMATION_MARK, RBRACE, DOUBLE_RANGLE, COMMA, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, MINUS, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action275(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 38);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action276(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto276(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 34: return 464;
    case 61: return 465;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 156;
    case 56: return 157;
    case 35: return 158;
    default: return -1;
    }
  }

  private final boolean action277(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto277(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 34: return 466;
    case 61: return 467;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 156;
    case 56: return 157;
    case 35: return 158;
    default: return -1;
    }
  }

  private final boolean action278(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto278(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 34: return 468;
    case 61: return 469;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 156;
    case 56: return 157;
    case 35: return 158;
    default: return -1;
    }
  }

  private final boolean action279(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto279(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 52: return 470;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 282;
    default: return -1;
    }
  }

  private final boolean action280(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154: case 205:
      return reduce(RULE_50, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final boolean action281(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 154:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto281(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 471;
    default: return -1;
    }
  }

  private final boolean action282(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154: case 205:
      return reduce(RULE_50, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final boolean action283(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto283(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 52: return 472;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 282;
    default: return -1;
    }
  }

  private final boolean action284(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(473);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action285(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto285(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 474;
    case 59: return 93;
    case 63: return 94;
    case 26: return 162;
    case 65: return 95;
    case 33: return 163;
    case 56: return 164;
    case 35: return 165;
    case 27: return 166;
    default: return -1;
    }
  }

  private final boolean action286(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(475);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS});
    }
  }

  private final boolean action287(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto287(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 476;
    case 59: return 93;
    case 63: return 94;
    case 26: return 162;
    case 65: return 95;
    case 33: return 163;
    case 56: return 164;
    case 35: return 165;
    case 27: return 166;
    default: return -1;
    }
  }

  private final boolean action288(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(477);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS});
    }
  }

  private final boolean action289(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto289(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 478;
    case 59: return 93;
    case 63: return 94;
    case 26: return 162;
    case 65: return 95;
    case 33: return 163;
    case 56: return 164;
    case 35: return 165;
    case 27: return 166;
    default: return -1;
    }
  }

  private final boolean action290(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(479);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS});
    }
  }

  private final boolean action291(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto291(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 26: return 480;
    case 33: return 481;
    case 56: return 482;
    case 35: return 483;
    default: return -1;
    }
  }

  private final boolean action292(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(137);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(140);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(484);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(485);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(143);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(486);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 0);
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, DOUBLE_RANGLE, COMMA, EXTENDS_KEYWORD, LPAREN, LBRACE, OBJECT_KEYWORD, BOOLEAN_KEYWORD, RANGLE, ULONG_KEYWORD, SUPER_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto292(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 148;
    case 35: return 149;
    default: return -1;
    }
  }

  private final boolean action293(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_18, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action294(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 115: case 203: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_51, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, THIS_KEYWORD, COMMA, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action295(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(487);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(488);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, RANGLE, DOT, LANGLE});
    }
  }

  private final boolean action296(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(489);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_33, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, RANGLE});
    }
  }

  private final boolean action297(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 115: case 203: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_52, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, THIS_KEYWORD, COMMA, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action298(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 115: case 203: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_52, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, THIS_KEYWORD, COMMA, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action299(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(490);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action300(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 115: case 203: case 205: case 176: case 116: case 141: case 206: case 194: case 114: case 202:
      return reduce(RULE_20, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, THIS_KEYWORD, COMMA, FINAL_KEYWORD, THROWS_KEYWORD, TRUE_KEYWORD, MINUS, DOUBLE_AMPERSAND, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action301(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(491);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(492);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(172);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, RANGLE});
    }
  }

  private final boolean action302(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_16, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action303(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 108: case 174: case 202:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, EXTENDS_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action304(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183: case 174: case 138:
      return reduce(RULE_12, 3);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action305(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_8, 3);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND});
    }
  }

  private final boolean action306(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 183: case 174: case 138:
      return reduce(RULE_12, 4);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action307(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_8, 4);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND});
    }
  }

  private final boolean action308(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_23, 1);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 211: case 190: case 188: case 106: case 182: case 176: case 191: case 201: case 198: case 168: case 169:
      return reduce(RULE_23, 1);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, FINAL_KEYWORD, NATIVE_KEYWORD, SELFISH_KEYWORD, STATIC_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action309(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto309(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 91;
    case 76: return 493;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 96;
    case 66: return 97;
    case 75: return 494;
    case 56: return 99;
    case 35: return 100;
    case 53: return 101;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action310(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_53, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action311(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto311(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 91;
    case 76: return 495;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 96;
    case 66: return 97;
    case 75: return 496;
    case 56: return 99;
    case 35: return 100;
    case 53: return 101;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action312(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto312(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 497;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 72: return 181;
    case 59: return 93;
    case 69: return 182;
    case 63: return 94;
    case 65: return 95;
    case 33: return 183;
    case 66: return 97;
    case 56: return 184;
    case 35: return 185;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action313(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto313(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 498;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 72: return 181;
    case 59: return 93;
    case 69: return 182;
    case 63: return 94;
    case 65: return 95;
    case 33: return 183;
    case 66: return 97;
    case 56: return 184;
    case 35: return 185;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action314(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto314(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 499;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 72: return 181;
    case 59: return 93;
    case 63: return 94;
    case 69: return 182;
    case 65: return 95;
    case 33: return 183;
    case 66: return 97;
    case 56: return 184;
    case 35: return 185;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action315(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LPAREN, LBRACE, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto315(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 266;
    case 63: return 447;
    case 65: return 95;
    case 33: return 319;
    case 58: return 448;
    case 35: return 270;
    default: return -1;
    }
  }

  private final boolean action316(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(500);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action317(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(501);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161:
      return reduce(RULE_15, 43);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE});
    }
  }

  private final boolean action318(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto318(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 457;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 72: return 181;
    case 59: return 93;
    case 69: return 182;
    case 63: return 94;
    case 65: return 95;
    case 33: return 183;
    case 66: return 97;
    case 56: return 184;
    case 35: return 185;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action319(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161:
      return reduce(RULE_46, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE});
    }
  }

  private final boolean action320(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LPAREN, LBRACE, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto320(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 266;
    case 63: return 459;
    case 65: return 95;
    case 33: return 319;
    case 58: return 460;
    case 35: return 270;
    default: return -1;
    }
  }

  private final boolean action321(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto321(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 462;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 72: return 181;
    case 59: return 93;
    case 63: return 94;
    case 69: return 182;
    case 65: return 95;
    case 33: return 183;
    case 66: return 97;
    case 56: return 184;
    case 35: return 185;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action322(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(502);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action323(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_54, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action324(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(186);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(503);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(143);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto324(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 504;
    case 35: return 149;
    default: return -1;
    }
  }

  private final boolean action325(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(375);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, OBJECT_KEYWORD, LSQUARE});
    }
  }

  private final int goto325(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 62: return 376;
    case 33: return 68;
    case 101: return 505;
    default: return -1;
    }
  }

  private final boolean action326(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, TILDE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto326(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 506;
    case 95: return 507;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    default: return -1;
    }
  }

  private final boolean action327(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, OBJECT_KEYWORD, LSQUARE});
    }
  }

  private final int goto327(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 510;
    default: return -1;
    }
  }

  private final boolean action328(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LANGLE});
    }
  }

  private final boolean action329(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, TILDE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto329(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 102: return 512;
    case 57: return 345;
    case 95: return 513;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    default: return -1;
    }
  }

  private final boolean action330(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_37, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action331(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, TILDE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto331(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 514;
    case 95: return 515;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    default: return -1;
    }
  }

  private final boolean action332(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 128:
      stateStack.addFirst(383);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOT});
    }
  }

  private final boolean action333(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(516);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(522);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 154: case 211: case 115: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_55, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action334(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_39, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action335(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 139: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_34, 17);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action336(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(524);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(527);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 106: case 211: case 157: case 138: case 191: case 201: case 182: case 199: case 155: case 198: case 171: case 156: case 176: case 114: case 180:
      return reduce(RULE_26, 0);
    case 117:
      return reduce(RULE_39, 1);
    case 132: case 149: case 145: case 122: case 118: case 147: case 108: case 133: case 158: case 151: case 185: case 124: case 112: case 131: case 119: case 153: case 143: case 116: case 150: case 141: case 139: case 137:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action337(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action338(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action339(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(530);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(531);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_58, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action340(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_59, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action341(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(532);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, COMMA, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action342(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_59, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action343(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(538);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_61, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto343(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action344(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_62, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action345(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      stateStack.addFirst(544);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action346(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(545);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 147: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_63, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action347(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(407);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_64, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action348(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132: case 149: case 145: case 124: case 112: case 118: case 108: case 116: case 150:
      return reduce(RULE_61, 1);
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 9);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action349(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto349(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 551;
    default: return -1;
    }
  }

  private final boolean action350(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, AMPERSAND, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, PIPE, DOUBLE_PIPE, CARET, DOUBLE_EQUALS});
    }
  }

  private final boolean action351(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_39, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action352(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(562);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(563);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(565);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 106: case 211: case 157: case 138: case 191: case 201: case 182: case 199: case 155: case 198: case 171: case 156: case 176: case 114: case 180:
      return reduce(RULE_26, 1);
    case 117:
      return reduce(RULE_39, 2);
    case 132: case 149: case 145: case 122: case 118: case 147: case 108: case 133: case 158: case 151: case 185: case 124: case 112: case 131: case 119: case 153: case 143: case 116: case 150: case 141: case 139: case 137:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action353(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 139: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_34, 19);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action354(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(566);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action355(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 153:
      stateStack.addFirst(567);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(570);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(571);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(572);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(573);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, LANGLE, RBRACE, RANGLE_EQUALS, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action356(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(574);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action357(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_67, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action358(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 170:
      stateStack.addFirst(193);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(196);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 207:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 204:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(199);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(202);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 197:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 215:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(210);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto358(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 50: return 216;
    case 43: return 217;
    case 39: return 218;
    case 44: return 219;
    case 99: return 220;
    case 59: return 221;
    case 45: return 222;
    case 16: return 223;
    case 56: return 386;
    case 96: return 225;
    case 31: return 226;
    case 42: return 227;
    case 97: return 228;
    case 49: return 230;
    case 14: return 229;
    case 38: return 231;
    case 46: return 232;
    case 98: return 233;
    case 41: return 234;
    case 51: return 235;
    case 33: return 387;
    case 47: return 237;
    case 102: return 238;
    case 57: return 239;
    case 63: return 94;
    case 40: return 240;
    case 48: return 241;
    case 65: return 242;
    case 35: return 389;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action359(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 167:
      stateStack.addFirst(575);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(576);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CATCH_KEYWORD, FINALLY_KEYWORD});
    }
  }

  private final boolean action360(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(577);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action361(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(578);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, SEMICOLON, LBRACE, NATIVE_KEYWORD, FLOATING_LITERAL, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, FINAL_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto361(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 41: return 579;
    case 61: return 155;
    case 59: return 221;
    case 99: return 335;
    case 33: return 580;
    case 56: return 581;
    case 16: return 223;
    case 24: return 582;
    case 34: return 154;
    case 102: return 238;
    case 57: return 239;
    case 96: return 225;
    case 31: return 226;
    case 97: return 228;
    case 63: return 94;
    case 14: return 229;
    case 48: return 583;
    case 65: return 242;
    case 35: return 584;
    case 98: return 353;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action362(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, BYTE_KEYWORD, UNBACKED_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto362(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 585;
    default: return -1;
    }
  }

  private final boolean action363(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(586);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action364(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto364(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 587;
    default: return -1;
    }
  }

  private final boolean action365(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(588);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action366(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(419);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 151: case 139:
      return reduce(RULE_42, 0);
    case 157: case 155:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON, QUESTION_MARK_DOT, DOUBLE_COLON, LPAREN, LSQUARE, DOT});
    }
  }

  private final boolean action367(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(427);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 151: case 139:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK_DOT, LPAREN, DOUBLE_COLON, LSQUARE, DOT});
    }
  }

  private final boolean action368(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_41, 1);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action369(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      stateStack.addFirst(589);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action370(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(590);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(591);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_26, 0);
    case 117:
      return reduce(RULE_39, 1);
    case 149: case 132: case 151: case 158: case 122: case 145: case 185: case 124: case 131: case 112: case 119: case 118: case 153: case 143: case 147: case 108: case 133: case 139: case 141: case 150: case 116: case 137:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, RPAREN, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, INSTANCEOF_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, LANGLE_EQUALS});
    }
  }

  private final boolean action371(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(592);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(563);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(565);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_26, 1);
    case 117:
      return reduce(RULE_39, 2);
    case 149: case 132: case 151: case 158: case 122: case 145: case 185: case 124: case 131: case 112: case 119: case 118: case 153: case 143: case 147: case 108: case 133: case 139: case 141: case 150: case 116: case 137:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, RPAREN, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, INSTANCEOF_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, LANGLE_EQUALS});
    }
  }

  private final boolean action372(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_68, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action373(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(593);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action374(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto374(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 594;
    default: return -1;
    }
  }

  private final boolean action375(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(595);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, RSQUARE, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto375(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 596;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action376(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto376(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 597;
    default: return -1;
    }
  }

  private final boolean action377(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(598);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto377(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 599;
    default: return -1;
    }
  }

  private final boolean action378(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto378(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 600;
    default: return -1;
    }
  }

  private final boolean action379(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(601);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action380(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto380(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 602;
    default: return -1;
    }
  }

  private final boolean action381(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(603);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, RPAREN, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto381(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 605;
    case 13: return 606;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 608;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action382(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(610);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action383(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(611);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action384(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(612);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action385(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 167: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 199: case 179: case 198: case 107: case 171: case 125: case 139: case 180: case 163: case 161: case 210: case 197: case 162: case 187: case 208: case 196: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 214: case 105: case 121: case 177: case 166: case 172: case 173: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_36, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, CATCH_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, VOID_KEYWORD, FLOATING_LITERAL, DOUBLE_MINUS, FINALLY_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, ELSE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action386(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(613);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto386(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 405;
    case 17: return 406;
    default: return -1;
    }
  }

  private final boolean action387(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(614);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(615);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(419);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 151: case 139:
      return reduce(RULE_42, 0);
    case 113: case 120: case 127: case 109: case 148: case 146: case 144: case 134: case 159: case 123: case 130: case 142:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, NAME, QUESTION_MARK_DOT, DOUBLE_COLON, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, LANGLE, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, MINUS_EQUALS, LPAREN, UNDERSCORE, DOT});
    }
  }

  private final int goto387(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 420;
    case 17: return 421;
    default: return -1;
    }
  }

  private final boolean action388(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_43, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action389(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(616);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(427);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 151: case 139:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK_DOT, NAME, LPAREN, DOUBLE_COLON, LSQUARE, UNDERSCORE, DOT});
    }
  }

  private final int goto389(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 429;
    case 17: return 430;
    default: return -1;
    }
  }

  private final boolean action390(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 12);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action391(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto391(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 617;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action392(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto392(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 618;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action393(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto393(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 619;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action394(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto394(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 620;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action395(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto395(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 621;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action396(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto396(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 622;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action397(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto397(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 623;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action398(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto398(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 624;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action399(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto399(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 625;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action400(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto400(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 626;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action401(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto401(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 627;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action402(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto402(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 628;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action403(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(630);
      tokenStack.addFirst(token);
      return true;
    case 157:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action404(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(631);
      tokenStack.addFirst(token);
      return true;
    case 130:
      return reduce(RULE_70, 2);
    case 157:
      return reduce(RULE_69, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action405(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(632);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS});
    }
  }

  private final boolean action406(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(633);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action407(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(634);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action408(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto408(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 635;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action409(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(636);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action410(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(637);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(638);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE, DOT, LANGLE});
    }
  }

  private final int goto410(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 17: return 639;
    default: return -1;
    }
  }

  private final boolean action411(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(637);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(638);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto411(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 17: return 640;
    default: return -1;
    }
  }

  private final boolean action412(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(637);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(638);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto412(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 17: return 641;
    default: return -1;
    }
  }

  private final boolean action413(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 150: case 141: case 116: case 139: case 114: case 180: case 137:
      return reduce(RULE_71, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, LPAREN, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action414(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto414(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 642;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 643;
    case 19: return 644;
    default: return -1;
    }
  }

  private final boolean action415(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto415(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 645;
    default: return -1;
    }
  }

  private final boolean action416(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 14);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action417(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto417(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 221;
    case 33: return 646;
    case 16: return 647;
    case 56: return 164;
    case 57: return 239;
    case 102: return 238;
    case 96: return 225;
    case 28: return 474;
    case 97: return 228;
    case 63: return 94;
    case 14: return 229;
    case 26: return 162;
    case 65: return 242;
    case 35: return 648;
    case 98: return 353;
    case 27: return 166;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action418(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(649);
      tokenStack.addFirst(token);
      return true;
    case 157:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action419(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto419(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 650;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action420(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(651);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS});
    }
  }

  private final boolean action421(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(652);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action422(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(653);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action423(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 139: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_71, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action424(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(654);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action425(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 11);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action426(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(655);
      tokenStack.addFirst(token);
      return true;
    case 157:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action427(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto427(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 656;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action428(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(657);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action429(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(658);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS});
    }
  }

  private final boolean action430(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(659);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action431(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto431(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 239;
    case 102: return 238;
    case 96: return 225;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 14: return 229;
    case 65: return 351;
    case 33: return 660;
    case 16: return 661;
    case 35: return 367;
    case 98: return 353;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action432(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 157: case 138:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto432(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 662;
    default: return -1;
    }
  }

  private final boolean action433(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(663);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action434(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 199: case 198: case 171: case 211: case 157: case 205: case 176: case 138: case 191: case 201: case 180:
      return reduce(RULE_72, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, SEMICOLON, THROWS_KEYWORD, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final boolean action435(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto435(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 664;
    default: return -1;
    }
  }

  private final boolean action436(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(665);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(666);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action437(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 212:
      stateStack.addFirst(667);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNCHECKED_KEYWORD, NAME});
    }
  }

  private final int goto437(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 668;
    case 33: return 68;
    case 62: return 669;
    default: return -1;
    }
  }

  private final boolean action438(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(670);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto438(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 671;
    default: return -1;
    }
  }

  private final boolean action439(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto439(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 672;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action440(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 187: case 208: case 196: case 106: case 200: case 103: case 140: case 189: case 135: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_73, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action441(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 157: case 138:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto441(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 673;
    default: return -1;
    }
  }

  private final boolean action442(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(246);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto442(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 22: return 674;
    default: return -1;
    }
  }

  private final boolean action443(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 157: case 138:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto443(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 675;
    default: return -1;
    }
  }

  private final boolean action444(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(676);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(677);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(246);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, LPAREN});
    }
  }

  private final int goto444(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 22: return 678;
    default: return -1;
    }
  }

  private final boolean action445(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(679);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action446(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(680);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 196:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, VOID_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto446(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 9: return 117;
    case 59: return 93;
    case 33: return 118;
    case 56: return 119;
    case 53: return 120;
    case 8: return 121;
    case 10: return 122;
    case 31: return 123;
    case 32: return 124;
    case 7: return 125;
    case 63: return 94;
    case 65: return 95;
    case 38: return 126;
    case 35: return 127;
    case 11: return 128;
    default: return -1;
    }
  }

  private final boolean action447(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_47, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action448(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 23);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action449(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 139: case 150: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 141: case 206: case 194: case 114: case 202:
      return reduce(RULE_48, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, TRUE_KEYWORD, MINUS, DOUBLE_AMPERSAND, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action450(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto450(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 266;
    case 63: return 681;
    case 65: return 95;
    case 33: return 268;
    case 58: return 682;
    case 66: return 97;
    case 35: return 270;
    case 64: return 683;
    default: return -1;
    }
  }

  private final boolean action451(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto451(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 684;
    case 71: return 294;
    case 59: return 93;
    case 72: return 181;
    case 33: return 295;
    case 56: return 296;
    case 74: return 297;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 55: return 298;
    case 63: return 94;
    case 69: return 299;
    case 65: return 95;
    case 66: return 97;
    case 68: return 685;
    case 35: return 301;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action452(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 150: case 139: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 39);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, LPAREN, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action453(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto453(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 52: return 686;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 282;
    default: return -1;
    }
  }

  private final boolean action454(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 154:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto454(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 687;
    default: return -1;
    }
  }

  private final boolean action455(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto455(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 52: return 688;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 282;
    default: return -1;
    }
  }

  private final boolean action456(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(689);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action457(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_18, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action458(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 139: case 150: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 141: case 206: case 194: case 114: case 202:
      return reduce(RULE_20, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, TRUE_KEYWORD, MINUS, DOUBLE_AMPERSAND, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action459(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_47, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action460(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 24);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action461(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 165: case 104: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 139: case 150: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 206: case 116: case 194: case 114: case 202:
      return reduce(RULE_48, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, BYTE_KEYWORD, INTEGER_LITERAL, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, TRUE_KEYWORD, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action462(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_18, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action463(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 165: case 104: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 139: case 150: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 206: case 116: case 194: case 114: case 202:
      return reduce(RULE_20, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, BYTE_KEYWORD, INTEGER_LITERAL, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, TRUE_KEYWORD, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action464(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_26, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action465(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      return reduce(RULE_27, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action466(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      return reduce(RULE_27, 3);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action467(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      return reduce(RULE_27, 2);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action468(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_26, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action469(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      return reduce(RULE_27, 1);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action470(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 154:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto470(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 690;
    default: return -1;
    }
  }

  private final boolean action471(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      stateStack.addFirst(691);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action472(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 154:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto472(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 692;
    default: return -1;
    }
  }

  private final boolean action473(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto473(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 52: return 693;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 282;
    default: return -1;
    }
  }

  private final boolean action474(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110: case 135:
      return reduce(RULE_29, 5);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH});
    }
  }

  private final boolean action475(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(694);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ELLIPSIS});
    }
  }

  private final boolean action476(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110: case 135:
      return reduce(RULE_29, 4);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH});
    }
  }

  private final boolean action477(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(695);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ELLIPSIS});
    }
  }

  private final boolean action478(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110: case 135:
      return reduce(RULE_29, 6);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH});
    }
  }

  private final boolean action479(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(696);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ELLIPSIS});
    }
  }

  private final boolean action480(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 110: case 135:
      return reduce(RULE_28, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, ARROW, HASH});
    }
  }

  private final boolean action481(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(286);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, DOT, LANGLE});
    }
  }

  private final boolean action482(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(288);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action483(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action484(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 165: case 104: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 139: case 150: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_74, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, BYTE_KEYWORD, INTEGER_LITERAL, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action485(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto485(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 77: return 697;
    case 76: return 493;
    case 59: return 93;
    case 33: return 698;
    case 75: return 699;
    case 56: return 700;
    case 53: return 101;
    case 54: return 91;
    case 55: return 701;
    case 63: return 94;
    case 66: return 97;
    case 65: return 95;
    case 35: return 702;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action486(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto486(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 77: return 703;
    case 76: return 495;
    case 59: return 93;
    case 33: return 698;
    case 75: return 704;
    case 56: return 700;
    case 53: return 101;
    case 54: return 91;
    case 55: return 701;
    case 63: return 94;
    case 66: return 97;
    case 65: return 95;
    case 35: return 702;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action487(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 165: case 104: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 139: case 150: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_75, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, BYTE_KEYWORD, INTEGER_LITERAL, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action488(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto488(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 498;
    case 71: return 294;
    case 59: return 93;
    case 72: return 181;
    case 33: return 295;
    case 56: return 296;
    case 74: return 297;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 55: return 298;
    case 63: return 94;
    case 69: return 299;
    case 65: return 95;
    case 66: return 97;
    case 68: return 705;
    case 35: return 301;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action489(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 165: case 104: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 139: case 150: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_75, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, BYTE_KEYWORD, INTEGER_LITERAL, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action490(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto490(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 497;
    case 71: return 294;
    case 59: return 93;
    case 72: return 181;
    case 33: return 295;
    case 56: return 296;
    case 74: return 297;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 55: return 298;
    case 63: return 94;
    case 69: return 299;
    case 65: return 95;
    case 66: return 97;
    case 68: return 706;
    case 35: return 301;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action491(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 165: case 104: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 139: case 150: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_75, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, BYTE_KEYWORD, INTEGER_LITERAL, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action492(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto492(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 499;
    case 71: return 294;
    case 59: return 93;
    case 72: return 181;
    case 33: return 295;
    case 56: return 296;
    case 74: return 297;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 55: return 298;
    case 63: return 94;
    case 69: return 299;
    case 65: return 95;
    case 66: return 97;
    case 68: return 707;
    case 35: return 301;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action493(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_53, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action494(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(708);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, SUPER_KEYWORD});
    }
  }

  private final boolean action495(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_53, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action496(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(709);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 2);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, EXTENDS_KEYWORD});
    }
  }

  private final boolean action497(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_32, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action498(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_32, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action499(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_32, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action500(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, NAME, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LPAREN, LBRACE, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto500(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 266;
    case 63: return 681;
    case 65: return 95;
    case 33: return 319;
    case 58: return 682;
    case 35: return 270;
    default: return -1;
    }
  }

  private final boolean action501(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto501(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 684;
    case 54: return 178;
    case 73: return 179;
    case 70: return 180;
    case 72: return 181;
    case 59: return 93;
    case 63: return 94;
    case 69: return 182;
    case 65: return 95;
    case 33: return 183;
    case 66: return 97;
    case 56: return 184;
    case 35: return 185;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action502(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_54, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action503(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(258);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(316);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, OBJECT_KEYWORD, LSQUARE});
    }
  }

  private final int goto503(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 710;
    default: return -1;
    }
  }

  private final boolean action504(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_15, 41);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, DOT});
    }
  }

  private final boolean action505(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(598);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto505(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 711;
    default: return -1;
    }
  }

  private final boolean action506(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 141: case 150: case 116: case 114: case 180: case 137:
      return reduce(RULE_64, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto506(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action507(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 141: case 150: case 116: case 114: case 180: case 137:
      return reduce(RULE_64, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action508(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 139: case 116: case 150: case 141: case 114: case 180: case 137:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action509(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 139: case 116: case 150: case 141: case 114: case 180: case 137:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action510(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_15, 42);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, DOT});
    }
  }

  private final boolean action511(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto511(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 712;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 713;
    case 66: return 97;
    case 56: return 714;
    case 35: return 715;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action512(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 141: case 150: case 116: case 114: case 180: case 137:
      return reduce(RULE_64, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto512(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action513(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 141: case 150: case 116: case 114: case 180: case 137:
      return reduce(RULE_64, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action514(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 141: case 150: case 116: case 114: case 180: case 137:
      return reduce(RULE_64, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto514(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action515(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 141: case 150: case 116: case 114: case 180: case 137:
      return reduce(RULE_64, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action516(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto516(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 716;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action517(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto517(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 717;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 718;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action518(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto518(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 719;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 720;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action519(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto519(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 721;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 722;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action520(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto520(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 723;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 724;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action521(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto521(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 725;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 726;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action522(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto522(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 727;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 728;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action523(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto523(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 729;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    case 94: return 730;
    default: return -1;
    }
  }

  private final boolean action524(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto524(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 731;
    case 85: return 341;
    case 34: return 464;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action525(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto525(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 733;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 735;
    default: return -1;
    }
  }

  private final boolean action526(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto526(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 736;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action527(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto527(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 737;
    case 93: return 337;
    case 95: return 344;
    case 102: return 738;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 739;
    case 98: return 353;
    case 94: return 354;
    case 91: return 740;
    default: return -1;
    }
  }

  private final boolean action528(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto528(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 741;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    case 94: return 742;
    default: return -1;
    }
  }

  private final boolean action529(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto529(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 743;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    case 94: return 744;
    default: return -1;
    }
  }

  private final boolean action530(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto530(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 90: return 745;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 746;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action531(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto531(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 90: return 747;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 748;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action532(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto532(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 749;
    case 85: return 341;
    case 34: return 750;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action533(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto533(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 751;
    case 95: return 344;
    case 102: return 752;
    case 57: return 345;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action534(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto534(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 753;
    case 95: return 344;
    case 102: return 754;
    case 57: return 345;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action535(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto535(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 755;
    default: return -1;
    }
  }

  private final boolean action536(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 104:
      stateStack.addFirst(756);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL});
    }
  }

  private final boolean action537(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto537(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 757;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    case 94: return 758;
    default: return -1;
    }
  }

  private final boolean action538(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto538(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 759;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 760;
    default: return -1;
    }
  }

  private final boolean action539(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto539(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 761;
    case 95: return 344;
    case 102: return 762;
    case 57: return 345;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action540(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto540(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 763;
    case 57: return 345;
    case 96: return 347;
    case 92: return 764;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action541(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto541(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 765;
    case 95: return 344;
    case 102: return 766;
    case 57: return 345;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action542(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto542(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 767;
    case 57: return 345;
    case 96: return 347;
    case 92: return 768;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action543(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto543(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 769;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 770;
    default: return -1;
    }
  }

  private final boolean action544(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(771);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action545(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto545(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 772;
    case 95: return 344;
    case 102: return 773;
    case 57: return 345;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action546(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto546(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 774;
    case 95: return 344;
    case 102: return 775;
    case 57: return 345;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action547(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto547(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 776;
    case 95: return 344;
    case 102: return 777;
    case 57: return 345;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action548(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto548(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 778;
    case 95: return 344;
    case 102: return 779;
    case 57: return 345;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action549(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto549(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 780;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action550(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(781);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action551(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      stateStack.addFirst(782);
      tokenStack.addFirst(token);
      return true;
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_76, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, ELSE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action552(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto552(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 90: return 783;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 784;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action553(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto553(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 785;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action554(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto554(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 786;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 787;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action555(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto555(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 788;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 789;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action556(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto556(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 790;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 791;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action557(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto557(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 792;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 793;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action558(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto558(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 794;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 795;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action559(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto559(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 87: return 796;
    case 90: return 339;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 797;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action560(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto560(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 99: return 335;
    case 59: return 334;
    case 33: return 604;
    case 93: return 337;
    case 90: return 798;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 799;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action561(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto561(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 800;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    case 94: return 801;
    default: return -1;
    }
  }

  private final boolean action562(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto562(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 802;
    case 85: return 341;
    case 34: return 468;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action563(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto563(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 803;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 804;
    default: return -1;
    }
  }

  private final boolean action564(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto564(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 805;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action565(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto565(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 806;
    case 93: return 337;
    case 95: return 344;
    case 102: return 738;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 807;
    case 98: return 353;
    case 94: return 354;
    case 91: return 808;
    default: return -1;
    }
  }

  private final boolean action566(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 104:
      stateStack.addFirst(809);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL});
    }
  }

  private final boolean action567(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto567(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 810;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 811;
    default: return -1;
    }
  }

  private final boolean action568(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto568(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 812;
    case 57: return 345;
    case 96: return 347;
    case 92: return 813;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action569(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto569(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 814;
    case 57: return 345;
    case 96: return 347;
    case 92: return 815;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    default: return -1;
    }
  }

  private final boolean action570(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto570(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 816;
    default: return -1;
    }
  }

  private final boolean action571(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto571(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 817;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 818;
    default: return -1;
    }
  }

  private final boolean action572(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto572(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 819;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 820;
    default: return -1;
    }
  }

  private final boolean action573(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto573(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 821;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 822;
    default: return -1;
    }
  }

  private final boolean action574(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_67, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action575(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto575(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 823;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 643;
    case 19: return 824;
    default: return -1;
    }
  }

  private final boolean action576(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto576(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 825;
    default: return -1;
    }
  }

  private final boolean action577(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 17);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action578(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 187: case 208: case 192: case 200: case 103: case 193: case 140: case 160: case 175: case 189: case 135: case 104: case 165: case 157: case 138: case 105: case 178: case 213: case 166: case 172: case 107: case 131: case 171: case 209: case 203: case 139: case 141: case 206: case 194: case 163: case 210: case 202:
      return reduce(RULE_77, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, HASH, LONG_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, TRUE_KEYWORD, MINUS, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, SUPER_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action579(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 187: case 208: case 192: case 200: case 103: case 193: case 140: case 160: case 175: case 189: case 135: case 104: case 165: case 157: case 138: case 105: case 178: case 213: case 166: case 172: case 107: case 131: case 171: case 209: case 203: case 139: case 141: case 206: case 194: case 163: case 210: case 202:
      return reduce(RULE_77, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, HASH, LONG_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, TRUE_KEYWORD, MINUS, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, SUPER_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action580(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(826);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(615);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(419);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_26, 0);
    case 117:
      return reduce(RULE_39, 1);
    case 151: case 139:
      return reduce(RULE_42, 0);
    case 113: case 120: case 127: case 109: case 148: case 146: case 144: case 134: case 159: case 123: case 130: case 142:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, RPAREN, NAME, QUESTION_MARK_DOT, DOUBLE_COLON, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, LANGLE, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, MINUS_EQUALS, LPAREN, UNDERSCORE, DOT});
    }
  }

  private final int goto580(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 420;
    case 17: return 421;
    default: return -1;
    }
  }

  private final boolean action581(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(277);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(613);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_27, 4);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN, NAME, UNDERSCORE});
    }
  }

  private final int goto581(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 405;
    case 17: return 406;
    default: return -1;
    }
  }

  private final boolean action582(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(827);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto582(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 828;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action583(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(829);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action584(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(278);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(616);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(427);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_26, 1);
    case 117:
      return reduce(RULE_39, 2);
    case 151: case 139:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN, QUESTION_MARK_DOT, NAME, LPAREN, DOUBLE_COLON, LSQUARE, UNDERSCORE, DOT});
    }
  }

  private final int goto584(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 429;
    case 17: return 430;
    default: return -1;
    }
  }

  private final boolean action585(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(830);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action586(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 186:
      stateStack.addFirst(831);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IN_KEYWORD});
    }
  }

  private final boolean action587(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 139: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_78, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action588(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_79, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action589(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 139: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_34, 18);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action590(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto590(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 61: return 465;
    case 86: return 333;
    case 99: return 335;
    case 59: return 221;
    case 56: return 157;
    case 93: return 337;
    case 84: return 731;
    case 95: return 344;
    case 96: return 347;
    case 89: return 348;
    case 97: return 228;
    case 98: return 353;
    case 91: return 355;
    case 94: return 354;
    case 33: return 370;
    case 87: return 338;
    case 90: return 339;
    case 85: return 341;
    case 34: return 464;
    case 57: return 345;
    case 102: return 343;
    case 92: return 346;
    case 63: return 94;
    case 88: return 350;
    case 65: return 242;
    case 35: return 371;
    default: return -1;
    }
  }

  private final boolean action591(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto591(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 67: return 293;
    case 72: return 181;
    case 59: return 221;
    case 99: return 335;
    case 33: return 832;
    case 56: return 184;
    case 93: return 337;
    case 54: return 178;
    case 102: return 738;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 70: return 180;
    case 73: return 179;
    case 97: return 228;
    case 69: return 182;
    case 63: return 94;
    case 66: return 97;
    case 65: return 242;
    case 35: return 833;
    case 98: return 353;
    case 64: return 102;
    case 94: return 354;
    case 91: return 740;
    default: return -1;
    }
  }

  private final boolean action592(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto592(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 61: return 469;
    case 86: return 333;
    case 99: return 335;
    case 59: return 221;
    case 56: return 157;
    case 93: return 337;
    case 84: return 802;
    case 95: return 344;
    case 96: return 347;
    case 89: return 348;
    case 97: return 228;
    case 98: return 353;
    case 91: return 355;
    case 94: return 354;
    case 33: return 370;
    case 87: return 338;
    case 90: return 339;
    case 85: return 341;
    case 34: return 468;
    case 57: return 345;
    case 102: return 343;
    case 92: return 346;
    case 63: return 94;
    case 88: return 350;
    case 65: return 242;
    case 35: return 371;
    default: return -1;
    }
  }

  private final boolean action593(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_68, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action594(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_34, 20);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action595(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto595(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 834;
    default: return -1;
    }
  }

  private final boolean action596(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(835);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action597(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_78, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action598(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(189);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, RSQUARE, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto598(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 836;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action599(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(837);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final boolean action600(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_80, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action601(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_79, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action602(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(838);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE});
    }
  }

  private final boolean action603(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 150: case 141: case 116: case 139: case 114: case 180: case 137:
      return reduce(RULE_81, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, LPAREN, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action604(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(839);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 162: case 132: case 149: case 190: case 106: case 122: case 145: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 182: case 199: case 155: case 158: case 151: case 185: case 124: case 198: case 131: case 112: case 171: case 119: case 153: case 154: case 115: case 143: case 156: case 176: case 116: case 150: case 141: case 139: case 114: case 180: case 137:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action605(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 155:
      return reduce(RULE_82, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action606(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(840);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(841);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action607(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_61, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action608(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 115: case 155:
      return reduce(RULE_82, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, COMMA, AMPERSAND, RPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, PIPE, DOUBLE_PIPE, CARET, DOUBLE_EQUALS});
    }
  }

  private final boolean action609(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(563);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(842);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 162: case 132: case 149: case 190: case 106: case 122: case 145: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 182: case 199: case 155: case 158: case 151: case 185: case 198: case 124: case 131: case 112: case 171: case 119: case 153: case 154: case 115: case 143: case 156: case 176: case 116: case 150: case 141: case 139: case 114: case 180: case 137:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action610(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 15);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action611(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_34, 11);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action612(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 16);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action613(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(843);
      tokenStack.addFirst(token);
      return true;
    case 157:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action614(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto614(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 239;
    case 102: return 238;
    case 96: return 225;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 14: return 229;
    case 65: return 351;
    case 33: return 660;
    case 16: return 647;
    case 35: return 367;
    case 98: return 353;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action615(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(844);
      tokenStack.addFirst(token);
      return true;
    case 157:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action616(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(845);
      tokenStack.addFirst(token);
      return true;
    case 157:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action617(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 5);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action618(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 10);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action619(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(846);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action620(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 6);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action621(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 1);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action622(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 7);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action623(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 8);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action624(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action625(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 9);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action626(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 4);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action627(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 3);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action628(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157: case 155:
      return reduce(RULE_83, 2);
    default: throw new BadTokenException(token, new Object[] {RPAREN, SEMICOLON});
    }
  }

  private final boolean action629(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(847);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto629(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 848;
    case 17: return 849;
    default: return -1;
    }
  }

  private final boolean action630(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(695);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, ELLIPSIS, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto630(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 850;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action631(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(851);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto631(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 852;
    case 17: return 853;
    default: return -1;
    }
  }

  private final boolean action632(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto632(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 854;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action633(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action634(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_34, 14);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action635(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(855);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action636(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151: case 140: case 139: case 128:
      return reduce(RULE_34, 12);
    case 113: case 120: case 155: case 127: case 109: case 148: case 144: case 146: case 134: case 159: case 123: case 115: case 130: case 142: case 157:
      return reduce(RULE_35, 3);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, RPAREN, QUESTION_MARK_DOT, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, SEMICOLON, MINUS_EQUALS, LPAREN, DOT});
    }
  }

  private final boolean action637(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(856);
      tokenStack.addFirst(token);
      return true;
    case 130: case 157:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action638(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(857);
      tokenStack.addFirst(token);
      return true;
    case 130: case 157:
      return reduce(RULE_69, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action639(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(858);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(859);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON});
    }
  }

  private final boolean action640(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(860);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(861);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON});
    }
  }

  private final boolean action641(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(862);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(863);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON});
    }
  }

  private final boolean action642(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, BYTE_KEYWORD, UNBACKED_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto642(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 643;
    case 19: return 864;
    default: return -1;
    }
  }

  private final boolean action643(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103: case 145:
      return reduce(RULE_85, 0);
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action644(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(865);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(866);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action645(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_86, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action646(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(417);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(286);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(419);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 151: case 139:
      return reduce(RULE_42, 0);
    case 135: case 110:
      return reduce(RULE_29, 1);
    case 113: case 120: case 127: case 109: case 148: case 144: case 146: case 134: case 159: case 123: case 130: case 142:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, NAME, QUESTION_MARK_DOT, DOUBLE_COLON, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PIPE_EQUALS, PERCENT_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, LANGLE, HASH, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, MINUS_EQUALS, LPAREN, ARROW, DOT});
    }
  }

  private final boolean action647(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123: case 113: case 130: case 120: case 142: case 127: case 109: case 148: case 146: case 144: case 134: case 159:
      return reduce(RULE_40, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, CARET_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, STAR_EQUALS});
    }
  }

  private final boolean action648(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(289);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(427);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 151: case 139:
      return reduce(RULE_42, 1);
    case 110: case 135:
      return reduce(RULE_29, 2);
    default: throw new BadTokenException(token, new Object[] {COMMA, QUESTION_MARK_DOT, NAME, LPAREN, DOUBLE_COLON, ARROW, LSQUARE, DOT, HASH});
    }
  }

  private final boolean action649(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(694);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, ELLIPSIS, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto649(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 867;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action650(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(868);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action651(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto651(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 869;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action652(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 6);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action653(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_34, 15);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action654(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151: case 140: case 139: case 128:
      return reduce(RULE_34, 16);
    case 113: case 120: case 155: case 127: case 109: case 148: case 144: case 146: case 134: case 159: case 123: case 115: case 130: case 142: case 157:
      return reduce(RULE_35, 4);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, RPAREN, QUESTION_MARK_DOT, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, SEMICOLON, MINUS_EQUALS, LPAREN, DOT});
    }
  }

  private final boolean action655(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(696);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, ELLIPSIS, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto655(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 870;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action656(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(871);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action657(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_34, 13);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action658(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto658(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 872;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action659(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 11);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action660(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(614);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(419);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 151: case 139:
      return reduce(RULE_42, 0);
    case 113: case 120: case 127: case 109: case 148: case 144: case 146: case 134: case 159: case 123: case 130: case 142:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, QUESTION_MARK_DOT, DOUBLE_COLON, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, MINUS_EQUALS, LPAREN, DOT});
    }
  }

  private final boolean action661(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123: case 113: case 130: case 120: case 142: case 127: case 109: case 148: case 146: case 144: case 134: case 159:
      return reduce(RULE_40, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, CARET_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, STAR_EQUALS});
    }
  }

  private final boolean action662(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(873);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto662(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 874;
    default: return -1;
    }
  }

  private final boolean action663(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 155:
      return reduce(RULE_87, 3);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action664(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(875);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action665(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 111:
      stateStack.addFirst(876);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 213: case 149: case 187: case 208: case 103: case 200: case 172: case 140: case 209: case 189: case 135: case 165: case 139: case 138: case 194: case 163: case 210: case 178:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, AT, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto665(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 17;
    case 32: return 877;
    default: return -1;
    }
  }

  private final boolean action666(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 199: case 198: case 171: case 211: case 157: case 205: case 176: case 138: case 191: case 201: case 180:
      return reduce(RULE_72, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, SEMICOLON, THROWS_KEYWORD, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final boolean action667(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto667(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 68;
    case 62: return 878;
    default: return -1;
    }
  }

  private final boolean action668(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(879);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 182: case 106: case 199: case 198: case 171: case 154: case 211: case 157: case 176: case 138: case 191: case 201: case 180:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final boolean action669(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 182: case 106: case 199: case 198: case 171: case 154: case 211: case 115: case 157: case 176: case 138: case 191: case 201: case 180:
      return reduce(RULE_88, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final boolean action670(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_89, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action671(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_89, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action672(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(880);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action673(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(881);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto673(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 882;
    default: return -1;
    }
  }

  private final boolean action674(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 157: case 138:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto674(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 883;
    default: return -1;
    }
  }

  private final boolean action675(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(884);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto675(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 885;
    default: return -1;
    }
  }

  private final boolean action676(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto676(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 886;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action677(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_73, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action678(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 157: case 138:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto678(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 887;
    default: return -1;
    }
  }

  private final boolean action679(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(888);
      tokenStack.addFirst(token);
      return true;
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_90, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, EQUALS, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final int goto679(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 20: return 889;
    default: return -1;
    }
  }

  private final boolean action680(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_45, 1);
    }
    switch (token.getType().ordinal())
    {
    case 162: case 211: case 190: case 188: case 182: case 106: case 176: case 191: case 198: case 201: case 168: case 169:
      return reduce(RULE_45, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, null, UNBACKED_KEYWORD, MUTABLE_KEYWORD, INTERFACE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, CLASS_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action681(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_47, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action682(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 25);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action683(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 165: case 104: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 141: case 206: case 194: case 114: case 202:
      return reduce(RULE_48, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, BYTE_KEYWORD, INTEGER_LITERAL, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, TRUE_KEYWORD, MINUS, DOUBLE_AMPERSAND, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action684(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 150: case 139: case 114: case 180: case 161: case 202:
      return reduce(RULE_18, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, LPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action685(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 118: case 135: case 165: case 104: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 141: case 206: case 194: case 114: case 202:
      return reduce(RULE_20, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, DOUBLE_EQUALS, HASH, BYTE_KEYWORD, INTEGER_LITERAL, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, TRUE_KEYWORD, MINUS, DOUBLE_AMPERSAND, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action686(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 154:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto686(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 890;
    default: return -1;
    }
  }

  private final boolean action687(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      stateStack.addFirst(891);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action688(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 154:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto688(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 892;
    default: return -1;
    }
  }

  private final boolean action689(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 214:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto689(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 52: return 893;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 282;
    default: return -1;
    }
  }

  private final boolean action690(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      stateStack.addFirst(894);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action691(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 30);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action692(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      stateStack.addFirst(895);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action693(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 154:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto693(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 896;
    default: return -1;
    }
  }

  private final boolean action694(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 110: case 135:
      return reduce(RULE_91, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, ARROW, HASH});
    }
  }

  private final boolean action695(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 110: case 135:
      return reduce(RULE_91, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, ARROW, HASH});
    }
  }

  private final boolean action696(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 110: case 135:
      return reduce(RULE_91, 2);
    default: throw new BadTokenException(token, new Object[] {COMMA, ARROW, HASH});
    }
  }

  private final boolean action697(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_74, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action698(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(487);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 115: case 108: case 174: case 202:
      return reduce(RULE_19, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, AMPERSAND, EXTENDS_KEYWORD, RANGLE, DOT, LANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action699(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(897);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(898);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, SUPER_KEYWORD});
    }
  }

  private final boolean action700(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(489);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 115: case 108: case 174: case 202:
      return reduce(RULE_19, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, AMPERSAND, EXTENDS_KEYWORD, RANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action701(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 107: case 112: case 171: case 156: case 139: case 150: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 206: case 116: case 194: case 114: case 202:
      return reduce(RULE_92, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, STRING_LITERAL, CARET, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, TRUE_KEYWORD, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action702(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(491);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(172);
      tokenStack.addFirst(token);
      return true;
    case 115: case 108: case 174: case 202:
      return reduce(RULE_19, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, COMMA, AMPERSAND, EXTENDS_KEYWORD, RANGLE, SUPER_KEYWORD});
    }
  }

  private final boolean action703(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_74, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action704(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(897);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(899);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 2);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND, EXTENDS_KEYWORD});
    }
  }

  private final boolean action705(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_51, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action706(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_51, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action707(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_51, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action708(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto708(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 91;
    case 76: return 900;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 96;
    case 66: return 97;
    case 56: return 99;
    case 75: return 901;
    case 35: return 100;
    case 53: return 101;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action709(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto709(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 91;
    case 76: return 902;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 96;
    case 66: return 97;
    case 75: return 903;
    case 56: return 99;
    case 35: return 100;
    case 53: return 101;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action710(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_15, 43);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, DOT});
    }
  }

  private final boolean action711(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(837);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 21);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action712(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, TILDE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto712(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 102: return 904;
    case 57: return 345;
    case 95: return 905;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    default: return -1;
    }
  }

  private final boolean action713(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE, DOT, LANGLE});
    }
  }

  private final boolean action714(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE});
    }
  }

  private final boolean action715(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(172);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE});
    }
  }

  private final boolean action716(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 114:
      stateStack.addFirst(906);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COLON});
    }
  }

  private final boolean action717(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action718(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action719(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 154: case 211: case 115: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_55, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action720(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 154: case 211: case 115: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_55, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action721(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action722(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action723(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 13);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action724(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 14);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action725(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 17);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action726(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 18);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action727(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 9);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action728(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 10);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action729(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 9);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto729(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action730(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(566);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action731(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action732(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 151: case 185: case 124: case 198: case 131: case 112: case 171: case 136: case 119: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 116: case 141: case 139: case 114: case 180: case 137:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, MINUS, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action733(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 13);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final int goto733(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action734(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 151: case 185: case 124: case 198: case 131: case 112: case 171: case 136: case 119: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 116: case 141: case 139: case 114: case 180: case 137:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, MINUS, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action735(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 11);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action736(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(907);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action737(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(908);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 122: case 147: case 133: case 151: case 158: case 131: case 119: case 143: case 139: case 141:
      return reduce(RULE_42, 0);
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_93, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, LPAREN, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action738(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {PLUS, PERCENT, QUESTION_MARK_DOT, FORWARD_SLASH, STAR, LPAREN, MINUS, DOUBLE_PERCENT, EXCLAIMATION_MARK, DOUBLE_LANGLE});
    }
  }

  private final int goto738(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action739(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(909);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 122: case 147: case 133: case 151: case 158: case 131: case 119: case 143: case 139: case 141:
      return reduce(RULE_42, 1);
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_93, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, LPAREN, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action740(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action741(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto741(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action742(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(566);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action743(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto743(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action744(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(566);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action745(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_58, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action746(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_58, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action747(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_58, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action748(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_58, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action749(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action750(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action751(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action752(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto752(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action753(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 15);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action754(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 16);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto754(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action755(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 20);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action756(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 116: case 150: case 141: case 114: case 180: case 137:
      return reduce(RULE_62, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action757(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto757(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action758(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(566);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action759(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 18);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final int goto759(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action760(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 17);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action761(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 11);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action762(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 12);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto762(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action763(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 147: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_63, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto763(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action764(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(545);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 147: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_63, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action765(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action766(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto766(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action767(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 147: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_63, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto767(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action768(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(545);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 147: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_63, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action769(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final int goto769(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action770(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action771(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 139: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_34, 16);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action772(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 9);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action773(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 10);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto773(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action774(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action775(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto775(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action776(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action777(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto777(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action778(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 13);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action779(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_56, 14);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, QUESTION_MARK_DOT, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto779(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action780(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(910);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action781(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 139: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_34, 12);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action782(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 181:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IF_KEYWORD, LBRACE});
    }
  }

  private final int goto782(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 911;
    case 45: return 912;
    default: return -1;
    }
  }

  private final boolean action783(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_58, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action784(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_58, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action785(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 114:
      stateStack.addFirst(913);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COLON});
    }
  }

  private final boolean action786(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action787(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action788(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action789(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action790(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 15);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action791(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 16);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action792(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 154: case 211: case 115: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_55, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action793(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 154: case 211: case 115: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_55, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action794(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 19);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action795(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 20);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action796(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 11);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action797(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_57, 12);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action798(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_58, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action799(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 106: case 145: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_58, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action800(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 10);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto800(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action801(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(566);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_65, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action802(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action803(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 14);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final int goto803(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action804(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 12);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action805(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(914);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action806(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(915);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 122: case 147: case 133: case 151: case 158: case 131: case 119: case 143: case 139: case 141:
      return reduce(RULE_42, 0);
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_93, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, LPAREN, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action807(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(916);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 122: case 147: case 133: case 151: case 158: case 131: case 119: case 143: case 139: case 141:
      return reduce(RULE_42, 1);
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_93, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, LPAREN, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action808(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 149: case 132: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action809(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 116: case 150: case 141: case 114: case 180: case 137:
      return reduce(RULE_62, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action810(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 16);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final int goto810(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action811(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 15);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action812(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 147: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_63, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto812(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action813(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(545);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 147: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_63, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action814(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 147: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_63, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto814(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action815(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(545);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 147: case 108: case 157: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 185: case 198: case 124: case 112: case 171: case 136: case 153: case 154: case 115: case 156: case 176: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_63, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, LANGLE, RBRACE, RANGLE_EQUALS, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action816(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 19);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action817(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 10);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final int goto817(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action818(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 9);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action819(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final int goto819(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action820(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action821(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 143:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, LPAREN, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final int goto821(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action822(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(568);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(569);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 124: case 198: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_66, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action823(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, BYTE_KEYWORD, UNBACKED_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto823(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 643;
    case 19: return 917;
    default: return -1;
    }
  }

  private final boolean action824(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(918);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(866);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action825(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_86, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action826(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto826(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 61: return 465;
    case 99: return 335;
    case 59: return 221;
    case 33: return 919;
    case 16: return 647;
    case 56: return 157;
    case 34: return 464;
    case 57: return 239;
    case 102: return 238;
    case 96: return 225;
    case 97: return 228;
    case 63: return 94;
    case 14: return 229;
    case 65: return 242;
    case 35: return 920;
    case 98: return 353;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action827(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(921);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(922);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_94, 5);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, DOUBLE_MINUS, RPAREN, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, DOUBLE_PLUS, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto827(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 923;
    case 33: return 660;
    case 16: return 924;
    case 102: return 238;
    case 57: return 239;
    case 25: return 925;
    case 96: return 225;
    case 97: return 228;
    case 14: return 229;
    case 65: return 351;
    case 48: return 926;
    case 35: return 367;
    case 98: return 353;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action828(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(927);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action829(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 187: case 208: case 192: case 103: case 200: case 193: case 140: case 175: case 160: case 135: case 189: case 104: case 165: case 157: case 138: case 105: case 178: case 213: case 166: case 172: case 107: case 131: case 171: case 209: case 203: case 206: case 141: case 139: case 194: case 163: case 202: case 210:
      return reduce(RULE_77, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, TILDE, FALSE_KEYWORD, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action830(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 186:
      stateStack.addFirst(928);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IN_KEYWORD});
    }
  }

  private final boolean action831(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto831(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 929;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action832(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(930);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 158: case 151: case 122: case 131: case 119: case 147: case 143: case 133: case 141: case 139:
      return reduce(RULE_42, 0);
    case 132: case 149: case 155: case 145: case 124: case 112: case 118: case 108: case 116: case 150:
      return reduce(RULE_93, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, RPAREN, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, LANGLE, DOUBLE_LANGLE, DOUBLE_RANGLE, COMMA, PERCENT, LPAREN, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND});
    }
  }

  private final boolean action833(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(931);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(172);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 151: case 158: case 122: case 131: case 119: case 147: case 143: case 133: case 139: case 141:
      return reduce(RULE_42, 1);
    case 149: case 132: case 155: case 145: case 124: case 112: case 118: case 108: case 150: case 116:
      return reduce(RULE_93, 1);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, RPAREN, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, DOUBLE_LANGLE, DOUBLE_RANGLE, COMMA, PERCENT, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, MINUS});
    }
  }

  private final boolean action834(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(932);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action835(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213: case 149: case 187: case 208: case 103: case 200: case 172: case 140: case 209: case 189: case 135: case 165: case 138: case 139: case 194: case 163: case 210: case 178:
      return reduce(RULE_95, 0);
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LPAREN, LBRACE, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final boolean action836(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(933);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action837(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto837(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 934;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action838(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto838(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 238;
    case 96: return 935;
    case 97: return 228;
    case 99: return 936;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    default: return -1;
    }
  }

  private final boolean action839(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto839(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 937;
    case 93: return 337;
    case 95: return 344;
    case 102: return 738;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 938;
    case 98: return 353;
    case 94: return 354;
    case 91: return 740;
    default: return -1;
    }
  }

  private final boolean action840(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto840(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 939;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 940;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action841(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 139: case 116: case 141: case 150: case 114: case 180: case 137:
      return reduce(RULE_81, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action842(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto842(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 941;
    case 93: return 337;
    case 95: return 344;
    case 102: return 738;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 942;
    case 98: return 353;
    case 94: return 354;
    case 91: return 808;
    default: return -1;
    }
  }

  private final boolean action843(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto843(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 850;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action844(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto844(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 867;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action845(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto845(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 870;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action846(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action847(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    case 130:
      return reduce(RULE_70, 0);
    case 157:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action848(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      return reduce(RULE_70, 3);
    default: throw new BadTokenException(token, new Object[] {EQUALS});
    }
  }

  private final boolean action849(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130: case 157:
      return reduce(RULE_69, 2);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON});
    }
  }

  private final boolean action850(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(943);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action851(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    case 130:
      return reduce(RULE_70, 1);
    case 157:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, SEMICOLON});
    }
  }

  private final boolean action852(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      return reduce(RULE_70, 4);
    default: throw new BadTokenException(token, new Object[] {EQUALS});
    }
  }

  private final boolean action853(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130: case 157:
      return reduce(RULE_69, 3);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON});
    }
  }

  private final boolean action854(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(944);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action855(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151: case 140: case 139: case 128:
      return reduce(RULE_34, 5);
    case 113: case 120: case 155: case 127: case 109: case 148: case 144: case 146: case 134: case 159: case 123: case 115: case 130: case 157: case 142:
      return reduce(RULE_35, 0);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, RPAREN, QUESTION_MARK_DOT, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, MINUS_EQUALS, SEMICOLON, LPAREN, DOT});
    }
  }

  private final boolean action856(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(637);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(638);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto856(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 17: return 849;
    default: return -1;
    }
  }

  private final boolean action857(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(637);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(638);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto857(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 17: return 853;
    default: return -1;
    }
  }

  private final boolean action858(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto858(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 945;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action859(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 7);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action860(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto860(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 946;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action861(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action862(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto862(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 947;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action863(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 12);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action864(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(948);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(866);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action865(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto865(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 949;
    default: return -1;
    }
  }

  private final boolean action866(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto866(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 950;
    default: return -1;
    }
  }

  private final boolean action867(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(951);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action868(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151: case 140: case 139: case 128:
      return reduce(RULE_34, 6);
    case 113: case 120: case 155: case 127: case 109: case 148: case 146: case 144: case 134: case 159: case 123: case 115: case 130: case 142: case 157:
      return reduce(RULE_35, 1);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, RPAREN, QUESTION_MARK_DOT, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PIPE_EQUALS, PERCENT_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, SEMICOLON, MINUS_EQUALS, LPAREN, DOT});
    }
  }

  private final boolean action869(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(952);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action870(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(953);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action871(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151: case 140: case 139: case 128:
      return reduce(RULE_34, 7);
    case 113: case 120: case 155: case 127: case 109: case 148: case 146: case 144: case 134: case 159: case 123: case 115: case 130: case 142: case 157:
      return reduce(RULE_35, 2);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, RPAREN, QUESTION_MARK_DOT, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PIPE_EQUALS, PERCENT_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, SEMICOLON, MINUS_EQUALS, LPAREN, DOT});
    }
  }

  private final boolean action872(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(954);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action873(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 187: case 208: case 196: case 106: case 200: case 103: case 140: case 189: case 135: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_96, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action874(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 187: case 208: case 196: case 106: case 200: case 103: case 140: case 189: case 135: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_96, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action875(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(955);
      tokenStack.addFirst(token);
      return true;
    case 115: case 155:
      return reduce(RULE_87, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, RPAREN});
    }
  }

  private final boolean action876(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(956);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action877(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto877(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 957;
    default: return -1;
    }
  }

  private final boolean action878(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 182: case 106: case 199: case 198: case 171: case 154: case 211: case 115: case 157: case 176: case 138: case 191: case 201: case 180:
      return reduce(RULE_88, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final boolean action879(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 212:
      stateStack.addFirst(958);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNCHECKED_KEYWORD, NAME});
    }
  }

  private final int goto879(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 62: return 959;
    case 33: return 68;
    default: return -1;
    }
  }

  private final boolean action880(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 187: case 208: case 196: case 106: case 200: case 103: case 140: case 189: case 135: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_73, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action881(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 187: case 208: case 196: case 106: case 200: case 103: case 140: case 189: case 135: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_96, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action882(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 187: case 208: case 196: case 106: case 200: case 103: case 140: case 189: case 135: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_96, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action883(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(960);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto883(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 961;
    default: return -1;
    }
  }

  private final boolean action884(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 187: case 208: case 196: case 106: case 200: case 103: case 140: case 189: case 135: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_89, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action885(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 190: case 187: case 208: case 196: case 106: case 200: case 103: case 140: case 189: case 135: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_89, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, INT_KEYWORD, MUTABLE_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, NAME, SHORT_KEYWORD, LSQUARE, HASH, LONG_KEYWORD, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action886(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(962);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action887(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(963);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto887(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 964;
    default: return -1;
    }
  }

  private final boolean action888(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto888(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 83: return 965;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action889(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(966);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 199: case 180: case 171:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, NATIVE_KEYWORD, SELFISH_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final int goto889(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 17;
    case 32: return 967;
    case 21: return 968;
    default: return -1;
    }
  }

  private final boolean action890(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      stateStack.addFirst(969);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action891(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 139: case 150: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 31);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, QUESTION_MARK_COLON, LPAREN, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action892(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      stateStack.addFirst(970);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action893(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 154:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto893(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 971;
    default: return -1;
    }
  }

  private final boolean action894(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 32);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action895(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 26);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action896(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      stateStack.addFirst(972);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action897(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto897(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 54: return 302;
    case 55: return 973;
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 698;
    case 66: return 97;
    case 56: return 700;
    case 35: return 702;
    case 53: return 303;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action898(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto898(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 77: return 974;
    case 76: return 900;
    case 59: return 93;
    case 33: return 698;
    case 56: return 700;
    case 75: return 975;
    case 53: return 101;
    case 54: return 91;
    case 55: return 701;
    case 63: return 94;
    case 66: return 97;
    case 65: return 95;
    case 35: return 702;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action899(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto899(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 77: return 976;
    case 76: return 902;
    case 59: return 93;
    case 33: return 698;
    case 75: return 977;
    case 56: return 700;
    case 53: return 101;
    case 54: return 91;
    case 55: return 701;
    case 63: return 94;
    case 66: return 97;
    case 65: return 95;
    case 35: return 702;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action900(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_53, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action901(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 3);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND});
    }
  }

  private final boolean action902(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 183: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 124: case 198: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_53, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action903(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 4);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND});
    }
  }

  private final boolean action904(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 141: case 150: case 116: case 114: case 180: case 137:
      return reduce(RULE_64, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final int goto904(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 423;
    default: return -1;
    }
  }

  private final boolean action905(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 182: case 199: case 155: case 158: case 185: case 198: case 124: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 141: case 150: case 116: case 114: case 180: case 137:
      return reduce(RULE_64, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action906(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto906(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 978;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 979;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action907(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_34, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action908(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto908(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 980;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 981;
    case 85: return 341;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 65: return 351;
    case 35: return 982;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action909(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto909(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 980;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 983;
    case 85: return 341;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 65: return 351;
    case 35: return 982;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action910(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_34, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action911(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_76, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action912(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_76, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action913(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto913(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 984;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 985;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action914(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_34, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action915(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto915(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 980;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 986;
    case 85: return 341;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 65: return 351;
    case 35: return 982;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action916(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto916(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 980;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 987;
    case 85: return 341;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 65: return 351;
    case 35: return 982;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action917(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(988);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(866);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action918(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto918(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 989;
    default: return -1;
    }
  }

  private final boolean action919(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(826);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(419);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_26, 0);
    case 117:
      return reduce(RULE_39, 1);
    case 151: case 139:
      return reduce(RULE_42, 0);
    case 113: case 120: case 127: case 109: case 148: case 144: case 146: case 134: case 159: case 123: case 130: case 142:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {CARET_EQUALS, DOUBLE_LANGLE_EQUALS, RPAREN, QUESTION_MARK_DOT, DOUBLE_COLON, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PIPE_EQUALS, PERCENT_EQUALS, LSQUARE, FORWARD_SLASH_EQUALS, LANGLE, STAR_EQUALS, DOUBLE_PERCENT_EQUALS, COMMA, EQUALS, MINUS_EQUALS, LPAREN, DOT});
    }
  }

  private final boolean action920(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115:
      stateStack.addFirst(278);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(427);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_26, 1);
    case 117:
      return reduce(RULE_39, 2);
    case 151: case 139:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN, QUESTION_MARK_DOT, LPAREN, DOUBLE_COLON, LSQUARE, DOT});
    }
  }

  private final boolean action921(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto921(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 239;
    case 102: return 238;
    case 96: return 225;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 14: return 990;
    case 65: return 351;
    case 33: return 366;
    case 35: return 367;
    case 98: return 353;
    case 15: return 368;
    default: return -1;
    }
  }

  private final boolean action922(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, NAME, SHORT_KEYWORD, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto922(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 239;
    case 102: return 238;
    case 96: return 225;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 14: return 991;
    case 65: return 351;
    case 33: return 366;
    case 35: return 367;
    case 98: return 353;
    case 15: return 368;
    default: return -1;
    }
  }

  private final boolean action923(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      return reduce(RULE_94, 4);
    case 151: case 139: case 140: case 128:
      return reduce(RULE_34, 17);
    default: throw new BadTokenException(token, new Object[] {RPAREN, QUESTION_MARK_DOT, LPAREN, LSQUARE, DOT});
    }
  }

  private final boolean action924(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(992);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(394);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(395);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(396);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(397);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(398);
      tokenStack.addFirst(token);
      return true;
    case 146:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(400);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(401);
      tokenStack.addFirst(token);
      return true;
    case 159:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, CARET_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, DOUBLE_RANGLE_EQUALS, AMPERSAND_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, STAR_EQUALS});
    }
  }

  private final boolean action925(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      stateStack.addFirst(993);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action926(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      return reduce(RULE_94, 3);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action927(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(921);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(922);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 161:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 155:
      return reduce(RULE_94, 5);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, DOUBLE_MINUS, RPAREN, STRING_LITERAL, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, DOUBLE_PLUS, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto927(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 923;
    case 33: return 660;
    case 16: return 924;
    case 25: return 994;
    case 102: return 238;
    case 57: return 239;
    case 96: return 225;
    case 97: return 228;
    case 14: return 229;
    case 65: return 351;
    case 48: return 926;
    case 35: return 367;
    case 98: return 353;
    case 15: return 244;
    default: return -1;
    }
  }

  private final boolean action928(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto928(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 995;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action929(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto929(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 996;
    default: return -1;
    }
  }

  private final boolean action930(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto930(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 99: return 335;
    case 59: return 221;
    case 56: return 184;
    case 93: return 337;
    case 84: return 981;
    case 54: return 178;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 66: return 97;
    case 98: return 353;
    case 91: return 355;
    case 94: return 354;
    case 67: return 498;
    case 72: return 181;
    case 33: return 997;
    case 87: return 338;
    case 90: return 339;
    case 85: return 341;
    case 102: return 343;
    case 57: return 345;
    case 92: return 346;
    case 70: return 180;
    case 73: return 179;
    case 63: return 94;
    case 69: return 182;
    case 88: return 350;
    case 65: return 242;
    case 35: return 998;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action931(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto931(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 99: return 335;
    case 59: return 221;
    case 56: return 184;
    case 93: return 337;
    case 84: return 983;
    case 54: return 178;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 66: return 97;
    case 98: return 353;
    case 91: return 355;
    case 94: return 354;
    case 67: return 499;
    case 72: return 181;
    case 33: return 997;
    case 87: return 338;
    case 90: return 339;
    case 85: return 341;
    case 102: return 343;
    case 57: return 345;
    case 92: return 346;
    case 70: return 180;
    case 73: return 179;
    case 63: return 94;
    case 69: return 182;
    case 88: return 350;
    case 65: return 242;
    case 35: return 998;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action932(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(999);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto932(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 100: return 1000;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 1001;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 1002;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action933(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213: case 149: case 187: case 208: case 103: case 200: case 172: case 140: case 209: case 189: case 135: case 165: case 139: case 138: case 194: case 163: case 210: case 178:
      return reduce(RULE_95, 1);
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, LONG_KEYWORD, HASH, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final boolean action934(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      stateStack.addFirst(1003);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action935(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 151:
      stateStack.addFirst(407);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK_DOT, LSQUARE, DOT});
    }
  }

  private final boolean action936(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(1004);
      tokenStack.addFirst(token);
      return true;
    case 151: case 139: case 140: case 128:
      return reduce(RULE_34, 17);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, QUESTION_MARK_DOT, LPAREN, LSQUARE, DOT});
    }
  }

  private final boolean action937(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 122: case 147: case 133: case 151: case 158: case 131: case 119: case 143: case 139: case 141:
      return reduce(RULE_42, 0);
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_93, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, LPAREN, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action938(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 122: case 147: case 133: case 151: case 158: case 131: case 119: case 143: case 139: case 141:
      return reduce(RULE_42, 1);
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_93, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, LPAREN, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action939(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 155:
      return reduce(RULE_82, 2);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action940(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 115: case 155:
      return reduce(RULE_82, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, COMMA, AMPERSAND, RPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, PIPE, DOUBLE_PIPE, CARET, DOUBLE_EQUALS});
    }
  }

  private final boolean action941(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 122: case 147: case 133: case 151: case 158: case 131: case 119: case 143: case 139: case 141:
      return reduce(RULE_42, 0);
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_93, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, LPAREN, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action942(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 122: case 147: case 133: case 151: case 158: case 131: case 119: case 143: case 139: case 141:
      return reduce(RULE_42, 1);
    case 162: case 132: case 149: case 190: case 106: case 145: case 118: case 211: case 108: case 157: case 138: case 191: case 201: case 182: case 155: case 199: case 198: case 124: case 112: case 171: case 154: case 115: case 156: case 176: case 116: case 150: case 114: case 180:
      return reduce(RULE_93, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, DOT, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, EXCLAIMATION_MARK, CREATE_KEYWORD, DOUBLE_LANGLE, RBRACE, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, MINUS, LPAREN, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action943(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 157: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 141: case 206: case 194: case 202:
      return reduce(RULE_84, 4);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action944(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action945(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(1005);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action946(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(1006);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action947(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 157:
      stateStack.addFirst(1007);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action948(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto948(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1008;
    default: return -1;
    }
  }

  private final boolean action949(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 167: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 163: case 161: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 177: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_97, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, CATCH_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, FINALLY_KEYWORD, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action950(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103: case 145:
      return reduce(RULE_85, 1);
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action951(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 9);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action952(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 8);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action953(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 157: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 141: case 206: case 194: case 202:
      return reduce(RULE_84, 14);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action954(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 13);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action955(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto955(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 1009;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 1010;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action956(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 155:
      return reduce(RULE_87, 7);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action957(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(1011);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action958(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto958(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 68;
    case 62: return 1012;
    default: return -1;
    }
  }

  private final boolean action959(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 182: case 106: case 199: case 198: case 171: case 154: case 211: case 115: case 157: case 176: case 138: case 191: case 201: case 180:
      return reduce(RULE_88, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final boolean action960(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_96, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action961(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_96, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action962(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_73, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action963(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_96, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action964(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_96, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action965(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_90, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final int goto965(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 20: return 1013;
    default: return -1;
    }
  }

  private final boolean action966(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_98, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action967(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 199:
      stateStack.addFirst(1014);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(1015);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(1016);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SETTER_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final boolean action968(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_90, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final boolean action969(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 139: case 150: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 33);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, QUESTION_MARK_COLON, LPAREN, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action970(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 139: case 150: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 27);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, QUESTION_MARK_COLON, LPAREN, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action971(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      stateStack.addFirst(1017);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action972(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 103: case 145: case 118: case 135: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 139: case 150: case 116: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 28);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, HASH, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action973(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 107: case 112: case 171: case 156: case 139: case 150: case 180: case 163: case 161: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 141: case 206: case 116: case 194: case 114: case 202:
      return reduce(RULE_92, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, STRING_LITERAL, CARET, CREATE_KEYWORD, RSQUARE, LPAREN, QUESTION_MARK_COLON, GETTER_KEYWORD, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, DOUBLE_AMPERSAND, TRUE_KEYWORD, MINUS, COLON, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action974(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_74, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action975(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(897);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 3);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND});
    }
  }

  private final boolean action976(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 145: case 193: case 140: case 160: case 135: case 118: case 104: case 165: case 157: case 191: case 110: case 201: case 152: case 178: case 213: case 182: case 199: case 117: case 198: case 112: case 107: case 171: case 156: case 150: case 139: case 180: case 161: case 163: case 210: case 162: case 132: case 187: case 208: case 192: case 200: case 175: case 189: case 183: case 211: case 108: case 174: case 138: case 105: case 155: case 166: case 124: case 131: case 172: case 209: case 154: case 126: case 203: case 115: case 205: case 176: case 116: case 206: case 141: case 114: case 194: case 202:
      return reduce(RULE_74, 4);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, NULL_KEYWORD, LSQUARE, TILDE, HASH, DOUBLE_EQUALS, INTEGER_LITERAL, BYTE_KEYWORD, SEMICOLON, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SETTER_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, CARET, STRING_LITERAL, CREATE_KEYWORD, RSQUARE, QUESTION_MARK_COLON, LPAREN, GETTER_KEYWORD, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, IMPLEMENTS_KEYWORD, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, LBRACE, FLOATING_LITERAL, RPAREN, CAST_KEYWORD, DOUBLE_PIPE, DOUBLE_KEYWORD, EXCLAIMATION_MARK, UINT_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD, MINUS, TRUE_KEYWORD, DOUBLE_AMPERSAND, OBJECT_KEYWORD, COLON, SUPER_KEYWORD});
    }
  }

  private final boolean action977(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(897);
      tokenStack.addFirst(token);
      return true;
    case 115:
      return reduce(RULE_30, 4);
    default: throw new BadTokenException(token, new Object[] {COMMA, AMPERSAND});
    }
  }

  private final boolean action978(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 154: case 211: case 115: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_55, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action979(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 154: case 211: case 115: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_55, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action980(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(1018);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(527);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 149: case 132: case 151: case 158: case 122: case 145: case 185: case 124: case 131: case 112: case 119: case 118: case 153: case 143: case 147: case 108: case 133: case 139: case 141: case 150: case 116: case 137:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, INSTANCEOF_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, LANGLE_EQUALS});
    }
  }

  private final boolean action981(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action982(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(1019);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(563);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(565);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 149: case 132: case 151: case 158: case 122: case 145: case 185: case 124: case 131: case 112: case 119: case 118: case 153: case 143: case 147: case 108: case 133: case 139: case 141: case 150: case 116: case 137:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, INSTANCEOF_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, LANGLE_EQUALS});
    }
  }

  private final boolean action983(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action984(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 154: case 211: case 115: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_55, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action985(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 154: case 211: case 115: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_55, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_EQUALS, UNBACKED_KEYWORD, AMPERSAND, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, DOUBLE_PIPE, SELFISH_KEYWORD, CARET, CREATE_KEYWORD, RBRACE, COMMA, RSQUARE, FINAL_KEYWORD, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action986(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action987(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 106: case 182: case 155: case 199: case 198: case 171: case 211: case 156: case 157: case 176: case 138: case 191: case 114: case 201: case 180:
      return reduce(RULE_60, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RSQUARE, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, COLON, GETTER_KEYWORD});
    }
  }

  private final boolean action988(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto988(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1020;
    default: return -1;
    }
  }

  private final boolean action989(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 167: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 163: case 161: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 177: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_97, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, CATCH_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, FINALLY_KEYWORD, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action990(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      return reduce(RULE_94, 1);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action991(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      return reduce(RULE_94, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action992(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto992(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 336;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 340;
    case 85: return 341;
    case 34: return 342;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 83: return 1021;
    case 88: return 350;
    case 65: return 351;
    case 35: return 352;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action993(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto993(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1022;
    default: return -1;
    }
  }

  private final boolean action994(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      stateStack.addFirst(1023);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action995(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto995(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1024;
    default: return -1;
    }
  }

  private final boolean action996(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_99, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action997(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(1025);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(1026);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(1027);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 149: case 132: case 151: case 158: case 122: case 145: case 185: case 124: case 131: case 112: case 119: case 118: case 153: case 143: case 147: case 108: case 133: case 139: case 141: case 150: case 116: case 137:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, INSTANCEOF_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, LANGLE_EQUALS});
    }
  }

  private final boolean action998(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(1028);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(1029);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(565);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 149: case 132: case 151: case 158: case 122: case 145: case 185: case 124: case 131: case 112: case 119: case 118: case 153: case 143: case 147: case 108: case 133: case 139: case 141: case 150: case 116: case 137:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, INSTANCEOF_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, LANGLE_EQUALS});
    }
  }

  private final boolean action999(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 139: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_34, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action1000(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      stateStack.addFirst(1030);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(1031);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE, COMMA});
    }
  }

  private final boolean action1001(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154: case 115:
      return reduce(RULE_100, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, COMMA});
    }
  }

  private final boolean action1002(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 154: case 115:
      return reduce(RULE_100, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, COMMA, AMPERSAND, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, PIPE, DOUBLE_PIPE, CARET, DOUBLE_EQUALS});
    }
  }

  private final boolean action1003(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 122: case 145: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 143: case 115: case 156: case 176: case 139: case 150: case 141: case 116: case 114: case 180: case 137:
      return reduce(RULE_34, 10);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, RSQUARE, FINAL_KEYWORD, DOUBLE_AMPERSAND, MINUS, QUESTION_MARK_COLON, LPAREN, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action1004(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_38, 13);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action1005(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 10);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action1006(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 5);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action1007(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 160: case 135: case 170: case 165: case 104: case 181: case 164: case 157: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 131: case 172: case 209: case 154: case 203: case 176: case 206: case 141: case 194: case 202:
      return reduce(RULE_84, 15);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, TILDE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, SEMICOLON, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action1008(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 167: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 163: case 161: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 177: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_97, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, CATCH_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, FINALLY_KEYWORD, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action1009(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 155:
      return reduce(RULE_87, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action1010(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 115: case 155:
      return reduce(RULE_87, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, COMMA, AMPERSAND, RPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, PIPE, DOUBLE_PIPE, CARET, DOUBLE_EQUALS});
    }
  }

  private final boolean action1011(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 130:
      stateStack.addFirst(1032);
      tokenStack.addFirst(token);
      return true;
    case 115: case 155:
      return reduce(RULE_87, 4);
    default: throw new BadTokenException(token, new Object[] {COMMA, EQUALS, RPAREN});
    }
  }

  private final boolean action1012(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 190: case 182: case 106: case 199: case 198: case 171: case 154: case 211: case 115: case 157: case 176: case 138: case 191: case 201: case 180:
      return reduce(RULE_88, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, RBRACE, UNBACKED_KEYWORD, COMMA, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final boolean action1013(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(1033);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 199: case 180: case 171:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, NATIVE_KEYWORD, SELFISH_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final int goto1013(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 17;
    case 32: return 967;
    case 21: return 968;
    default: return -1;
    }
  }

  private final boolean action1014(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(1034);
      tokenStack.addFirst(token);
      return true;
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_101, 2);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, LPAREN, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final int goto1014(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 22: return 1035;
    default: return -1;
    }
  }

  private final boolean action1015(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 138:
      return reduce(RULE_44, 0);
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_101, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, SEMICOLON, THROWS_KEYWORD, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final int goto1015(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 1036;
    default: return -1;
    }
  }

  private final boolean action1016(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 139:
      stateStack.addFirst(1037);
      tokenStack.addFirst(token);
      return true;
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_101, 6);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, LPAREN, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final int goto1016(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 22: return 1038;
    default: return -1;
    }
  }

  private final boolean action1017(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 132: case 190: case 106: case 103: case 145: case 135: case 118: case 211: case 108: case 174: case 157: case 138: case 191: case 201: case 110: case 152: case 182: case 199: case 155: case 117: case 198: case 124: case 112: case 171: case 154: case 126: case 115: case 156: case 205: case 176: case 116: case 139: case 150: case 114: case 180: case 161: case 202:
      return reduce(RULE_15, 29);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, PIPE, DOUBLE_EQUALS, HASH, UNBACKED_KEYWORD, AMPERSAND, EXTENDS_KEYWORD, SEMICOLON, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, ARROW, RANGLE, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, DOUBLE_COLON, SELFISH_KEYWORD, DOUBLE_PIPE, CARET, CREATE_KEYWORD, RBRACE, DOUBLE_RANGLE, COMMA, RSQUARE, FINAL_KEYWORD, THROWS_KEYWORD, QUESTION_MARK_COLON, LPAREN, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, UNDERSCORE, SUPER_KEYWORD});
    }
  }

  private final boolean action1018(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1018(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 980;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 731;
    case 85: return 341;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 65: return 351;
    case 35: return 982;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action1019(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1019(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 980;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 84: return 802;
    case 85: return 341;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 88: return 350;
    case 65: return 351;
    case 35: return 982;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action1020(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 167: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 163: case 161: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 177: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_97, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, CATCH_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, BOOLEAN_KEYWORD, UNDERSCORE, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, FINALLY_KEYWORD, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action1021(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      return reduce(RULE_94, 2);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action1022(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_99, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action1023(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto1023(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1039;
    default: return -1;
    }
  }

  private final boolean action1024(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 207: case 204: case 178: case 213: case 182: case 198: case 179: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_99, 3);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, THROW_KEYWORD, TRY_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, FOR_KEYWORD, SELFISH_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action1025(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1025(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 99: return 335;
    case 59: return 221;
    case 56: return 184;
    case 93: return 337;
    case 84: return 731;
    case 54: return 178;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 66: return 97;
    case 98: return 353;
    case 91: return 355;
    case 94: return 354;
    case 67: return 498;
    case 72: return 181;
    case 33: return 997;
    case 87: return 338;
    case 90: return 339;
    case 85: return 341;
    case 102: return 343;
    case 57: return 345;
    case 92: return 346;
    case 70: return 180;
    case 73: return 179;
    case 63: return 94;
    case 69: return 182;
    case 88: return 350;
    case 65: return 242;
    case 35: return 998;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action1026(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 126: case 115: case 155: case 152:
      return reduce(RULE_22, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, RPAREN, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1026(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 733;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 735;
    default: return -1;
    }
  }

  private final boolean action1027(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1027(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 71: return 294;
    case 99: return 335;
    case 59: return 221;
    case 56: return 296;
    case 93: return 337;
    case 54: return 178;
    case 95: return 344;
    case 96: return 347;
    case 55: return 298;
    case 97: return 228;
    case 66: return 97;
    case 68: return 300;
    case 98: return 353;
    case 91: return 740;
    case 94: return 354;
    case 67: return 293;
    case 72: return 181;
    case 33: return 1040;
    case 74: return 297;
    case 57: return 345;
    case 102: return 738;
    case 92: return 346;
    case 70: return 180;
    case 73: return 179;
    case 69: return 299;
    case 63: return 94;
    case 65: return 242;
    case 35: return 1041;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action1028(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1028(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 99: return 335;
    case 59: return 221;
    case 56: return 184;
    case 93: return 337;
    case 84: return 802;
    case 54: return 178;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 89: return 348;
    case 66: return 97;
    case 98: return 353;
    case 91: return 355;
    case 94: return 354;
    case 67: return 499;
    case 72: return 181;
    case 33: return 997;
    case 87: return 338;
    case 90: return 339;
    case 85: return 341;
    case 102: return 343;
    case 57: return 345;
    case 92: return 346;
    case 70: return 180;
    case 73: return 179;
    case 63: return 94;
    case 69: return 182;
    case 88: return 350;
    case 65: return 242;
    case 35: return 998;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action1029(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 126: case 115: case 155: case 152:
      return reduce(RULE_22, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, RPAREN, CAST_KEYWORD, STRING_LITERAL, DOUBLE_KEYWORD, EXCLAIMATION_MARK, CREATE_KEYWORD, UINT_KEYWORD, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1029(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 334;
    case 99: return 335;
    case 33: return 732;
    case 93: return 337;
    case 95: return 344;
    case 102: return 803;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 65: return 351;
    case 35: return 734;
    case 98: return 353;
    case 94: return 354;
    case 91: return 804;
    default: return -1;
    }
  }

  private final boolean action1030(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 132: case 149: case 190: case 106: case 145: case 122: case 140: case 118: case 211: case 147: case 108: case 157: case 133: case 138: case 191: case 201: case 152: case 128: case 182: case 199: case 155: case 151: case 158: case 185: case 124: case 198: case 112: case 131: case 171: case 136: case 119: case 153: case 154: case 126: case 115: case 143: case 156: case 176: case 116: case 141: case 150: case 139: case 114: case 180: case 137:
      return reduce(RULE_34, 9);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, MUTABLE_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, UNBACKED_KEYWORD, PLUS, AMPERSAND, SEMICOLON, FORWARD_SLASH, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, RANGLE, DOT, IMMUTABLE_KEYWORD, SETTER_KEYWORD, RPAREN, QUESTION_MARK_DOT, STAR, INSTANCEOF_KEYWORD, SELFISH_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, CREATE_KEYWORD, LANGLE, DOUBLE_LANGLE, RBRACE, RANGLE_EQUALS, DOUBLE_RANGLE, PERCENT, COMMA, RSQUARE, FINAL_KEYWORD, LPAREN, QUESTION_MARK_COLON, MINUS, DOUBLE_AMPERSAND, COLON, GETTER_KEYWORD, LANGLE_EQUALS});
    }
  }

  private final boolean action1031(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1031(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 1042;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 1043;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action1032(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, DOUBLE_KEYWORD, EXCLAIMATION_MARK, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, MINUS, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1032(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 86: return 333;
    case 59: return 334;
    case 99: return 335;
    case 33: return 604;
    case 93: return 337;
    case 87: return 338;
    case 90: return 339;
    case 85: return 1044;
    case 102: return 343;
    case 95: return 344;
    case 57: return 345;
    case 92: return 346;
    case 96: return 347;
    case 97: return 228;
    case 89: return 607;
    case 88: return 1045;
    case 65: return 351;
    case 35: return 609;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    default: return -1;
    }
  }

  private final boolean action1033(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 149: case 187: case 190: case 208: case 106: case 196: case 103: case 200: case 140: case 135: case 189: case 211: case 165: case 214: case 138: case 191: case 201: case 178: case 213: case 182: case 198: case 172: case 171: case 209: case 154: case 176: case 139: case 194: case 163: case 210:
      return reduce(RULE_98, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, PROPERTY_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, NAME, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, VOID_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, RBRACE, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final boolean action1034(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 111:
      stateStack.addFirst(433);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(434);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 213: case 149: case 187: case 208: case 103: case 200: case 172: case 140: case 209: case 189: case 135: case 165: case 139: case 138: case 194: case 163: case 210: case 178:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, AT, IMMUTABLE_KEYWORD, RPAREN, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto1034(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 17;
    case 32: return 1046;
    case 23: return 436;
    default: return -1;
    }
  }

  private final boolean action1035(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 138: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, SEMICOLON, THROWS_KEYWORD, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final int goto1035(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 1047;
    default: return -1;
    }
  }

  private final boolean action1036(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto1036(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1048;
    default: return -1;
    }
  }

  private final boolean action1037(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 211:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 111:
      stateStack.addFirst(433);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(434);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 213: case 149: case 187: case 208: case 103: case 200: case 172: case 140: case 209: case 189: case 135: case 165: case 139: case 138: case 194: case 163: case 210: case 178:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, QUESTION_MARK, MUTABLE_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, SINCE_SPECIFIER, NAME, SHORT_KEYWORD, LSQUARE, LONG_KEYWORD, HASH, UNBACKED_KEYWORD, BYTE_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, AT, IMMUTABLE_KEYWORD, RPAREN, SELFISH_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FINAL_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD});
    }
  }

  private final int goto1037(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 17;
    case 32: return 1049;
    case 23: return 436;
    default: return -1;
    }
  }

  private final boolean action1038(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 138: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SETTER_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, SEMICOLON, THROWS_KEYWORD, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final int goto1038(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 1050;
    default: return -1;
    }
  }

  private final boolean action1039(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149: case 190: case 106: case 103: case 193: case 140: case 135: case 170: case 165: case 104: case 181: case 164: case 191: case 201: case 204: case 207: case 178: case 213: case 182: case 179: case 198: case 107: case 171: case 125: case 139: case 161: case 163: case 210: case 197: case 162: case 187: case 208: case 192: case 200: case 175: case 189: case 211: case 215: case 138: case 105: case 121: case 166: case 172: case 209: case 154: case 203: case 176: case 206: case 194: case 202:
      return reduce(RULE_99, 0);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, MUTABLE_KEYWORD, SINCE_SPECIFIER, NAME, NULL_KEYWORD, LSQUARE, HASH, CONTINUE_KEYWORD, BYTE_KEYWORD, INTEGER_LITERAL, IF_KEYWORD, BREAK_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, TRY_KEYWORD, THROW_KEYWORD, FLOAT_KEYWORD, USHORT_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FOR_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, DOUBLE_PLUS, LPAREN, UNDERSCORE, BOOLEAN_KEYWORD, ULONG_KEYWORD, RETURN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, UNBACKED_KEYWORD, WHILE_KEYWORD, LBRACE, FLOATING_LITERAL, DOUBLE_MINUS, CAST_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, RBRACE, THIS_KEYWORD, FINAL_KEYWORD, TRUE_KEYWORD, OBJECT_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final boolean action1040(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(1051);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(1052);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 158: case 151: case 122: case 131: case 119: case 147: case 143: case 133: case 141: case 139:
      return reduce(RULE_42, 0);
    case 149: case 132: case 155: case 145: case 124: case 112: case 118: case 108: case 116: case 150:
      return reduce(RULE_93, 0);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, RPAREN, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, LANGLE, DOUBLE_LANGLE, DOUBLE_RANGLE, COMMA, PERCENT, LPAREN, MINUS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND});
    }
  }

  private final boolean action1041(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(1053);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(1054);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(172);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 158: case 151: case 122: case 131: case 119: case 147: case 143: case 133: case 141: case 139:
      return reduce(RULE_42, 1);
    case 149: case 132: case 155: case 145: case 124: case 112: case 118: case 108: case 116: case 150:
      return reduce(RULE_93, 1);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, DOUBLE_PERCENT, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, RPAREN, QUESTION_MARK_DOT, STAR, DOUBLE_COLON, DOUBLE_PIPE, CARET, EXCLAIMATION_MARK, DOUBLE_LANGLE, DOUBLE_RANGLE, COMMA, PERCENT, LPAREN, MINUS, DOUBLE_AMPERSAND, QUESTION_MARK_COLON});
    }
  }

  private final boolean action1042(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154: case 115:
      return reduce(RULE_100, 2);
    default: throw new BadTokenException(token, new Object[] {RBRACE, COMMA});
    }
  }

  private final boolean action1043(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 154: case 115:
      return reduce(RULE_100, 3);
    default: throw new BadTokenException(token, new Object[] {RBRACE, QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, COMMA, AMPERSAND, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, PIPE, DOUBLE_PIPE, CARET, DOUBLE_EQUALS});
    }
  }

  private final boolean action1044(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 115: case 155:
      return reduce(RULE_87, 5);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action1045(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(557);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(558);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(560);
      tokenStack.addFirst(token);
      return true;
    case 115: case 155:
      return reduce(RULE_87, 6);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, EXCLAIMATION_MARK_EQUALS, COMMA, AMPERSAND, RPAREN, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, PIPE, DOUBLE_PIPE, CARET, DOUBLE_EQUALS});
    }
  }

  private final boolean action1046(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(1055);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto1046(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 664;
    default: return -1;
    }
  }

  private final boolean action1047(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_101, 5);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final int goto1047(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1056;
    default: return -1;
    }
  }

  private final boolean action1048(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_101, 1);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final boolean action1049(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(1057);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {USHORT_KEYWORD, QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NAME, SHORT_KEYWORD, DOUBLE_KEYWORD, LSQUARE, UINT_KEYWORD, HASH, LONG_KEYWORD, BYTE_KEYWORD, LBRACE, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, FLOAT_KEYWORD});
    }
  }

  private final int goto1049(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 59: return 93;
    case 63: return 94;
    case 65: return 95;
    case 33: return 118;
    case 56: return 119;
    case 35: return 127;
    case 53: return 664;
    default: return -1;
    }
  }

  private final boolean action1050(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_101, 9);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, LBRACE, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final int goto1050(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1058;
    default: return -1;
    }
  }

  private final boolean action1051(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 126: case 115: case 155: case 152:
      return reduce(RULE_75, 1);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, RPAREN, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1051(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 729;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    case 94: return 730;
    default: return -1;
    }
  }

  private final boolean action1052(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1052(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 71: return 294;
    case 86: return 333;
    case 59: return 221;
    case 99: return 335;
    case 56: return 296;
    case 93: return 337;
    case 84: return 981;
    case 54: return 178;
    case 95: return 344;
    case 96: return 347;
    case 55: return 298;
    case 97: return 228;
    case 89: return 348;
    case 66: return 97;
    case 68: return 705;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    case 67: return 498;
    case 72: return 181;
    case 33: return 1059;
    case 87: return 338;
    case 74: return 297;
    case 90: return 339;
    case 85: return 341;
    case 102: return 343;
    case 57: return 345;
    case 92: return 346;
    case 70: return 180;
    case 73: return 179;
    case 69: return 299;
    case 63: return 94;
    case 88: return 350;
    case 65: return 242;
    case 35: return 1060;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action1053(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 126: case 115: case 155: case 152:
      return reduce(RULE_75, 2);
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, RANGLE, FLOAT_KEYWORD, USHORT_KEYWORD, RPAREN, CAST_KEYWORD, STRING_LITERAL, EXCLAIMATION_MARK, DOUBLE_KEYWORD, CREATE_KEYWORD, UINT_KEYWORD, DOUBLE_RANGLE, COMMA, THIS_KEYWORD, MINUS, LPAREN, TRUE_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1053(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 57: return 345;
    case 102: return 800;
    case 95: return 344;
    case 96: return 347;
    case 97: return 228;
    case 99: return 335;
    case 59: return 334;
    case 65: return 351;
    case 33: return 508;
    case 35: return 509;
    case 98: return 353;
    case 94: return 801;
    default: return -1;
    }
  }

  private final boolean action1054(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1054(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 71: return 294;
    case 86: return 333;
    case 59: return 221;
    case 99: return 335;
    case 56: return 296;
    case 93: return 337;
    case 84: return 983;
    case 54: return 178;
    case 95: return 344;
    case 96: return 347;
    case 55: return 298;
    case 97: return 228;
    case 89: return 348;
    case 66: return 97;
    case 68: return 707;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    case 67: return 499;
    case 72: return 181;
    case 33: return 1059;
    case 87: return 338;
    case 74: return 297;
    case 90: return 339;
    case 85: return 341;
    case 102: return 343;
    case 57: return 345;
    case 92: return 346;
    case 70: return 180;
    case 73: return 179;
    case 69: return 299;
    case 63: return 94;
    case 88: return 350;
    case 65: return 242;
    case 35: return 1060;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action1055(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      stateStack.addFirst(1061);
      tokenStack.addFirst(token);
      return true;
    case 103: case 136: case 128:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN, NAME, DOT, LANGLE});
    }
  }

  private final boolean action1056(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 211: case 190: case 106: case 182: case 199: case 157: case 176: case 191: case 201: case 198: case 180: case 171:
      return reduce(RULE_101, 4);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SEMICOLON, SETTER_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, SELFISH_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final boolean action1057(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 155:
      stateStack.addFirst(1062);
      tokenStack.addFirst(token);
      return true;
    case 103: case 136: case 128:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN, NAME, DOT, LANGLE});
    }
  }

  private final boolean action1058(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 211: case 190: case 106: case 182: case 199: case 157: case 176: case 191: case 201: case 198: case 180: case 171:
      return reduce(RULE_101, 8);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, SINCE_SPECIFIER, SEMICOLON, SETTER_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, SELFISH_KEYWORD, STATIC_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final boolean action1059(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(1051);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(1063);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(1026);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(1027);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 1);
    case 149: case 132: case 151: case 158: case 122: case 145: case 185: case 124: case 131: case 112: case 119: case 118: case 153: case 143: case 147: case 108: case 133: case 139: case 141: case 150: case 116: case 137:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, INSTANCEOF_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, LANGLE_EQUALS});
    }
  }

  private final boolean action1060(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(1053);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(1064);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(1029);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(564);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(565);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_39, 2);
    case 149: case 132: case 151: case 158: case 122: case 145: case 185: case 124: case 131: case 112: case 119: case 118: case 153: case 143: case 147: case 108: case 133: case 139: case 141: case 150: case 116: case 137:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, DOUBLE_PERCENT, PIPE, LSQUARE, DOUBLE_EQUALS, PLUS, AMPERSAND, FORWARD_SLASH, RANGLE, DOT, STAR, QUESTION_MARK_DOT, DOUBLE_COLON, INSTANCEOF_KEYWORD, DOUBLE_PIPE, EXCLAIMATION_MARK, CARET, LANGLE, DOUBLE_LANGLE, RANGLE_EQUALS, DOUBLE_RANGLE, COMMA, PERCENT, DOUBLE_AMPERSAND, QUESTION_MARK_COLON, MINUS, LPAREN, LANGLE_EQUALS});
    }
  }

  private final boolean action1061(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 138:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto1061(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 1065;
    default: return -1;
    }
  }

  private final boolean action1062(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 205:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 138:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto1062(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 1066;
    default: return -1;
    }
  }

  private final boolean action1063(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1063(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 71: return 294;
    case 86: return 333;
    case 99: return 335;
    case 59: return 221;
    case 56: return 296;
    case 93: return 337;
    case 84: return 731;
    case 54: return 178;
    case 95: return 344;
    case 96: return 347;
    case 55: return 298;
    case 97: return 228;
    case 89: return 348;
    case 66: return 97;
    case 68: return 705;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    case 67: return 498;
    case 72: return 181;
    case 33: return 1059;
    case 87: return 338;
    case 74: return 297;
    case 90: return 339;
    case 85: return 341;
    case 102: return 343;
    case 57: return 345;
    case 92: return 346;
    case 70: return 180;
    case 73: return 179;
    case 69: return 299;
    case 63: return 94;
    case 88: return 350;
    case 65: return 242;
    case 35: return 1060;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action1064(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 187:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 208:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 213:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 209:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(330);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(331);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(332);
      tokenStack.addFirst(token);
      return true;
    case 210:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {QUESTION_MARK, INT_KEYWORD, UBYTE_KEYWORD, NEW_KEYWORD, SHORT_KEYWORD, NAME, NULL_KEYWORD, LSQUARE, FALSE_KEYWORD, TILDE, LONG_KEYWORD, HASH, BYTE_KEYWORD, INTEGER_LITERAL, LBRACE, FLOATING_LITERAL, FLOAT_KEYWORD, USHORT_KEYWORD, CAST_KEYWORD, EXCLAIMATION_MARK, DOUBLE_KEYWORD, STRING_LITERAL, CREATE_KEYWORD, UINT_KEYWORD, THIS_KEYWORD, LPAREN, TRUE_KEYWORD, MINUS, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ULONG_KEYWORD, SUPER_KEYWORD});
    }
  }

  private final int goto1064(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 71: return 294;
    case 86: return 333;
    case 59: return 221;
    case 99: return 335;
    case 56: return 296;
    case 93: return 337;
    case 84: return 802;
    case 54: return 178;
    case 95: return 344;
    case 96: return 347;
    case 55: return 298;
    case 97: return 228;
    case 89: return 348;
    case 66: return 97;
    case 68: return 707;
    case 98: return 353;
    case 94: return 354;
    case 91: return 355;
    case 67: return 499;
    case 72: return 181;
    case 33: return 1059;
    case 87: return 338;
    case 74: return 297;
    case 90: return 339;
    case 85: return 341;
    case 102: return 343;
    case 57: return 345;
    case 92: return 346;
    case 70: return 180;
    case 73: return 179;
    case 69: return 299;
    case 63: return 94;
    case 88: return 350;
    case 65: return 242;
    case 35: return 1060;
    case 64: return 102;
    default: return -1;
    }
  }

  private final boolean action1065(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto1065(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1067;
    default: return -1;
    }
  }

  private final boolean action1066(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 138:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto1066(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 38: return 1068;
    default: return -1;
    }
  }

  private final boolean action1067(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_101, 3);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

  private final boolean action1068(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162: case 211: case 190: case 182: case 106: case 157: case 199: case 176: case 191: case 198: case 201: case 180: case 171:
      return reduce(RULE_101, 7);
    default: throw new BadTokenException(token, new Object[] {ABSTRACT_KEYWORD, UNBACKED_KEYWORD, MUTABLE_KEYWORD, SINCE_SPECIFIER, IMMUTABLE_KEYWORD, SETTER_KEYWORD, SEMICOLON, FINAL_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, GETTER_KEYWORD, CREATE_KEYWORD});
    }
  }

}
