package eu.bryants.anthony.plinth.parser;

import static eu.bryants.anthony.plinth.parser.ParseType.*;

import java.util.Deque;
import java.util.LinkedList;

import parser.BadTokenException;
import parser.ParseException;
import parser.Production;
import parser.Rule;
import parser.Token;
import parser.Tokenizer;
import eu.bryants.anthony.plinth.parser.rules.ClassDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.CompilationUnitRule;
import eu.bryants.anthony.plinth.parser.rules.CompoundDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.InterfaceDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.AdditiveExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ComparisonExpressionLessThanQNameRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ConditionalExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.CreationExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.DimensionsRule;
import eu.bryants.anthony.plinth.parser.rules.expression.EqualityExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionListRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionNotLessThanQNameRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.FunctionCallExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.LogicalExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.MultiplicativeExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryNotThisRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryRule;
import eu.bryants.anthony.plinth.parser.rules.expression.QNameExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.QNameOrLessThanExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ShiftExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.TupleExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.TupleIndexExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.UnaryExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.member.ConstructorRule;
import eu.bryants.anthony.plinth.parser.rules.member.FieldRule;
import eu.bryants.anthony.plinth.parser.rules.member.InitialiserRule;
import eu.bryants.anthony.plinth.parser.rules.member.MemberListRule;
import eu.bryants.anthony.plinth.parser.rules.member.MethodRule;
import eu.bryants.anthony.plinth.parser.rules.member.PropertyRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ArgumentsRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeNoQNameRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeRule;
import eu.bryants.anthony.plinth.parser.rules.misc.CatchTypeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.DeclarationAssigneeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ForInitRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ForUpdateRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ImplementsClauseRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ImportsRule;
import eu.bryants.anthony.plinth.parser.rules.misc.InterfaceListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.NestedQNameListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.OptionalModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ParameterListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ParametersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.PropertyMethodListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.PropertyMethodRule;
import eu.bryants.anthony.plinth.parser.rules.misc.QNameListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.QNameRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ThrowsClauseRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ThrowsListRule;
import eu.bryants.anthony.plinth.parser.rules.statement.AssignStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.BlockRule;
import eu.bryants.anthony.plinth.parser.rules.statement.BreakStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ContinueStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ForStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.IfStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.PrefixIncDecStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ReturnStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ShorthandAssignmentRule;
import eu.bryants.anthony.plinth.parser.rules.statement.StatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.StatementsRule;
import eu.bryants.anthony.plinth.parser.rules.statement.TryCatchStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.TryFinallyStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.WhileStatementRule;
import eu.bryants.anthony.plinth.parser.rules.type.ArrayTypeTrailingArgsRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.ArrayTypeTrailingArgsRule;
import eu.bryants.anthony.plinth.parser.rules.type.BasicTypeRule;
import eu.bryants.anthony.plinth.parser.rules.type.NamedTypeNoModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.type.OptionalTypeParametersRule;
import eu.bryants.anthony.plinth.parser.rules.type.ReturnTypeRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentListDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentListRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentNotQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeArgumentRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeBoundListDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeBoundListRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeBoundListRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeListNotQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeListRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeNoSimpleArgumentsRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeNoTrailingArgumentsRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeNotQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeParameterListRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeParameterListRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeParameterRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeParameterRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeTrailingArgsRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeTrailingArgsRule;
import eu.bryants.anthony.plinth.parser.rules.type.WildcardTypeArgumentDoubleRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.WildcardTypeArgumentRAngleRule;
import eu.bryants.anthony.plinth.parser.rules.type.WildcardTypeArgumentRule;

/*
 * Created on 2 Oct 2012
 */

/**
 * @author Anthony Bryant
 */
public class GeneratedParser
{
  // Generated parser in 81813ms
  private static final ImportsRule RULE_0 = new ImportsRule();
  private static final CompilationUnitRule RULE_1 = new CompilationUnitRule();
  private static final OptionalModifiersRule RULE_2 = new OptionalModifiersRule();
  private static final GeneratedStartRule RULE_3 = new GeneratedStartRule();
  private static final QNameRule RULE_4 = new QNameRule();
  private static final ModifiersRule RULE_5 = new ModifiersRule();
  private static final OptionalTypeParametersRule RULE_6 = new OptionalTypeParametersRule();
  private static final ImplementsClauseRule RULE_7 = new ImplementsClauseRule();
  private static final TypeParameterRule RULE_8 = new TypeParameterRule();
  private static final TypeParameterListRule RULE_9 = new TypeParameterListRule();
  private static final TypeParameterListRAngleRule RULE_10 = new TypeParameterListRAngleRule();
  private static final MemberListRule RULE_11 = new MemberListRule();
  private static final TypeParameterRAngleRule RULE_12 = new TypeParameterRAngleRule();
  private static final NamedTypeNoModifiersRule RULE_13 = new NamedTypeNoModifiersRule();
  private static final InterfaceListRule RULE_14 = new InterfaceListRule();
  private static final BasicTypeRule RULE_15 = new BasicTypeRule();
  private static final TypeRule RULE_16 = new TypeRule();
  private static final TypeBoundListRule RULE_17 = new TypeBoundListRule();
  private static final TypeBoundListRAngleRule RULE_18 = new TypeBoundListRAngleRule();
  private static final TypeNotQNameRule RULE_19 = new TypeNotQNameRule();
  private static final TypeRAngleRule RULE_20 = new TypeRAngleRule();
  private static final TypeTrailingArgsRule RULE_21 = new TypeTrailingArgsRule();
  private static final TypeTrailingArgsRAngleRule RULE_22 = new TypeTrailingArgsRAngleRule();
  private static final InterfaceDefinitionRule RULE_23 = new InterfaceDefinitionRule();
  private static final InitialiserRule RULE_24 = new InitialiserRule();
  private static final CompoundDefinitionRule RULE_25 = new CompoundDefinitionRule();
  private static final TypeListNotQNameRule RULE_26 = new TypeListNotQNameRule();
  private static final QNameListRule RULE_27 = new QNameListRule();
  private static final TypeListRule RULE_28 = new TypeListRule();
  private static final WildcardTypeArgumentRule RULE_29 = new WildcardTypeArgumentRule();
  private static final TypeArgumentNotQNameRule RULE_30 = new TypeArgumentNotQNameRule();
  private static final TypeArgumentRAngleRule RULE_31 = new TypeArgumentRAngleRule();
  private static final TypeArgumentListRAngleRule RULE_32 = new TypeArgumentListRAngleRule();
  private static final ClassDefinitionRule RULE_33 = new ClassDefinitionRule();
  private static final ThrowsClauseRule RULE_34 = new ThrowsClauseRule();
  private static final AssigneeNoQNameRule RULE_35 = new AssigneeNoQNameRule();
  private static final PrimaryNotThisRule RULE_36 = new PrimaryNotThisRule();
  private static final PrimaryRule RULE_37 = new PrimaryRule();
  private static final BlockRule RULE_38 = new BlockRule();
  private static final StatementRule RULE_39 = new StatementRule();
  private static final AssigneeListRule RULE_40 = new AssigneeListRule();
  private static final AssigneeRule RULE_41 = new AssigneeRule();
  private static final TypeNoSimpleArgumentsRule RULE_42 = new TypeNoSimpleArgumentsRule();
  private static final StatementsRule RULE_43 = new StatementsRule();
  private static final QNameExpressionRule RULE_44 = new QNameExpressionRule();
  private static final NestedQNameListRule RULE_45 = new NestedQNameListRule();
  private static final TypeNoTrailingArgumentsRule RULE_46 = new TypeNoTrailingArgumentsRule();
  private static final ArrayTypeTrailingArgsRule RULE_47 = new ArrayTypeTrailingArgsRule();
  private static final ArrayTypeTrailingArgsRAngleRule RULE_48 = new ArrayTypeTrailingArgsRAngleRule();
  private static final ReturnTypeRule RULE_49 = new ReturnTypeRule();
  private static final TypeArgumentDoubleRAngleRule RULE_50 = new TypeArgumentDoubleRAngleRule();
  private static final TypeArgumentListDoubleRAngleRule RULE_51 = new TypeArgumentListDoubleRAngleRule();
  private static final WildcardTypeArgumentRAngleRule RULE_52 = new WildcardTypeArgumentRAngleRule();
  private static final ParameterListRule RULE_53 = new ParameterListRule();
  private static final TupleExpressionRule RULE_54 = new TupleExpressionRule();
  private static final QNameOrLessThanExpressionRule RULE_55 = new QNameOrLessThanExpressionRule();
  private static final ShiftExpressionRule RULE_56 = new ShiftExpressionRule();
  private static final ExpressionRule RULE_57 = new ExpressionRule();
  private static final ExpressionNotLessThanQNameRule RULE_58 = new ExpressionNotLessThanQNameRule();
  private static final AdditiveExpressionRule RULE_59 = new AdditiveExpressionRule();
  private static final ConditionalExpressionRule RULE_60 = new ConditionalExpressionRule();
  private static final UnaryExpressionRule RULE_61 = new UnaryExpressionRule();
  private static final MultiplicativeExpressionRule RULE_62 = new MultiplicativeExpressionRule();
  private static final LogicalExpressionRule RULE_63 = new LogicalExpressionRule();
  private static final EqualityExpressionRule RULE_64 = new EqualityExpressionRule();
  private static final TupleIndexExpressionRule RULE_65 = new TupleIndexExpressionRule();
  private static final BreakStatementRule RULE_66 = new BreakStatementRule();
  private static final ReturnStatementRule RULE_67 = new ReturnStatementRule();
  private static final ContinueStatementRule RULE_68 = new ContinueStatementRule();
  private static final FunctionCallExpressionRule RULE_69 = new FunctionCallExpressionRule();
  private static final DeclarationAssigneeListRule RULE_70 = new DeclarationAssigneeListRule();
  private static final FieldRule RULE_71 = new FieldRule();
  private static final WildcardTypeArgumentDoubleRAngleRule RULE_72 = new WildcardTypeArgumentDoubleRAngleRule();
  private static final TypeDoubleRAngleRule RULE_73 = new TypeDoubleRAngleRule();
  private static final ThrowsListRule RULE_74 = new ThrowsListRule();
  private static final ConstructorRule RULE_75 = new ConstructorRule();
  private static final IfStatementRule RULE_76 = new IfStatementRule();
  private static final CreationExpressionRule RULE_77 = new CreationExpressionRule();
  private static final ForInitRule RULE_78 = new ForInitRule();
  private static final ArgumentsRule RULE_79 = new ArgumentsRule();
  private static final ExpressionListRule RULE_80 = new ExpressionListRule();
  private static final WhileStatementRule RULE_81 = new WhileStatementRule();
  private static final PrefixIncDecStatementRule RULE_82 = new PrefixIncDecStatementRule();
  private static final AssignStatementRule RULE_83 = new AssignStatementRule();
  private static final TryFinallyStatementRule RULE_84 = new TryFinallyStatementRule();
  private static final CatchTypeListRule RULE_85 = new CatchTypeListRule();
  private static final ShorthandAssignmentRule RULE_86 = new ShorthandAssignmentRule();
  private static final PropertyMethodListRule RULE_87 = new PropertyMethodListRule();
  private static final TypeBoundListDoubleRAngleRule RULE_88 = new TypeBoundListDoubleRAngleRule();
  private static final MethodRule RULE_89 = new MethodRule();
  private static final ParametersRule RULE_90 = new ParametersRule();
  private static final ComparisonExpressionLessThanQNameRule RULE_91 = new ComparisonExpressionLessThanQNameRule();
  private static final DimensionsRule RULE_92 = new DimensionsRule();
  private static final ForUpdateRule RULE_93 = new ForUpdateRule();
  private static final TryCatchStatementRule RULE_94 = new TryCatchStatementRule();
  private static final PropertyRule RULE_95 = new PropertyRule();
  private static final PropertyMethodRule RULE_96 = new PropertyMethodRule();
  private static final ForStatementRule RULE_97 = new ForStatementRule();

  private Deque<Integer> stateStack = new LinkedList<Integer>();
  private Deque<Token<ParseType>> tokenStack = new LinkedList<Token<ParseType>>();
  private Tokenizer<ParseType> tokenizer;

  private boolean accepted = false;

  public GeneratedParser(Tokenizer<ParseType> tokenizer)
  {
    this.tokenizer = tokenizer;
  }

  private final boolean reduce(Rule<ParseType> rule, int productionIndex) throws ParseException
  {
    Production<ParseType> production = rule.getProductions()[productionIndex];
    ParseType[] productionTypes = production.getTypes();
    if (stateStack.size() <= productionTypes.length || tokenStack.size() < productionTypes.length)
    {
      throw new ParseException("Bad reduction of rule, not enough elements");
    }

    // get the list of token values
    Object[] values = new Object[productionTypes.length];
    for (int i = values.length - 1; i >= 0; i--)
    {
      Token<ParseType> t = tokenStack.removeFirst();
      if (!t.getType().equals(productionTypes[i]))
      {
        throw new ParseException("Bad reduction of rule, invalid token type");
      }
      values[i] = t.getValue();

      // remove the top state from the state stack
      stateStack.removeFirst();
    }

    Object result = rule.match(production, values);
    Token<ParseType> nonTerminal = new Token<ParseType>(rule.getType(), result);

    Integer topState = stateStack.peekFirst();
    Integer gotoState = findGotoState(topState, nonTerminal.getType());

    stateStack.addFirst(gotoState);
    tokenStack.addFirst(nonTerminal);

    return false;
  }

  private static class GeneratedStartRule extends Rule<ParseType>
  {
    private static final long serialVersionUID = 1L;

    public GeneratedStartRule()
    {
      super(GENERATED_START_RULE, new Production<ParseType>(COMPILATION_UNIT));
    }

    @Override
    public Object match(Production<ParseType> production, Object[] args) throws ParseException
    {
      ParseType[] productionTypes = production.getTypes();
      if (productionTypes.length == 1 && productionTypes[0] == COMPILATION_UNIT)
      {
        return args[0];
      }
      throw badTypeList();
    }
  }

  public Token<ParseType> parse() throws ParseException, BadTokenException
  {
    stateStack.addFirst(0);
    Token<ParseType> lookahead = tokenizer.next();

    while (true)
    {
      Integer state = stateStack.peekFirst();
      boolean used = false;
      switch (state)
      {
      case 0: used = action0(lookahead); break;
      case 1: used = action1(lookahead); break;
      case 2: used = action2(lookahead); break;
      case 3: used = action3(lookahead); break;
      case 4: used = action4(lookahead); break;
      case 5: used = action5(lookahead); break;
      case 6: used = action6(lookahead); break;
      case 7: used = action7(lookahead); break;
      case 8: used = action8(lookahead); break;
      case 9: used = action9(lookahead); break;
      case 10: used = action10(lookahead); break;
      case 11: used = action11(lookahead); break;
      case 12: used = action12(lookahead); break;
      case 13: used = action13(lookahead); break;
      case 14: used = action14(lookahead); break;
      case 15: used = action15(lookahead); break;
      case 16: used = action16(lookahead); break;
      case 17: used = action17(lookahead); break;
      case 18: used = action18(lookahead); break;
      case 19: used = action19(lookahead); break;
      case 20: used = action20(lookahead); break;
      case 21: used = action21(lookahead); break;
      case 22: used = action22(lookahead); break;
      case 23: used = action23(lookahead); break;
      case 24: used = action24(lookahead); break;
      case 25: used = action25(lookahead); break;
      case 26: used = action26(lookahead); break;
      case 27: used = action27(lookahead); break;
      case 28: used = action28(lookahead); break;
      case 29: used = action29(lookahead); break;
      case 30: used = action30(lookahead); break;
      case 31: used = action31(lookahead); break;
      case 32: used = action32(lookahead); break;
      case 33: used = action33(lookahead); break;
      case 34: used = action34(lookahead); break;
      case 35: used = action35(lookahead); break;
      case 36: used = action36(lookahead); break;
      case 37: used = action37(lookahead); break;
      case 38: used = action38(lookahead); break;
      case 39: used = action39(lookahead); break;
      case 40: used = action40(lookahead); break;
      case 41: used = action41(lookahead); break;
      case 42: used = action42(lookahead); break;
      case 43: used = action43(lookahead); break;
      case 44: used = action44(lookahead); break;
      case 45: used = action45(lookahead); break;
      case 46: used = action46(lookahead); break;
      case 47: used = action47(lookahead); break;
      case 48: used = action48(lookahead); break;
      case 49: used = action49(lookahead); break;
      case 50: used = action50(lookahead); break;
      case 51: used = action51(lookahead); break;
      case 52: used = action52(lookahead); break;
      case 53: used = action53(lookahead); break;
      case 54: used = action54(lookahead); break;
      case 55: used = action55(lookahead); break;
      case 56: used = action56(lookahead); break;
      case 57: used = action57(lookahead); break;
      case 58: used = action58(lookahead); break;
      case 59: used = action59(lookahead); break;
      case 60: used = action60(lookahead); break;
      case 61: used = action61(lookahead); break;
      case 62: used = action62(lookahead); break;
      case 63: used = action63(lookahead); break;
      case 64: used = action64(lookahead); break;
      case 65: used = action65(lookahead); break;
      case 66: used = action66(lookahead); break;
      case 67: used = action67(lookahead); break;
      case 68: used = action68(lookahead); break;
      case 69: used = action69(lookahead); break;
      case 70: used = action70(lookahead); break;
      case 71: used = action71(lookahead); break;
      case 72: used = action72(lookahead); break;
      case 73: used = action73(lookahead); break;
      case 74: used = action74(lookahead); break;
      case 75: used = action75(lookahead); break;
      case 76: used = action76(lookahead); break;
      case 77: used = action77(lookahead); break;
      case 78: used = action78(lookahead); break;
      case 79: used = action79(lookahead); break;
      case 80: used = action80(lookahead); break;
      case 81: used = action81(lookahead); break;
      case 82: used = action82(lookahead); break;
      case 83: used = action83(lookahead); break;
      case 84: used = action84(lookahead); break;
      case 85: used = action85(lookahead); break;
      case 86: used = action86(lookahead); break;
      case 87: used = action87(lookahead); break;
      case 88: used = action88(lookahead); break;
      case 89: used = action89(lookahead); break;
      case 90: used = action90(lookahead); break;
      case 91: used = action91(lookahead); break;
      case 92: used = action92(lookahead); break;
      case 93: used = action93(lookahead); break;
      case 94: used = action94(lookahead); break;
      case 95: used = action95(lookahead); break;
      case 96: used = action96(lookahead); break;
      case 97: used = action97(lookahead); break;
      case 98: used = action98(lookahead); break;
      case 99: used = action99(lookahead); break;
      case 100: used = action100(lookahead); break;
      case 101: used = action101(lookahead); break;
      case 102: used = action102(lookahead); break;
      case 103: used = action103(lookahead); break;
      case 104: used = action104(lookahead); break;
      case 105: used = action105(lookahead); break;
      case 106: used = action106(lookahead); break;
      case 107: used = action107(lookahead); break;
      case 108: used = action108(lookahead); break;
      case 109: used = action109(lookahead); break;
      case 110: used = action110(lookahead); break;
      case 111: used = action111(lookahead); break;
      case 112: used = action112(lookahead); break;
      case 113: used = action113(lookahead); break;
      case 114: used = action114(lookahead); break;
      case 115: used = action115(lookahead); break;
      case 116: used = action116(lookahead); break;
      case 117: used = action117(lookahead); break;
      case 118: used = action118(lookahead); break;
      case 119: used = action119(lookahead); break;
      case 120: used = action120(lookahead); break;
      case 121: used = action121(lookahead); break;
      case 122: used = action122(lookahead); break;
      case 123: used = action123(lookahead); break;
      case 124: used = action124(lookahead); break;
      case 125: used = action125(lookahead); break;
      case 126: used = action126(lookahead); break;
      case 127: used = action127(lookahead); break;
      case 128: used = action128(lookahead); break;
      case 129: used = action129(lookahead); break;
      case 130: used = action130(lookahead); break;
      case 131: used = action131(lookahead); break;
      case 132: used = action132(lookahead); break;
      case 133: used = action133(lookahead); break;
      case 134: used = action134(lookahead); break;
      case 135: used = action135(lookahead); break;
      case 136: used = action136(lookahead); break;
      case 137: used = action137(lookahead); break;
      case 138: used = action138(lookahead); break;
      case 139: used = action139(lookahead); break;
      case 140: used = action140(lookahead); break;
      case 141: used = action141(lookahead); break;
      case 142: used = action142(lookahead); break;
      case 143: used = action143(lookahead); break;
      case 144: used = action144(lookahead); break;
      case 145: used = action145(lookahead); break;
      case 146: used = action146(lookahead); break;
      case 147: used = action147(lookahead); break;
      case 148: used = action148(lookahead); break;
      case 149: used = action149(lookahead); break;
      case 150: used = action150(lookahead); break;
      case 151: used = action151(lookahead); break;
      case 152: used = action152(lookahead); break;
      case 153: used = action153(lookahead); break;
      case 154: used = action154(lookahead); break;
      case 155: used = action155(lookahead); break;
      case 156: used = action156(lookahead); break;
      case 157: used = action157(lookahead); break;
      case 158: used = action158(lookahead); break;
      case 159: used = action159(lookahead); break;
      case 160: used = action160(lookahead); break;
      case 161: used = action161(lookahead); break;
      case 162: used = action162(lookahead); break;
      case 163: used = action163(lookahead); break;
      case 164: used = action164(lookahead); break;
      case 165: used = action165(lookahead); break;
      case 166: used = action166(lookahead); break;
      case 167: used = action167(lookahead); break;
      case 168: used = action168(lookahead); break;
      case 169: used = action169(lookahead); break;
      case 170: used = action170(lookahead); break;
      case 171: used = action171(lookahead); break;
      case 172: used = action172(lookahead); break;
      case 173: used = action173(lookahead); break;
      case 174: used = action174(lookahead); break;
      case 175: used = action175(lookahead); break;
      case 176: used = action176(lookahead); break;
      case 177: used = action177(lookahead); break;
      case 178: used = action178(lookahead); break;
      case 179: used = action179(lookahead); break;
      case 180: used = action180(lookahead); break;
      case 181: used = action181(lookahead); break;
      case 182: used = action182(lookahead); break;
      case 183: used = action183(lookahead); break;
      case 184: used = action184(lookahead); break;
      case 185: used = action185(lookahead); break;
      case 186: used = action186(lookahead); break;
      case 187: used = action187(lookahead); break;
      case 188: used = action188(lookahead); break;
      case 189: used = action189(lookahead); break;
      case 190: used = action190(lookahead); break;
      case 191: used = action191(lookahead); break;
      case 192: used = action192(lookahead); break;
      case 193: used = action193(lookahead); break;
      case 194: used = action194(lookahead); break;
      case 195: used = action195(lookahead); break;
      case 196: used = action196(lookahead); break;
      case 197: used = action197(lookahead); break;
      case 198: used = action198(lookahead); break;
      case 199: used = action199(lookahead); break;
      case 200: used = action200(lookahead); break;
      case 201: used = action201(lookahead); break;
      case 202: used = action202(lookahead); break;
      case 203: used = action203(lookahead); break;
      case 204: used = action204(lookahead); break;
      case 205: used = action205(lookahead); break;
      case 206: used = action206(lookahead); break;
      case 207: used = action207(lookahead); break;
      case 208: used = action208(lookahead); break;
      case 209: used = action209(lookahead); break;
      case 210: used = action210(lookahead); break;
      case 211: used = action211(lookahead); break;
      case 212: used = action212(lookahead); break;
      case 213: used = action213(lookahead); break;
      case 214: used = action214(lookahead); break;
      case 215: used = action215(lookahead); break;
      case 216: used = action216(lookahead); break;
      case 217: used = action217(lookahead); break;
      case 218: used = action218(lookahead); break;
      case 219: used = action219(lookahead); break;
      case 220: used = action220(lookahead); break;
      case 221: used = action221(lookahead); break;
      case 222: used = action222(lookahead); break;
      case 223: used = action223(lookahead); break;
      case 224: used = action224(lookahead); break;
      case 225: used = action225(lookahead); break;
      case 226: used = action226(lookahead); break;
      case 227: used = action227(lookahead); break;
      case 228: used = action228(lookahead); break;
      case 229: used = action229(lookahead); break;
      case 230: used = action230(lookahead); break;
      case 231: used = action231(lookahead); break;
      case 232: used = action232(lookahead); break;
      case 233: used = action233(lookahead); break;
      case 234: used = action234(lookahead); break;
      case 235: used = action235(lookahead); break;
      case 236: used = action236(lookahead); break;
      case 237: used = action237(lookahead); break;
      case 238: used = action238(lookahead); break;
      case 239: used = action239(lookahead); break;
      case 240: used = action240(lookahead); break;
      case 241: used = action241(lookahead); break;
      case 242: used = action242(lookahead); break;
      case 243: used = action243(lookahead); break;
      case 244: used = action244(lookahead); break;
      case 245: used = action245(lookahead); break;
      case 246: used = action246(lookahead); break;
      case 247: used = action247(lookahead); break;
      case 248: used = action248(lookahead); break;
      case 249: used = action249(lookahead); break;
      case 250: used = action250(lookahead); break;
      case 251: used = action251(lookahead); break;
      case 252: used = action252(lookahead); break;
      case 253: used = action253(lookahead); break;
      case 254: used = action254(lookahead); break;
      case 255: used = action255(lookahead); break;
      case 256: used = action256(lookahead); break;
      case 257: used = action257(lookahead); break;
      case 258: used = action258(lookahead); break;
      case 259: used = action259(lookahead); break;
      case 260: used = action260(lookahead); break;
      case 261: used = action261(lookahead); break;
      case 262: used = action262(lookahead); break;
      case 263: used = action263(lookahead); break;
      case 264: used = action264(lookahead); break;
      case 265: used = action265(lookahead); break;
      case 266: used = action266(lookahead); break;
      case 267: used = action267(lookahead); break;
      case 268: used = action268(lookahead); break;
      case 269: used = action269(lookahead); break;
      case 270: used = action270(lookahead); break;
      case 271: used = action271(lookahead); break;
      case 272: used = action272(lookahead); break;
      case 273: used = action273(lookahead); break;
      case 274: used = action274(lookahead); break;
      case 275: used = action275(lookahead); break;
      case 276: used = action276(lookahead); break;
      case 277: used = action277(lookahead); break;
      case 278: used = action278(lookahead); break;
      case 279: used = action279(lookahead); break;
      case 280: used = action280(lookahead); break;
      case 281: used = action281(lookahead); break;
      case 282: used = action282(lookahead); break;
      case 283: used = action283(lookahead); break;
      case 284: used = action284(lookahead); break;
      case 285: used = action285(lookahead); break;
      case 286: used = action286(lookahead); break;
      case 287: used = action287(lookahead); break;
      case 288: used = action288(lookahead); break;
      case 289: used = action289(lookahead); break;
      case 290: used = action290(lookahead); break;
      case 291: used = action291(lookahead); break;
      case 292: used = action292(lookahead); break;
      case 293: used = action293(lookahead); break;
      case 294: used = action294(lookahead); break;
      case 295: used = action295(lookahead); break;
      case 296: used = action296(lookahead); break;
      case 297: used = action297(lookahead); break;
      case 298: used = action298(lookahead); break;
      case 299: used = action299(lookahead); break;
      case 300: used = action300(lookahead); break;
      case 301: used = action301(lookahead); break;
      case 302: used = action302(lookahead); break;
      case 303: used = action303(lookahead); break;
      case 304: used = action304(lookahead); break;
      case 305: used = action305(lookahead); break;
      case 306: used = action306(lookahead); break;
      case 307: used = action307(lookahead); break;
      case 308: used = action308(lookahead); break;
      case 309: used = action309(lookahead); break;
      case 310: used = action310(lookahead); break;
      case 311: used = action311(lookahead); break;
      case 312: used = action312(lookahead); break;
      case 313: used = action313(lookahead); break;
      case 314: used = action314(lookahead); break;
      case 315: used = action315(lookahead); break;
      case 316: used = action316(lookahead); break;
      case 317: used = action317(lookahead); break;
      case 318: used = action318(lookahead); break;
      case 319: used = action319(lookahead); break;
      case 320: used = action320(lookahead); break;
      case 321: used = action321(lookahead); break;
      case 322: used = action322(lookahead); break;
      case 323: used = action323(lookahead); break;
      case 324: used = action324(lookahead); break;
      case 325: used = action325(lookahead); break;
      case 326: used = action326(lookahead); break;
      case 327: used = action327(lookahead); break;
      case 328: used = action328(lookahead); break;
      case 329: used = action329(lookahead); break;
      case 330: used = action330(lookahead); break;
      case 331: used = action331(lookahead); break;
      case 332: used = action332(lookahead); break;
      case 333: used = action333(lookahead); break;
      case 334: used = action334(lookahead); break;
      case 335: used = action335(lookahead); break;
      case 336: used = action336(lookahead); break;
      case 337: used = action337(lookahead); break;
      case 338: used = action338(lookahead); break;
      case 339: used = action339(lookahead); break;
      case 340: used = action340(lookahead); break;
      case 341: used = action341(lookahead); break;
      case 342: used = action342(lookahead); break;
      case 343: used = action343(lookahead); break;
      case 344: used = action344(lookahead); break;
      case 345: used = action345(lookahead); break;
      case 346: used = action346(lookahead); break;
      case 347: used = action347(lookahead); break;
      case 348: used = action348(lookahead); break;
      case 349: used = action349(lookahead); break;
      case 350: used = action350(lookahead); break;
      case 351: used = action351(lookahead); break;
      case 352: used = action352(lookahead); break;
      case 353: used = action353(lookahead); break;
      case 354: used = action354(lookahead); break;
      case 355: used = action355(lookahead); break;
      case 356: used = action356(lookahead); break;
      case 357: used = action357(lookahead); break;
      case 358: used = action358(lookahead); break;
      case 359: used = action359(lookahead); break;
      case 360: used = action360(lookahead); break;
      case 361: used = action361(lookahead); break;
      case 362: used = action362(lookahead); break;
      case 363: used = action363(lookahead); break;
      case 364: used = action364(lookahead); break;
      case 365: used = action365(lookahead); break;
      case 366: used = action366(lookahead); break;
      case 367: used = action367(lookahead); break;
      case 368: used = action368(lookahead); break;
      case 369: used = action369(lookahead); break;
      case 370: used = action370(lookahead); break;
      case 371: used = action371(lookahead); break;
      case 372: used = action372(lookahead); break;
      case 373: used = action373(lookahead); break;
      case 374: used = action374(lookahead); break;
      case 375: used = action375(lookahead); break;
      case 376: used = action376(lookahead); break;
      case 377: used = action377(lookahead); break;
      case 378: used = action378(lookahead); break;
      case 379: used = action379(lookahead); break;
      case 380: used = action380(lookahead); break;
      case 381: used = action381(lookahead); break;
      case 382: used = action382(lookahead); break;
      case 383: used = action383(lookahead); break;
      case 384: used = action384(lookahead); break;
      case 385: used = action385(lookahead); break;
      case 386: used = action386(lookahead); break;
      case 387: used = action387(lookahead); break;
      case 388: used = action388(lookahead); break;
      case 389: used = action389(lookahead); break;
      case 390: used = action390(lookahead); break;
      case 391: used = action391(lookahead); break;
      case 392: used = action392(lookahead); break;
      case 393: used = action393(lookahead); break;
      case 394: used = action394(lookahead); break;
      case 395: used = action395(lookahead); break;
      case 396: used = action396(lookahead); break;
      case 397: used = action397(lookahead); break;
      case 398: used = action398(lookahead); break;
      case 399: used = action399(lookahead); break;
      case 400: used = action400(lookahead); break;
      case 401: used = action401(lookahead); break;
      case 402: used = action402(lookahead); break;
      case 403: used = action403(lookahead); break;
      case 404: used = action404(lookahead); break;
      case 405: used = action405(lookahead); break;
      case 406: used = action406(lookahead); break;
      case 407: used = action407(lookahead); break;
      case 408: used = action408(lookahead); break;
      case 409: used = action409(lookahead); break;
      case 410: used = action410(lookahead); break;
      case 411: used = action411(lookahead); break;
      case 412: used = action412(lookahead); break;
      case 413: used = action413(lookahead); break;
      case 414: used = action414(lookahead); break;
      case 415: used = action415(lookahead); break;
      case 416: used = action416(lookahead); break;
      case 417: used = action417(lookahead); break;
      case 418: used = action418(lookahead); break;
      case 419: used = action419(lookahead); break;
      case 420: used = action420(lookahead); break;
      case 421: used = action421(lookahead); break;
      case 422: used = action422(lookahead); break;
      case 423: used = action423(lookahead); break;
      case 424: used = action424(lookahead); break;
      case 425: used = action425(lookahead); break;
      case 426: used = action426(lookahead); break;
      case 427: used = action427(lookahead); break;
      case 428: used = action428(lookahead); break;
      case 429: used = action429(lookahead); break;
      case 430: used = action430(lookahead); break;
      case 431: used = action431(lookahead); break;
      case 432: used = action432(lookahead); break;
      case 433: used = action433(lookahead); break;
      case 434: used = action434(lookahead); break;
      case 435: used = action435(lookahead); break;
      case 436: used = action436(lookahead); break;
      case 437: used = action437(lookahead); break;
      case 438: used = action438(lookahead); break;
      case 439: used = action439(lookahead); break;
      case 440: used = action440(lookahead); break;
      case 441: used = action441(lookahead); break;
      case 442: used = action442(lookahead); break;
      case 443: used = action443(lookahead); break;
      case 444: used = action444(lookahead); break;
      case 445: used = action445(lookahead); break;
      case 446: used = action446(lookahead); break;
      case 447: used = action447(lookahead); break;
      case 448: used = action448(lookahead); break;
      case 449: used = action449(lookahead); break;
      case 450: used = action450(lookahead); break;
      case 451: used = action451(lookahead); break;
      case 452: used = action452(lookahead); break;
      case 453: used = action453(lookahead); break;
      case 454: used = action454(lookahead); break;
      case 455: used = action455(lookahead); break;
      case 456: used = action456(lookahead); break;
      case 457: used = action457(lookahead); break;
      case 458: used = action458(lookahead); break;
      case 459: used = action459(lookahead); break;
      case 460: used = action460(lookahead); break;
      case 461: used = action461(lookahead); break;
      case 462: used = action462(lookahead); break;
      case 463: used = action463(lookahead); break;
      case 464: used = action464(lookahead); break;
      case 465: used = action465(lookahead); break;
      case 466: used = action466(lookahead); break;
      case 467: used = action467(lookahead); break;
      case 468: used = action468(lookahead); break;
      case 469: used = action469(lookahead); break;
      case 470: used = action470(lookahead); break;
      case 471: used = action471(lookahead); break;
      case 472: used = action472(lookahead); break;
      case 473: used = action473(lookahead); break;
      case 474: used = action474(lookahead); break;
      case 475: used = action475(lookahead); break;
      case 476: used = action476(lookahead); break;
      case 477: used = action477(lookahead); break;
      case 478: used = action478(lookahead); break;
      case 479: used = action479(lookahead); break;
      case 480: used = action480(lookahead); break;
      case 481: used = action481(lookahead); break;
      case 482: used = action482(lookahead); break;
      case 483: used = action483(lookahead); break;
      case 484: used = action484(lookahead); break;
      case 485: used = action485(lookahead); break;
      case 486: used = action486(lookahead); break;
      case 487: used = action487(lookahead); break;
      case 488: used = action488(lookahead); break;
      case 489: used = action489(lookahead); break;
      case 490: used = action490(lookahead); break;
      case 491: used = action491(lookahead); break;
      case 492: used = action492(lookahead); break;
      case 493: used = action493(lookahead); break;
      case 494: used = action494(lookahead); break;
      case 495: used = action495(lookahead); break;
      case 496: used = action496(lookahead); break;
      case 497: used = action497(lookahead); break;
      case 498: used = action498(lookahead); break;
      case 499: used = action499(lookahead); break;
      case 500: used = action500(lookahead); break;
      case 501: used = action501(lookahead); break;
      case 502: used = action502(lookahead); break;
      case 503: used = action503(lookahead); break;
      case 504: used = action504(lookahead); break;
      case 505: used = action505(lookahead); break;
      case 506: used = action506(lookahead); break;
      case 507: used = action507(lookahead); break;
      case 508: used = action508(lookahead); break;
      case 509: used = action509(lookahead); break;
      case 510: used = action510(lookahead); break;
      case 511: used = action511(lookahead); break;
      case 512: used = action512(lookahead); break;
      case 513: used = action513(lookahead); break;
      case 514: used = action514(lookahead); break;
      case 515: used = action515(lookahead); break;
      case 516: used = action516(lookahead); break;
      case 517: used = action517(lookahead); break;
      case 518: used = action518(lookahead); break;
      case 519: used = action519(lookahead); break;
      case 520: used = action520(lookahead); break;
      case 521: used = action521(lookahead); break;
      case 522: used = action522(lookahead); break;
      case 523: used = action523(lookahead); break;
      case 524: used = action524(lookahead); break;
      case 525: used = action525(lookahead); break;
      case 526: used = action526(lookahead); break;
      case 527: used = action527(lookahead); break;
      case 528: used = action528(lookahead); break;
      case 529: used = action529(lookahead); break;
      case 530: used = action530(lookahead); break;
      case 531: used = action531(lookahead); break;
      case 532: used = action532(lookahead); break;
      case 533: used = action533(lookahead); break;
      case 534: used = action534(lookahead); break;
      case 535: used = action535(lookahead); break;
      case 536: used = action536(lookahead); break;
      case 537: used = action537(lookahead); break;
      case 538: used = action538(lookahead); break;
      case 539: used = action539(lookahead); break;
      case 540: used = action540(lookahead); break;
      case 541: used = action541(lookahead); break;
      case 542: used = action542(lookahead); break;
      case 543: used = action543(lookahead); break;
      case 544: used = action544(lookahead); break;
      case 545: used = action545(lookahead); break;
      case 546: used = action546(lookahead); break;
      case 547: used = action547(lookahead); break;
      case 548: used = action548(lookahead); break;
      case 549: used = action549(lookahead); break;
      case 550: used = action550(lookahead); break;
      case 551: used = action551(lookahead); break;
      case 552: used = action552(lookahead); break;
      case 553: used = action553(lookahead); break;
      case 554: used = action554(lookahead); break;
      case 555: used = action555(lookahead); break;
      case 556: used = action556(lookahead); break;
      case 557: used = action557(lookahead); break;
      case 558: used = action558(lookahead); break;
      case 559: used = action559(lookahead); break;
      case 560: used = action560(lookahead); break;
      case 561: used = action561(lookahead); break;
      case 562: used = action562(lookahead); break;
      case 563: used = action563(lookahead); break;
      case 564: used = action564(lookahead); break;
      case 565: used = action565(lookahead); break;
      case 566: used = action566(lookahead); break;
      case 567: used = action567(lookahead); break;
      case 568: used = action568(lookahead); break;
      case 569: used = action569(lookahead); break;
      case 570: used = action570(lookahead); break;
      case 571: used = action571(lookahead); break;
      case 572: used = action572(lookahead); break;
      case 573: used = action573(lookahead); break;
      case 574: used = action574(lookahead); break;
      case 575: used = action575(lookahead); break;
      case 576: used = action576(lookahead); break;
      case 577: used = action577(lookahead); break;
      case 578: used = action578(lookahead); break;
      case 579: used = action579(lookahead); break;
      case 580: used = action580(lookahead); break;
      case 581: used = action581(lookahead); break;
      case 582: used = action582(lookahead); break;
      case 583: used = action583(lookahead); break;
      case 584: used = action584(lookahead); break;
      case 585: used = action585(lookahead); break;
      case 586: used = action586(lookahead); break;
      case 587: used = action587(lookahead); break;
      case 588: used = action588(lookahead); break;
      case 589: used = action589(lookahead); break;
      case 590: used = action590(lookahead); break;
      case 591: used = action591(lookahead); break;
      case 592: used = action592(lookahead); break;
      case 593: used = action593(lookahead); break;
      case 594: used = action594(lookahead); break;
      case 595: used = action595(lookahead); break;
      case 596: used = action596(lookahead); break;
      case 597: used = action597(lookahead); break;
      case 598: used = action598(lookahead); break;
      case 599: used = action599(lookahead); break;
      case 600: used = action600(lookahead); break;
      case 601: used = action601(lookahead); break;
      case 602: used = action602(lookahead); break;
      case 603: used = action603(lookahead); break;
      case 604: used = action604(lookahead); break;
      case 605: used = action605(lookahead); break;
      case 606: used = action606(lookahead); break;
      case 607: used = action607(lookahead); break;
      case 608: used = action608(lookahead); break;
      case 609: used = action609(lookahead); break;
      case 610: used = action610(lookahead); break;
      case 611: used = action611(lookahead); break;
      case 612: used = action612(lookahead); break;
      case 613: used = action613(lookahead); break;
      case 614: used = action614(lookahead); break;
      case 615: used = action615(lookahead); break;
      case 616: used = action616(lookahead); break;
      case 617: used = action617(lookahead); break;
      case 618: used = action618(lookahead); break;
      case 619: used = action619(lookahead); break;
      case 620: used = action620(lookahead); break;
      case 621: used = action621(lookahead); break;
      case 622: used = action622(lookahead); break;
      case 623: used = action623(lookahead); break;
      case 624: used = action624(lookahead); break;
      case 625: used = action625(lookahead); break;
      case 626: used = action626(lookahead); break;
      case 627: used = action627(lookahead); break;
      case 628: used = action628(lookahead); break;
      case 629: used = action629(lookahead); break;
      case 630: used = action630(lookahead); break;
      case 631: used = action631(lookahead); break;
      case 632: used = action632(lookahead); break;
      case 633: used = action633(lookahead); break;
      case 634: used = action634(lookahead); break;
      case 635: used = action635(lookahead); break;
      case 636: used = action636(lookahead); break;
      case 637: used = action637(lookahead); break;
      case 638: used = action638(lookahead); break;
      case 639: used = action639(lookahead); break;
      case 640: used = action640(lookahead); break;
      case 641: used = action641(lookahead); break;
      case 642: used = action642(lookahead); break;
      case 643: used = action643(lookahead); break;
      case 644: used = action644(lookahead); break;
      case 645: used = action645(lookahead); break;
      case 646: used = action646(lookahead); break;
      case 647: used = action647(lookahead); break;
      case 648: used = action648(lookahead); break;
      case 649: used = action649(lookahead); break;
      case 650: used = action650(lookahead); break;
      case 651: used = action651(lookahead); break;
      case 652: used = action652(lookahead); break;
      case 653: used = action653(lookahead); break;
      case 654: used = action654(lookahead); break;
      case 655: used = action655(lookahead); break;
      case 656: used = action656(lookahead); break;
      case 657: used = action657(lookahead); break;
      case 658: used = action658(lookahead); break;
      case 659: used = action659(lookahead); break;
      case 660: used = action660(lookahead); break;
      case 661: used = action661(lookahead); break;
      case 662: used = action662(lookahead); break;
      case 663: used = action663(lookahead); break;
      case 664: used = action664(lookahead); break;
      case 665: used = action665(lookahead); break;
      case 666: used = action666(lookahead); break;
      case 667: used = action667(lookahead); break;
      case 668: used = action668(lookahead); break;
      case 669: used = action669(lookahead); break;
      case 670: used = action670(lookahead); break;
      case 671: used = action671(lookahead); break;
      case 672: used = action672(lookahead); break;
      case 673: used = action673(lookahead); break;
      case 674: used = action674(lookahead); break;
      case 675: used = action675(lookahead); break;
      case 676: used = action676(lookahead); break;
      case 677: used = action677(lookahead); break;
      case 678: used = action678(lookahead); break;
      case 679: used = action679(lookahead); break;
      case 680: used = action680(lookahead); break;
      case 681: used = action681(lookahead); break;
      case 682: used = action682(lookahead); break;
      case 683: used = action683(lookahead); break;
      case 684: used = action684(lookahead); break;
      case 685: used = action685(lookahead); break;
      case 686: used = action686(lookahead); break;
      case 687: used = action687(lookahead); break;
      case 688: used = action688(lookahead); break;
      case 689: used = action689(lookahead); break;
      case 690: used = action690(lookahead); break;
      case 691: used = action691(lookahead); break;
      case 692: used = action692(lookahead); break;
      case 693: used = action693(lookahead); break;
      case 694: used = action694(lookahead); break;
      case 695: used = action695(lookahead); break;
      case 696: used = action696(lookahead); break;
      case 697: used = action697(lookahead); break;
      case 698: used = action698(lookahead); break;
      case 699: used = action699(lookahead); break;
      case 700: used = action700(lookahead); break;
      case 701: used = action701(lookahead); break;
      case 702: used = action702(lookahead); break;
      case 703: used = action703(lookahead); break;
      case 704: used = action704(lookahead); break;
      case 705: used = action705(lookahead); break;
      case 706: used = action706(lookahead); break;
      case 707: used = action707(lookahead); break;
      case 708: used = action708(lookahead); break;
      case 709: used = action709(lookahead); break;
      case 710: used = action710(lookahead); break;
      case 711: used = action711(lookahead); break;
      case 712: used = action712(lookahead); break;
      case 713: used = action713(lookahead); break;
      case 714: used = action714(lookahead); break;
      case 715: used = action715(lookahead); break;
      case 716: used = action716(lookahead); break;
      case 717: used = action717(lookahead); break;
      case 718: used = action718(lookahead); break;
      case 719: used = action719(lookahead); break;
      case 720: used = action720(lookahead); break;
      case 721: used = action721(lookahead); break;
      case 722: used = action722(lookahead); break;
      case 723: used = action723(lookahead); break;
      case 724: used = action724(lookahead); break;
      case 725: used = action725(lookahead); break;
      case 726: used = action726(lookahead); break;
      case 727: used = action727(lookahead); break;
      case 728: used = action728(lookahead); break;
      case 729: used = action729(lookahead); break;
      case 730: used = action730(lookahead); break;
      case 731: used = action731(lookahead); break;
      case 732: used = action732(lookahead); break;
      case 733: used = action733(lookahead); break;
      case 734: used = action734(lookahead); break;
      case 735: used = action735(lookahead); break;
      case 736: used = action736(lookahead); break;
      case 737: used = action737(lookahead); break;
      case 738: used = action738(lookahead); break;
      case 739: used = action739(lookahead); break;
      case 740: used = action740(lookahead); break;
      case 741: used = action741(lookahead); break;
      case 742: used = action742(lookahead); break;
      case 743: used = action743(lookahead); break;
      case 744: used = action744(lookahead); break;
      case 745: used = action745(lookahead); break;
      case 746: used = action746(lookahead); break;
      case 747: used = action747(lookahead); break;
      case 748: used = action748(lookahead); break;
      case 749: used = action749(lookahead); break;
      case 750: used = action750(lookahead); break;
      case 751: used = action751(lookahead); break;
      case 752: used = action752(lookahead); break;
      case 753: used = action753(lookahead); break;
      case 754: used = action754(lookahead); break;
      case 755: used = action755(lookahead); break;
      case 756: used = action756(lookahead); break;
      case 757: used = action757(lookahead); break;
      case 758: used = action758(lookahead); break;
      case 759: used = action759(lookahead); break;
      case 760: used = action760(lookahead); break;
      case 761: used = action761(lookahead); break;
      case 762: used = action762(lookahead); break;
      case 763: used = action763(lookahead); break;
      case 764: used = action764(lookahead); break;
      case 765: used = action765(lookahead); break;
      case 766: used = action766(lookahead); break;
      case 767: used = action767(lookahead); break;
      case 768: used = action768(lookahead); break;
      case 769: used = action769(lookahead); break;
      case 770: used = action770(lookahead); break;
      case 771: used = action771(lookahead); break;
      case 772: used = action772(lookahead); break;
      case 773: used = action773(lookahead); break;
      case 774: used = action774(lookahead); break;
      case 775: used = action775(lookahead); break;
      case 776: used = action776(lookahead); break;
      case 777: used = action777(lookahead); break;
      case 778: used = action778(lookahead); break;
      case 779: used = action779(lookahead); break;
      case 780: used = action780(lookahead); break;
      case 781: used = action781(lookahead); break;
      case 782: used = action782(lookahead); break;
      case 783: used = action783(lookahead); break;
      case 784: used = action784(lookahead); break;
      case 785: used = action785(lookahead); break;
      case 786: used = action786(lookahead); break;
      case 787: used = action787(lookahead); break;
      case 788: used = action788(lookahead); break;
      case 789: used = action789(lookahead); break;
      case 790: used = action790(lookahead); break;
      case 791: used = action791(lookahead); break;
      case 792: used = action792(lookahead); break;
      case 793: used = action793(lookahead); break;
      case 794: used = action794(lookahead); break;
      case 795: used = action795(lookahead); break;
      case 796: used = action796(lookahead); break;
      case 797: used = action797(lookahead); break;
      case 798: used = action798(lookahead); break;
      case 799: used = action799(lookahead); break;
      case 800: used = action800(lookahead); break;
      case 801: used = action801(lookahead); break;
      case 802: used = action802(lookahead); break;
      case 803: used = action803(lookahead); break;
      case 804: used = action804(lookahead); break;
      case 805: used = action805(lookahead); break;
      case 806: used = action806(lookahead); break;
      case 807: used = action807(lookahead); break;
      case 808: used = action808(lookahead); break;
      case 809: used = action809(lookahead); break;
      case 810: used = action810(lookahead); break;
      case 811: used = action811(lookahead); break;
      case 812: used = action812(lookahead); break;
      case 813: used = action813(lookahead); break;
      case 814: used = action814(lookahead); break;
      case 815: used = action815(lookahead); break;
      case 816: used = action816(lookahead); break;
      case 817: used = action817(lookahead); break;
      case 818: used = action818(lookahead); break;
      case 819: used = action819(lookahead); break;
      case 820: used = action820(lookahead); break;
      case 821: used = action821(lookahead); break;
      case 822: used = action822(lookahead); break;
      case 823: used = action823(lookahead); break;
      case 824: used = action824(lookahead); break;
      case 825: used = action825(lookahead); break;
      case 826: used = action826(lookahead); break;
      case 827: used = action827(lookahead); break;
      case 828: used = action828(lookahead); break;
      case 829: used = action829(lookahead); break;
      case 830: used = action830(lookahead); break;
      case 831: used = action831(lookahead); break;
      case 832: used = action832(lookahead); break;
      case 833: used = action833(lookahead); break;
      case 834: used = action834(lookahead); break;
      case 835: used = action835(lookahead); break;
      case 836: used = action836(lookahead); break;
      case 837: used = action837(lookahead); break;
      case 838: used = action838(lookahead); break;
      case 839: used = action839(lookahead); break;
      case 840: used = action840(lookahead); break;
      case 841: used = action841(lookahead); break;
      case 842: used = action842(lookahead); break;
      case 843: used = action843(lookahead); break;
      case 844: used = action844(lookahead); break;
      case 845: used = action845(lookahead); break;
      case 846: used = action846(lookahead); break;
      case 847: used = action847(lookahead); break;
      case 848: used = action848(lookahead); break;
      case 849: used = action849(lookahead); break;
      case 850: used = action850(lookahead); break;
      case 851: used = action851(lookahead); break;
      case 852: used = action852(lookahead); break;
      case 853: used = action853(lookahead); break;
      case 854: used = action854(lookahead); break;
      case 855: used = action855(lookahead); break;
      case 856: used = action856(lookahead); break;
      case 857: used = action857(lookahead); break;
      case 858: used = action858(lookahead); break;
      case 859: used = action859(lookahead); break;
      case 860: used = action860(lookahead); break;
      case 861: used = action861(lookahead); break;
      case 862: used = action862(lookahead); break;
      case 863: used = action863(lookahead); break;
      case 864: used = action864(lookahead); break;
      case 865: used = action865(lookahead); break;
      case 866: used = action866(lookahead); break;
      case 867: used = action867(lookahead); break;
      case 868: used = action868(lookahead); break;
      case 869: used = action869(lookahead); break;
      case 870: used = action870(lookahead); break;
      case 871: used = action871(lookahead); break;
      case 872: used = action872(lookahead); break;
      case 873: used = action873(lookahead); break;
      case 874: used = action874(lookahead); break;
      case 875: used = action875(lookahead); break;
      case 876: used = action876(lookahead); break;
      case 877: used = action877(lookahead); break;
      case 878: used = action878(lookahead); break;
      case 879: used = action879(lookahead); break;
      case 880: used = action880(lookahead); break;
      case 881: used = action881(lookahead); break;
      case 882: used = action882(lookahead); break;
      case 883: used = action883(lookahead); break;
      case 884: used = action884(lookahead); break;
      case 885: used = action885(lookahead); break;
      case 886: used = action886(lookahead); break;
      case 887: used = action887(lookahead); break;
      case 888: used = action888(lookahead); break;
      case 889: used = action889(lookahead); break;
      case 890: used = action890(lookahead); break;
      case 891: used = action891(lookahead); break;
      case 892: used = action892(lookahead); break;
      case 893: used = action893(lookahead); break;
      case 894: used = action894(lookahead); break;
      case 895: used = action895(lookahead); break;
      case 896: used = action896(lookahead); break;
      case 897: used = action897(lookahead); break;
      case 898: used = action898(lookahead); break;
      case 899: used = action899(lookahead); break;
      case 900: used = action900(lookahead); break;
      case 901: used = action901(lookahead); break;
      case 902: used = action902(lookahead); break;
      case 903: used = action903(lookahead); break;
      case 904: used = action904(lookahead); break;
      case 905: used = action905(lookahead); break;
      case 906: used = action906(lookahead); break;
      case 907: used = action907(lookahead); break;
      case 908: used = action908(lookahead); break;
      case 909: used = action909(lookahead); break;
      case 910: used = action910(lookahead); break;
      case 911: used = action911(lookahead); break;
      case 912: used = action912(lookahead); break;
      case 913: used = action913(lookahead); break;
      case 914: used = action914(lookahead); break;
      case 915: used = action915(lookahead); break;
      case 916: used = action916(lookahead); break;
      case 917: used = action917(lookahead); break;
      case 918: used = action918(lookahead); break;
      case 919: used = action919(lookahead); break;
      case 920: used = action920(lookahead); break;
      case 921: used = action921(lookahead); break;
      case 922: used = action922(lookahead); break;
      case 923: used = action923(lookahead); break;
      case 924: used = action924(lookahead); break;
      case 925: used = action925(lookahead); break;
      case 926: used = action926(lookahead); break;
      case 927: used = action927(lookahead); break;
      case 928: used = action928(lookahead); break;
      case 929: used = action929(lookahead); break;
      case 930: used = action930(lookahead); break;
      case 931: used = action931(lookahead); break;
      case 932: used = action932(lookahead); break;
      case 933: used = action933(lookahead); break;
      case 934: used = action934(lookahead); break;
      case 935: used = action935(lookahead); break;
      case 936: used = action936(lookahead); break;
      case 937: used = action937(lookahead); break;
      case 938: used = action938(lookahead); break;
      case 939: used = action939(lookahead); break;
      case 940: used = action940(lookahead); break;
      case 941: used = action941(lookahead); break;
      case 942: used = action942(lookahead); break;
      case 943: used = action943(lookahead); break;
      case 944: used = action944(lookahead); break;
      case 945: used = action945(lookahead); break;
      case 946: used = action946(lookahead); break;
      case 947: used = action947(lookahead); break;
      case 948: used = action948(lookahead); break;
      case 949: used = action949(lookahead); break;
      case 950: used = action950(lookahead); break;
      case 951: used = action951(lookahead); break;
      case 952: used = action952(lookahead); break;
      case 953: used = action953(lookahead); break;
      case 954: used = action954(lookahead); break;
      case 955: used = action955(lookahead); break;
      case 956: used = action956(lookahead); break;
      case 957: used = action957(lookahead); break;
      case 958: used = action958(lookahead); break;
      case 959: used = action959(lookahead); break;
      case 960: used = action960(lookahead); break;
      case 961: used = action961(lookahead); break;
      case 962: used = action962(lookahead); break;
      case 963: used = action963(lookahead); break;
      case 964: used = action964(lookahead); break;
      case 965: used = action965(lookahead); break;
      case 966: used = action966(lookahead); break;
      case 967: used = action967(lookahead); break;
      case 968: used = action968(lookahead); break;
      case 969: used = action969(lookahead); break;
      case 970: used = action970(lookahead); break;
      case 971: used = action971(lookahead); break;
      case 972: used = action972(lookahead); break;
      case 973: used = action973(lookahead); break;
      case 974: used = action974(lookahead); break;
      case 975: used = action975(lookahead); break;
      case 976: used = action976(lookahead); break;
      case 977: used = action977(lookahead); break;
      case 978: used = action978(lookahead); break;
      case 979: used = action979(lookahead); break;
      case 980: used = action980(lookahead); break;
      case 981: used = action981(lookahead); break;
      case 982: used = action982(lookahead); break;
      case 983: used = action983(lookahead); break;
      case 984: used = action984(lookahead); break;
      case 985: used = action985(lookahead); break;
      case 986: used = action986(lookahead); break;
      case 987: used = action987(lookahead); break;
      case 988: used = action988(lookahead); break;
      case 989: used = action989(lookahead); break;
      case 990: used = action990(lookahead); break;
      case 991: used = action991(lookahead); break;
      case 992: used = action992(lookahead); break;
      case 993: used = action993(lookahead); break;
      case 994: used = action994(lookahead); break;
      case 995: used = action995(lookahead); break;
      case 996: used = action996(lookahead); break;
      case 997: used = action997(lookahead); break;
      case 998: used = action998(lookahead); break;
      case 999: used = action999(lookahead); break;
      case 1000: used = action1000(lookahead); break;
      case 1001: used = action1001(lookahead); break;
      default: throw new IllegalStateException();
      }
      if (accepted)
      {
        return tokenStack.removeFirst();
      }
      if (used)
      {
        lookahead = tokenizer.next();
      }
    }
  }

  private final int findGotoState(int state, ParseType tokenType)
  {
    switch (state)
    {
    case 0: return goto0(tokenType);
    case 1: return goto1(tokenType);
    case 3: return goto3(tokenType);
    case 6: return goto6(tokenType);
    case 21: return goto21(tokenType);
    case 42: return goto42(tokenType);
    case 43: return goto43(tokenType);
    case 44: return goto44(tokenType);
    case 46: return goto46(tokenType);
    case 47: return goto47(tokenType);
    case 56: return goto56(tokenType);
    case 57: return goto57(tokenType);
    case 59: return goto59(tokenType);
    case 60: return goto60(tokenType);
    case 61: return goto61(tokenType);
    case 62: return goto62(tokenType);
    case 64: return goto64(tokenType);
    case 65: return goto65(tokenType);
    case 69: return goto69(tokenType);
    case 70: return goto70(tokenType);
    case 72: return goto72(tokenType);
    case 73: return goto73(tokenType);
    case 76: return goto76(tokenType);
    case 80: return goto80(tokenType);
    case 84: return goto84(tokenType);
    case 88: return goto88(tokenType);
    case 107: return goto107(tokenType);
    case 108: return goto108(tokenType);
    case 110: return goto110(tokenType);
    case 111: return goto111(tokenType);
    case 114: return goto114(tokenType);
    case 115: return goto115(tokenType);
    case 116: return goto116(tokenType);
    case 118: return goto118(tokenType);
    case 128: return goto128(tokenType);
    case 137: return goto137(tokenType);
    case 140: return goto140(tokenType);
    case 145: return goto145(tokenType);
    case 158: return goto158(tokenType);
    case 159: return goto159(tokenType);
    case 160: return goto160(tokenType);
    case 166: return goto166(tokenType);
    case 168: return goto168(tokenType);
    case 169: return goto169(tokenType);
    case 170: return goto170(tokenType);
    case 171: return goto171(tokenType);
    case 182: return goto182(tokenType);
    case 184: return goto184(tokenType);
    case 185: return goto185(tokenType);
    case 186: return goto186(tokenType);
    case 187: return goto187(tokenType);
    case 192: return goto192(tokenType);
    case 193: return goto193(tokenType);
    case 196: return goto196(tokenType);
    case 197: return goto197(tokenType);
    case 199: return goto199(tokenType);
    case 200: return goto200(tokenType);
    case 202: return goto202(tokenType);
    case 205: return goto205(tokenType);
    case 207: return goto207(tokenType);
    case 208: return goto208(tokenType);
    case 209: return goto209(tokenType);
    case 214: return goto214(tokenType);
    case 215: return goto215(tokenType);
    case 216: return goto216(tokenType);
    case 226: return goto226(tokenType);
    case 228: return goto228(tokenType);
    case 230: return goto230(tokenType);
    case 233: return goto233(tokenType);
    case 234: return goto234(tokenType);
    case 235: return goto235(tokenType);
    case 240: return goto240(tokenType);
    case 247: return goto247(tokenType);
    case 248: return goto248(tokenType);
    case 249: return goto249(tokenType);
    case 253: return goto253(tokenType);
    case 258: return goto258(tokenType);
    case 259: return goto259(tokenType);
    case 260: return goto260(tokenType);
    case 262: return goto262(tokenType);
    case 263: return goto263(tokenType);
    case 264: return goto264(tokenType);
    case 265: return goto265(tokenType);
    case 267: return goto267(tokenType);
    case 269: return goto269(tokenType);
    case 278: return goto278(tokenType);
    case 279: return goto279(tokenType);
    case 280: return goto280(tokenType);
    case 282: return goto282(tokenType);
    case 299: return goto299(tokenType);
    case 300: return goto300(tokenType);
    case 301: return goto301(tokenType);
    case 302: return goto302(tokenType);
    case 303: return goto303(tokenType);
    case 304: return goto304(tokenType);
    case 307: return goto307(tokenType);
    case 310: return goto310(tokenType);
    case 311: return goto311(tokenType);
    case 312: return goto312(tokenType);
    case 313: return goto313(tokenType);
    case 315: return goto315(tokenType);
    case 317: return goto317(tokenType);
    case 318: return goto318(tokenType);
    case 319: return goto319(tokenType);
    case 321: return goto321(tokenType);
    case 322: return goto322(tokenType);
    case 323: return goto323(tokenType);
    case 325: return goto325(tokenType);
    case 326: return goto326(tokenType);
    case 327: return goto327(tokenType);
    case 338: return goto338(tokenType);
    case 342: return goto342(tokenType);
    case 352: return goto352(tokenType);
    case 353: return goto353(tokenType);
    case 354: return goto354(tokenType);
    case 355: return goto355(tokenType);
    case 357: return goto357(tokenType);
    case 358: return goto358(tokenType);
    case 359: return goto359(tokenType);
    case 368: return goto368(tokenType);
    case 374: return goto374(tokenType);
    case 380: return goto380(tokenType);
    case 383: return goto383(tokenType);
    case 384: return goto384(tokenType);
    case 385: return goto385(tokenType);
    case 391: return goto391(tokenType);
    case 396: return goto396(tokenType);
    case 397: return goto397(tokenType);
    case 398: return goto398(tokenType);
    case 401: return goto401(tokenType);
    case 402: return goto402(tokenType);
    case 404: return goto404(tokenType);
    case 407: return goto407(tokenType);
    case 408: return goto408(tokenType);
    case 409: return goto409(tokenType);
    case 410: return goto410(tokenType);
    case 411: return goto411(tokenType);
    case 412: return goto412(tokenType);
    case 413: return goto413(tokenType);
    case 414: return goto414(tokenType);
    case 415: return goto415(tokenType);
    case 416: return goto416(tokenType);
    case 417: return goto417(tokenType);
    case 418: return goto418(tokenType);
    case 419: return goto419(tokenType);
    case 420: return goto420(tokenType);
    case 423: return goto423(tokenType);
    case 425: return goto425(tokenType);
    case 426: return goto426(tokenType);
    case 427: return goto427(tokenType);
    case 428: return goto428(tokenType);
    case 429: return goto429(tokenType);
    case 430: return goto430(tokenType);
    case 435: return goto435(tokenType);
    case 436: return goto436(tokenType);
    case 437: return goto437(tokenType);
    case 453: return goto453(tokenType);
    case 454: return goto454(tokenType);
    case 455: return goto455(tokenType);
    case 456: return goto456(tokenType);
    case 458: return goto458(tokenType);
    case 460: return goto460(tokenType);
    case 462: return goto462(tokenType);
    case 464: return goto464(tokenType);
    case 473: return goto473(tokenType);
    case 474: return goto474(tokenType);
    case 475: return goto475(tokenType);
    case 478: return goto478(tokenType);
    case 479: return goto479(tokenType);
    case 484: return goto484(tokenType);
    case 485: return goto485(tokenType);
    case 488: return goto488(tokenType);
    case 490: return goto490(tokenType);
    case 492: return goto492(tokenType);
    case 494: return goto494(tokenType);
    case 499: return goto499(tokenType);
    case 500: return goto500(tokenType);
    case 501: return goto501(tokenType);
    case 502: return goto502(tokenType);
    case 503: return goto503(tokenType);
    case 504: return goto504(tokenType);
    case 505: return goto505(tokenType);
    case 506: return goto506(tokenType);
    case 507: return goto507(tokenType);
    case 508: return goto508(tokenType);
    case 509: return goto509(tokenType);
    case 510: return goto510(tokenType);
    case 511: return goto511(tokenType);
    case 512: return goto512(tokenType);
    case 513: return goto513(tokenType);
    case 514: return goto514(tokenType);
    case 516: return goto516(tokenType);
    case 517: return goto517(tokenType);
    case 518: return goto518(tokenType);
    case 519: return goto519(tokenType);
    case 520: return goto520(tokenType);
    case 521: return goto521(tokenType);
    case 522: return goto522(tokenType);
    case 523: return goto523(tokenType);
    case 524: return goto524(tokenType);
    case 525: return goto525(tokenType);
    case 526: return goto526(tokenType);
    case 528: return goto528(tokenType);
    case 529: return goto529(tokenType);
    case 530: return goto530(tokenType);
    case 531: return goto531(tokenType);
    case 532: return goto532(tokenType);
    case 533: return goto533(tokenType);
    case 534: return goto534(tokenType);
    case 535: return goto535(tokenType);
    case 536: return goto536(tokenType);
    case 537: return goto537(tokenType);
    case 538: return goto538(tokenType);
    case 539: return goto539(tokenType);
    case 540: return goto540(tokenType);
    case 542: return goto542(tokenType);
    case 543: return goto543(tokenType);
    case 544: return goto544(tokenType);
    case 545: return goto545(tokenType);
    case 546: return goto546(tokenType);
    case 547: return goto547(tokenType);
    case 548: return goto548(tokenType);
    case 549: return goto549(tokenType);
    case 550: return goto550(tokenType);
    case 551: return goto551(tokenType);
    case 552: return goto552(tokenType);
    case 553: return goto553(tokenType);
    case 554: return goto554(tokenType);
    case 555: return goto555(tokenType);
    case 559: return goto559(tokenType);
    case 565: return goto565(tokenType);
    case 577: return goto577(tokenType);
    case 578: return goto578(tokenType);
    case 579: return goto579(tokenType);
    case 582: return goto582(tokenType);
    case 583: return goto583(tokenType);
    case 595: return goto595(tokenType);
    case 600: return goto600(tokenType);
    case 602: return goto602(tokenType);
    case 608: return goto608(tokenType);
    case 615: return goto615(tokenType);
    case 629: return goto629(tokenType);
    case 631: return goto631(tokenType);
    case 632: return goto632(tokenType);
    case 633: return goto633(tokenType);
    case 634: return goto634(tokenType);
    case 636: return goto636(tokenType);
    case 643: return goto643(tokenType);
    case 644: return goto644(tokenType);
    case 645: return goto645(tokenType);
    case 649: return goto649(tokenType);
    case 661: return goto661(tokenType);
    case 662: return goto662(tokenType);
    case 666: return goto666(tokenType);
    case 668: return goto668(tokenType);
    case 669: return goto669(tokenType);
    case 671: return goto671(tokenType);
    case 679: return goto679(tokenType);
    case 684: return goto684(tokenType);
    case 686: return goto686(tokenType);
    case 688: return goto688(tokenType);
    case 690: return goto690(tokenType);
    case 691: return goto691(tokenType);
    case 695: return goto695(tokenType);
    case 697: return goto697(tokenType);
    case 700: return goto700(tokenType);
    case 703: return goto703(tokenType);
    case 705: return goto705(tokenType);
    case 709: return goto709(tokenType);
    case 712: return goto712(tokenType);
    case 713: return goto713(tokenType);
    case 715: return goto715(tokenType);
    case 717: return goto717(tokenType);
    case 720: return goto720(tokenType);
    case 721: return goto721(tokenType);
    case 723: return goto723(tokenType);
    case 725: return goto725(tokenType);
    case 727: return goto727(tokenType);
    case 729: return goto729(tokenType);
    case 733: return goto733(tokenType);
    case 751: return goto751(tokenType);
    case 753: return goto753(tokenType);
    case 761: return goto761(tokenType);
    case 763: return goto763(tokenType);
    case 788: return goto788(tokenType);
    case 789: return goto789(tokenType);
    case 792: return goto792(tokenType);
    case 793: return goto793(tokenType);
    case 794: return goto794(tokenType);
    case 796: return goto796(tokenType);
    case 797: return goto797(tokenType);
    case 800: return goto800(tokenType);
    case 803: return goto803(tokenType);
    case 805: return goto805(tokenType);
    case 807: return goto807(tokenType);
    case 818: return goto818(tokenType);
    case 819: return goto819(tokenType);
    case 821: return goto821(tokenType);
    case 822: return goto822(tokenType);
    case 827: return goto827(tokenType);
    case 829: return goto829(tokenType);
    case 833: return goto833(tokenType);
    case 837: return goto837(tokenType);
    case 838: return goto838(tokenType);
    case 839: return goto839(tokenType);
    case 845: return goto845(tokenType);
    case 849: return goto849(tokenType);
    case 852: return goto852(tokenType);
    case 853: return goto853(tokenType);
    case 856: return goto856(tokenType);
    case 857: return goto857(tokenType);
    case 858: return goto858(tokenType);
    case 860: return goto860(tokenType);
    case 861: return goto861(tokenType);
    case 863: return goto863(tokenType);
    case 864: return goto864(tokenType);
    case 867: return goto867(tokenType);
    case 868: return goto868(tokenType);
    case 873: return goto873(tokenType);
    case 881: return goto881(tokenType);
    case 882: return goto882(tokenType);
    case 884: return goto884(tokenType);
    case 891: return goto891(tokenType);
    case 894: return goto894(tokenType);
    case 934: return goto934(tokenType);
    case 935: return goto935(tokenType);
    case 937: return goto937(tokenType);
    case 938: return goto938(tokenType);
    case 939: return goto939(tokenType);
    case 940: return goto940(tokenType);
    case 943: return goto943(tokenType);
    case 949: return goto949(tokenType);
    case 950: return goto950(tokenType);
    case 951: return goto951(tokenType);
    case 952: return goto952(tokenType);
    case 954: return goto954(tokenType);
    case 955: return goto955(tokenType);
    case 959: return goto959(tokenType);
    case 964: return goto964(tokenType);
    case 965: return goto965(tokenType);
    case 966: return goto966(tokenType);
    case 967: return goto967(tokenType);
    case 968: return goto968(tokenType);
    case 971: return goto971(tokenType);
    case 972: return goto972(tokenType);
    case 973: return goto973(tokenType);
    case 974: return goto974(tokenType);
    case 975: return goto975(tokenType);
    case 979: return goto979(tokenType);
    case 980: return goto980(tokenType);
    case 982: return goto982(tokenType);
    case 983: return goto983(tokenType);
    case 984: return goto984(tokenType);
    case 985: return goto985(tokenType);
    case 986: return goto986(tokenType);
    case 987: return goto987(tokenType);
    case 994: return goto994(tokenType);
    case 995: return goto995(tokenType);
    case 996: return goto996(tokenType);
    case 997: return goto997(tokenType);
    case 998: return goto998(tokenType);
    case 999: return goto999(tokenType);
    default: break;
    }
    throw new IllegalArgumentException();
  }

  private final boolean action0(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 0);
    }
    switch (token.getType().ordinal())
    {
    case 187:
      stateStack.addFirst(1);
      tokenStack.addFirst(token);
      return true;
    case 161:
      return reduce(RULE_0, 0);
    case 101:
      return reduce(RULE_0, 0);
    case 155:
      return reduce(RULE_0, 0);
    case 183:
      return reduce(RULE_0, 0);
    case 175:
      return reduce(RULE_0, 0);
    case 177:
      return reduce(RULE_0, 0);
    case 169:
      return reduce(RULE_0, 0);
    case 190:
      return reduce(RULE_0, 0);
    case 203:
      return reduce(RULE_0, 0);
    case 180:
      return reduce(RULE_0, 0);
    case 193:
      return reduce(RULE_0, 0);
    case 182:
      return reduce(RULE_0, 0);
    case 162:
      return reduce(RULE_0, 0);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, IMPORT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, PACKAGE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final int goto0(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 2: return 2;
    case 1: return 3;
    default: return -1;
    }
  }

  private final boolean action1(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto1(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 5;
    default: return -1;
    }
  }

  private final boolean action2(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_1, 0);
    }
    switch (token.getType().ordinal())
    {
    case 177:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 203:
      return reduce(RULE_1, 0);
    case 161:
      return reduce(RULE_1, 0);
    case 101:
      return reduce(RULE_1, 0);
    case 155:
      return reduce(RULE_1, 0);
    case 180:
      return reduce(RULE_1, 0);
    case 183:
      return reduce(RULE_1, 0);
    case 193:
      return reduce(RULE_1, 0);
    case 182:
      return reduce(RULE_1, 0);
    case 175:
      return reduce(RULE_1, 0);
    case 162:
      return reduce(RULE_1, 0);
    case 190:
      return reduce(RULE_1, 0);
    case 169:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, IMPORT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action3(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      accepted = true;
      return reduce(RULE_3, 0);
    }
    switch (token.getType().ordinal())
    {
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 161:
      return reduce(RULE_2, 0);
    case 180:
      return reduce(RULE_2, 0);
    case 162:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {null, UNBACKED_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto3(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 16;
    case 3: return 17;
    case 5: return 18;
    case 27: return 19;
    case 4: return 20;
    default: return -1;
    }
  }

  private final boolean action4(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      return reduce(RULE_4, 0);
    case 127:
      return reduce(RULE_4, 0);
    case 121:
      return reduce(RULE_4, 0);
    case 151:
      return reduce(RULE_4, 0);
    case 134:
      return reduce(RULE_4, 0);
    case 152:
      return reduce(RULE_4, 0);
    case 148:
      return reduce(RULE_4, 0);
    case 125:
      return reduce(RULE_4, 0);
    case 105:
      return reduce(RULE_4, 0);
    case 98:
      return reduce(RULE_4, 0);
    case 107:
      return reduce(RULE_4, 0);
    case 146:
      return reduce(RULE_4, 0);
    case 142:
      return reduce(RULE_4, 0);
    case 138:
      return reduce(RULE_4, 0);
    case 124:
      return reduce(RULE_4, 0);
    case 155:
      return reduce(RULE_4, 0);
    case 175:
      return reduce(RULE_4, 0);
    case 128:
      return reduce(RULE_4, 0);
    case 113:
      return reduce(RULE_4, 0);
    case 114:
      return reduce(RULE_4, 0);
    case 143:
      return reduce(RULE_4, 0);
    case 164:
      return reduce(RULE_4, 0);
    case 203:
      return reduce(RULE_4, 0);
    case 193:
      return reduce(RULE_4, 0);
    case 139:
      return reduce(RULE_4, 0);
    case 129:
      return reduce(RULE_4, 0);
    case 131:
      return reduce(RULE_4, 0);
    case 173:
      return reduce(RULE_4, 0);
    case 126:
      return reduce(RULE_4, 0);
    case 101:
      return reduce(RULE_4, 0);
    case 145:
      return reduce(RULE_4, 0);
    case 116:
      return reduce(RULE_4, 0);
    case 132:
      return reduce(RULE_4, 0);
    case 167:
      return reduce(RULE_4, 0);
    case 103:
      return reduce(RULE_4, 0);
    case 133:
      return reduce(RULE_4, 0);
    case 141:
      return reduce(RULE_4, 0);
    case 137:
      return reduce(RULE_4, 0);
    case 120:
      return reduce(RULE_4, 0);
    case 194:
      return reduce(RULE_4, 0);
    case 112:
      return reduce(RULE_4, 0);
    case 149:
      return reduce(RULE_4, 0);
    case 110:
      return reduce(RULE_4, 0);
    case 108:
      return reduce(RULE_4, 0);
    case 106:
      return reduce(RULE_4, 0);
    case 123:
      return reduce(RULE_4, 0);
    case 117:
      return reduce(RULE_4, 0);
    case 178:
      return reduce(RULE_4, 0);
    case 197:
      return reduce(RULE_4, 0);
    case 150:
      return reduce(RULE_4, 0);
    case 111:
      return reduce(RULE_4, 0);
    case 183:
      return reduce(RULE_4, 0);
    case 104:
      return reduce(RULE_4, 0);
    case 190:
      return reduce(RULE_4, 0);
    case 169:
      return reduce(RULE_4, 0);
    case 176:
      return reduce(RULE_4, 0);
    case 135:
      return reduce(RULE_4, 0);
    case 147:
      return reduce(RULE_4, 0);
    case 130:
      return reduce(RULE_4, 0);
    case 144:
      return reduce(RULE_4, 0);
    case 136:
      return reduce(RULE_4, 0);
    case 182:
      return reduce(RULE_4, 0);
    case 122:
      return reduce(RULE_4, 0);
    case 140:
      return reduce(RULE_4, 0);
    case 109:
      return reduce(RULE_4, 0);
    case 191:
      return reduce(RULE_4, 0);
    case 118:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {UNDERSCORE, FORWARD_SLASH_EQUALS, DOUBLE_RANGLE_EQUALS, STAR, MINUS, STAR_EQUALS, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, CARET_EQUALS, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, RANGLE_EQUALS, IMMUTABLE_KEYWORD, HASH, DOUBLE_LANGLE, QUESTION_MARK_COLON, DOUBLE_LANGLE_EQUALS, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, PIPE_EQUALS, LANGLE, LBRACE, GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, LPAREN, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, PLUS_EQUALS, PERCENT_EQUALS, DOUBLE_RANGLE, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EQUALS, DOUBLE_PERCENT_EQUALS, INSTANCEOF_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, AMPERSAND_EQUALS, FINAL_KEYWORD, SELFISH_KEYWORD, IMPLEMENTS_KEYWORD, MINUS_EQUALS, RBRACE, LANGLE_EQUALS, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action5(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(21);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT});
    }
  }

  private final boolean action6(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto6(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 23;
    default: return -1;
    }
  }

  private final boolean action7(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 12);
    case 161:
      return reduce(RULE_5, 12);
    case 173:
      return reduce(RULE_5, 12);
    case 101:
      return reduce(RULE_5, 12);
    case 188:
      return reduce(RULE_5, 12);
    case 181:
      return reduce(RULE_5, 12);
    case 201:
      return reduce(RULE_5, 12);
    case 202:
      return reduce(RULE_5, 12);
    case 132:
      return reduce(RULE_5, 12);
    case 133:
      return reduce(RULE_5, 12);
    case 205:
      return reduce(RULE_5, 12);
    case 206:
      return reduce(RULE_5, 12);
    case 162:
      return reduce(RULE_5, 12);
    case 192:
      return reduce(RULE_5, 12);
    case 200:
      return reduce(RULE_5, 12);
    case 165:
      return reduce(RULE_5, 12);
    case 98:
      return reduce(RULE_5, 12);
    case 142:
      return reduce(RULE_5, 12);
    case 155:
      return reduce(RULE_5, 12);
    case 183:
      return reduce(RULE_5, 12);
    case 186:
      return reduce(RULE_5, 12);
    case 175:
      return reduce(RULE_5, 12);
    case 128:
      return reduce(RULE_5, 12);
    case 190:
      return reduce(RULE_5, 12);
    case 169:
      return reduce(RULE_5, 12);
    case 171:
      return reduce(RULE_5, 12);
    case 179:
      return reduce(RULE_5, 12);
    case 164:
      return reduce(RULE_5, 12);
    case 203:
      return reduce(RULE_5, 12);
    case 180:
      return reduce(RULE_5, 12);
    case 193:
      return reduce(RULE_5, 12);
    case 182:
      return reduce(RULE_5, 12);
    case 158:
      return reduce(RULE_5, 12);
    case 191:
      return reduce(RULE_5, 12);
    case 131:
      return reduce(RULE_5, 12);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action8(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 18);
    case 161:
      return reduce(RULE_5, 18);
    case 173:
      return reduce(RULE_5, 18);
    case 101:
      return reduce(RULE_5, 18);
    case 188:
      return reduce(RULE_5, 18);
    case 181:
      return reduce(RULE_5, 18);
    case 201:
      return reduce(RULE_5, 18);
    case 202:
      return reduce(RULE_5, 18);
    case 132:
      return reduce(RULE_5, 18);
    case 133:
      return reduce(RULE_5, 18);
    case 205:
      return reduce(RULE_5, 18);
    case 206:
      return reduce(RULE_5, 18);
    case 162:
      return reduce(RULE_5, 18);
    case 192:
      return reduce(RULE_5, 18);
    case 200:
      return reduce(RULE_5, 18);
    case 165:
      return reduce(RULE_5, 18);
    case 98:
      return reduce(RULE_5, 18);
    case 142:
      return reduce(RULE_5, 18);
    case 155:
      return reduce(RULE_5, 18);
    case 183:
      return reduce(RULE_5, 18);
    case 186:
      return reduce(RULE_5, 18);
    case 175:
      return reduce(RULE_5, 18);
    case 128:
      return reduce(RULE_5, 18);
    case 190:
      return reduce(RULE_5, 18);
    case 169:
      return reduce(RULE_5, 18);
    case 171:
      return reduce(RULE_5, 18);
    case 179:
      return reduce(RULE_5, 18);
    case 164:
      return reduce(RULE_5, 18);
    case 203:
      return reduce(RULE_5, 18);
    case 180:
      return reduce(RULE_5, 18);
    case 193:
      return reduce(RULE_5, 18);
    case 182:
      return reduce(RULE_5, 18);
    case 158:
      return reduce(RULE_5, 18);
    case 191:
      return reduce(RULE_5, 18);
    case 131:
      return reduce(RULE_5, 18);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action9(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 0);
    case 161:
      return reduce(RULE_5, 0);
    case 173:
      return reduce(RULE_5, 0);
    case 101:
      return reduce(RULE_5, 0);
    case 188:
      return reduce(RULE_5, 0);
    case 181:
      return reduce(RULE_5, 0);
    case 201:
      return reduce(RULE_5, 0);
    case 202:
      return reduce(RULE_5, 0);
    case 132:
      return reduce(RULE_5, 0);
    case 133:
      return reduce(RULE_5, 0);
    case 205:
      return reduce(RULE_5, 0);
    case 206:
      return reduce(RULE_5, 0);
    case 162:
      return reduce(RULE_5, 0);
    case 192:
      return reduce(RULE_5, 0);
    case 200:
      return reduce(RULE_5, 0);
    case 165:
      return reduce(RULE_5, 0);
    case 98:
      return reduce(RULE_5, 0);
    case 142:
      return reduce(RULE_5, 0);
    case 155:
      return reduce(RULE_5, 0);
    case 183:
      return reduce(RULE_5, 0);
    case 186:
      return reduce(RULE_5, 0);
    case 175:
      return reduce(RULE_5, 0);
    case 128:
      return reduce(RULE_5, 0);
    case 190:
      return reduce(RULE_5, 0);
    case 169:
      return reduce(RULE_5, 0);
    case 171:
      return reduce(RULE_5, 0);
    case 179:
      return reduce(RULE_5, 0);
    case 164:
      return reduce(RULE_5, 0);
    case 203:
      return reduce(RULE_5, 0);
    case 180:
      return reduce(RULE_5, 0);
    case 193:
      return reduce(RULE_5, 0);
    case 182:
      return reduce(RULE_5, 0);
    case 158:
      return reduce(RULE_5, 0);
    case 191:
      return reduce(RULE_5, 0);
    case 131:
      return reduce(RULE_5, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action10(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      stateStack.addFirst(24);
      tokenStack.addFirst(token);
      return true;
    case 156:
      return reduce(RULE_5, 14);
    case 161:
      return reduce(RULE_5, 14);
    case 173:
      return reduce(RULE_5, 14);
    case 101:
      return reduce(RULE_5, 14);
    case 188:
      return reduce(RULE_5, 14);
    case 181:
      return reduce(RULE_5, 14);
    case 201:
      return reduce(RULE_5, 14);
    case 202:
      return reduce(RULE_5, 14);
    case 132:
      return reduce(RULE_5, 14);
    case 133:
      return reduce(RULE_5, 14);
    case 205:
      return reduce(RULE_5, 14);
    case 206:
      return reduce(RULE_5, 14);
    case 162:
      return reduce(RULE_5, 14);
    case 192:
      return reduce(RULE_5, 14);
    case 200:
      return reduce(RULE_5, 14);
    case 165:
      return reduce(RULE_5, 14);
    case 98:
      return reduce(RULE_5, 14);
    case 142:
      return reduce(RULE_5, 14);
    case 155:
      return reduce(RULE_5, 14);
    case 183:
      return reduce(RULE_5, 14);
    case 186:
      return reduce(RULE_5, 14);
    case 175:
      return reduce(RULE_5, 14);
    case 128:
      return reduce(RULE_5, 14);
    case 190:
      return reduce(RULE_5, 14);
    case 169:
      return reduce(RULE_5, 14);
    case 171:
      return reduce(RULE_5, 14);
    case 179:
      return reduce(RULE_5, 14);
    case 164:
      return reduce(RULE_5, 14);
    case 203:
      return reduce(RULE_5, 14);
    case 180:
      return reduce(RULE_5, 14);
    case 193:
      return reduce(RULE_5, 14);
    case 182:
      return reduce(RULE_5, 14);
    case 158:
      return reduce(RULE_5, 14);
    case 191:
      return reduce(RULE_5, 14);
    case 131:
      return reduce(RULE_5, 14);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action11(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 10);
    case 161:
      return reduce(RULE_5, 10);
    case 173:
      return reduce(RULE_5, 10);
    case 101:
      return reduce(RULE_5, 10);
    case 188:
      return reduce(RULE_5, 10);
    case 181:
      return reduce(RULE_5, 10);
    case 201:
      return reduce(RULE_5, 10);
    case 202:
      return reduce(RULE_5, 10);
    case 132:
      return reduce(RULE_5, 10);
    case 133:
      return reduce(RULE_5, 10);
    case 205:
      return reduce(RULE_5, 10);
    case 206:
      return reduce(RULE_5, 10);
    case 162:
      return reduce(RULE_5, 10);
    case 192:
      return reduce(RULE_5, 10);
    case 200:
      return reduce(RULE_5, 10);
    case 165:
      return reduce(RULE_5, 10);
    case 98:
      return reduce(RULE_5, 10);
    case 142:
      return reduce(RULE_5, 10);
    case 155:
      return reduce(RULE_5, 10);
    case 183:
      return reduce(RULE_5, 10);
    case 186:
      return reduce(RULE_5, 10);
    case 175:
      return reduce(RULE_5, 10);
    case 128:
      return reduce(RULE_5, 10);
    case 190:
      return reduce(RULE_5, 10);
    case 169:
      return reduce(RULE_5, 10);
    case 171:
      return reduce(RULE_5, 10);
    case 179:
      return reduce(RULE_5, 10);
    case 164:
      return reduce(RULE_5, 10);
    case 203:
      return reduce(RULE_5, 10);
    case 180:
      return reduce(RULE_5, 10);
    case 193:
      return reduce(RULE_5, 10);
    case 182:
      return reduce(RULE_5, 10);
    case 158:
      return reduce(RULE_5, 10);
    case 191:
      return reduce(RULE_5, 10);
    case 131:
      return reduce(RULE_5, 10);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action12(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 6);
    case 161:
      return reduce(RULE_5, 6);
    case 173:
      return reduce(RULE_5, 6);
    case 101:
      return reduce(RULE_5, 6);
    case 188:
      return reduce(RULE_5, 6);
    case 181:
      return reduce(RULE_5, 6);
    case 201:
      return reduce(RULE_5, 6);
    case 202:
      return reduce(RULE_5, 6);
    case 132:
      return reduce(RULE_5, 6);
    case 133:
      return reduce(RULE_5, 6);
    case 205:
      return reduce(RULE_5, 6);
    case 206:
      return reduce(RULE_5, 6);
    case 162:
      return reduce(RULE_5, 6);
    case 192:
      return reduce(RULE_5, 6);
    case 200:
      return reduce(RULE_5, 6);
    case 165:
      return reduce(RULE_5, 6);
    case 98:
      return reduce(RULE_5, 6);
    case 142:
      return reduce(RULE_5, 6);
    case 155:
      return reduce(RULE_5, 6);
    case 183:
      return reduce(RULE_5, 6);
    case 186:
      return reduce(RULE_5, 6);
    case 175:
      return reduce(RULE_5, 6);
    case 128:
      return reduce(RULE_5, 6);
    case 190:
      return reduce(RULE_5, 6);
    case 169:
      return reduce(RULE_5, 6);
    case 171:
      return reduce(RULE_5, 6);
    case 179:
      return reduce(RULE_5, 6);
    case 164:
      return reduce(RULE_5, 6);
    case 203:
      return reduce(RULE_5, 6);
    case 180:
      return reduce(RULE_5, 6);
    case 193:
      return reduce(RULE_5, 6);
    case 182:
      return reduce(RULE_5, 6);
    case 158:
      return reduce(RULE_5, 6);
    case 191:
      return reduce(RULE_5, 6);
    case 131:
      return reduce(RULE_5, 6);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action13(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 4);
    case 161:
      return reduce(RULE_5, 4);
    case 173:
      return reduce(RULE_5, 4);
    case 101:
      return reduce(RULE_5, 4);
    case 188:
      return reduce(RULE_5, 4);
    case 181:
      return reduce(RULE_5, 4);
    case 201:
      return reduce(RULE_5, 4);
    case 202:
      return reduce(RULE_5, 4);
    case 132:
      return reduce(RULE_5, 4);
    case 133:
      return reduce(RULE_5, 4);
    case 205:
      return reduce(RULE_5, 4);
    case 206:
      return reduce(RULE_5, 4);
    case 162:
      return reduce(RULE_5, 4);
    case 192:
      return reduce(RULE_5, 4);
    case 200:
      return reduce(RULE_5, 4);
    case 165:
      return reduce(RULE_5, 4);
    case 98:
      return reduce(RULE_5, 4);
    case 142:
      return reduce(RULE_5, 4);
    case 155:
      return reduce(RULE_5, 4);
    case 183:
      return reduce(RULE_5, 4);
    case 186:
      return reduce(RULE_5, 4);
    case 175:
      return reduce(RULE_5, 4);
    case 128:
      return reduce(RULE_5, 4);
    case 190:
      return reduce(RULE_5, 4);
    case 169:
      return reduce(RULE_5, 4);
    case 171:
      return reduce(RULE_5, 4);
    case 179:
      return reduce(RULE_5, 4);
    case 164:
      return reduce(RULE_5, 4);
    case 203:
      return reduce(RULE_5, 4);
    case 180:
      return reduce(RULE_5, 4);
    case 193:
      return reduce(RULE_5, 4);
    case 182:
      return reduce(RULE_5, 4);
    case 158:
      return reduce(RULE_5, 4);
    case 191:
      return reduce(RULE_5, 4);
    case 131:
      return reduce(RULE_5, 4);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action14(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 2);
    case 161:
      return reduce(RULE_5, 2);
    case 173:
      return reduce(RULE_5, 2);
    case 101:
      return reduce(RULE_5, 2);
    case 188:
      return reduce(RULE_5, 2);
    case 181:
      return reduce(RULE_5, 2);
    case 201:
      return reduce(RULE_5, 2);
    case 202:
      return reduce(RULE_5, 2);
    case 132:
      return reduce(RULE_5, 2);
    case 133:
      return reduce(RULE_5, 2);
    case 205:
      return reduce(RULE_5, 2);
    case 206:
      return reduce(RULE_5, 2);
    case 162:
      return reduce(RULE_5, 2);
    case 192:
      return reduce(RULE_5, 2);
    case 200:
      return reduce(RULE_5, 2);
    case 165:
      return reduce(RULE_5, 2);
    case 98:
      return reduce(RULE_5, 2);
    case 142:
      return reduce(RULE_5, 2);
    case 155:
      return reduce(RULE_5, 2);
    case 183:
      return reduce(RULE_5, 2);
    case 186:
      return reduce(RULE_5, 2);
    case 175:
      return reduce(RULE_5, 2);
    case 128:
      return reduce(RULE_5, 2);
    case 190:
      return reduce(RULE_5, 2);
    case 169:
      return reduce(RULE_5, 2);
    case 171:
      return reduce(RULE_5, 2);
    case 179:
      return reduce(RULE_5, 2);
    case 164:
      return reduce(RULE_5, 2);
    case 203:
      return reduce(RULE_5, 2);
    case 180:
      return reduce(RULE_5, 2);
    case 193:
      return reduce(RULE_5, 2);
    case 182:
      return reduce(RULE_5, 2);
    case 158:
      return reduce(RULE_5, 2);
    case 191:
      return reduce(RULE_5, 2);
    case 131:
      return reduce(RULE_5, 2);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action15(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 8);
    case 161:
      return reduce(RULE_5, 8);
    case 173:
      return reduce(RULE_5, 8);
    case 101:
      return reduce(RULE_5, 8);
    case 188:
      return reduce(RULE_5, 8);
    case 181:
      return reduce(RULE_5, 8);
    case 201:
      return reduce(RULE_5, 8);
    case 202:
      return reduce(RULE_5, 8);
    case 132:
      return reduce(RULE_5, 8);
    case 133:
      return reduce(RULE_5, 8);
    case 205:
      return reduce(RULE_5, 8);
    case 206:
      return reduce(RULE_5, 8);
    case 162:
      return reduce(RULE_5, 8);
    case 192:
      return reduce(RULE_5, 8);
    case 200:
      return reduce(RULE_5, 8);
    case 165:
      return reduce(RULE_5, 8);
    case 98:
      return reduce(RULE_5, 8);
    case 142:
      return reduce(RULE_5, 8);
    case 155:
      return reduce(RULE_5, 8);
    case 183:
      return reduce(RULE_5, 8);
    case 186:
      return reduce(RULE_5, 8);
    case 175:
      return reduce(RULE_5, 8);
    case 128:
      return reduce(RULE_5, 8);
    case 190:
      return reduce(RULE_5, 8);
    case 169:
      return reduce(RULE_5, 8);
    case 171:
      return reduce(RULE_5, 8);
    case 179:
      return reduce(RULE_5, 8);
    case 164:
      return reduce(RULE_5, 8);
    case 203:
      return reduce(RULE_5, 8);
    case 180:
      return reduce(RULE_5, 8);
    case 193:
      return reduce(RULE_5, 8);
    case 182:
      return reduce(RULE_5, 8);
    case 158:
      return reduce(RULE_5, 8);
    case 191:
      return reduce(RULE_5, 8);
    case 131:
      return reduce(RULE_5, 8);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action16(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 203:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 156:
      return reduce(RULE_2, 1);
    case 165:
      return reduce(RULE_2, 1);
    case 173:
      return reduce(RULE_2, 1);
    case 161:
      return reduce(RULE_2, 1);
    case 98:
      return reduce(RULE_2, 1);
    case 142:
      return reduce(RULE_2, 1);
    case 181:
      return reduce(RULE_2, 1);
    case 186:
      return reduce(RULE_2, 1);
    case 201:
      return reduce(RULE_2, 1);
    case 128:
      return reduce(RULE_2, 1);
    case 171:
      return reduce(RULE_2, 1);
    case 179:
      return reduce(RULE_2, 1);
    case 202:
      return reduce(RULE_2, 1);
    case 132:
      return reduce(RULE_2, 1);
    case 164:
      return reduce(RULE_2, 1);
    case 133:
      return reduce(RULE_2, 1);
    case 205:
      return reduce(RULE_2, 1);
    case 180:
      return reduce(RULE_2, 1);
    case 162:
      return reduce(RULE_2, 1);
    case 158:
      return reduce(RULE_2, 1);
    case 191:
      return reduce(RULE_2, 1);
    case 131:
      return reduce(RULE_2, 1);
    case 200:
      return reduce(RULE_2, 1);
    case 192:
      return reduce(RULE_2, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action17(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_1, 2);
    }
    switch (token.getType().ordinal())
    {
    case 161:
      return reduce(RULE_1, 2);
    case 101:
      return reduce(RULE_1, 2);
    case 155:
      return reduce(RULE_1, 2);
    case 183:
      return reduce(RULE_1, 2);
    case 175:
      return reduce(RULE_1, 2);
    case 169:
      return reduce(RULE_1, 2);
    case 190:
      return reduce(RULE_1, 2);
    case 203:
      return reduce(RULE_1, 2);
    case 180:
      return reduce(RULE_1, 2);
    case 193:
      return reduce(RULE_1, 2);
    case 182:
      return reduce(RULE_1, 2);
    case 162:
      return reduce(RULE_1, 2);
    default: throw new BadTokenException(token, new Object[] {null, UNBACKED_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, COMPOUND_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action18(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_1, 4);
    }
    switch (token.getType().ordinal())
    {
    case 161:
      return reduce(RULE_1, 4);
    case 101:
      return reduce(RULE_1, 4);
    case 155:
      return reduce(RULE_1, 4);
    case 183:
      return reduce(RULE_1, 4);
    case 175:
      return reduce(RULE_1, 4);
    case 169:
      return reduce(RULE_1, 4);
    case 190:
      return reduce(RULE_1, 4);
    case 203:
      return reduce(RULE_1, 4);
    case 180:
      return reduce(RULE_1, 4);
    case 193:
      return reduce(RULE_1, 4);
    case 182:
      return reduce(RULE_1, 4);
    case 162:
      return reduce(RULE_1, 4);
    default: throw new BadTokenException(token, new Object[] {null, UNBACKED_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, COMPOUND_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action19(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 161:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    case 162:
      stateStack.addFirst(36);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CLASS_KEYWORD, INTERFACE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action20(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_1, 3);
    }
    switch (token.getType().ordinal())
    {
    case 161:
      return reduce(RULE_1, 3);
    case 101:
      return reduce(RULE_1, 3);
    case 155:
      return reduce(RULE_1, 3);
    case 183:
      return reduce(RULE_1, 3);
    case 175:
      return reduce(RULE_1, 3);
    case 169:
      return reduce(RULE_1, 3);
    case 190:
      return reduce(RULE_1, 3);
    case 203:
      return reduce(RULE_1, 3);
    case 180:
      return reduce(RULE_1, 3);
    case 193:
      return reduce(RULE_1, 3);
    case 182:
      return reduce(RULE_1, 3);
    case 162:
      return reduce(RULE_1, 3);
    default: throw new BadTokenException(token, new Object[] {null, UNBACKED_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, COMPOUND_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action21(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 0);
    }
    switch (token.getType().ordinal())
    {
    case 161:
      return reduce(RULE_0, 0);
    case 101:
      return reduce(RULE_0, 0);
    case 155:
      return reduce(RULE_0, 0);
    case 183:
      return reduce(RULE_0, 0);
    case 175:
      return reduce(RULE_0, 0);
    case 177:
      return reduce(RULE_0, 0);
    case 169:
      return reduce(RULE_0, 0);
    case 190:
      return reduce(RULE_0, 0);
    case 203:
      return reduce(RULE_0, 0);
    case 180:
      return reduce(RULE_0, 0);
    case 193:
      return reduce(RULE_0, 0);
    case 182:
      return reduce(RULE_0, 0);
    case 162:
      return reduce(RULE_0, 0);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, IMPORT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final int goto21(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 2: return 37;
    default: return -1;
    }
  }

  private final boolean action22(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action23(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT});
    }
  }

  private final boolean action24(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 16);
    case 161:
      return reduce(RULE_5, 16);
    case 173:
      return reduce(RULE_5, 16);
    case 101:
      return reduce(RULE_5, 16);
    case 181:
      return reduce(RULE_5, 16);
    case 188:
      return reduce(RULE_5, 16);
    case 201:
      return reduce(RULE_5, 16);
    case 132:
      return reduce(RULE_5, 16);
    case 202:
      return reduce(RULE_5, 16);
    case 205:
      return reduce(RULE_5, 16);
    case 133:
      return reduce(RULE_5, 16);
    case 206:
      return reduce(RULE_5, 16);
    case 162:
      return reduce(RULE_5, 16);
    case 192:
      return reduce(RULE_5, 16);
    case 200:
      return reduce(RULE_5, 16);
    case 165:
      return reduce(RULE_5, 16);
    case 98:
      return reduce(RULE_5, 16);
    case 142:
      return reduce(RULE_5, 16);
    case 155:
      return reduce(RULE_5, 16);
    case 183:
      return reduce(RULE_5, 16);
    case 186:
      return reduce(RULE_5, 16);
    case 175:
      return reduce(RULE_5, 16);
    case 128:
      return reduce(RULE_5, 16);
    case 169:
      return reduce(RULE_5, 16);
    case 190:
      return reduce(RULE_5, 16);
    case 171:
      return reduce(RULE_5, 16);
    case 179:
      return reduce(RULE_5, 16);
    case 164:
      return reduce(RULE_5, 16);
    case 203:
      return reduce(RULE_5, 16);
    case 180:
      return reduce(RULE_5, 16);
    case 193:
      return reduce(RULE_5, 16);
    case 182:
      return reduce(RULE_5, 16);
    case 158:
      return reduce(RULE_5, 16);
    case 191:
      return reduce(RULE_5, 16);
    case 131:
      return reduce(RULE_5, 16);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action25(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 13);
    case 161:
      return reduce(RULE_5, 13);
    case 173:
      return reduce(RULE_5, 13);
    case 101:
      return reduce(RULE_5, 13);
    case 181:
      return reduce(RULE_5, 13);
    case 188:
      return reduce(RULE_5, 13);
    case 201:
      return reduce(RULE_5, 13);
    case 132:
      return reduce(RULE_5, 13);
    case 202:
      return reduce(RULE_5, 13);
    case 205:
      return reduce(RULE_5, 13);
    case 133:
      return reduce(RULE_5, 13);
    case 206:
      return reduce(RULE_5, 13);
    case 162:
      return reduce(RULE_5, 13);
    case 200:
      return reduce(RULE_5, 13);
    case 192:
      return reduce(RULE_5, 13);
    case 165:
      return reduce(RULE_5, 13);
    case 98:
      return reduce(RULE_5, 13);
    case 142:
      return reduce(RULE_5, 13);
    case 155:
      return reduce(RULE_5, 13);
    case 183:
      return reduce(RULE_5, 13);
    case 186:
      return reduce(RULE_5, 13);
    case 175:
      return reduce(RULE_5, 13);
    case 128:
      return reduce(RULE_5, 13);
    case 169:
      return reduce(RULE_5, 13);
    case 190:
      return reduce(RULE_5, 13);
    case 171:
      return reduce(RULE_5, 13);
    case 179:
      return reduce(RULE_5, 13);
    case 164:
      return reduce(RULE_5, 13);
    case 203:
      return reduce(RULE_5, 13);
    case 180:
      return reduce(RULE_5, 13);
    case 193:
      return reduce(RULE_5, 13);
    case 182:
      return reduce(RULE_5, 13);
    case 158:
      return reduce(RULE_5, 13);
    case 191:
      return reduce(RULE_5, 13);
    case 131:
      return reduce(RULE_5, 13);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action26(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 19);
    case 161:
      return reduce(RULE_5, 19);
    case 173:
      return reduce(RULE_5, 19);
    case 101:
      return reduce(RULE_5, 19);
    case 181:
      return reduce(RULE_5, 19);
    case 188:
      return reduce(RULE_5, 19);
    case 201:
      return reduce(RULE_5, 19);
    case 132:
      return reduce(RULE_5, 19);
    case 202:
      return reduce(RULE_5, 19);
    case 205:
      return reduce(RULE_5, 19);
    case 133:
      return reduce(RULE_5, 19);
    case 206:
      return reduce(RULE_5, 19);
    case 162:
      return reduce(RULE_5, 19);
    case 200:
      return reduce(RULE_5, 19);
    case 192:
      return reduce(RULE_5, 19);
    case 165:
      return reduce(RULE_5, 19);
    case 98:
      return reduce(RULE_5, 19);
    case 142:
      return reduce(RULE_5, 19);
    case 155:
      return reduce(RULE_5, 19);
    case 183:
      return reduce(RULE_5, 19);
    case 186:
      return reduce(RULE_5, 19);
    case 175:
      return reduce(RULE_5, 19);
    case 128:
      return reduce(RULE_5, 19);
    case 169:
      return reduce(RULE_5, 19);
    case 190:
      return reduce(RULE_5, 19);
    case 171:
      return reduce(RULE_5, 19);
    case 179:
      return reduce(RULE_5, 19);
    case 164:
      return reduce(RULE_5, 19);
    case 203:
      return reduce(RULE_5, 19);
    case 180:
      return reduce(RULE_5, 19);
    case 193:
      return reduce(RULE_5, 19);
    case 182:
      return reduce(RULE_5, 19);
    case 158:
      return reduce(RULE_5, 19);
    case 191:
      return reduce(RULE_5, 19);
    case 131:
      return reduce(RULE_5, 19);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action27(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 1);
    case 161:
      return reduce(RULE_5, 1);
    case 173:
      return reduce(RULE_5, 1);
    case 101:
      return reduce(RULE_5, 1);
    case 181:
      return reduce(RULE_5, 1);
    case 188:
      return reduce(RULE_5, 1);
    case 201:
      return reduce(RULE_5, 1);
    case 132:
      return reduce(RULE_5, 1);
    case 202:
      return reduce(RULE_5, 1);
    case 205:
      return reduce(RULE_5, 1);
    case 133:
      return reduce(RULE_5, 1);
    case 206:
      return reduce(RULE_5, 1);
    case 162:
      return reduce(RULE_5, 1);
    case 200:
      return reduce(RULE_5, 1);
    case 192:
      return reduce(RULE_5, 1);
    case 165:
      return reduce(RULE_5, 1);
    case 98:
      return reduce(RULE_5, 1);
    case 142:
      return reduce(RULE_5, 1);
    case 155:
      return reduce(RULE_5, 1);
    case 183:
      return reduce(RULE_5, 1);
    case 186:
      return reduce(RULE_5, 1);
    case 175:
      return reduce(RULE_5, 1);
    case 128:
      return reduce(RULE_5, 1);
    case 169:
      return reduce(RULE_5, 1);
    case 190:
      return reduce(RULE_5, 1);
    case 171:
      return reduce(RULE_5, 1);
    case 179:
      return reduce(RULE_5, 1);
    case 164:
      return reduce(RULE_5, 1);
    case 203:
      return reduce(RULE_5, 1);
    case 180:
      return reduce(RULE_5, 1);
    case 193:
      return reduce(RULE_5, 1);
    case 182:
      return reduce(RULE_5, 1);
    case 158:
      return reduce(RULE_5, 1);
    case 191:
      return reduce(RULE_5, 1);
    case 131:
      return reduce(RULE_5, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action28(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    case 156:
      return reduce(RULE_5, 15);
    case 161:
      return reduce(RULE_5, 15);
    case 173:
      return reduce(RULE_5, 15);
    case 101:
      return reduce(RULE_5, 15);
    case 181:
      return reduce(RULE_5, 15);
    case 188:
      return reduce(RULE_5, 15);
    case 201:
      return reduce(RULE_5, 15);
    case 132:
      return reduce(RULE_5, 15);
    case 202:
      return reduce(RULE_5, 15);
    case 205:
      return reduce(RULE_5, 15);
    case 133:
      return reduce(RULE_5, 15);
    case 206:
      return reduce(RULE_5, 15);
    case 162:
      return reduce(RULE_5, 15);
    case 200:
      return reduce(RULE_5, 15);
    case 192:
      return reduce(RULE_5, 15);
    case 165:
      return reduce(RULE_5, 15);
    case 98:
      return reduce(RULE_5, 15);
    case 142:
      return reduce(RULE_5, 15);
    case 155:
      return reduce(RULE_5, 15);
    case 183:
      return reduce(RULE_5, 15);
    case 186:
      return reduce(RULE_5, 15);
    case 175:
      return reduce(RULE_5, 15);
    case 128:
      return reduce(RULE_5, 15);
    case 169:
      return reduce(RULE_5, 15);
    case 190:
      return reduce(RULE_5, 15);
    case 171:
      return reduce(RULE_5, 15);
    case 179:
      return reduce(RULE_5, 15);
    case 164:
      return reduce(RULE_5, 15);
    case 203:
      return reduce(RULE_5, 15);
    case 180:
      return reduce(RULE_5, 15);
    case 193:
      return reduce(RULE_5, 15);
    case 182:
      return reduce(RULE_5, 15);
    case 158:
      return reduce(RULE_5, 15);
    case 191:
      return reduce(RULE_5, 15);
    case 131:
      return reduce(RULE_5, 15);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action29(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 11);
    case 161:
      return reduce(RULE_5, 11);
    case 173:
      return reduce(RULE_5, 11);
    case 101:
      return reduce(RULE_5, 11);
    case 181:
      return reduce(RULE_5, 11);
    case 188:
      return reduce(RULE_5, 11);
    case 201:
      return reduce(RULE_5, 11);
    case 132:
      return reduce(RULE_5, 11);
    case 202:
      return reduce(RULE_5, 11);
    case 205:
      return reduce(RULE_5, 11);
    case 133:
      return reduce(RULE_5, 11);
    case 206:
      return reduce(RULE_5, 11);
    case 162:
      return reduce(RULE_5, 11);
    case 200:
      return reduce(RULE_5, 11);
    case 192:
      return reduce(RULE_5, 11);
    case 165:
      return reduce(RULE_5, 11);
    case 98:
      return reduce(RULE_5, 11);
    case 142:
      return reduce(RULE_5, 11);
    case 155:
      return reduce(RULE_5, 11);
    case 183:
      return reduce(RULE_5, 11);
    case 186:
      return reduce(RULE_5, 11);
    case 175:
      return reduce(RULE_5, 11);
    case 128:
      return reduce(RULE_5, 11);
    case 169:
      return reduce(RULE_5, 11);
    case 190:
      return reduce(RULE_5, 11);
    case 171:
      return reduce(RULE_5, 11);
    case 179:
      return reduce(RULE_5, 11);
    case 164:
      return reduce(RULE_5, 11);
    case 203:
      return reduce(RULE_5, 11);
    case 180:
      return reduce(RULE_5, 11);
    case 193:
      return reduce(RULE_5, 11);
    case 182:
      return reduce(RULE_5, 11);
    case 158:
      return reduce(RULE_5, 11);
    case 191:
      return reduce(RULE_5, 11);
    case 131:
      return reduce(RULE_5, 11);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action30(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 7);
    case 161:
      return reduce(RULE_5, 7);
    case 173:
      return reduce(RULE_5, 7);
    case 101:
      return reduce(RULE_5, 7);
    case 181:
      return reduce(RULE_5, 7);
    case 188:
      return reduce(RULE_5, 7);
    case 201:
      return reduce(RULE_5, 7);
    case 132:
      return reduce(RULE_5, 7);
    case 202:
      return reduce(RULE_5, 7);
    case 205:
      return reduce(RULE_5, 7);
    case 133:
      return reduce(RULE_5, 7);
    case 206:
      return reduce(RULE_5, 7);
    case 162:
      return reduce(RULE_5, 7);
    case 200:
      return reduce(RULE_5, 7);
    case 192:
      return reduce(RULE_5, 7);
    case 165:
      return reduce(RULE_5, 7);
    case 98:
      return reduce(RULE_5, 7);
    case 142:
      return reduce(RULE_5, 7);
    case 155:
      return reduce(RULE_5, 7);
    case 183:
      return reduce(RULE_5, 7);
    case 186:
      return reduce(RULE_5, 7);
    case 175:
      return reduce(RULE_5, 7);
    case 128:
      return reduce(RULE_5, 7);
    case 169:
      return reduce(RULE_5, 7);
    case 190:
      return reduce(RULE_5, 7);
    case 171:
      return reduce(RULE_5, 7);
    case 179:
      return reduce(RULE_5, 7);
    case 164:
      return reduce(RULE_5, 7);
    case 203:
      return reduce(RULE_5, 7);
    case 180:
      return reduce(RULE_5, 7);
    case 193:
      return reduce(RULE_5, 7);
    case 182:
      return reduce(RULE_5, 7);
    case 158:
      return reduce(RULE_5, 7);
    case 191:
      return reduce(RULE_5, 7);
    case 131:
      return reduce(RULE_5, 7);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action31(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 5);
    case 161:
      return reduce(RULE_5, 5);
    case 173:
      return reduce(RULE_5, 5);
    case 101:
      return reduce(RULE_5, 5);
    case 181:
      return reduce(RULE_5, 5);
    case 188:
      return reduce(RULE_5, 5);
    case 201:
      return reduce(RULE_5, 5);
    case 132:
      return reduce(RULE_5, 5);
    case 202:
      return reduce(RULE_5, 5);
    case 205:
      return reduce(RULE_5, 5);
    case 133:
      return reduce(RULE_5, 5);
    case 206:
      return reduce(RULE_5, 5);
    case 162:
      return reduce(RULE_5, 5);
    case 200:
      return reduce(RULE_5, 5);
    case 192:
      return reduce(RULE_5, 5);
    case 165:
      return reduce(RULE_5, 5);
    case 98:
      return reduce(RULE_5, 5);
    case 142:
      return reduce(RULE_5, 5);
    case 155:
      return reduce(RULE_5, 5);
    case 183:
      return reduce(RULE_5, 5);
    case 186:
      return reduce(RULE_5, 5);
    case 175:
      return reduce(RULE_5, 5);
    case 128:
      return reduce(RULE_5, 5);
    case 169:
      return reduce(RULE_5, 5);
    case 190:
      return reduce(RULE_5, 5);
    case 171:
      return reduce(RULE_5, 5);
    case 179:
      return reduce(RULE_5, 5);
    case 164:
      return reduce(RULE_5, 5);
    case 203:
      return reduce(RULE_5, 5);
    case 180:
      return reduce(RULE_5, 5);
    case 193:
      return reduce(RULE_5, 5);
    case 182:
      return reduce(RULE_5, 5);
    case 158:
      return reduce(RULE_5, 5);
    case 191:
      return reduce(RULE_5, 5);
    case 131:
      return reduce(RULE_5, 5);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action32(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 9);
    case 161:
      return reduce(RULE_5, 9);
    case 173:
      return reduce(RULE_5, 9);
    case 101:
      return reduce(RULE_5, 9);
    case 181:
      return reduce(RULE_5, 9);
    case 188:
      return reduce(RULE_5, 9);
    case 201:
      return reduce(RULE_5, 9);
    case 132:
      return reduce(RULE_5, 9);
    case 202:
      return reduce(RULE_5, 9);
    case 205:
      return reduce(RULE_5, 9);
    case 133:
      return reduce(RULE_5, 9);
    case 206:
      return reduce(RULE_5, 9);
    case 162:
      return reduce(RULE_5, 9);
    case 200:
      return reduce(RULE_5, 9);
    case 192:
      return reduce(RULE_5, 9);
    case 165:
      return reduce(RULE_5, 9);
    case 98:
      return reduce(RULE_5, 9);
    case 142:
      return reduce(RULE_5, 9);
    case 155:
      return reduce(RULE_5, 9);
    case 183:
      return reduce(RULE_5, 9);
    case 186:
      return reduce(RULE_5, 9);
    case 175:
      return reduce(RULE_5, 9);
    case 128:
      return reduce(RULE_5, 9);
    case 169:
      return reduce(RULE_5, 9);
    case 190:
      return reduce(RULE_5, 9);
    case 171:
      return reduce(RULE_5, 9);
    case 179:
      return reduce(RULE_5, 9);
    case 164:
      return reduce(RULE_5, 9);
    case 203:
      return reduce(RULE_5, 9);
    case 180:
      return reduce(RULE_5, 9);
    case 193:
      return reduce(RULE_5, 9);
    case 182:
      return reduce(RULE_5, 9);
    case 158:
      return reduce(RULE_5, 9);
    case 191:
      return reduce(RULE_5, 9);
    case 131:
      return reduce(RULE_5, 9);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action33(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 3);
    case 161:
      return reduce(RULE_5, 3);
    case 173:
      return reduce(RULE_5, 3);
    case 101:
      return reduce(RULE_5, 3);
    case 181:
      return reduce(RULE_5, 3);
    case 188:
      return reduce(RULE_5, 3);
    case 201:
      return reduce(RULE_5, 3);
    case 132:
      return reduce(RULE_5, 3);
    case 202:
      return reduce(RULE_5, 3);
    case 205:
      return reduce(RULE_5, 3);
    case 133:
      return reduce(RULE_5, 3);
    case 206:
      return reduce(RULE_5, 3);
    case 162:
      return reduce(RULE_5, 3);
    case 200:
      return reduce(RULE_5, 3);
    case 192:
      return reduce(RULE_5, 3);
    case 165:
      return reduce(RULE_5, 3);
    case 98:
      return reduce(RULE_5, 3);
    case 142:
      return reduce(RULE_5, 3);
    case 155:
      return reduce(RULE_5, 3);
    case 183:
      return reduce(RULE_5, 3);
    case 186:
      return reduce(RULE_5, 3);
    case 175:
      return reduce(RULE_5, 3);
    case 128:
      return reduce(RULE_5, 3);
    case 169:
      return reduce(RULE_5, 3);
    case 190:
      return reduce(RULE_5, 3);
    case 171:
      return reduce(RULE_5, 3);
    case 179:
      return reduce(RULE_5, 3);
    case 164:
      return reduce(RULE_5, 3);
    case 203:
      return reduce(RULE_5, 3);
    case 180:
      return reduce(RULE_5, 3);
    case 193:
      return reduce(RULE_5, 3);
    case 182:
      return reduce(RULE_5, 3);
    case 158:
      return reduce(RULE_5, 3);
    case 191:
      return reduce(RULE_5, 3);
    case 131:
      return reduce(RULE_5, 3);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action34(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action35(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action36(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action37(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_1, 1);
    }
    switch (token.getType().ordinal())
    {
    case 177:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 161:
      return reduce(RULE_1, 1);
    case 101:
      return reduce(RULE_1, 1);
    case 155:
      return reduce(RULE_1, 1);
    case 183:
      return reduce(RULE_1, 1);
    case 175:
      return reduce(RULE_1, 1);
    case 169:
      return reduce(RULE_1, 1);
    case 190:
      return reduce(RULE_1, 1);
    case 203:
      return reduce(RULE_1, 1);
    case 180:
      return reduce(RULE_1, 1);
    case 193:
      return reduce(RULE_1, 1);
    case 182:
      return reduce(RULE_1, 1);
    case 162:
      return reduce(RULE_1, 1);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, IMPORT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action38(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      return reduce(RULE_4, 1);
    case 127:
      return reduce(RULE_4, 1);
    case 121:
      return reduce(RULE_4, 1);
    case 151:
      return reduce(RULE_4, 1);
    case 134:
      return reduce(RULE_4, 1);
    case 152:
      return reduce(RULE_4, 1);
    case 148:
      return reduce(RULE_4, 1);
    case 125:
      return reduce(RULE_4, 1);
    case 105:
      return reduce(RULE_4, 1);
    case 98:
      return reduce(RULE_4, 1);
    case 107:
      return reduce(RULE_4, 1);
    case 124:
      return reduce(RULE_4, 1);
    case 138:
      return reduce(RULE_4, 1);
    case 142:
      return reduce(RULE_4, 1);
    case 146:
      return reduce(RULE_4, 1);
    case 155:
      return reduce(RULE_4, 1);
    case 175:
      return reduce(RULE_4, 1);
    case 128:
      return reduce(RULE_4, 1);
    case 113:
      return reduce(RULE_4, 1);
    case 143:
      return reduce(RULE_4, 1);
    case 114:
      return reduce(RULE_4, 1);
    case 164:
      return reduce(RULE_4, 1);
    case 203:
      return reduce(RULE_4, 1);
    case 193:
      return reduce(RULE_4, 1);
    case 139:
      return reduce(RULE_4, 1);
    case 129:
      return reduce(RULE_4, 1);
    case 131:
      return reduce(RULE_4, 1);
    case 173:
      return reduce(RULE_4, 1);
    case 126:
      return reduce(RULE_4, 1);
    case 101:
      return reduce(RULE_4, 1);
    case 145:
      return reduce(RULE_4, 1);
    case 116:
      return reduce(RULE_4, 1);
    case 132:
      return reduce(RULE_4, 1);
    case 167:
      return reduce(RULE_4, 1);
    case 103:
      return reduce(RULE_4, 1);
    case 133:
      return reduce(RULE_4, 1);
    case 141:
      return reduce(RULE_4, 1);
    case 137:
      return reduce(RULE_4, 1);
    case 120:
      return reduce(RULE_4, 1);
    case 194:
      return reduce(RULE_4, 1);
    case 112:
      return reduce(RULE_4, 1);
    case 149:
      return reduce(RULE_4, 1);
    case 110:
      return reduce(RULE_4, 1);
    case 108:
      return reduce(RULE_4, 1);
    case 106:
      return reduce(RULE_4, 1);
    case 117:
      return reduce(RULE_4, 1);
    case 123:
      return reduce(RULE_4, 1);
    case 178:
      return reduce(RULE_4, 1);
    case 150:
      return reduce(RULE_4, 1);
    case 197:
      return reduce(RULE_4, 1);
    case 111:
      return reduce(RULE_4, 1);
    case 183:
      return reduce(RULE_4, 1);
    case 104:
      return reduce(RULE_4, 1);
    case 190:
      return reduce(RULE_4, 1);
    case 169:
      return reduce(RULE_4, 1);
    case 176:
      return reduce(RULE_4, 1);
    case 135:
      return reduce(RULE_4, 1);
    case 147:
      return reduce(RULE_4, 1);
    case 130:
      return reduce(RULE_4, 1);
    case 144:
      return reduce(RULE_4, 1);
    case 136:
      return reduce(RULE_4, 1);
    case 182:
      return reduce(RULE_4, 1);
    case 122:
      return reduce(RULE_4, 1);
    case 140:
      return reduce(RULE_4, 1);
    case 109:
      return reduce(RULE_4, 1);
    case 191:
      return reduce(RULE_4, 1);
    case 118:
      return reduce(RULE_4, 1);
    default: throw new BadTokenException(token, new Object[] {UNDERSCORE, FORWARD_SLASH_EQUALS, DOUBLE_RANGLE_EQUALS, STAR, MINUS, STAR_EQUALS, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, CARET_EQUALS, ABSTRACT_KEYWORD, RANGLE_EQUALS, QUESTION_MARK, PIPE, EXCLAIMATION_MARK, IMMUTABLE_KEYWORD, HASH, DOUBLE_LANGLE, DOUBLE_LANGLE_EQUALS, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, PIPE_EQUALS, LANGLE, LBRACE, GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, LPAREN, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, PLUS_EQUALS, PERCENT_EQUALS, DOUBLE_RANGLE, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, DOUBLE_PERCENT_EQUALS, EQUALS, INSTANCEOF_KEYWORD, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, AMPERSAND_EQUALS, FINAL_KEYWORD, SELFISH_KEYWORD, IMPLEMENTS_KEYWORD, MINUS_EQUALS, RBRACE, LANGLE_EQUALS, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action39(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 1);
    }
    switch (token.getType().ordinal())
    {
    case 161:
      return reduce(RULE_0, 1);
    case 101:
      return reduce(RULE_0, 1);
    case 155:
      return reduce(RULE_0, 1);
    case 183:
      return reduce(RULE_0, 1);
    case 175:
      return reduce(RULE_0, 1);
    case 177:
      return reduce(RULE_0, 1);
    case 169:
      return reduce(RULE_0, 1);
    case 190:
      return reduce(RULE_0, 1);
    case 203:
      return reduce(RULE_0, 1);
    case 180:
      return reduce(RULE_0, 1);
    case 193:
      return reduce(RULE_0, 1);
    case 182:
      return reduce(RULE_0, 1);
    case 162:
      return reduce(RULE_0, 1);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, IMPORT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action40(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, STAR});
    }
  }

  private final boolean action41(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_5, 17);
    case 161:
      return reduce(RULE_5, 17);
    case 173:
      return reduce(RULE_5, 17);
    case 101:
      return reduce(RULE_5, 17);
    case 188:
      return reduce(RULE_5, 17);
    case 181:
      return reduce(RULE_5, 17);
    case 201:
      return reduce(RULE_5, 17);
    case 202:
      return reduce(RULE_5, 17);
    case 132:
      return reduce(RULE_5, 17);
    case 133:
      return reduce(RULE_5, 17);
    case 205:
      return reduce(RULE_5, 17);
    case 206:
      return reduce(RULE_5, 17);
    case 162:
      return reduce(RULE_5, 17);
    case 200:
      return reduce(RULE_5, 17);
    case 192:
      return reduce(RULE_5, 17);
    case 165:
      return reduce(RULE_5, 17);
    case 98:
      return reduce(RULE_5, 17);
    case 142:
      return reduce(RULE_5, 17);
    case 155:
      return reduce(RULE_5, 17);
    case 183:
      return reduce(RULE_5, 17);
    case 186:
      return reduce(RULE_5, 17);
    case 175:
      return reduce(RULE_5, 17);
    case 128:
      return reduce(RULE_5, 17);
    case 190:
      return reduce(RULE_5, 17);
    case 169:
      return reduce(RULE_5, 17);
    case 171:
      return reduce(RULE_5, 17);
    case 179:
      return reduce(RULE_5, 17);
    case 164:
      return reduce(RULE_5, 17);
    case 203:
      return reduce(RULE_5, 17);
    case 180:
      return reduce(RULE_5, 17);
    case 193:
      return reduce(RULE_5, 17);
    case 182:
      return reduce(RULE_5, 17);
    case 158:
      return reduce(RULE_5, 17);
    case 191:
      return reduce(RULE_5, 17);
    case 131:
      return reduce(RULE_5, 17);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, GETTER_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, COMPOUND_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action42(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(46);
      tokenStack.addFirst(token);
      return true;
    case 176:
      return reduce(RULE_6, 0);
    case 167:
      return reduce(RULE_6, 0);
    case 131:
      return reduce(RULE_6, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LANGLE, LBRACE});
    }
  }

  private final int goto42(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 77: return 47;
    default: return -1;
    }
  }

  private final boolean action43(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(46);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_6, 0);
    case 131:
      return reduce(RULE_6, 0);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, LANGLE, LBRACE});
    }
  }

  private final int goto43(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 77: return 48;
    default: return -1;
    }
  }

  private final boolean action44(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(46);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_6, 0);
    default: throw new BadTokenException(token, new Object[] {LANGLE, LBRACE});
    }
  }

  private final int goto44(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 77: return 49;
    default: return -1;
    }
  }

  private final boolean action45(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(50);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action46(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(51);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto46(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 73: return 52;
    case 76: return 53;
    case 75: return 54;
    case 74: return 55;
    default: return -1;
    }
  }

  private final boolean action47(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(56);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(57);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final int goto47(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 58;
    default: return -1;
    }
  }

  private final boolean action48(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 167:
      stateStack.addFirst(59);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(60);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action49(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action50(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 2);
    }
    switch (token.getType().ordinal())
    {
    case 161:
      return reduce(RULE_0, 2);
    case 101:
      return reduce(RULE_0, 2);
    case 155:
      return reduce(RULE_0, 2);
    case 183:
      return reduce(RULE_0, 2);
    case 175:
      return reduce(RULE_0, 2);
    case 177:
      return reduce(RULE_0, 2);
    case 169:
      return reduce(RULE_0, 2);
    case 190:
      return reduce(RULE_0, 2);
    case 203:
      return reduce(RULE_0, 2);
    case 180:
      return reduce(RULE_0, 2);
    case 193:
      return reduce(RULE_0, 2);
    case 182:
      return reduce(RULE_0, 2);
    case 162:
      return reduce(RULE_0, 2);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, IMPORT_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action51(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 167:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_8, 0);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, RANGLE, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action52(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_9, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action53(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_6, 1);
    case 167:
      return reduce(RULE_6, 1);
    case 131:
      return reduce(RULE_6, 1);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action54(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action55(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_10, 0);
    case 167:
      return reduce(RULE_10, 0);
    case 131:
      return reduce(RULE_10, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action56(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto56(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 67;
    case 25: return 68;
    default: return -1;
    }
  }

  private final boolean action57(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto57(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 69;
    default: return -1;
    }
  }

  private final boolean action58(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action59(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto59(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 67;
    case 25: return 71;
    default: return -1;
    }
  }

  private final boolean action60(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 0);
    case 101:
      return reduce(RULE_11, 0);
    case 181:
      return reduce(RULE_11, 0);
    case 188:
      return reduce(RULE_11, 0);
    case 201:
      return reduce(RULE_11, 0);
    case 202:
      return reduce(RULE_11, 0);
    case 132:
      return reduce(RULE_11, 0);
    case 205:
      return reduce(RULE_11, 0);
    case 133:
      return reduce(RULE_11, 0);
    case 206:
      return reduce(RULE_11, 0);
    case 200:
      return reduce(RULE_11, 0);
    case 192:
      return reduce(RULE_11, 0);
    case 165:
      return reduce(RULE_11, 0);
    case 98:
      return reduce(RULE_11, 0);
    case 155:
      return reduce(RULE_11, 0);
    case 142:
      return reduce(RULE_11, 0);
    case 183:
      return reduce(RULE_11, 0);
    case 186:
      return reduce(RULE_11, 0);
    case 175:
      return reduce(RULE_11, 0);
    case 128:
      return reduce(RULE_11, 0);
    case 171:
      return reduce(RULE_11, 0);
    case 190:
      return reduce(RULE_11, 0);
    case 169:
      return reduce(RULE_11, 0);
    case 179:
      return reduce(RULE_11, 0);
    case 164:
      return reduce(RULE_11, 0);
    case 203:
      return reduce(RULE_11, 0);
    case 147:
      return reduce(RULE_11, 0);
    case 193:
      return reduce(RULE_11, 0);
    case 182:
      return reduce(RULE_11, 0);
    case 158:
      return reduce(RULE_11, 0);
    case 131:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto60(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 72;
    default: return -1;
    }
  }

  private final boolean action61(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 0);
    case 101:
      return reduce(RULE_11, 0);
    case 181:
      return reduce(RULE_11, 0);
    case 188:
      return reduce(RULE_11, 0);
    case 201:
      return reduce(RULE_11, 0);
    case 202:
      return reduce(RULE_11, 0);
    case 132:
      return reduce(RULE_11, 0);
    case 205:
      return reduce(RULE_11, 0);
    case 133:
      return reduce(RULE_11, 0);
    case 206:
      return reduce(RULE_11, 0);
    case 200:
      return reduce(RULE_11, 0);
    case 192:
      return reduce(RULE_11, 0);
    case 165:
      return reduce(RULE_11, 0);
    case 98:
      return reduce(RULE_11, 0);
    case 155:
      return reduce(RULE_11, 0);
    case 142:
      return reduce(RULE_11, 0);
    case 183:
      return reduce(RULE_11, 0);
    case 186:
      return reduce(RULE_11, 0);
    case 175:
      return reduce(RULE_11, 0);
    case 128:
      return reduce(RULE_11, 0);
    case 171:
      return reduce(RULE_11, 0);
    case 190:
      return reduce(RULE_11, 0);
    case 169:
      return reduce(RULE_11, 0);
    case 179:
      return reduce(RULE_11, 0);
    case 164:
      return reduce(RULE_11, 0);
    case 203:
      return reduce(RULE_11, 0);
    case 147:
      return reduce(RULE_11, 0);
    case 193:
      return reduce(RULE_11, 0);
    case 182:
      return reduce(RULE_11, 0);
    case 158:
      return reduce(RULE_11, 0);
    case 131:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto61(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 73;
    default: return -1;
    }
  }

  private final boolean action62(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto62(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 91;
    case 48: return 92;
    case 49: return 93;
    case 54: return 94;
    case 58: return 95;
    case 28: return 96;
    case 30: return 97;
    case 59: return 98;
    case 60: return 99;
    case 71: return 100;
    case 70: return 101;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action63(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_12, 0);
    case 167:
      return reduce(RULE_12, 0);
    case 131:
      return reduce(RULE_12, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action64(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto64(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 91;
    case 48: return 92;
    case 49: return 93;
    case 54: return 94;
    case 58: return 95;
    case 28: return 96;
    case 30: return 97;
    case 59: return 98;
    case 60: return 99;
    case 71: return 103;
    case 70: return 104;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action65(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(51);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto65(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 73: return 105;
    case 74: return 106;
    default: return -1;
    }
  }

  private final boolean action66(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(107);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 176:
      return reduce(RULE_13, 0);
    case 132:
      return reduce(RULE_13, 0);
    case 147:
      return reduce(RULE_13, 0);
    case 150:
      return reduce(RULE_13, 0);
    case 109:
      return reduce(RULE_13, 0);
    case 131:
      return reduce(RULE_13, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, LPAREN, RBRACE, SEMICOLON, LANGLE, DOT, COMMA, LBRACE});
    }
  }

  private final boolean action67(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_14, 0);
    case 131:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action68(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(108);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_7, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action69(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(56);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, LBRACE});
    }
  }

  private final int goto69(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 109;
    default: return -1;
    }
  }

  private final boolean action70(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 0);
    case 101:
      return reduce(RULE_11, 0);
    case 181:
      return reduce(RULE_11, 0);
    case 188:
      return reduce(RULE_11, 0);
    case 201:
      return reduce(RULE_11, 0);
    case 202:
      return reduce(RULE_11, 0);
    case 132:
      return reduce(RULE_11, 0);
    case 205:
      return reduce(RULE_11, 0);
    case 133:
      return reduce(RULE_11, 0);
    case 206:
      return reduce(RULE_11, 0);
    case 200:
      return reduce(RULE_11, 0);
    case 192:
      return reduce(RULE_11, 0);
    case 165:
      return reduce(RULE_11, 0);
    case 98:
      return reduce(RULE_11, 0);
    case 155:
      return reduce(RULE_11, 0);
    case 142:
      return reduce(RULE_11, 0);
    case 183:
      return reduce(RULE_11, 0);
    case 186:
      return reduce(RULE_11, 0);
    case 175:
      return reduce(RULE_11, 0);
    case 128:
      return reduce(RULE_11, 0);
    case 171:
      return reduce(RULE_11, 0);
    case 190:
      return reduce(RULE_11, 0);
    case 169:
      return reduce(RULE_11, 0);
    case 179:
      return reduce(RULE_11, 0);
    case 164:
      return reduce(RULE_11, 0);
    case 203:
      return reduce(RULE_11, 0);
    case 147:
      return reduce(RULE_11, 0);
    case 193:
      return reduce(RULE_11, 0);
    case 182:
      return reduce(RULE_11, 0);
    case 158:
      return reduce(RULE_11, 0);
    case 131:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto70(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 110;
    default: return -1;
    }
  }

  private final boolean action71(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(108);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action72(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(116);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 188:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto72(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 119;
    case 51: return 120;
    case 8: return 121;
    case 27: return 122;
    case 33: return 123;
    case 7: return 124;
    case 30: return 125;
    case 9: return 126;
    case 60: return 99;
    case 48: return 127;
    case 26: return 128;
    case 10: return 129;
    case 54: return 94;
    case 28: return 130;
    case 58: return 95;
    default: return -1;
    }
  }

  private final boolean action73(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(116);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(131);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 188:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto73(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 119;
    case 51: return 120;
    case 8: return 121;
    case 27: return 122;
    case 33: return 123;
    case 7: return 124;
    case 30: return 125;
    case 9: return 126;
    case 60: return 99;
    case 48: return 127;
    case 26: return 128;
    case 10: return 129;
    case 54: return 94;
    case 28: return 130;
    case 58: return 95;
    default: return -1;
    }
  }

  private final boolean action74(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 0);
    case 101:
      return reduce(RULE_15, 0);
    case 154:
      return reduce(RULE_15, 0);
    case 145:
      return reduce(RULE_15, 0);
    case 132:
      return reduce(RULE_15, 0);
    case 167:
      return reduce(RULE_15, 0);
    case 103:
      return reduce(RULE_15, 0);
    case 120:
      return reduce(RULE_15, 0);
    case 194:
      return reduce(RULE_15, 0);
    case 112:
      return reduce(RULE_15, 0);
    case 148:
      return reduce(RULE_15, 0);
    case 149:
      return reduce(RULE_15, 0);
    case 110:
      return reduce(RULE_15, 0);
    case 108:
      return reduce(RULE_15, 0);
    case 106:
      return reduce(RULE_15, 0);
    case 125:
      return reduce(RULE_15, 0);
    case 105:
      return reduce(RULE_15, 0);
    case 98:
      return reduce(RULE_15, 0);
    case 155:
      return reduce(RULE_15, 0);
    case 138:
      return reduce(RULE_15, 0);
    case 142:
      return reduce(RULE_15, 0);
    case 197:
      return reduce(RULE_15, 0);
    case 150:
      return reduce(RULE_15, 0);
    case 111:
      return reduce(RULE_15, 0);
    case 183:
      return reduce(RULE_15, 0);
    case 175:
      return reduce(RULE_15, 0);
    case 128:
      return reduce(RULE_15, 0);
    case 169:
      return reduce(RULE_15, 0);
    case 190:
      return reduce(RULE_15, 0);
    case 143:
      return reduce(RULE_15, 0);
    case 164:
      return reduce(RULE_15, 0);
    case 203:
      return reduce(RULE_15, 0);
    case 147:
      return reduce(RULE_15, 0);
    case 193:
      return reduce(RULE_15, 0);
    case 182:
      return reduce(RULE_15, 0);
    case 109:
      return reduce(RULE_15, 0);
    case 191:
      return reduce(RULE_15, 0);
    case 131:
      return reduce(RULE_15, 0);
    case 118:
      return reduce(RULE_15, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action75(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 2);
    case 101:
      return reduce(RULE_15, 2);
    case 154:
      return reduce(RULE_15, 2);
    case 145:
      return reduce(RULE_15, 2);
    case 132:
      return reduce(RULE_15, 2);
    case 167:
      return reduce(RULE_15, 2);
    case 103:
      return reduce(RULE_15, 2);
    case 120:
      return reduce(RULE_15, 2);
    case 194:
      return reduce(RULE_15, 2);
    case 112:
      return reduce(RULE_15, 2);
    case 148:
      return reduce(RULE_15, 2);
    case 149:
      return reduce(RULE_15, 2);
    case 110:
      return reduce(RULE_15, 2);
    case 108:
      return reduce(RULE_15, 2);
    case 106:
      return reduce(RULE_15, 2);
    case 125:
      return reduce(RULE_15, 2);
    case 105:
      return reduce(RULE_15, 2);
    case 98:
      return reduce(RULE_15, 2);
    case 155:
      return reduce(RULE_15, 2);
    case 138:
      return reduce(RULE_15, 2);
    case 142:
      return reduce(RULE_15, 2);
    case 197:
      return reduce(RULE_15, 2);
    case 150:
      return reduce(RULE_15, 2);
    case 111:
      return reduce(RULE_15, 2);
    case 183:
      return reduce(RULE_15, 2);
    case 175:
      return reduce(RULE_15, 2);
    case 128:
      return reduce(RULE_15, 2);
    case 169:
      return reduce(RULE_15, 2);
    case 190:
      return reduce(RULE_15, 2);
    case 143:
      return reduce(RULE_15, 2);
    case 164:
      return reduce(RULE_15, 2);
    case 203:
      return reduce(RULE_15, 2);
    case 147:
      return reduce(RULE_15, 2);
    case 193:
      return reduce(RULE_15, 2);
    case 182:
      return reduce(RULE_15, 2);
    case 109:
      return reduce(RULE_15, 2);
    case 191:
      return reduce(RULE_15, 2);
    case 131:
      return reduce(RULE_15, 2);
    case 118:
      return reduce(RULE_15, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action76(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(137);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(140);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(143);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto76(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 148;
    case 30: return 149;
    default: return -1;
    }
  }

  private final boolean action77(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 6);
    case 101:
      return reduce(RULE_15, 6);
    case 154:
      return reduce(RULE_15, 6);
    case 145:
      return reduce(RULE_15, 6);
    case 132:
      return reduce(RULE_15, 6);
    case 167:
      return reduce(RULE_15, 6);
    case 103:
      return reduce(RULE_15, 6);
    case 120:
      return reduce(RULE_15, 6);
    case 194:
      return reduce(RULE_15, 6);
    case 112:
      return reduce(RULE_15, 6);
    case 148:
      return reduce(RULE_15, 6);
    case 149:
      return reduce(RULE_15, 6);
    case 110:
      return reduce(RULE_15, 6);
    case 108:
      return reduce(RULE_15, 6);
    case 106:
      return reduce(RULE_15, 6);
    case 125:
      return reduce(RULE_15, 6);
    case 105:
      return reduce(RULE_15, 6);
    case 98:
      return reduce(RULE_15, 6);
    case 155:
      return reduce(RULE_15, 6);
    case 138:
      return reduce(RULE_15, 6);
    case 142:
      return reduce(RULE_15, 6);
    case 197:
      return reduce(RULE_15, 6);
    case 150:
      return reduce(RULE_15, 6);
    case 111:
      return reduce(RULE_15, 6);
    case 183:
      return reduce(RULE_15, 6);
    case 175:
      return reduce(RULE_15, 6);
    case 128:
      return reduce(RULE_15, 6);
    case 169:
      return reduce(RULE_15, 6);
    case 190:
      return reduce(RULE_15, 6);
    case 143:
      return reduce(RULE_15, 6);
    case 164:
      return reduce(RULE_15, 6);
    case 203:
      return reduce(RULE_15, 6);
    case 147:
      return reduce(RULE_15, 6);
    case 193:
      return reduce(RULE_15, 6);
    case 182:
      return reduce(RULE_15, 6);
    case 109:
      return reduce(RULE_15, 6);
    case 191:
      return reduce(RULE_15, 6);
    case 131:
      return reduce(RULE_15, 6);
    case 118:
      return reduce(RULE_15, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action78(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 34);
    case 101:
      return reduce(RULE_15, 34);
    case 154:
      return reduce(RULE_15, 34);
    case 145:
      return reduce(RULE_15, 34);
    case 132:
      return reduce(RULE_15, 34);
    case 167:
      return reduce(RULE_15, 34);
    case 103:
      return reduce(RULE_15, 34);
    case 120:
      return reduce(RULE_15, 34);
    case 194:
      return reduce(RULE_15, 34);
    case 112:
      return reduce(RULE_15, 34);
    case 148:
      return reduce(RULE_15, 34);
    case 149:
      return reduce(RULE_15, 34);
    case 110:
      return reduce(RULE_15, 34);
    case 108:
      return reduce(RULE_15, 34);
    case 106:
      return reduce(RULE_15, 34);
    case 125:
      return reduce(RULE_15, 34);
    case 105:
      return reduce(RULE_15, 34);
    case 98:
      return reduce(RULE_15, 34);
    case 155:
      return reduce(RULE_15, 34);
    case 138:
      return reduce(RULE_15, 34);
    case 142:
      return reduce(RULE_15, 34);
    case 197:
      return reduce(RULE_15, 34);
    case 150:
      return reduce(RULE_15, 34);
    case 111:
      return reduce(RULE_15, 34);
    case 183:
      return reduce(RULE_15, 34);
    case 175:
      return reduce(RULE_15, 34);
    case 128:
      return reduce(RULE_15, 34);
    case 169:
      return reduce(RULE_15, 34);
    case 190:
      return reduce(RULE_15, 34);
    case 143:
      return reduce(RULE_15, 34);
    case 164:
      return reduce(RULE_15, 34);
    case 203:
      return reduce(RULE_15, 34);
    case 147:
      return reduce(RULE_15, 34);
    case 193:
      return reduce(RULE_15, 34);
    case 182:
      return reduce(RULE_15, 34);
    case 109:
      return reduce(RULE_15, 34);
    case 191:
      return reduce(RULE_15, 34);
    case 131:
      return reduce(RULE_15, 34);
    case 118:
      return reduce(RULE_15, 34);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action79(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 11);
    case 101:
      return reduce(RULE_15, 11);
    case 154:
      return reduce(RULE_15, 11);
    case 145:
      return reduce(RULE_15, 11);
    case 132:
      return reduce(RULE_15, 11);
    case 167:
      return reduce(RULE_15, 11);
    case 103:
      return reduce(RULE_15, 11);
    case 120:
      return reduce(RULE_15, 11);
    case 194:
      return reduce(RULE_15, 11);
    case 112:
      return reduce(RULE_15, 11);
    case 148:
      return reduce(RULE_15, 11);
    case 149:
      return reduce(RULE_15, 11);
    case 110:
      return reduce(RULE_15, 11);
    case 108:
      return reduce(RULE_15, 11);
    case 106:
      return reduce(RULE_15, 11);
    case 125:
      return reduce(RULE_15, 11);
    case 105:
      return reduce(RULE_15, 11);
    case 98:
      return reduce(RULE_15, 11);
    case 155:
      return reduce(RULE_15, 11);
    case 138:
      return reduce(RULE_15, 11);
    case 142:
      return reduce(RULE_15, 11);
    case 197:
      return reduce(RULE_15, 11);
    case 150:
      return reduce(RULE_15, 11);
    case 111:
      return reduce(RULE_15, 11);
    case 183:
      return reduce(RULE_15, 11);
    case 175:
      return reduce(RULE_15, 11);
    case 128:
      return reduce(RULE_15, 11);
    case 169:
      return reduce(RULE_15, 11);
    case 190:
      return reduce(RULE_15, 11);
    case 143:
      return reduce(RULE_15, 11);
    case 164:
      return reduce(RULE_15, 11);
    case 203:
      return reduce(RULE_15, 11);
    case 147:
      return reduce(RULE_15, 11);
    case 193:
      return reduce(RULE_15, 11);
    case 182:
      return reduce(RULE_15, 11);
    case 109:
      return reduce(RULE_15, 11);
    case 191:
      return reduce(RULE_15, 11);
    case 131:
      return reduce(RULE_15, 11);
    case 118:
      return reduce(RULE_15, 11);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action80(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(150);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto80(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 152;
    default: return -1;
    }
  }

  private final boolean action81(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 3);
    case 101:
      return reduce(RULE_15, 3);
    case 154:
      return reduce(RULE_15, 3);
    case 145:
      return reduce(RULE_15, 3);
    case 132:
      return reduce(RULE_15, 3);
    case 167:
      return reduce(RULE_15, 3);
    case 103:
      return reduce(RULE_15, 3);
    case 120:
      return reduce(RULE_15, 3);
    case 194:
      return reduce(RULE_15, 3);
    case 112:
      return reduce(RULE_15, 3);
    case 148:
      return reduce(RULE_15, 3);
    case 149:
      return reduce(RULE_15, 3);
    case 110:
      return reduce(RULE_15, 3);
    case 108:
      return reduce(RULE_15, 3);
    case 106:
      return reduce(RULE_15, 3);
    case 125:
      return reduce(RULE_15, 3);
    case 105:
      return reduce(RULE_15, 3);
    case 98:
      return reduce(RULE_15, 3);
    case 155:
      return reduce(RULE_15, 3);
    case 138:
      return reduce(RULE_15, 3);
    case 142:
      return reduce(RULE_15, 3);
    case 197:
      return reduce(RULE_15, 3);
    case 150:
      return reduce(RULE_15, 3);
    case 111:
      return reduce(RULE_15, 3);
    case 183:
      return reduce(RULE_15, 3);
    case 175:
      return reduce(RULE_15, 3);
    case 128:
      return reduce(RULE_15, 3);
    case 169:
      return reduce(RULE_15, 3);
    case 190:
      return reduce(RULE_15, 3);
    case 143:
      return reduce(RULE_15, 3);
    case 164:
      return reduce(RULE_15, 3);
    case 203:
      return reduce(RULE_15, 3);
    case 147:
      return reduce(RULE_15, 3);
    case 193:
      return reduce(RULE_15, 3);
    case 182:
      return reduce(RULE_15, 3);
    case 109:
      return reduce(RULE_15, 3);
    case 191:
      return reduce(RULE_15, 3);
    case 131:
      return reduce(RULE_15, 3);
    case 118:
      return reduce(RULE_15, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action82(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 10);
    case 101:
      return reduce(RULE_15, 10);
    case 154:
      return reduce(RULE_15, 10);
    case 145:
      return reduce(RULE_15, 10);
    case 132:
      return reduce(RULE_15, 10);
    case 167:
      return reduce(RULE_15, 10);
    case 103:
      return reduce(RULE_15, 10);
    case 120:
      return reduce(RULE_15, 10);
    case 194:
      return reduce(RULE_15, 10);
    case 112:
      return reduce(RULE_15, 10);
    case 148:
      return reduce(RULE_15, 10);
    case 149:
      return reduce(RULE_15, 10);
    case 110:
      return reduce(RULE_15, 10);
    case 108:
      return reduce(RULE_15, 10);
    case 106:
      return reduce(RULE_15, 10);
    case 125:
      return reduce(RULE_15, 10);
    case 105:
      return reduce(RULE_15, 10);
    case 98:
      return reduce(RULE_15, 10);
    case 155:
      return reduce(RULE_15, 10);
    case 138:
      return reduce(RULE_15, 10);
    case 142:
      return reduce(RULE_15, 10);
    case 197:
      return reduce(RULE_15, 10);
    case 150:
      return reduce(RULE_15, 10);
    case 111:
      return reduce(RULE_15, 10);
    case 183:
      return reduce(RULE_15, 10);
    case 175:
      return reduce(RULE_15, 10);
    case 128:
      return reduce(RULE_15, 10);
    case 169:
      return reduce(RULE_15, 10);
    case 190:
      return reduce(RULE_15, 10);
    case 143:
      return reduce(RULE_15, 10);
    case 164:
      return reduce(RULE_15, 10);
    case 203:
      return reduce(RULE_15, 10);
    case 147:
      return reduce(RULE_15, 10);
    case 193:
      return reduce(RULE_15, 10);
    case 182:
      return reduce(RULE_15, 10);
    case 109:
      return reduce(RULE_15, 10);
    case 191:
      return reduce(RULE_15, 10);
    case 131:
      return reduce(RULE_15, 10);
    case 118:
      return reduce(RULE_15, 10);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action83(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 7);
    case 101:
      return reduce(RULE_15, 7);
    case 154:
      return reduce(RULE_15, 7);
    case 145:
      return reduce(RULE_15, 7);
    case 132:
      return reduce(RULE_15, 7);
    case 167:
      return reduce(RULE_15, 7);
    case 103:
      return reduce(RULE_15, 7);
    case 120:
      return reduce(RULE_15, 7);
    case 194:
      return reduce(RULE_15, 7);
    case 112:
      return reduce(RULE_15, 7);
    case 148:
      return reduce(RULE_15, 7);
    case 149:
      return reduce(RULE_15, 7);
    case 110:
      return reduce(RULE_15, 7);
    case 108:
      return reduce(RULE_15, 7);
    case 106:
      return reduce(RULE_15, 7);
    case 125:
      return reduce(RULE_15, 7);
    case 105:
      return reduce(RULE_15, 7);
    case 98:
      return reduce(RULE_15, 7);
    case 155:
      return reduce(RULE_15, 7);
    case 138:
      return reduce(RULE_15, 7);
    case 142:
      return reduce(RULE_15, 7);
    case 197:
      return reduce(RULE_15, 7);
    case 150:
      return reduce(RULE_15, 7);
    case 111:
      return reduce(RULE_15, 7);
    case 183:
      return reduce(RULE_15, 7);
    case 175:
      return reduce(RULE_15, 7);
    case 128:
      return reduce(RULE_15, 7);
    case 169:
      return reduce(RULE_15, 7);
    case 190:
      return reduce(RULE_15, 7);
    case 143:
      return reduce(RULE_15, 7);
    case 164:
      return reduce(RULE_15, 7);
    case 203:
      return reduce(RULE_15, 7);
    case 147:
      return reduce(RULE_15, 7);
    case 193:
      return reduce(RULE_15, 7);
    case 182:
      return reduce(RULE_15, 7);
    case 109:
      return reduce(RULE_15, 7);
    case 191:
      return reduce(RULE_15, 7);
    case 131:
      return reduce(RULE_15, 7);
    case 118:
      return reduce(RULE_15, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action84(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto84(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 56: return 154;
    case 54: return 94;
    case 58: return 95;
    case 28: return 155;
    case 29: return 156;
    case 30: return 157;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action85(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(158);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action86(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 15);
    case 101:
      return reduce(RULE_15, 15);
    case 154:
      return reduce(RULE_15, 15);
    case 145:
      return reduce(RULE_15, 15);
    case 132:
      return reduce(RULE_15, 15);
    case 167:
      return reduce(RULE_15, 15);
    case 103:
      return reduce(RULE_15, 15);
    case 120:
      return reduce(RULE_15, 15);
    case 194:
      return reduce(RULE_15, 15);
    case 112:
      return reduce(RULE_15, 15);
    case 148:
      return reduce(RULE_15, 15);
    case 149:
      return reduce(RULE_15, 15);
    case 110:
      return reduce(RULE_15, 15);
    case 108:
      return reduce(RULE_15, 15);
    case 106:
      return reduce(RULE_15, 15);
    case 125:
      return reduce(RULE_15, 15);
    case 105:
      return reduce(RULE_15, 15);
    case 98:
      return reduce(RULE_15, 15);
    case 155:
      return reduce(RULE_15, 15);
    case 138:
      return reduce(RULE_15, 15);
    case 142:
      return reduce(RULE_15, 15);
    case 197:
      return reduce(RULE_15, 15);
    case 150:
      return reduce(RULE_15, 15);
    case 111:
      return reduce(RULE_15, 15);
    case 183:
      return reduce(RULE_15, 15);
    case 175:
      return reduce(RULE_15, 15);
    case 128:
      return reduce(RULE_15, 15);
    case 169:
      return reduce(RULE_15, 15);
    case 190:
      return reduce(RULE_15, 15);
    case 143:
      return reduce(RULE_15, 15);
    case 164:
      return reduce(RULE_15, 15);
    case 203:
      return reduce(RULE_15, 15);
    case 147:
      return reduce(RULE_15, 15);
    case 193:
      return reduce(RULE_15, 15);
    case 182:
      return reduce(RULE_15, 15);
    case 109:
      return reduce(RULE_15, 15);
    case 191:
      return reduce(RULE_15, 15);
    case 131:
      return reduce(RULE_15, 15);
    case 118:
      return reduce(RULE_15, 15);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action87(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 18);
    case 101:
      return reduce(RULE_15, 18);
    case 154:
      return reduce(RULE_15, 18);
    case 145:
      return reduce(RULE_15, 18);
    case 132:
      return reduce(RULE_15, 18);
    case 167:
      return reduce(RULE_15, 18);
    case 103:
      return reduce(RULE_15, 18);
    case 120:
      return reduce(RULE_15, 18);
    case 194:
      return reduce(RULE_15, 18);
    case 112:
      return reduce(RULE_15, 18);
    case 148:
      return reduce(RULE_15, 18);
    case 149:
      return reduce(RULE_15, 18);
    case 110:
      return reduce(RULE_15, 18);
    case 108:
      return reduce(RULE_15, 18);
    case 106:
      return reduce(RULE_15, 18);
    case 125:
      return reduce(RULE_15, 18);
    case 105:
      return reduce(RULE_15, 18);
    case 98:
      return reduce(RULE_15, 18);
    case 155:
      return reduce(RULE_15, 18);
    case 138:
      return reduce(RULE_15, 18);
    case 142:
      return reduce(RULE_15, 18);
    case 197:
      return reduce(RULE_15, 18);
    case 150:
      return reduce(RULE_15, 18);
    case 111:
      return reduce(RULE_15, 18);
    case 183:
      return reduce(RULE_15, 18);
    case 175:
      return reduce(RULE_15, 18);
    case 128:
      return reduce(RULE_15, 18);
    case 169:
      return reduce(RULE_15, 18);
    case 190:
      return reduce(RULE_15, 18);
    case 143:
      return reduce(RULE_15, 18);
    case 164:
      return reduce(RULE_15, 18);
    case 203:
      return reduce(RULE_15, 18);
    case 147:
      return reduce(RULE_15, 18);
    case 193:
      return reduce(RULE_15, 18);
    case 182:
      return reduce(RULE_15, 18);
    case 109:
      return reduce(RULE_15, 18);
    case 191:
      return reduce(RULE_15, 18);
    case 131:
      return reduce(RULE_15, 18);
    case 118:
      return reduce(RULE_15, 18);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action88(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(159);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(160);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, ARROW, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto88(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 56: return 161;
    case 54: return 94;
    case 58: return 95;
    case 28: return 155;
    case 29: return 162;
    case 30: return 157;
    case 60: return 99;
    case 55: return 163;
    default: return -1;
    }
  }

  private final boolean action89(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 14);
    case 101:
      return reduce(RULE_15, 14);
    case 154:
      return reduce(RULE_15, 14);
    case 145:
      return reduce(RULE_15, 14);
    case 132:
      return reduce(RULE_15, 14);
    case 167:
      return reduce(RULE_15, 14);
    case 103:
      return reduce(RULE_15, 14);
    case 120:
      return reduce(RULE_15, 14);
    case 194:
      return reduce(RULE_15, 14);
    case 112:
      return reduce(RULE_15, 14);
    case 148:
      return reduce(RULE_15, 14);
    case 149:
      return reduce(RULE_15, 14);
    case 110:
      return reduce(RULE_15, 14);
    case 108:
      return reduce(RULE_15, 14);
    case 106:
      return reduce(RULE_15, 14);
    case 125:
      return reduce(RULE_15, 14);
    case 105:
      return reduce(RULE_15, 14);
    case 98:
      return reduce(RULE_15, 14);
    case 155:
      return reduce(RULE_15, 14);
    case 138:
      return reduce(RULE_15, 14);
    case 142:
      return reduce(RULE_15, 14);
    case 197:
      return reduce(RULE_15, 14);
    case 150:
      return reduce(RULE_15, 14);
    case 111:
      return reduce(RULE_15, 14);
    case 183:
      return reduce(RULE_15, 14);
    case 175:
      return reduce(RULE_15, 14);
    case 128:
      return reduce(RULE_15, 14);
    case 169:
      return reduce(RULE_15, 14);
    case 190:
      return reduce(RULE_15, 14);
    case 143:
      return reduce(RULE_15, 14);
    case 164:
      return reduce(RULE_15, 14);
    case 203:
      return reduce(RULE_15, 14);
    case 147:
      return reduce(RULE_15, 14);
    case 193:
      return reduce(RULE_15, 14);
    case 182:
      return reduce(RULE_15, 14);
    case 109:
      return reduce(RULE_15, 14);
    case 191:
      return reduce(RULE_15, 14);
    case 131:
      return reduce(RULE_15, 14);
    case 118:
      return reduce(RULE_15, 14);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action90(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 19);
    case 101:
      return reduce(RULE_15, 19);
    case 154:
      return reduce(RULE_15, 19);
    case 145:
      return reduce(RULE_15, 19);
    case 132:
      return reduce(RULE_15, 19);
    case 167:
      return reduce(RULE_15, 19);
    case 103:
      return reduce(RULE_15, 19);
    case 120:
      return reduce(RULE_15, 19);
    case 194:
      return reduce(RULE_15, 19);
    case 112:
      return reduce(RULE_15, 19);
    case 148:
      return reduce(RULE_15, 19);
    case 149:
      return reduce(RULE_15, 19);
    case 110:
      return reduce(RULE_15, 19);
    case 108:
      return reduce(RULE_15, 19);
    case 106:
      return reduce(RULE_15, 19);
    case 125:
      return reduce(RULE_15, 19);
    case 105:
      return reduce(RULE_15, 19);
    case 98:
      return reduce(RULE_15, 19);
    case 155:
      return reduce(RULE_15, 19);
    case 138:
      return reduce(RULE_15, 19);
    case 142:
      return reduce(RULE_15, 19);
    case 197:
      return reduce(RULE_15, 19);
    case 150:
      return reduce(RULE_15, 19);
    case 111:
      return reduce(RULE_15, 19);
    case 183:
      return reduce(RULE_15, 19);
    case 175:
      return reduce(RULE_15, 19);
    case 128:
      return reduce(RULE_15, 19);
    case 169:
      return reduce(RULE_15, 19);
    case 190:
      return reduce(RULE_15, 19);
    case 143:
      return reduce(RULE_15, 19);
    case 164:
      return reduce(RULE_15, 19);
    case 203:
      return reduce(RULE_15, 19);
    case 147:
      return reduce(RULE_15, 19);
    case 193:
      return reduce(RULE_15, 19);
    case 182:
      return reduce(RULE_15, 19);
    case 109:
      return reduce(RULE_15, 19);
    case 191:
      return reduce(RULE_15, 19);
    case 131:
      return reduce(RULE_15, 19);
    case 118:
      return reduce(RULE_15, 19);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action91(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_16, 2);
    case 103:
      return reduce(RULE_16, 2);
    case 194:
      return reduce(RULE_16, 2);
    case 109:
      return reduce(RULE_16, 2);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, RANGLE, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action92(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 167:
      return reduce(RULE_17, 0);
    case 103:
      return reduce(RULE_17, 0);
    case 194:
      return reduce(RULE_17, 0);
    case 109:
      return reduce(RULE_17, 0);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action93(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_18, 0);
    case 101:
      return reduce(RULE_18, 0);
    case 154:
      return reduce(RULE_18, 0);
    case 145:
      return reduce(RULE_18, 0);
    case 132:
      return reduce(RULE_18, 0);
    case 167:
      return reduce(RULE_18, 0);
    case 103:
      return reduce(RULE_18, 0);
    case 120:
      return reduce(RULE_18, 0);
    case 194:
      return reduce(RULE_18, 0);
    case 112:
      return reduce(RULE_18, 0);
    case 148:
      return reduce(RULE_18, 0);
    case 110:
      return reduce(RULE_18, 0);
    case 149:
      return reduce(RULE_18, 0);
    case 106:
      return reduce(RULE_18, 0);
    case 108:
      return reduce(RULE_18, 0);
    case 125:
      return reduce(RULE_18, 0);
    case 105:
      return reduce(RULE_18, 0);
    case 98:
      return reduce(RULE_18, 0);
    case 142:
      return reduce(RULE_18, 0);
    case 138:
      return reduce(RULE_18, 0);
    case 155:
      return reduce(RULE_18, 0);
    case 150:
      return reduce(RULE_18, 0);
    case 197:
      return reduce(RULE_18, 0);
    case 111:
      return reduce(RULE_18, 0);
    case 183:
      return reduce(RULE_18, 0);
    case 175:
      return reduce(RULE_18, 0);
    case 128:
      return reduce(RULE_18, 0);
    case 190:
      return reduce(RULE_18, 0);
    case 169:
      return reduce(RULE_18, 0);
    case 143:
      return reduce(RULE_18, 0);
    case 176:
      return reduce(RULE_18, 0);
    case 164:
      return reduce(RULE_18, 0);
    case 203:
      return reduce(RULE_18, 0);
    case 147:
      return reduce(RULE_18, 0);
    case 193:
      return reduce(RULE_18, 0);
    case 182:
      return reduce(RULE_18, 0);
    case 109:
      return reduce(RULE_18, 0);
    case 191:
      return reduce(RULE_18, 0);
    case 131:
      return reduce(RULE_18, 0);
    case 118:
      return reduce(RULE_18, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action94(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_19, 0);
    case 101:
      return reduce(RULE_19, 0);
    case 154:
      return reduce(RULE_19, 0);
    case 145:
      return reduce(RULE_19, 0);
    case 132:
      return reduce(RULE_19, 0);
    case 167:
      return reduce(RULE_19, 0);
    case 103:
      return reduce(RULE_19, 0);
    case 120:
      return reduce(RULE_19, 0);
    case 194:
      return reduce(RULE_19, 0);
    case 112:
      return reduce(RULE_19, 0);
    case 148:
      return reduce(RULE_19, 0);
    case 149:
      return reduce(RULE_19, 0);
    case 110:
      return reduce(RULE_19, 0);
    case 108:
      return reduce(RULE_19, 0);
    case 106:
      return reduce(RULE_19, 0);
    case 125:
      return reduce(RULE_19, 0);
    case 105:
      return reduce(RULE_19, 0);
    case 98:
      return reduce(RULE_19, 0);
    case 155:
      return reduce(RULE_19, 0);
    case 138:
      return reduce(RULE_19, 0);
    case 142:
      return reduce(RULE_19, 0);
    case 197:
      return reduce(RULE_19, 0);
    case 150:
      return reduce(RULE_19, 0);
    case 183:
      return reduce(RULE_19, 0);
    case 175:
      return reduce(RULE_19, 0);
    case 128:
      return reduce(RULE_19, 0);
    case 169:
      return reduce(RULE_19, 0);
    case 190:
      return reduce(RULE_19, 0);
    case 143:
      return reduce(RULE_19, 0);
    case 164:
      return reduce(RULE_19, 0);
    case 203:
      return reduce(RULE_19, 0);
    case 147:
      return reduce(RULE_19, 0);
    case 193:
      return reduce(RULE_19, 0);
    case 182:
      return reduce(RULE_19, 0);
    case 109:
      return reduce(RULE_19, 0);
    case 191:
      return reduce(RULE_19, 0);
    case 131:
      return reduce(RULE_19, 0);
    case 118:
      return reduce(RULE_19, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action95(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_19, 1);
    case 101:
      return reduce(RULE_19, 1);
    case 154:
      return reduce(RULE_19, 1);
    case 145:
      return reduce(RULE_19, 1);
    case 132:
      return reduce(RULE_19, 1);
    case 167:
      return reduce(RULE_19, 1);
    case 103:
      return reduce(RULE_19, 1);
    case 120:
      return reduce(RULE_19, 1);
    case 194:
      return reduce(RULE_19, 1);
    case 112:
      return reduce(RULE_19, 1);
    case 148:
      return reduce(RULE_19, 1);
    case 149:
      return reduce(RULE_19, 1);
    case 110:
      return reduce(RULE_19, 1);
    case 108:
      return reduce(RULE_19, 1);
    case 106:
      return reduce(RULE_19, 1);
    case 125:
      return reduce(RULE_19, 1);
    case 105:
      return reduce(RULE_19, 1);
    case 98:
      return reduce(RULE_19, 1);
    case 155:
      return reduce(RULE_19, 1);
    case 138:
      return reduce(RULE_19, 1);
    case 142:
      return reduce(RULE_19, 1);
    case 197:
      return reduce(RULE_19, 1);
    case 150:
      return reduce(RULE_19, 1);
    case 183:
      return reduce(RULE_19, 1);
    case 175:
      return reduce(RULE_19, 1);
    case 128:
      return reduce(RULE_19, 1);
    case 169:
      return reduce(RULE_19, 1);
    case 190:
      return reduce(RULE_19, 1);
    case 143:
      return reduce(RULE_19, 1);
    case 164:
      return reduce(RULE_19, 1);
    case 203:
      return reduce(RULE_19, 1);
    case 147:
      return reduce(RULE_19, 1);
    case 193:
      return reduce(RULE_19, 1);
    case 182:
      return reduce(RULE_19, 1);
    case 109:
      return reduce(RULE_19, 1);
    case 191:
      return reduce(RULE_19, 1);
    case 131:
      return reduce(RULE_19, 1);
    case 118:
      return reduce(RULE_19, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action96(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_16, 0);
    case 103:
      return reduce(RULE_16, 0);
    case 194:
      return reduce(RULE_16, 0);
    case 109:
      return reduce(RULE_16, 0);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, RANGLE, LANGLE, SUPER_KEYWORD, DOT, COMMA});
    }
  }

  private final boolean action97(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_16, 1);
    case 103:
      return reduce(RULE_16, 1);
    case 194:
      return reduce(RULE_16, 1);
    case 109:
      return reduce(RULE_16, 1);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, RANGLE, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action98(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_20, 3);
    case 154:
      return reduce(RULE_20, 3);
    case 181:
      return reduce(RULE_20, 3);
    case 184:
      return reduce(RULE_20, 3);
    case 134:
      return reduce(RULE_20, 3);
    case 185:
      return reduce(RULE_20, 3);
    case 153:
      return reduce(RULE_20, 3);
    case 205:
      return reduce(RULE_20, 3);
    case 148:
      return reduce(RULE_20, 3);
    case 125:
      return reduce(RULE_20, 3);
    case 105:
      return reduce(RULE_20, 3);
    case 98:
      return reduce(RULE_20, 3);
    case 124:
      return reduce(RULE_20, 3);
    case 142:
      return reduce(RULE_20, 3);
    case 138:
      return reduce(RULE_20, 3);
    case 155:
      return reduce(RULE_20, 3);
    case 186:
      return reduce(RULE_20, 3);
    case 175:
      return reduce(RULE_20, 3);
    case 128:
      return reduce(RULE_20, 3);
    case 143:
      return reduce(RULE_20, 3);
    case 179:
      return reduce(RULE_20, 3);
    case 164:
      return reduce(RULE_20, 3);
    case 203:
      return reduce(RULE_20, 3);
    case 195:
      return reduce(RULE_20, 3);
    case 193:
      return reduce(RULE_20, 3);
    case 158:
      return reduce(RULE_20, 3);
    case 131:
      return reduce(RULE_20, 3);
    case 156:
      return reduce(RULE_20, 3);
    case 173:
      return reduce(RULE_20, 3);
    case 101:
      return reduce(RULE_20, 3);
    case 102:
      return reduce(RULE_20, 3);
    case 145:
      return reduce(RULE_20, 3);
    case 201:
      return reduce(RULE_20, 3);
    case 132:
      return reduce(RULE_20, 3);
    case 202:
      return reduce(RULE_20, 3);
    case 167:
      return reduce(RULE_20, 3);
    case 103:
      return reduce(RULE_20, 3);
    case 133:
      return reduce(RULE_20, 3);
    case 120:
      return reduce(RULE_20, 3);
    case 168:
      return reduce(RULE_20, 3);
    case 194:
      return reduce(RULE_20, 3);
    case 112:
      return reduce(RULE_20, 3);
    case 149:
      return reduce(RULE_20, 3);
    case 110:
      return reduce(RULE_20, 3);
    case 200:
      return reduce(RULE_20, 3);
    case 192:
      return reduce(RULE_20, 3);
    case 108:
      return reduce(RULE_20, 3);
    case 106:
      return reduce(RULE_20, 3);
    case 165:
      return reduce(RULE_20, 3);
    case 150:
      return reduce(RULE_20, 3);
    case 197:
      return reduce(RULE_20, 3);
    case 111:
      return reduce(RULE_20, 3);
    case 183:
      return reduce(RULE_20, 3);
    case 198:
      return reduce(RULE_20, 3);
    case 100:
      return reduce(RULE_20, 3);
    case 171:
      return reduce(RULE_20, 3);
    case 169:
      return reduce(RULE_20, 3);
    case 190:
      return reduce(RULE_20, 3);
    case 176:
      return reduce(RULE_20, 3);
    case 147:
      return reduce(RULE_20, 3);
    case 99:
      return reduce(RULE_20, 3);
    case 182:
      return reduce(RULE_20, 3);
    case 109:
      return reduce(RULE_20, 3);
    case 191:
      return reduce(RULE_20, 3);
    case 118:
      return reduce(RULE_20, 3);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action99(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_21, 4);
    case 101:
      return reduce(RULE_21, 4);
    case 154:
      return reduce(RULE_21, 4);
    case 145:
      return reduce(RULE_21, 4);
    case 132:
      return reduce(RULE_21, 4);
    case 167:
      return reduce(RULE_21, 4);
    case 103:
      return reduce(RULE_21, 4);
    case 120:
      return reduce(RULE_21, 4);
    case 194:
      return reduce(RULE_21, 4);
    case 112:
      return reduce(RULE_21, 4);
    case 148:
      return reduce(RULE_21, 4);
    case 149:
      return reduce(RULE_21, 4);
    case 110:
      return reduce(RULE_21, 4);
    case 108:
      return reduce(RULE_21, 4);
    case 106:
      return reduce(RULE_21, 4);
    case 125:
      return reduce(RULE_21, 4);
    case 105:
      return reduce(RULE_21, 4);
    case 98:
      return reduce(RULE_21, 4);
    case 155:
      return reduce(RULE_21, 4);
    case 138:
      return reduce(RULE_21, 4);
    case 142:
      return reduce(RULE_21, 4);
    case 197:
      return reduce(RULE_21, 4);
    case 150:
      return reduce(RULE_21, 4);
    case 111:
      return reduce(RULE_21, 4);
    case 183:
      return reduce(RULE_21, 4);
    case 175:
      return reduce(RULE_21, 4);
    case 128:
      return reduce(RULE_21, 4);
    case 169:
      return reduce(RULE_21, 4);
    case 190:
      return reduce(RULE_21, 4);
    case 143:
      return reduce(RULE_21, 4);
    case 164:
      return reduce(RULE_21, 4);
    case 203:
      return reduce(RULE_21, 4);
    case 147:
      return reduce(RULE_21, 4);
    case 193:
      return reduce(RULE_21, 4);
    case 182:
      return reduce(RULE_21, 4);
    case 109:
      return reduce(RULE_21, 4);
    case 191:
      return reduce(RULE_21, 4);
    case 131:
      return reduce(RULE_21, 4);
    case 118:
      return reduce(RULE_21, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action100(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_12, 1);
    case 167:
      return reduce(RULE_12, 1);
    case 131:
      return reduce(RULE_12, 1);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action101(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_8, 1);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action102(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 4);
    case 154:
      return reduce(RULE_22, 4);
    case 181:
      return reduce(RULE_22, 4);
    case 184:
      return reduce(RULE_22, 4);
    case 134:
      return reduce(RULE_22, 4);
    case 185:
      return reduce(RULE_22, 4);
    case 153:
      return reduce(RULE_22, 4);
    case 205:
      return reduce(RULE_22, 4);
    case 148:
      return reduce(RULE_22, 4);
    case 125:
      return reduce(RULE_22, 4);
    case 105:
      return reduce(RULE_22, 4);
    case 98:
      return reduce(RULE_22, 4);
    case 124:
      return reduce(RULE_22, 4);
    case 142:
      return reduce(RULE_22, 4);
    case 138:
      return reduce(RULE_22, 4);
    case 155:
      return reduce(RULE_22, 4);
    case 186:
      return reduce(RULE_22, 4);
    case 175:
      return reduce(RULE_22, 4);
    case 128:
      return reduce(RULE_22, 4);
    case 143:
      return reduce(RULE_22, 4);
    case 179:
      return reduce(RULE_22, 4);
    case 164:
      return reduce(RULE_22, 4);
    case 203:
      return reduce(RULE_22, 4);
    case 195:
      return reduce(RULE_22, 4);
    case 193:
      return reduce(RULE_22, 4);
    case 158:
      return reduce(RULE_22, 4);
    case 131:
      return reduce(RULE_22, 4);
    case 156:
      return reduce(RULE_22, 4);
    case 173:
      return reduce(RULE_22, 4);
    case 101:
      return reduce(RULE_22, 4);
    case 102:
      return reduce(RULE_22, 4);
    case 145:
      return reduce(RULE_22, 4);
    case 201:
      return reduce(RULE_22, 4);
    case 132:
      return reduce(RULE_22, 4);
    case 202:
      return reduce(RULE_22, 4);
    case 167:
      return reduce(RULE_22, 4);
    case 103:
      return reduce(RULE_22, 4);
    case 133:
      return reduce(RULE_22, 4);
    case 120:
      return reduce(RULE_22, 4);
    case 168:
      return reduce(RULE_22, 4);
    case 194:
      return reduce(RULE_22, 4);
    case 112:
      return reduce(RULE_22, 4);
    case 149:
      return reduce(RULE_22, 4);
    case 110:
      return reduce(RULE_22, 4);
    case 200:
      return reduce(RULE_22, 4);
    case 192:
      return reduce(RULE_22, 4);
    case 108:
      return reduce(RULE_22, 4);
    case 106:
      return reduce(RULE_22, 4);
    case 165:
      return reduce(RULE_22, 4);
    case 150:
      return reduce(RULE_22, 4);
    case 197:
      return reduce(RULE_22, 4);
    case 111:
      return reduce(RULE_22, 4);
    case 183:
      return reduce(RULE_22, 4);
    case 198:
      return reduce(RULE_22, 4);
    case 100:
      return reduce(RULE_22, 4);
    case 171:
      return reduce(RULE_22, 4);
    case 169:
      return reduce(RULE_22, 4);
    case 190:
      return reduce(RULE_22, 4);
    case 176:
      return reduce(RULE_22, 4);
    case 147:
      return reduce(RULE_22, 4);
    case 99:
      return reduce(RULE_22, 4);
    case 182:
      return reduce(RULE_22, 4);
    case 109:
      return reduce(RULE_22, 4);
    case 191:
      return reduce(RULE_22, 4);
    case 118:
      return reduce(RULE_22, 4);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action103(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_12, 2);
    case 167:
      return reduce(RULE_12, 2);
    case 131:
      return reduce(RULE_12, 2);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action104(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 167:
      stateStack.addFirst(170);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_8, 2);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, COMMA});
    }
  }

  private final boolean action105(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_9, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action106(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_10, 1);
    case 167:
      return reduce(RULE_10, 1);
    case 131:
      return reduce(RULE_10, 1);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action107(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto107(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 172;
    case 64: return 173;
    case 62: return 174;
    case 68: return 175;
    case 30: return 176;
    case 67: return 177;
    case 60: return 99;
    case 61: return 102;
    case 54: return 94;
    case 49: return 178;
    case 58: return 95;
    case 28: return 179;
    case 59: return 98;
    case 65: return 180;
    default: return -1;
    }
  }

  private final boolean action108(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto108(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 181;
    default: return -1;
    }
  }

  private final boolean action109(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(182);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action110(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(116);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(183);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 188:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto110(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 119;
    case 51: return 120;
    case 8: return 121;
    case 27: return 122;
    case 33: return 123;
    case 7: return 124;
    case 30: return 125;
    case 9: return 126;
    case 60: return 99;
    case 48: return 127;
    case 26: return 128;
    case 10: return 129;
    case 54: return 94;
    case 28: return 130;
    case 58: return 95;
    default: return -1;
    }
  }

  private final boolean action111(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 0);
    case 101:
      return reduce(RULE_11, 0);
    case 181:
      return reduce(RULE_11, 0);
    case 188:
      return reduce(RULE_11, 0);
    case 201:
      return reduce(RULE_11, 0);
    case 202:
      return reduce(RULE_11, 0);
    case 132:
      return reduce(RULE_11, 0);
    case 205:
      return reduce(RULE_11, 0);
    case 133:
      return reduce(RULE_11, 0);
    case 206:
      return reduce(RULE_11, 0);
    case 200:
      return reduce(RULE_11, 0);
    case 192:
      return reduce(RULE_11, 0);
    case 165:
      return reduce(RULE_11, 0);
    case 98:
      return reduce(RULE_11, 0);
    case 155:
      return reduce(RULE_11, 0);
    case 142:
      return reduce(RULE_11, 0);
    case 183:
      return reduce(RULE_11, 0);
    case 186:
      return reduce(RULE_11, 0);
    case 175:
      return reduce(RULE_11, 0);
    case 128:
      return reduce(RULE_11, 0);
    case 171:
      return reduce(RULE_11, 0);
    case 190:
      return reduce(RULE_11, 0);
    case 169:
      return reduce(RULE_11, 0);
    case 179:
      return reduce(RULE_11, 0);
    case 164:
      return reduce(RULE_11, 0);
    case 203:
      return reduce(RULE_11, 0);
    case 147:
      return reduce(RULE_11, 0);
    case 193:
      return reduce(RULE_11, 0);
    case 182:
      return reduce(RULE_11, 0);
    case 158:
      return reduce(RULE_11, 0);
    case 131:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto111(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 184;
    default: return -1;
    }
  }

  private final boolean action112(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(185);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action113(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(186);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action114(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(187);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(140);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(188);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto114(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 189;
    case 30: return 149;
    default: return -1;
    }
  }

  private final boolean action115(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto115(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 191;
    default: return -1;
    }
  }

  private final boolean action116(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto116(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 193;
    default: return -1;
    }
  }

  private final boolean action117(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_23, 0);
    }
    switch (token.getType().ordinal())
    {
    case 203:
      return reduce(RULE_23, 0);
    case 161:
      return reduce(RULE_23, 0);
    case 101:
      return reduce(RULE_23, 0);
    case 155:
      return reduce(RULE_23, 0);
    case 180:
      return reduce(RULE_23, 0);
    case 183:
      return reduce(RULE_23, 0);
    case 193:
      return reduce(RULE_23, 0);
    case 182:
      return reduce(RULE_23, 0);
    case 175:
      return reduce(RULE_23, 0);
    case 162:
      return reduce(RULE_23, 0);
    case 190:
      return reduce(RULE_23, 0);
    case 169:
      return reduce(RULE_23, 0);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action118(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(196);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 196:
      stateStack.addFirst(199);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(159);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(160);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(202);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 199:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(210);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 207:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, ARROW, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, RBRACE, WHILE_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final int goto118(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 218;
    case 13: return 219;
    case 56: return 161;
    case 14: return 220;
    case 93: return 221;
    case 41: return 222;
    case 38: return 223;
    case 52: return 224;
    case 46: return 225;
    case 26: return 226;
    case 54: return 227;
    case 92: return 228;
    case 35: return 229;
    case 51: return 230;
    case 94: return 231;
    case 33: return 232;
    case 29: return 162;
    case 30: return 233;
    case 34: return 234;
    case 97: return 235;
    case 60: return 236;
    case 55: return 163;
    case 36: return 237;
    case 42: return 238;
    case 45: return 239;
    case 28: return 240;
    case 91: return 241;
    case 58: return 95;
    case 44: return 242;
    case 15: return 243;
    case 39: return 244;
    case 43: return 245;
    case 40: return 246;
    default: return -1;
    }
  }

  private final boolean action119(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 5);
    case 101:
      return reduce(RULE_11, 5);
    case 181:
      return reduce(RULE_11, 5);
    case 188:
      return reduce(RULE_11, 5);
    case 201:
      return reduce(RULE_11, 5);
    case 202:
      return reduce(RULE_11, 5);
    case 132:
      return reduce(RULE_11, 5);
    case 205:
      return reduce(RULE_11, 5);
    case 133:
      return reduce(RULE_11, 5);
    case 206:
      return reduce(RULE_11, 5);
    case 200:
      return reduce(RULE_11, 5);
    case 192:
      return reduce(RULE_11, 5);
    case 165:
      return reduce(RULE_11, 5);
    case 98:
      return reduce(RULE_11, 5);
    case 155:
      return reduce(RULE_11, 5);
    case 142:
      return reduce(RULE_11, 5);
    case 183:
      return reduce(RULE_11, 5);
    case 186:
      return reduce(RULE_11, 5);
    case 175:
      return reduce(RULE_11, 5);
    case 128:
      return reduce(RULE_11, 5);
    case 171:
      return reduce(RULE_11, 5);
    case 190:
      return reduce(RULE_11, 5);
    case 169:
      return reduce(RULE_11, 5);
    case 179:
      return reduce(RULE_11, 5);
    case 164:
      return reduce(RULE_11, 5);
    case 203:
      return reduce(RULE_11, 5);
    case 147:
      return reduce(RULE_11, 5);
    case 193:
      return reduce(RULE_11, 5);
    case 182:
      return reduce(RULE_11, 5);
    case 158:
      return reduce(RULE_11, 5);
    case 131:
      return reduce(RULE_11, 5);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action120(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_16, 2);
    case 101:
      return reduce(RULE_16, 2);
    case 145:
      return reduce(RULE_16, 2);
    case 132:
      return reduce(RULE_16, 2);
    case 103:
      return reduce(RULE_16, 2);
    case 112:
      return reduce(RULE_16, 2);
    case 148:
      return reduce(RULE_16, 2);
    case 149:
      return reduce(RULE_16, 2);
    case 110:
      return reduce(RULE_16, 2);
    case 108:
      return reduce(RULE_16, 2);
    case 106:
      return reduce(RULE_16, 2);
    case 125:
      return reduce(RULE_16, 2);
    case 98:
      return reduce(RULE_16, 2);
    case 142:
      return reduce(RULE_16, 2);
    case 138:
      return reduce(RULE_16, 2);
    case 155:
      return reduce(RULE_16, 2);
    case 150:
      return reduce(RULE_16, 2);
    case 197:
      return reduce(RULE_16, 2);
    case 183:
      return reduce(RULE_16, 2);
    case 175:
      return reduce(RULE_16, 2);
    case 190:
      return reduce(RULE_16, 2);
    case 169:
      return reduce(RULE_16, 2);
    case 143:
      return reduce(RULE_16, 2);
    case 164:
      return reduce(RULE_16, 2);
    case 203:
      return reduce(RULE_16, 2);
    case 147:
      return reduce(RULE_16, 2);
    case 193:
      return reduce(RULE_16, 2);
    case 182:
      return reduce(RULE_16, 2);
    case 109:
      return reduce(RULE_16, 2);
    case 191:
      return reduce(RULE_16, 2);
    case 131:
      return reduce(RULE_16, 2);
    case 118:
      return reduce(RULE_16, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, RANGLE, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, NAME, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action121(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 2);
    case 101:
      return reduce(RULE_11, 2);
    case 181:
      return reduce(RULE_11, 2);
    case 188:
      return reduce(RULE_11, 2);
    case 201:
      return reduce(RULE_11, 2);
    case 202:
      return reduce(RULE_11, 2);
    case 132:
      return reduce(RULE_11, 2);
    case 205:
      return reduce(RULE_11, 2);
    case 133:
      return reduce(RULE_11, 2);
    case 206:
      return reduce(RULE_11, 2);
    case 200:
      return reduce(RULE_11, 2);
    case 192:
      return reduce(RULE_11, 2);
    case 165:
      return reduce(RULE_11, 2);
    case 98:
      return reduce(RULE_11, 2);
    case 155:
      return reduce(RULE_11, 2);
    case 142:
      return reduce(RULE_11, 2);
    case 183:
      return reduce(RULE_11, 2);
    case 186:
      return reduce(RULE_11, 2);
    case 175:
      return reduce(RULE_11, 2);
    case 128:
      return reduce(RULE_11, 2);
    case 171:
      return reduce(RULE_11, 2);
    case 190:
      return reduce(RULE_11, 2);
    case 169:
      return reduce(RULE_11, 2);
    case 179:
      return reduce(RULE_11, 2);
    case 164:
      return reduce(RULE_11, 2);
    case 203:
      return reduce(RULE_11, 2);
    case 147:
      return reduce(RULE_11, 2);
    case 193:
      return reduce(RULE_11, 2);
    case 182:
      return reduce(RULE_11, 2);
    case 158:
      return reduce(RULE_11, 2);
    case 131:
      return reduce(RULE_11, 2);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action122(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 188:
      stateStack.addFirst(247);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {PROPERTY_KEYWORD});
    }
  }

  private final boolean action123(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_24, 1);
    case 101:
      return reduce(RULE_24, 1);
    case 188:
      return reduce(RULE_24, 1);
    case 181:
      return reduce(RULE_24, 1);
    case 201:
      return reduce(RULE_24, 1);
    case 132:
      return reduce(RULE_24, 1);
    case 202:
      return reduce(RULE_24, 1);
    case 133:
      return reduce(RULE_24, 1);
    case 205:
      return reduce(RULE_24, 1);
    case 206:
      return reduce(RULE_24, 1);
    case 192:
      return reduce(RULE_24, 1);
    case 200:
      return reduce(RULE_24, 1);
    case 165:
      return reduce(RULE_24, 1);
    case 98:
      return reduce(RULE_24, 1);
    case 155:
      return reduce(RULE_24, 1);
    case 142:
      return reduce(RULE_24, 1);
    case 183:
      return reduce(RULE_24, 1);
    case 186:
      return reduce(RULE_24, 1);
    case 175:
      return reduce(RULE_24, 1);
    case 128:
      return reduce(RULE_24, 1);
    case 171:
      return reduce(RULE_24, 1);
    case 190:
      return reduce(RULE_24, 1);
    case 169:
      return reduce(RULE_24, 1);
    case 179:
      return reduce(RULE_24, 1);
    case 164:
      return reduce(RULE_24, 1);
    case 203:
      return reduce(RULE_24, 1);
    case 147:
      return reduce(RULE_24, 1);
    case 193:
      return reduce(RULE_24, 1);
    case 182:
      return reduce(RULE_24, 1);
    case 158:
      return reduce(RULE_24, 1);
    case 131:
      return reduce(RULE_24, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action124(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 1);
    case 101:
      return reduce(RULE_11, 1);
    case 181:
      return reduce(RULE_11, 1);
    case 188:
      return reduce(RULE_11, 1);
    case 201:
      return reduce(RULE_11, 1);
    case 202:
      return reduce(RULE_11, 1);
    case 132:
      return reduce(RULE_11, 1);
    case 205:
      return reduce(RULE_11, 1);
    case 133:
      return reduce(RULE_11, 1);
    case 206:
      return reduce(RULE_11, 1);
    case 200:
      return reduce(RULE_11, 1);
    case 192:
      return reduce(RULE_11, 1);
    case 165:
      return reduce(RULE_11, 1);
    case 98:
      return reduce(RULE_11, 1);
    case 155:
      return reduce(RULE_11, 1);
    case 142:
      return reduce(RULE_11, 1);
    case 183:
      return reduce(RULE_11, 1);
    case 186:
      return reduce(RULE_11, 1);
    case 175:
      return reduce(RULE_11, 1);
    case 128:
      return reduce(RULE_11, 1);
    case 171:
      return reduce(RULE_11, 1);
    case 190:
      return reduce(RULE_11, 1);
    case 169:
      return reduce(RULE_11, 1);
    case 179:
      return reduce(RULE_11, 1);
    case 164:
      return reduce(RULE_11, 1);
    case 203:
      return reduce(RULE_11, 1);
    case 147:
      return reduce(RULE_11, 1);
    case 193:
      return reduce(RULE_11, 1);
    case 182:
      return reduce(RULE_11, 1);
    case 158:
      return reduce(RULE_11, 1);
    case 131:
      return reduce(RULE_11, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action125(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_16, 1);
    case 101:
      return reduce(RULE_16, 1);
    case 145:
      return reduce(RULE_16, 1);
    case 132:
      return reduce(RULE_16, 1);
    case 103:
      return reduce(RULE_16, 1);
    case 112:
      return reduce(RULE_16, 1);
    case 148:
      return reduce(RULE_16, 1);
    case 149:
      return reduce(RULE_16, 1);
    case 110:
      return reduce(RULE_16, 1);
    case 108:
      return reduce(RULE_16, 1);
    case 106:
      return reduce(RULE_16, 1);
    case 125:
      return reduce(RULE_16, 1);
    case 98:
      return reduce(RULE_16, 1);
    case 142:
      return reduce(RULE_16, 1);
    case 138:
      return reduce(RULE_16, 1);
    case 155:
      return reduce(RULE_16, 1);
    case 150:
      return reduce(RULE_16, 1);
    case 197:
      return reduce(RULE_16, 1);
    case 183:
      return reduce(RULE_16, 1);
    case 175:
      return reduce(RULE_16, 1);
    case 190:
      return reduce(RULE_16, 1);
    case 169:
      return reduce(RULE_16, 1);
    case 143:
      return reduce(RULE_16, 1);
    case 164:
      return reduce(RULE_16, 1);
    case 203:
      return reduce(RULE_16, 1);
    case 147:
      return reduce(RULE_16, 1);
    case 193:
      return reduce(RULE_16, 1);
    case 182:
      return reduce(RULE_16, 1);
    case 109:
      return reduce(RULE_16, 1);
    case 191:
      return reduce(RULE_16, 1);
    case 131:
      return reduce(RULE_16, 1);
    case 118:
      return reduce(RULE_16, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, RANGLE, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, NAME, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action126(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 3);
    case 101:
      return reduce(RULE_11, 3);
    case 181:
      return reduce(RULE_11, 3);
    case 188:
      return reduce(RULE_11, 3);
    case 201:
      return reduce(RULE_11, 3);
    case 202:
      return reduce(RULE_11, 3);
    case 132:
      return reduce(RULE_11, 3);
    case 205:
      return reduce(RULE_11, 3);
    case 133:
      return reduce(RULE_11, 3);
    case 206:
      return reduce(RULE_11, 3);
    case 200:
      return reduce(RULE_11, 3);
    case 192:
      return reduce(RULE_11, 3);
    case 165:
      return reduce(RULE_11, 3);
    case 98:
      return reduce(RULE_11, 3);
    case 155:
      return reduce(RULE_11, 3);
    case 142:
      return reduce(RULE_11, 3);
    case 183:
      return reduce(RULE_11, 3);
    case 186:
      return reduce(RULE_11, 3);
    case 175:
      return reduce(RULE_11, 3);
    case 128:
      return reduce(RULE_11, 3);
    case 171:
      return reduce(RULE_11, 3);
    case 190:
      return reduce(RULE_11, 3);
    case 169:
      return reduce(RULE_11, 3);
    case 179:
      return reduce(RULE_11, 3);
    case 164:
      return reduce(RULE_11, 3);
    case 203:
      return reduce(RULE_11, 3);
    case 147:
      return reduce(RULE_11, 3);
    case 193:
      return reduce(RULE_11, 3);
    case 182:
      return reduce(RULE_11, 3);
    case 158:
      return reduce(RULE_11, 3);
    case 131:
      return reduce(RULE_11, 3);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action127(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(248);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action128(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(250);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 188:
      return reduce(RULE_2, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto128(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 251;
    case 33: return 252;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action129(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 4);
    case 101:
      return reduce(RULE_11, 4);
    case 181:
      return reduce(RULE_11, 4);
    case 188:
      return reduce(RULE_11, 4);
    case 201:
      return reduce(RULE_11, 4);
    case 202:
      return reduce(RULE_11, 4);
    case 132:
      return reduce(RULE_11, 4);
    case 205:
      return reduce(RULE_11, 4);
    case 133:
      return reduce(RULE_11, 4);
    case 206:
      return reduce(RULE_11, 4);
    case 200:
      return reduce(RULE_11, 4);
    case 192:
      return reduce(RULE_11, 4);
    case 165:
      return reduce(RULE_11, 4);
    case 98:
      return reduce(RULE_11, 4);
    case 155:
      return reduce(RULE_11, 4);
    case 142:
      return reduce(RULE_11, 4);
    case 183:
      return reduce(RULE_11, 4);
    case 186:
      return reduce(RULE_11, 4);
    case 175:
      return reduce(RULE_11, 4);
    case 128:
      return reduce(RULE_11, 4);
    case 171:
      return reduce(RULE_11, 4);
    case 190:
      return reduce(RULE_11, 4);
    case 169:
      return reduce(RULE_11, 4);
    case 179:
      return reduce(RULE_11, 4);
    case 164:
      return reduce(RULE_11, 4);
    case 203:
      return reduce(RULE_11, 4);
    case 147:
      return reduce(RULE_11, 4);
    case 193:
      return reduce(RULE_11, 4);
    case 182:
      return reduce(RULE_11, 4);
    case 158:
      return reduce(RULE_11, 4);
    case 131:
      return reduce(RULE_11, 4);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action130(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(253);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_16, 0);
    case 101:
      return reduce(RULE_16, 0);
    case 145:
      return reduce(RULE_16, 0);
    case 132:
      return reduce(RULE_16, 0);
    case 103:
      return reduce(RULE_16, 0);
    case 112:
      return reduce(RULE_16, 0);
    case 148:
      return reduce(RULE_16, 0);
    case 149:
      return reduce(RULE_16, 0);
    case 110:
      return reduce(RULE_16, 0);
    case 108:
      return reduce(RULE_16, 0);
    case 106:
      return reduce(RULE_16, 0);
    case 125:
      return reduce(RULE_16, 0);
    case 98:
      return reduce(RULE_16, 0);
    case 142:
      return reduce(RULE_16, 0);
    case 138:
      return reduce(RULE_16, 0);
    case 155:
      return reduce(RULE_16, 0);
    case 150:
      return reduce(RULE_16, 0);
    case 197:
      return reduce(RULE_16, 0);
    case 183:
      return reduce(RULE_16, 0);
    case 175:
      return reduce(RULE_16, 0);
    case 190:
      return reduce(RULE_16, 0);
    case 169:
      return reduce(RULE_16, 0);
    case 143:
      return reduce(RULE_16, 0);
    case 164:
      return reduce(RULE_16, 0);
    case 203:
      return reduce(RULE_16, 0);
    case 147:
      return reduce(RULE_16, 0);
    case 193:
      return reduce(RULE_16, 0);
    case 182:
      return reduce(RULE_16, 0);
    case 109:
      return reduce(RULE_16, 0);
    case 191:
      return reduce(RULE_16, 0);
    case 131:
      return reduce(RULE_16, 0);
    case 118:
      return reduce(RULE_16, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, RANGLE, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, LANGLE, MUTABLE_KEYWORD, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action131(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_25, 0);
    }
    switch (token.getType().ordinal())
    {
    case 203:
      return reduce(RULE_25, 0);
    case 161:
      return reduce(RULE_25, 0);
    case 101:
      return reduce(RULE_25, 0);
    case 155:
      return reduce(RULE_25, 0);
    case 180:
      return reduce(RULE_25, 0);
    case 183:
      return reduce(RULE_25, 0);
    case 193:
      return reduce(RULE_25, 0);
    case 182:
      return reduce(RULE_25, 0);
    case 175:
      return reduce(RULE_25, 0);
    case 162:
      return reduce(RULE_25, 0);
    case 190:
      return reduce(RULE_25, 0);
    case 169:
      return reduce(RULE_25, 0);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action132(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 4);
    case 101:
      return reduce(RULE_15, 4);
    case 154:
      return reduce(RULE_15, 4);
    case 145:
      return reduce(RULE_15, 4);
    case 132:
      return reduce(RULE_15, 4);
    case 167:
      return reduce(RULE_15, 4);
    case 103:
      return reduce(RULE_15, 4);
    case 120:
      return reduce(RULE_15, 4);
    case 194:
      return reduce(RULE_15, 4);
    case 112:
      return reduce(RULE_15, 4);
    case 148:
      return reduce(RULE_15, 4);
    case 149:
      return reduce(RULE_15, 4);
    case 110:
      return reduce(RULE_15, 4);
    case 108:
      return reduce(RULE_15, 4);
    case 106:
      return reduce(RULE_15, 4);
    case 125:
      return reduce(RULE_15, 4);
    case 105:
      return reduce(RULE_15, 4);
    case 98:
      return reduce(RULE_15, 4);
    case 155:
      return reduce(RULE_15, 4);
    case 138:
      return reduce(RULE_15, 4);
    case 142:
      return reduce(RULE_15, 4);
    case 197:
      return reduce(RULE_15, 4);
    case 150:
      return reduce(RULE_15, 4);
    case 111:
      return reduce(RULE_15, 4);
    case 183:
      return reduce(RULE_15, 4);
    case 175:
      return reduce(RULE_15, 4);
    case 128:
      return reduce(RULE_15, 4);
    case 169:
      return reduce(RULE_15, 4);
    case 190:
      return reduce(RULE_15, 4);
    case 143:
      return reduce(RULE_15, 4);
    case 164:
      return reduce(RULE_15, 4);
    case 203:
      return reduce(RULE_15, 4);
    case 147:
      return reduce(RULE_15, 4);
    case 193:
      return reduce(RULE_15, 4);
    case 182:
      return reduce(RULE_15, 4);
    case 109:
      return reduce(RULE_15, 4);
    case 191:
      return reduce(RULE_15, 4);
    case 131:
      return reduce(RULE_15, 4);
    case 118:
      return reduce(RULE_15, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action133(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 1);
    case 101:
      return reduce(RULE_15, 1);
    case 154:
      return reduce(RULE_15, 1);
    case 145:
      return reduce(RULE_15, 1);
    case 132:
      return reduce(RULE_15, 1);
    case 167:
      return reduce(RULE_15, 1);
    case 103:
      return reduce(RULE_15, 1);
    case 120:
      return reduce(RULE_15, 1);
    case 194:
      return reduce(RULE_15, 1);
    case 112:
      return reduce(RULE_15, 1);
    case 148:
      return reduce(RULE_15, 1);
    case 149:
      return reduce(RULE_15, 1);
    case 110:
      return reduce(RULE_15, 1);
    case 108:
      return reduce(RULE_15, 1);
    case 106:
      return reduce(RULE_15, 1);
    case 125:
      return reduce(RULE_15, 1);
    case 105:
      return reduce(RULE_15, 1);
    case 98:
      return reduce(RULE_15, 1);
    case 155:
      return reduce(RULE_15, 1);
    case 138:
      return reduce(RULE_15, 1);
    case 142:
      return reduce(RULE_15, 1);
    case 197:
      return reduce(RULE_15, 1);
    case 150:
      return reduce(RULE_15, 1);
    case 111:
      return reduce(RULE_15, 1);
    case 183:
      return reduce(RULE_15, 1);
    case 175:
      return reduce(RULE_15, 1);
    case 128:
      return reduce(RULE_15, 1);
    case 169:
      return reduce(RULE_15, 1);
    case 190:
      return reduce(RULE_15, 1);
    case 143:
      return reduce(RULE_15, 1);
    case 164:
      return reduce(RULE_15, 1);
    case 203:
      return reduce(RULE_15, 1);
    case 147:
      return reduce(RULE_15, 1);
    case 193:
      return reduce(RULE_15, 1);
    case 182:
      return reduce(RULE_15, 1);
    case 109:
      return reduce(RULE_15, 1);
    case 191:
      return reduce(RULE_15, 1);
    case 131:
      return reduce(RULE_15, 1);
    case 118:
      return reduce(RULE_15, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action134(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 8);
    case 101:
      return reduce(RULE_15, 8);
    case 154:
      return reduce(RULE_15, 8);
    case 145:
      return reduce(RULE_15, 8);
    case 132:
      return reduce(RULE_15, 8);
    case 167:
      return reduce(RULE_15, 8);
    case 103:
      return reduce(RULE_15, 8);
    case 120:
      return reduce(RULE_15, 8);
    case 194:
      return reduce(RULE_15, 8);
    case 112:
      return reduce(RULE_15, 8);
    case 148:
      return reduce(RULE_15, 8);
    case 149:
      return reduce(RULE_15, 8);
    case 110:
      return reduce(RULE_15, 8);
    case 108:
      return reduce(RULE_15, 8);
    case 106:
      return reduce(RULE_15, 8);
    case 125:
      return reduce(RULE_15, 8);
    case 105:
      return reduce(RULE_15, 8);
    case 98:
      return reduce(RULE_15, 8);
    case 155:
      return reduce(RULE_15, 8);
    case 138:
      return reduce(RULE_15, 8);
    case 142:
      return reduce(RULE_15, 8);
    case 197:
      return reduce(RULE_15, 8);
    case 150:
      return reduce(RULE_15, 8);
    case 111:
      return reduce(RULE_15, 8);
    case 183:
      return reduce(RULE_15, 8);
    case 175:
      return reduce(RULE_15, 8);
    case 128:
      return reduce(RULE_15, 8);
    case 169:
      return reduce(RULE_15, 8);
    case 190:
      return reduce(RULE_15, 8);
    case 143:
      return reduce(RULE_15, 8);
    case 164:
      return reduce(RULE_15, 8);
    case 203:
      return reduce(RULE_15, 8);
    case 147:
      return reduce(RULE_15, 8);
    case 193:
      return reduce(RULE_15, 8);
    case 182:
      return reduce(RULE_15, 8);
    case 109:
      return reduce(RULE_15, 8);
    case 191:
      return reduce(RULE_15, 8);
    case 131:
      return reduce(RULE_15, 8);
    case 118:
      return reduce(RULE_15, 8);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action135(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 35);
    case 101:
      return reduce(RULE_15, 35);
    case 154:
      return reduce(RULE_15, 35);
    case 145:
      return reduce(RULE_15, 35);
    case 132:
      return reduce(RULE_15, 35);
    case 167:
      return reduce(RULE_15, 35);
    case 103:
      return reduce(RULE_15, 35);
    case 120:
      return reduce(RULE_15, 35);
    case 194:
      return reduce(RULE_15, 35);
    case 112:
      return reduce(RULE_15, 35);
    case 148:
      return reduce(RULE_15, 35);
    case 149:
      return reduce(RULE_15, 35);
    case 110:
      return reduce(RULE_15, 35);
    case 108:
      return reduce(RULE_15, 35);
    case 106:
      return reduce(RULE_15, 35);
    case 125:
      return reduce(RULE_15, 35);
    case 105:
      return reduce(RULE_15, 35);
    case 98:
      return reduce(RULE_15, 35);
    case 155:
      return reduce(RULE_15, 35);
    case 138:
      return reduce(RULE_15, 35);
    case 142:
      return reduce(RULE_15, 35);
    case 197:
      return reduce(RULE_15, 35);
    case 150:
      return reduce(RULE_15, 35);
    case 111:
      return reduce(RULE_15, 35);
    case 183:
      return reduce(RULE_15, 35);
    case 175:
      return reduce(RULE_15, 35);
    case 128:
      return reduce(RULE_15, 35);
    case 169:
      return reduce(RULE_15, 35);
    case 190:
      return reduce(RULE_15, 35);
    case 143:
      return reduce(RULE_15, 35);
    case 164:
      return reduce(RULE_15, 35);
    case 203:
      return reduce(RULE_15, 35);
    case 147:
      return reduce(RULE_15, 35);
    case 193:
      return reduce(RULE_15, 35);
    case 182:
      return reduce(RULE_15, 35);
    case 109:
      return reduce(RULE_15, 35);
    case 191:
      return reduce(RULE_15, 35);
    case 131:
      return reduce(RULE_15, 35);
    case 118:
      return reduce(RULE_15, 35);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action136(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 13);
    case 101:
      return reduce(RULE_15, 13);
    case 154:
      return reduce(RULE_15, 13);
    case 145:
      return reduce(RULE_15, 13);
    case 132:
      return reduce(RULE_15, 13);
    case 167:
      return reduce(RULE_15, 13);
    case 103:
      return reduce(RULE_15, 13);
    case 120:
      return reduce(RULE_15, 13);
    case 194:
      return reduce(RULE_15, 13);
    case 112:
      return reduce(RULE_15, 13);
    case 148:
      return reduce(RULE_15, 13);
    case 149:
      return reduce(RULE_15, 13);
    case 110:
      return reduce(RULE_15, 13);
    case 108:
      return reduce(RULE_15, 13);
    case 106:
      return reduce(RULE_15, 13);
    case 125:
      return reduce(RULE_15, 13);
    case 105:
      return reduce(RULE_15, 13);
    case 98:
      return reduce(RULE_15, 13);
    case 155:
      return reduce(RULE_15, 13);
    case 138:
      return reduce(RULE_15, 13);
    case 142:
      return reduce(RULE_15, 13);
    case 197:
      return reduce(RULE_15, 13);
    case 150:
      return reduce(RULE_15, 13);
    case 111:
      return reduce(RULE_15, 13);
    case 183:
      return reduce(RULE_15, 13);
    case 175:
      return reduce(RULE_15, 13);
    case 128:
      return reduce(RULE_15, 13);
    case 169:
      return reduce(RULE_15, 13);
    case 190:
      return reduce(RULE_15, 13);
    case 143:
      return reduce(RULE_15, 13);
    case 164:
      return reduce(RULE_15, 13);
    case 203:
      return reduce(RULE_15, 13);
    case 147:
      return reduce(RULE_15, 13);
    case 193:
      return reduce(RULE_15, 13);
    case 182:
      return reduce(RULE_15, 13);
    case 109:
      return reduce(RULE_15, 13);
    case 191:
      return reduce(RULE_15, 13);
    case 131:
      return reduce(RULE_15, 13);
    case 118:
      return reduce(RULE_15, 13);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action137(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(254);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(255);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto137(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 256;
    default: return -1;
    }
  }

  private final boolean action138(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 5);
    case 101:
      return reduce(RULE_15, 5);
    case 154:
      return reduce(RULE_15, 5);
    case 145:
      return reduce(RULE_15, 5);
    case 132:
      return reduce(RULE_15, 5);
    case 167:
      return reduce(RULE_15, 5);
    case 103:
      return reduce(RULE_15, 5);
    case 120:
      return reduce(RULE_15, 5);
    case 194:
      return reduce(RULE_15, 5);
    case 112:
      return reduce(RULE_15, 5);
    case 148:
      return reduce(RULE_15, 5);
    case 149:
      return reduce(RULE_15, 5);
    case 110:
      return reduce(RULE_15, 5);
    case 108:
      return reduce(RULE_15, 5);
    case 106:
      return reduce(RULE_15, 5);
    case 125:
      return reduce(RULE_15, 5);
    case 105:
      return reduce(RULE_15, 5);
    case 98:
      return reduce(RULE_15, 5);
    case 155:
      return reduce(RULE_15, 5);
    case 138:
      return reduce(RULE_15, 5);
    case 142:
      return reduce(RULE_15, 5);
    case 197:
      return reduce(RULE_15, 5);
    case 150:
      return reduce(RULE_15, 5);
    case 111:
      return reduce(RULE_15, 5);
    case 183:
      return reduce(RULE_15, 5);
    case 175:
      return reduce(RULE_15, 5);
    case 128:
      return reduce(RULE_15, 5);
    case 169:
      return reduce(RULE_15, 5);
    case 190:
      return reduce(RULE_15, 5);
    case 143:
      return reduce(RULE_15, 5);
    case 164:
      return reduce(RULE_15, 5);
    case 203:
      return reduce(RULE_15, 5);
    case 147:
      return reduce(RULE_15, 5);
    case 193:
      return reduce(RULE_15, 5);
    case 182:
      return reduce(RULE_15, 5);
    case 109:
      return reduce(RULE_15, 5);
    case 191:
      return reduce(RULE_15, 5);
    case 131:
      return reduce(RULE_15, 5);
    case 118:
      return reduce(RULE_15, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action139(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 12);
    case 101:
      return reduce(RULE_15, 12);
    case 154:
      return reduce(RULE_15, 12);
    case 145:
      return reduce(RULE_15, 12);
    case 132:
      return reduce(RULE_15, 12);
    case 167:
      return reduce(RULE_15, 12);
    case 103:
      return reduce(RULE_15, 12);
    case 120:
      return reduce(RULE_15, 12);
    case 194:
      return reduce(RULE_15, 12);
    case 112:
      return reduce(RULE_15, 12);
    case 148:
      return reduce(RULE_15, 12);
    case 149:
      return reduce(RULE_15, 12);
    case 110:
      return reduce(RULE_15, 12);
    case 108:
      return reduce(RULE_15, 12);
    case 106:
      return reduce(RULE_15, 12);
    case 125:
      return reduce(RULE_15, 12);
    case 105:
      return reduce(RULE_15, 12);
    case 98:
      return reduce(RULE_15, 12);
    case 155:
      return reduce(RULE_15, 12);
    case 138:
      return reduce(RULE_15, 12);
    case 142:
      return reduce(RULE_15, 12);
    case 197:
      return reduce(RULE_15, 12);
    case 150:
      return reduce(RULE_15, 12);
    case 111:
      return reduce(RULE_15, 12);
    case 183:
      return reduce(RULE_15, 12);
    case 175:
      return reduce(RULE_15, 12);
    case 128:
      return reduce(RULE_15, 12);
    case 169:
      return reduce(RULE_15, 12);
    case 190:
      return reduce(RULE_15, 12);
    case 143:
      return reduce(RULE_15, 12);
    case 164:
      return reduce(RULE_15, 12);
    case 203:
      return reduce(RULE_15, 12);
    case 147:
      return reduce(RULE_15, 12);
    case 193:
      return reduce(RULE_15, 12);
    case 182:
      return reduce(RULE_15, 12);
    case 109:
      return reduce(RULE_15, 12);
    case 191:
      return reduce(RULE_15, 12);
    case 131:
      return reduce(RULE_15, 12);
    case 118:
      return reduce(RULE_15, 12);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action140(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto140(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 56: return 257;
    case 54: return 94;
    case 28: return 155;
    case 58: return 95;
    case 29: return 156;
    case 30: return 157;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action141(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 9);
    case 101:
      return reduce(RULE_15, 9);
    case 154:
      return reduce(RULE_15, 9);
    case 145:
      return reduce(RULE_15, 9);
    case 132:
      return reduce(RULE_15, 9);
    case 167:
      return reduce(RULE_15, 9);
    case 103:
      return reduce(RULE_15, 9);
    case 120:
      return reduce(RULE_15, 9);
    case 194:
      return reduce(RULE_15, 9);
    case 112:
      return reduce(RULE_15, 9);
    case 148:
      return reduce(RULE_15, 9);
    case 149:
      return reduce(RULE_15, 9);
    case 110:
      return reduce(RULE_15, 9);
    case 108:
      return reduce(RULE_15, 9);
    case 106:
      return reduce(RULE_15, 9);
    case 125:
      return reduce(RULE_15, 9);
    case 105:
      return reduce(RULE_15, 9);
    case 98:
      return reduce(RULE_15, 9);
    case 155:
      return reduce(RULE_15, 9);
    case 138:
      return reduce(RULE_15, 9);
    case 142:
      return reduce(RULE_15, 9);
    case 197:
      return reduce(RULE_15, 9);
    case 150:
      return reduce(RULE_15, 9);
    case 111:
      return reduce(RULE_15, 9);
    case 183:
      return reduce(RULE_15, 9);
    case 175:
      return reduce(RULE_15, 9);
    case 128:
      return reduce(RULE_15, 9);
    case 169:
      return reduce(RULE_15, 9);
    case 190:
      return reduce(RULE_15, 9);
    case 143:
      return reduce(RULE_15, 9);
    case 164:
      return reduce(RULE_15, 9);
    case 203:
      return reduce(RULE_15, 9);
    case 147:
      return reduce(RULE_15, 9);
    case 193:
      return reduce(RULE_15, 9);
    case 182:
      return reduce(RULE_15, 9);
    case 109:
      return reduce(RULE_15, 9);
    case 191:
      return reduce(RULE_15, 9);
    case 131:
      return reduce(RULE_15, 9);
    case 118:
      return reduce(RULE_15, 9);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action142(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 17);
    case 101:
      return reduce(RULE_15, 17);
    case 154:
      return reduce(RULE_15, 17);
    case 145:
      return reduce(RULE_15, 17);
    case 132:
      return reduce(RULE_15, 17);
    case 167:
      return reduce(RULE_15, 17);
    case 103:
      return reduce(RULE_15, 17);
    case 120:
      return reduce(RULE_15, 17);
    case 194:
      return reduce(RULE_15, 17);
    case 112:
      return reduce(RULE_15, 17);
    case 148:
      return reduce(RULE_15, 17);
    case 149:
      return reduce(RULE_15, 17);
    case 110:
      return reduce(RULE_15, 17);
    case 108:
      return reduce(RULE_15, 17);
    case 106:
      return reduce(RULE_15, 17);
    case 125:
      return reduce(RULE_15, 17);
    case 105:
      return reduce(RULE_15, 17);
    case 98:
      return reduce(RULE_15, 17);
    case 155:
      return reduce(RULE_15, 17);
    case 138:
      return reduce(RULE_15, 17);
    case 142:
      return reduce(RULE_15, 17);
    case 197:
      return reduce(RULE_15, 17);
    case 150:
      return reduce(RULE_15, 17);
    case 111:
      return reduce(RULE_15, 17);
    case 183:
      return reduce(RULE_15, 17);
    case 175:
      return reduce(RULE_15, 17);
    case 128:
      return reduce(RULE_15, 17);
    case 169:
      return reduce(RULE_15, 17);
    case 190:
      return reduce(RULE_15, 17);
    case 143:
      return reduce(RULE_15, 17);
    case 164:
      return reduce(RULE_15, 17);
    case 203:
      return reduce(RULE_15, 17);
    case 147:
      return reduce(RULE_15, 17);
    case 193:
      return reduce(RULE_15, 17);
    case 182:
      return reduce(RULE_15, 17);
    case 109:
      return reduce(RULE_15, 17);
    case 191:
      return reduce(RULE_15, 17);
    case 131:
      return reduce(RULE_15, 17);
    case 118:
      return reduce(RULE_15, 17);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action143(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(258);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action144(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 20);
    case 101:
      return reduce(RULE_15, 20);
    case 154:
      return reduce(RULE_15, 20);
    case 145:
      return reduce(RULE_15, 20);
    case 132:
      return reduce(RULE_15, 20);
    case 167:
      return reduce(RULE_15, 20);
    case 103:
      return reduce(RULE_15, 20);
    case 120:
      return reduce(RULE_15, 20);
    case 194:
      return reduce(RULE_15, 20);
    case 112:
      return reduce(RULE_15, 20);
    case 148:
      return reduce(RULE_15, 20);
    case 149:
      return reduce(RULE_15, 20);
    case 110:
      return reduce(RULE_15, 20);
    case 108:
      return reduce(RULE_15, 20);
    case 106:
      return reduce(RULE_15, 20);
    case 125:
      return reduce(RULE_15, 20);
    case 105:
      return reduce(RULE_15, 20);
    case 98:
      return reduce(RULE_15, 20);
    case 155:
      return reduce(RULE_15, 20);
    case 138:
      return reduce(RULE_15, 20);
    case 142:
      return reduce(RULE_15, 20);
    case 197:
      return reduce(RULE_15, 20);
    case 150:
      return reduce(RULE_15, 20);
    case 111:
      return reduce(RULE_15, 20);
    case 183:
      return reduce(RULE_15, 20);
    case 175:
      return reduce(RULE_15, 20);
    case 128:
      return reduce(RULE_15, 20);
    case 169:
      return reduce(RULE_15, 20);
    case 190:
      return reduce(RULE_15, 20);
    case 143:
      return reduce(RULE_15, 20);
    case 164:
      return reduce(RULE_15, 20);
    case 203:
      return reduce(RULE_15, 20);
    case 147:
      return reduce(RULE_15, 20);
    case 193:
      return reduce(RULE_15, 20);
    case 182:
      return reduce(RULE_15, 20);
    case 109:
      return reduce(RULE_15, 20);
    case 191:
      return reduce(RULE_15, 20);
    case 131:
      return reduce(RULE_15, 20);
    case 118:
      return reduce(RULE_15, 20);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action145(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(259);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(260);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, ARROW, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto145(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 56: return 161;
    case 54: return 94;
    case 58: return 95;
    case 28: return 155;
    case 29: return 162;
    case 30: return 157;
    case 60: return 99;
    case 55: return 261;
    default: return -1;
    }
  }

  private final boolean action146(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 21);
    case 101:
      return reduce(RULE_15, 21);
    case 154:
      return reduce(RULE_15, 21);
    case 145:
      return reduce(RULE_15, 21);
    case 132:
      return reduce(RULE_15, 21);
    case 167:
      return reduce(RULE_15, 21);
    case 103:
      return reduce(RULE_15, 21);
    case 120:
      return reduce(RULE_15, 21);
    case 194:
      return reduce(RULE_15, 21);
    case 112:
      return reduce(RULE_15, 21);
    case 148:
      return reduce(RULE_15, 21);
    case 149:
      return reduce(RULE_15, 21);
    case 110:
      return reduce(RULE_15, 21);
    case 108:
      return reduce(RULE_15, 21);
    case 106:
      return reduce(RULE_15, 21);
    case 125:
      return reduce(RULE_15, 21);
    case 105:
      return reduce(RULE_15, 21);
    case 98:
      return reduce(RULE_15, 21);
    case 155:
      return reduce(RULE_15, 21);
    case 138:
      return reduce(RULE_15, 21);
    case 142:
      return reduce(RULE_15, 21);
    case 197:
      return reduce(RULE_15, 21);
    case 150:
      return reduce(RULE_15, 21);
    case 111:
      return reduce(RULE_15, 21);
    case 183:
      return reduce(RULE_15, 21);
    case 175:
      return reduce(RULE_15, 21);
    case 128:
      return reduce(RULE_15, 21);
    case 169:
      return reduce(RULE_15, 21);
    case 190:
      return reduce(RULE_15, 21);
    case 143:
      return reduce(RULE_15, 21);
    case 164:
      return reduce(RULE_15, 21);
    case 203:
      return reduce(RULE_15, 21);
    case 147:
      return reduce(RULE_15, 21);
    case 193:
      return reduce(RULE_15, 21);
    case 182:
      return reduce(RULE_15, 21);
    case 109:
      return reduce(RULE_15, 21);
    case 191:
      return reduce(RULE_15, 21);
    case 131:
      return reduce(RULE_15, 21);
    case 118:
      return reduce(RULE_15, 21);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action147(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 16);
    case 101:
      return reduce(RULE_15, 16);
    case 154:
      return reduce(RULE_15, 16);
    case 145:
      return reduce(RULE_15, 16);
    case 132:
      return reduce(RULE_15, 16);
    case 167:
      return reduce(RULE_15, 16);
    case 103:
      return reduce(RULE_15, 16);
    case 120:
      return reduce(RULE_15, 16);
    case 194:
      return reduce(RULE_15, 16);
    case 112:
      return reduce(RULE_15, 16);
    case 148:
      return reduce(RULE_15, 16);
    case 149:
      return reduce(RULE_15, 16);
    case 110:
      return reduce(RULE_15, 16);
    case 108:
      return reduce(RULE_15, 16);
    case 106:
      return reduce(RULE_15, 16);
    case 125:
      return reduce(RULE_15, 16);
    case 105:
      return reduce(RULE_15, 16);
    case 98:
      return reduce(RULE_15, 16);
    case 155:
      return reduce(RULE_15, 16);
    case 138:
      return reduce(RULE_15, 16);
    case 142:
      return reduce(RULE_15, 16);
    case 197:
      return reduce(RULE_15, 16);
    case 150:
      return reduce(RULE_15, 16);
    case 111:
      return reduce(RULE_15, 16);
    case 183:
      return reduce(RULE_15, 16);
    case 175:
      return reduce(RULE_15, 16);
    case 128:
      return reduce(RULE_15, 16);
    case 169:
      return reduce(RULE_15, 16);
    case 190:
      return reduce(RULE_15, 16);
    case 143:
      return reduce(RULE_15, 16);
    case 164:
      return reduce(RULE_15, 16);
    case 203:
      return reduce(RULE_15, 16);
    case 147:
      return reduce(RULE_15, 16);
    case 193:
      return reduce(RULE_15, 16);
    case 182:
      return reduce(RULE_15, 16);
    case 109:
      return reduce(RULE_15, 16);
    case 191:
      return reduce(RULE_15, 16);
    case 131:
      return reduce(RULE_15, 16);
    case 118:
      return reduce(RULE_15, 16);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action148(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(262);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_15, 41);
    case 103:
      return reduce(RULE_15, 41);
    case 120:
      return reduce(RULE_15, 41);
    case 145:
      return reduce(RULE_15, 41);
    case 111:
      return reduce(RULE_15, 41);
    case 194:
      return reduce(RULE_15, 41);
    case 109:
      return reduce(RULE_15, 41);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, DOUBLE_COLON, RANGLE, LANGLE, SUPER_KEYWORD, DOT, COMMA});
    }
  }

  private final boolean action149(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 40);
    case 101:
      return reduce(RULE_15, 40);
    case 154:
      return reduce(RULE_15, 40);
    case 145:
      return reduce(RULE_15, 40);
    case 132:
      return reduce(RULE_15, 40);
    case 167:
      return reduce(RULE_15, 40);
    case 103:
      return reduce(RULE_15, 40);
    case 120:
      return reduce(RULE_15, 40);
    case 194:
      return reduce(RULE_15, 40);
    case 112:
      return reduce(RULE_15, 40);
    case 148:
      return reduce(RULE_15, 40);
    case 149:
      return reduce(RULE_15, 40);
    case 110:
      return reduce(RULE_15, 40);
    case 108:
      return reduce(RULE_15, 40);
    case 106:
      return reduce(RULE_15, 40);
    case 125:
      return reduce(RULE_15, 40);
    case 105:
      return reduce(RULE_15, 40);
    case 98:
      return reduce(RULE_15, 40);
    case 155:
      return reduce(RULE_15, 40);
    case 138:
      return reduce(RULE_15, 40);
    case 142:
      return reduce(RULE_15, 40);
    case 197:
      return reduce(RULE_15, 40);
    case 150:
      return reduce(RULE_15, 40);
    case 111:
      return reduce(RULE_15, 40);
    case 183:
      return reduce(RULE_15, 40);
    case 175:
      return reduce(RULE_15, 40);
    case 128:
      return reduce(RULE_15, 40);
    case 169:
      return reduce(RULE_15, 40);
    case 190:
      return reduce(RULE_15, 40);
    case 143:
      return reduce(RULE_15, 40);
    case 164:
      return reduce(RULE_15, 40);
    case 203:
      return reduce(RULE_15, 40);
    case 147:
      return reduce(RULE_15, 40);
    case 193:
      return reduce(RULE_15, 40);
    case 182:
      return reduce(RULE_15, 40);
    case 109:
      return reduce(RULE_15, 40);
    case 191:
      return reduce(RULE_15, 40);
    case 131:
      return reduce(RULE_15, 40);
    case 118:
      return reduce(RULE_15, 40);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action150(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(263);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action151(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 36);
    case 101:
      return reduce(RULE_15, 36);
    case 154:
      return reduce(RULE_15, 36);
    case 145:
      return reduce(RULE_15, 36);
    case 132:
      return reduce(RULE_15, 36);
    case 167:
      return reduce(RULE_15, 36);
    case 103:
      return reduce(RULE_15, 36);
    case 120:
      return reduce(RULE_15, 36);
    case 194:
      return reduce(RULE_15, 36);
    case 112:
      return reduce(RULE_15, 36);
    case 148:
      return reduce(RULE_15, 36);
    case 149:
      return reduce(RULE_15, 36);
    case 110:
      return reduce(RULE_15, 36);
    case 108:
      return reduce(RULE_15, 36);
    case 106:
      return reduce(RULE_15, 36);
    case 125:
      return reduce(RULE_15, 36);
    case 105:
      return reduce(RULE_15, 36);
    case 98:
      return reduce(RULE_15, 36);
    case 155:
      return reduce(RULE_15, 36);
    case 138:
      return reduce(RULE_15, 36);
    case 142:
      return reduce(RULE_15, 36);
    case 197:
      return reduce(RULE_15, 36);
    case 150:
      return reduce(RULE_15, 36);
    case 111:
      return reduce(RULE_15, 36);
    case 183:
      return reduce(RULE_15, 36);
    case 175:
      return reduce(RULE_15, 36);
    case 128:
      return reduce(RULE_15, 36);
    case 169:
      return reduce(RULE_15, 36);
    case 190:
      return reduce(RULE_15, 36);
    case 143:
      return reduce(RULE_15, 36);
    case 164:
      return reduce(RULE_15, 36);
    case 203:
      return reduce(RULE_15, 36);
    case 147:
      return reduce(RULE_15, 36);
    case 193:
      return reduce(RULE_15, 36);
    case 182:
      return reduce(RULE_15, 36);
    case 109:
      return reduce(RULE_15, 36);
    case 191:
      return reduce(RULE_15, 36);
    case 131:
      return reduce(RULE_15, 36);
    case 118:
      return reduce(RULE_15, 36);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action152(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(264);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_15, 42);
    case 103:
      return reduce(RULE_15, 42);
    case 120:
      return reduce(RULE_15, 42);
    case 145:
      return reduce(RULE_15, 42);
    case 111:
      return reduce(RULE_15, 42);
    case 194:
      return reduce(RULE_15, 42);
    case 109:
      return reduce(RULE_15, 42);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, DOUBLE_COLON, RANGLE, LANGLE, SUPER_KEYWORD, DOT, COMMA});
    }
  }

  private final boolean action153(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_26, 4);
    case 148:
      return reduce(RULE_26, 4);
    case 128:
      return reduce(RULE_26, 4);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH, RPAREN, COMMA});
    }
  }

  private final boolean action154(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(266);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action155(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(253);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(267);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_27, 0);
    case 148:
      return reduce(RULE_27, 0);
    case 128:
      return reduce(RULE_27, 0);
    default: throw new BadTokenException(token, new Object[] {ARROW, LANGLE, HASH, RPAREN, DOT, COMMA});
    }
  }

  private final boolean action156(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(268);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action157(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(269);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_27, 1);
    case 148:
      return reduce(RULE_27, 1);
    case 128:
      return reduce(RULE_27, 1);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH, RPAREN, COMMA});
    }
  }

  private final boolean action158(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto158(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 53: return 270;
    case 54: return 271;
    case 58: return 272;
    case 28: return 273;
    case 30: return 274;
    case 59: return 275;
    case 60: return 99;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action159(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto159(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 277;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    case 47: return 278;
    default: return -1;
    }
  }

  private final boolean action160(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(279);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, ARROW, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto160(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 191;
    default: return -1;
    }
  }

  private final boolean action161(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_28, 0);
    case 128:
      return reduce(RULE_28, 0);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH});
    }
  }

  private final boolean action162(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_28, 1);
    case 128:
      return reduce(RULE_28, 1);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH});
    }
  }

  private final boolean action163(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(281);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH});
    }
  }

  private final boolean action164(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_20, 0);
    case 154:
      return reduce(RULE_20, 0);
    case 181:
      return reduce(RULE_20, 0);
    case 184:
      return reduce(RULE_20, 0);
    case 134:
      return reduce(RULE_20, 0);
    case 153:
      return reduce(RULE_20, 0);
    case 185:
      return reduce(RULE_20, 0);
    case 205:
      return reduce(RULE_20, 0);
    case 148:
      return reduce(RULE_20, 0);
    case 125:
      return reduce(RULE_20, 0);
    case 105:
      return reduce(RULE_20, 0);
    case 98:
      return reduce(RULE_20, 0);
    case 138:
      return reduce(RULE_20, 0);
    case 124:
      return reduce(RULE_20, 0);
    case 142:
      return reduce(RULE_20, 0);
    case 155:
      return reduce(RULE_20, 0);
    case 186:
      return reduce(RULE_20, 0);
    case 175:
      return reduce(RULE_20, 0);
    case 128:
      return reduce(RULE_20, 0);
    case 143:
      return reduce(RULE_20, 0);
    case 179:
      return reduce(RULE_20, 0);
    case 164:
      return reduce(RULE_20, 0);
    case 203:
      return reduce(RULE_20, 0);
    case 195:
      return reduce(RULE_20, 0);
    case 193:
      return reduce(RULE_20, 0);
    case 158:
      return reduce(RULE_20, 0);
    case 131:
      return reduce(RULE_20, 0);
    case 156:
      return reduce(RULE_20, 0);
    case 173:
      return reduce(RULE_20, 0);
    case 101:
      return reduce(RULE_20, 0);
    case 102:
      return reduce(RULE_20, 0);
    case 145:
      return reduce(RULE_20, 0);
    case 201:
      return reduce(RULE_20, 0);
    case 202:
      return reduce(RULE_20, 0);
    case 132:
      return reduce(RULE_20, 0);
    case 167:
      return reduce(RULE_20, 0);
    case 103:
      return reduce(RULE_20, 0);
    case 133:
      return reduce(RULE_20, 0);
    case 120:
      return reduce(RULE_20, 0);
    case 168:
      return reduce(RULE_20, 0);
    case 194:
      return reduce(RULE_20, 0);
    case 112:
      return reduce(RULE_20, 0);
    case 149:
      return reduce(RULE_20, 0);
    case 110:
      return reduce(RULE_20, 0);
    case 200:
      return reduce(RULE_20, 0);
    case 192:
      return reduce(RULE_20, 0);
    case 106:
      return reduce(RULE_20, 0);
    case 108:
      return reduce(RULE_20, 0);
    case 165:
      return reduce(RULE_20, 0);
    case 197:
      return reduce(RULE_20, 0);
    case 150:
      return reduce(RULE_20, 0);
    case 111:
      return reduce(RULE_20, 0);
    case 183:
      return reduce(RULE_20, 0);
    case 198:
      return reduce(RULE_20, 0);
    case 100:
      return reduce(RULE_20, 0);
    case 171:
      return reduce(RULE_20, 0);
    case 169:
      return reduce(RULE_20, 0);
    case 190:
      return reduce(RULE_20, 0);
    case 176:
      return reduce(RULE_20, 0);
    case 147:
      return reduce(RULE_20, 0);
    case 99:
      return reduce(RULE_20, 0);
    case 182:
      return reduce(RULE_20, 0);
    case 109:
      return reduce(RULE_20, 0);
    case 191:
      return reduce(RULE_20, 0);
    case 118:
      return reduce(RULE_20, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, UBYTE_KEYWORD, SHORT_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action165(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_20, 1);
    case 154:
      return reduce(RULE_20, 1);
    case 181:
      return reduce(RULE_20, 1);
    case 184:
      return reduce(RULE_20, 1);
    case 134:
      return reduce(RULE_20, 1);
    case 153:
      return reduce(RULE_20, 1);
    case 185:
      return reduce(RULE_20, 1);
    case 205:
      return reduce(RULE_20, 1);
    case 148:
      return reduce(RULE_20, 1);
    case 125:
      return reduce(RULE_20, 1);
    case 105:
      return reduce(RULE_20, 1);
    case 98:
      return reduce(RULE_20, 1);
    case 138:
      return reduce(RULE_20, 1);
    case 124:
      return reduce(RULE_20, 1);
    case 142:
      return reduce(RULE_20, 1);
    case 155:
      return reduce(RULE_20, 1);
    case 186:
      return reduce(RULE_20, 1);
    case 175:
      return reduce(RULE_20, 1);
    case 128:
      return reduce(RULE_20, 1);
    case 143:
      return reduce(RULE_20, 1);
    case 179:
      return reduce(RULE_20, 1);
    case 164:
      return reduce(RULE_20, 1);
    case 203:
      return reduce(RULE_20, 1);
    case 195:
      return reduce(RULE_20, 1);
    case 193:
      return reduce(RULE_20, 1);
    case 158:
      return reduce(RULE_20, 1);
    case 131:
      return reduce(RULE_20, 1);
    case 156:
      return reduce(RULE_20, 1);
    case 173:
      return reduce(RULE_20, 1);
    case 101:
      return reduce(RULE_20, 1);
    case 102:
      return reduce(RULE_20, 1);
    case 145:
      return reduce(RULE_20, 1);
    case 201:
      return reduce(RULE_20, 1);
    case 202:
      return reduce(RULE_20, 1);
    case 132:
      return reduce(RULE_20, 1);
    case 167:
      return reduce(RULE_20, 1);
    case 103:
      return reduce(RULE_20, 1);
    case 133:
      return reduce(RULE_20, 1);
    case 120:
      return reduce(RULE_20, 1);
    case 168:
      return reduce(RULE_20, 1);
    case 194:
      return reduce(RULE_20, 1);
    case 112:
      return reduce(RULE_20, 1);
    case 149:
      return reduce(RULE_20, 1);
    case 110:
      return reduce(RULE_20, 1);
    case 200:
      return reduce(RULE_20, 1);
    case 192:
      return reduce(RULE_20, 1);
    case 106:
      return reduce(RULE_20, 1);
    case 108:
      return reduce(RULE_20, 1);
    case 165:
      return reduce(RULE_20, 1);
    case 197:
      return reduce(RULE_20, 1);
    case 150:
      return reduce(RULE_20, 1);
    case 111:
      return reduce(RULE_20, 1);
    case 183:
      return reduce(RULE_20, 1);
    case 198:
      return reduce(RULE_20, 1);
    case 100:
      return reduce(RULE_20, 1);
    case 171:
      return reduce(RULE_20, 1);
    case 169:
      return reduce(RULE_20, 1);
    case 190:
      return reduce(RULE_20, 1);
    case 176:
      return reduce(RULE_20, 1);
    case 147:
      return reduce(RULE_20, 1);
    case 99:
      return reduce(RULE_20, 1);
    case 182:
      return reduce(RULE_20, 1);
    case 109:
      return reduce(RULE_20, 1);
    case 191:
      return reduce(RULE_20, 1);
    case 118:
      return reduce(RULE_20, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, UBYTE_KEYWORD, SHORT_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action166(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto166(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 283;
    case 64: return 284;
    case 62: return 285;
    case 68: return 175;
    case 30: return 286;
    case 67: return 177;
    case 60: return 99;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 49: return 178;
    case 54: return 94;
    case 28: return 289;
    case 58: return 95;
    case 63: return 290;
    case 59: return 98;
    case 65: return 180;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action167(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_20, 2);
    case 154:
      return reduce(RULE_20, 2);
    case 181:
      return reduce(RULE_20, 2);
    case 184:
      return reduce(RULE_20, 2);
    case 134:
      return reduce(RULE_20, 2);
    case 153:
      return reduce(RULE_20, 2);
    case 185:
      return reduce(RULE_20, 2);
    case 205:
      return reduce(RULE_20, 2);
    case 148:
      return reduce(RULE_20, 2);
    case 125:
      return reduce(RULE_20, 2);
    case 105:
      return reduce(RULE_20, 2);
    case 98:
      return reduce(RULE_20, 2);
    case 138:
      return reduce(RULE_20, 2);
    case 124:
      return reduce(RULE_20, 2);
    case 142:
      return reduce(RULE_20, 2);
    case 155:
      return reduce(RULE_20, 2);
    case 186:
      return reduce(RULE_20, 2);
    case 175:
      return reduce(RULE_20, 2);
    case 128:
      return reduce(RULE_20, 2);
    case 143:
      return reduce(RULE_20, 2);
    case 179:
      return reduce(RULE_20, 2);
    case 164:
      return reduce(RULE_20, 2);
    case 203:
      return reduce(RULE_20, 2);
    case 195:
      return reduce(RULE_20, 2);
    case 193:
      return reduce(RULE_20, 2);
    case 158:
      return reduce(RULE_20, 2);
    case 131:
      return reduce(RULE_20, 2);
    case 156:
      return reduce(RULE_20, 2);
    case 173:
      return reduce(RULE_20, 2);
    case 101:
      return reduce(RULE_20, 2);
    case 102:
      return reduce(RULE_20, 2);
    case 145:
      return reduce(RULE_20, 2);
    case 201:
      return reduce(RULE_20, 2);
    case 202:
      return reduce(RULE_20, 2);
    case 132:
      return reduce(RULE_20, 2);
    case 167:
      return reduce(RULE_20, 2);
    case 103:
      return reduce(RULE_20, 2);
    case 133:
      return reduce(RULE_20, 2);
    case 120:
      return reduce(RULE_20, 2);
    case 168:
      return reduce(RULE_20, 2);
    case 194:
      return reduce(RULE_20, 2);
    case 112:
      return reduce(RULE_20, 2);
    case 149:
      return reduce(RULE_20, 2);
    case 110:
      return reduce(RULE_20, 2);
    case 200:
      return reduce(RULE_20, 2);
    case 192:
      return reduce(RULE_20, 2);
    case 106:
      return reduce(RULE_20, 2);
    case 108:
      return reduce(RULE_20, 2);
    case 165:
      return reduce(RULE_20, 2);
    case 197:
      return reduce(RULE_20, 2);
    case 150:
      return reduce(RULE_20, 2);
    case 111:
      return reduce(RULE_20, 2);
    case 183:
      return reduce(RULE_20, 2);
    case 198:
      return reduce(RULE_20, 2);
    case 100:
      return reduce(RULE_20, 2);
    case 171:
      return reduce(RULE_20, 2);
    case 169:
      return reduce(RULE_20, 2);
    case 190:
      return reduce(RULE_20, 2);
    case 176:
      return reduce(RULE_20, 2);
    case 147:
      return reduce(RULE_20, 2);
    case 99:
      return reduce(RULE_20, 2);
    case 182:
      return reduce(RULE_20, 2);
    case 109:
      return reduce(RULE_20, 2);
    case 191:
      return reduce(RULE_20, 2);
    case 118:
      return reduce(RULE_20, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, UBYTE_KEYWORD, SHORT_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action168(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto168(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 91;
    case 48: return 292;
    case 49: return 293;
    case 54: return 94;
    case 58: return 95;
    case 28: return 96;
    case 30: return 97;
    case 59: return 98;
    case 60: return 99;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action169(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto169(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 91;
    case 48: return 92;
    case 49: return 93;
    case 54: return 94;
    case 58: return 95;
    case 28: return 96;
    case 30: return 97;
    case 59: return 98;
    case 60: return 99;
    case 71: return 294;
    case 70: return 295;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action170(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto170(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 91;
    case 48: return 92;
    case 49: return 93;
    case 54: return 94;
    case 58: return 95;
    case 28: return 96;
    case 30: return 97;
    case 59: return 98;
    case 60: return 99;
    case 71: return 296;
    case 70: return 297;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action171(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(137);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(140);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(299);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(143);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(300);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, LONG_KEYWORD, RANGLE, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, LSQUARE, USHORT_KEYWORD, SUPER_KEYWORD, COMMA, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto171(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 148;
    case 30: return 149;
    default: return -1;
    }
  }

  private final boolean action172(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_30, 0);
    default: throw new BadTokenException(token, new Object[] {RANGLE, COMMA});
    }
  }

  private final boolean action173(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(301);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action174(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_13, 1);
    case 132:
      return reduce(RULE_13, 1);
    case 147:
      return reduce(RULE_13, 1);
    case 150:
      return reduce(RULE_13, 1);
    case 109:
      return reduce(RULE_13, 1);
    case 131:
      return reduce(RULE_13, 1);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, LPAREN, RBRACE, SEMICOLON, COMMA, LBRACE});
    }
  }

  private final boolean action175(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_31, 1);
    case 101:
      return reduce(RULE_31, 1);
    case 154:
      return reduce(RULE_31, 1);
    case 145:
      return reduce(RULE_31, 1);
    case 132:
      return reduce(RULE_31, 1);
    case 167:
      return reduce(RULE_31, 1);
    case 103:
      return reduce(RULE_31, 1);
    case 120:
      return reduce(RULE_31, 1);
    case 194:
      return reduce(RULE_31, 1);
    case 148:
      return reduce(RULE_31, 1);
    case 112:
      return reduce(RULE_31, 1);
    case 149:
      return reduce(RULE_31, 1);
    case 110:
      return reduce(RULE_31, 1);
    case 108:
      return reduce(RULE_31, 1);
    case 106:
      return reduce(RULE_31, 1);
    case 125:
      return reduce(RULE_31, 1);
    case 98:
      return reduce(RULE_31, 1);
    case 105:
      return reduce(RULE_31, 1);
    case 155:
      return reduce(RULE_31, 1);
    case 142:
      return reduce(RULE_31, 1);
    case 138:
      return reduce(RULE_31, 1);
    case 197:
      return reduce(RULE_31, 1);
    case 150:
      return reduce(RULE_31, 1);
    case 111:
      return reduce(RULE_31, 1);
    case 183:
      return reduce(RULE_31, 1);
    case 175:
      return reduce(RULE_31, 1);
    case 128:
      return reduce(RULE_31, 1);
    case 169:
      return reduce(RULE_31, 1);
    case 190:
      return reduce(RULE_31, 1);
    case 143:
      return reduce(RULE_31, 1);
    case 176:
      return reduce(RULE_31, 1);
    case 164:
      return reduce(RULE_31, 1);
    case 203:
      return reduce(RULE_31, 1);
    case 147:
      return reduce(RULE_31, 1);
    case 193:
      return reduce(RULE_31, 1);
    case 182:
      return reduce(RULE_31, 1);
    case 109:
      return reduce(RULE_31, 1);
    case 191:
      return reduce(RULE_31, 1);
    case 131:
      return reduce(RULE_31, 1);
    case 118:
      return reduce(RULE_31, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action176(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(302);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE, COMMA});
    }
  }

  private final boolean action177(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_30, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action178(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_31, 0);
    case 101:
      return reduce(RULE_31, 0);
    case 154:
      return reduce(RULE_31, 0);
    case 145:
      return reduce(RULE_31, 0);
    case 132:
      return reduce(RULE_31, 0);
    case 167:
      return reduce(RULE_31, 0);
    case 103:
      return reduce(RULE_31, 0);
    case 120:
      return reduce(RULE_31, 0);
    case 194:
      return reduce(RULE_31, 0);
    case 148:
      return reduce(RULE_31, 0);
    case 112:
      return reduce(RULE_31, 0);
    case 149:
      return reduce(RULE_31, 0);
    case 110:
      return reduce(RULE_31, 0);
    case 108:
      return reduce(RULE_31, 0);
    case 106:
      return reduce(RULE_31, 0);
    case 125:
      return reduce(RULE_31, 0);
    case 98:
      return reduce(RULE_31, 0);
    case 105:
      return reduce(RULE_31, 0);
    case 155:
      return reduce(RULE_31, 0);
    case 142:
      return reduce(RULE_31, 0);
    case 138:
      return reduce(RULE_31, 0);
    case 197:
      return reduce(RULE_31, 0);
    case 150:
      return reduce(RULE_31, 0);
    case 111:
      return reduce(RULE_31, 0);
    case 183:
      return reduce(RULE_31, 0);
    case 175:
      return reduce(RULE_31, 0);
    case 128:
      return reduce(RULE_31, 0);
    case 169:
      return reduce(RULE_31, 0);
    case 190:
      return reduce(RULE_31, 0);
    case 143:
      return reduce(RULE_31, 0);
    case 176:
      return reduce(RULE_31, 0);
    case 164:
      return reduce(RULE_31, 0);
    case 203:
      return reduce(RULE_31, 0);
    case 147:
      return reduce(RULE_31, 0);
    case 193:
      return reduce(RULE_31, 0);
    case 182:
      return reduce(RULE_31, 0);
    case 109:
      return reduce(RULE_31, 0);
    case 191:
      return reduce(RULE_31, 0);
    case 131:
      return reduce(RULE_31, 0);
    case 118:
      return reduce(RULE_31, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action179(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(303);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE, LANGLE, DOT, COMMA});
    }
  }

  private final boolean action180(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_32, 0);
    case 101:
      return reduce(RULE_32, 0);
    case 154:
      return reduce(RULE_32, 0);
    case 145:
      return reduce(RULE_32, 0);
    case 132:
      return reduce(RULE_32, 0);
    case 167:
      return reduce(RULE_32, 0);
    case 103:
      return reduce(RULE_32, 0);
    case 120:
      return reduce(RULE_32, 0);
    case 194:
      return reduce(RULE_32, 0);
    case 148:
      return reduce(RULE_32, 0);
    case 112:
      return reduce(RULE_32, 0);
    case 149:
      return reduce(RULE_32, 0);
    case 110:
      return reduce(RULE_32, 0);
    case 108:
      return reduce(RULE_32, 0);
    case 106:
      return reduce(RULE_32, 0);
    case 125:
      return reduce(RULE_32, 0);
    case 98:
      return reduce(RULE_32, 0);
    case 105:
      return reduce(RULE_32, 0);
    case 155:
      return reduce(RULE_32, 0);
    case 142:
      return reduce(RULE_32, 0);
    case 138:
      return reduce(RULE_32, 0);
    case 197:
      return reduce(RULE_32, 0);
    case 150:
      return reduce(RULE_32, 0);
    case 111:
      return reduce(RULE_32, 0);
    case 183:
      return reduce(RULE_32, 0);
    case 175:
      return reduce(RULE_32, 0);
    case 128:
      return reduce(RULE_32, 0);
    case 169:
      return reduce(RULE_32, 0);
    case 190:
      return reduce(RULE_32, 0);
    case 143:
      return reduce(RULE_32, 0);
    case 176:
      return reduce(RULE_32, 0);
    case 164:
      return reduce(RULE_32, 0);
    case 203:
      return reduce(RULE_32, 0);
    case 147:
      return reduce(RULE_32, 0);
    case 193:
      return reduce(RULE_32, 0);
    case 182:
      return reduce(RULE_32, 0);
    case 109:
      return reduce(RULE_32, 0);
    case 191:
      return reduce(RULE_32, 0);
    case 131:
      return reduce(RULE_32, 0);
    case 118:
      return reduce(RULE_32, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action181(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_14, 1);
    case 131:
      return reduce(RULE_14, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action182(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_11, 0);
    case 101:
      return reduce(RULE_11, 0);
    case 181:
      return reduce(RULE_11, 0);
    case 188:
      return reduce(RULE_11, 0);
    case 201:
      return reduce(RULE_11, 0);
    case 202:
      return reduce(RULE_11, 0);
    case 132:
      return reduce(RULE_11, 0);
    case 205:
      return reduce(RULE_11, 0);
    case 133:
      return reduce(RULE_11, 0);
    case 206:
      return reduce(RULE_11, 0);
    case 200:
      return reduce(RULE_11, 0);
    case 192:
      return reduce(RULE_11, 0);
    case 165:
      return reduce(RULE_11, 0);
    case 98:
      return reduce(RULE_11, 0);
    case 155:
      return reduce(RULE_11, 0);
    case 142:
      return reduce(RULE_11, 0);
    case 183:
      return reduce(RULE_11, 0);
    case 186:
      return reduce(RULE_11, 0);
    case 175:
      return reduce(RULE_11, 0);
    case 128:
      return reduce(RULE_11, 0);
    case 171:
      return reduce(RULE_11, 0);
    case 190:
      return reduce(RULE_11, 0);
    case 169:
      return reduce(RULE_11, 0);
    case 179:
      return reduce(RULE_11, 0);
    case 164:
      return reduce(RULE_11, 0);
    case 203:
      return reduce(RULE_11, 0);
    case 147:
      return reduce(RULE_11, 0);
    case 193:
      return reduce(RULE_11, 0);
    case 182:
      return reduce(RULE_11, 0);
    case 158:
      return reduce(RULE_11, 0);
    case 131:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto182(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 304;
    default: return -1;
    }
  }

  private final boolean action183(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_33, 0);
    }
    switch (token.getType().ordinal())
    {
    case 161:
      return reduce(RULE_33, 0);
    case 101:
      return reduce(RULE_33, 0);
    case 155:
      return reduce(RULE_33, 0);
    case 183:
      return reduce(RULE_33, 0);
    case 175:
      return reduce(RULE_33, 0);
    case 169:
      return reduce(RULE_33, 0);
    case 190:
      return reduce(RULE_33, 0);
    case 203:
      return reduce(RULE_33, 0);
    case 180:
      return reduce(RULE_33, 0);
    case 193:
      return reduce(RULE_33, 0);
    case 182:
      return reduce(RULE_33, 0);
    case 162:
      return reduce(RULE_33, 0);
    default: throw new BadTokenException(token, new Object[] {null, UNBACKED_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, COMPOUND_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action184(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(116);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(305);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 188:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto184(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 119;
    case 51: return 120;
    case 8: return 121;
    case 27: return 122;
    case 33: return 123;
    case 7: return 124;
    case 30: return 125;
    case 9: return 126;
    case 60: return 99;
    case 48: return 127;
    case 26: return 128;
    case 10: return 129;
    case 54: return 94;
    case 28: return 130;
    case 58: return 95;
    default: return -1;
    }
  }

  private final boolean action185(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto185(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 53: return 270;
    case 54: return 271;
    case 28: return 306;
    case 58: return 272;
    case 30: return 274;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action186(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto186(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 307;
    default: return -1;
    }
  }

  private final boolean action187(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(255);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto187(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 309;
    default: return -1;
    }
  }

  private final boolean action188(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action189(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_15, 41);
    case 101:
      return reduce(RULE_15, 41);
    case 154:
      return reduce(RULE_15, 41);
    case 145:
      return reduce(RULE_15, 41);
    case 132:
      return reduce(RULE_15, 41);
    case 103:
      return reduce(RULE_15, 41);
    case 112:
      return reduce(RULE_15, 41);
    case 148:
      return reduce(RULE_15, 41);
    case 110:
      return reduce(RULE_15, 41);
    case 149:
      return reduce(RULE_15, 41);
    case 108:
      return reduce(RULE_15, 41);
    case 106:
      return reduce(RULE_15, 41);
    case 125:
      return reduce(RULE_15, 41);
    case 98:
      return reduce(RULE_15, 41);
    case 105:
      return reduce(RULE_15, 41);
    case 155:
      return reduce(RULE_15, 41);
    case 138:
      return reduce(RULE_15, 41);
    case 142:
      return reduce(RULE_15, 41);
    case 197:
      return reduce(RULE_15, 41);
    case 150:
      return reduce(RULE_15, 41);
    case 183:
      return reduce(RULE_15, 41);
    case 111:
      return reduce(RULE_15, 41);
    case 175:
      return reduce(RULE_15, 41);
    case 128:
      return reduce(RULE_15, 41);
    case 169:
      return reduce(RULE_15, 41);
    case 190:
      return reduce(RULE_15, 41);
    case 143:
      return reduce(RULE_15, 41);
    case 164:
      return reduce(RULE_15, 41);
    case 203:
      return reduce(RULE_15, 41);
    case 147:
      return reduce(RULE_15, 41);
    case 193:
      return reduce(RULE_15, 41);
    case 182:
      return reduce(RULE_15, 41);
    case 109:
      return reduce(RULE_15, 41);
    case 191:
      return reduce(RULE_15, 41);
    case 131:
      return reduce(RULE_15, 41);
    case 118:
      return reduce(RULE_15, 41);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, LANGLE, MUTABLE_KEYWORD, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action190(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(312);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action191(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(313);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_15, 42);
    case 101:
      return reduce(RULE_15, 42);
    case 154:
      return reduce(RULE_15, 42);
    case 145:
      return reduce(RULE_15, 42);
    case 132:
      return reduce(RULE_15, 42);
    case 103:
      return reduce(RULE_15, 42);
    case 112:
      return reduce(RULE_15, 42);
    case 148:
      return reduce(RULE_15, 42);
    case 110:
      return reduce(RULE_15, 42);
    case 149:
      return reduce(RULE_15, 42);
    case 108:
      return reduce(RULE_15, 42);
    case 106:
      return reduce(RULE_15, 42);
    case 125:
      return reduce(RULE_15, 42);
    case 105:
      return reduce(RULE_15, 42);
    case 98:
      return reduce(RULE_15, 42);
    case 155:
      return reduce(RULE_15, 42);
    case 138:
      return reduce(RULE_15, 42);
    case 142:
      return reduce(RULE_15, 42);
    case 197:
      return reduce(RULE_15, 42);
    case 150:
      return reduce(RULE_15, 42);
    case 183:
      return reduce(RULE_15, 42);
    case 111:
      return reduce(RULE_15, 42);
    case 175:
      return reduce(RULE_15, 42);
    case 128:
      return reduce(RULE_15, 42);
    case 169:
      return reduce(RULE_15, 42);
    case 190:
      return reduce(RULE_15, 42);
    case 143:
      return reduce(RULE_15, 42);
    case 164:
      return reduce(RULE_15, 42);
    case 203:
      return reduce(RULE_15, 42);
    case 147:
      return reduce(RULE_15, 42);
    case 193:
      return reduce(RULE_15, 42);
    case 182:
      return reduce(RULE_15, 42);
    case 109:
      return reduce(RULE_15, 42);
    case 191:
      return reduce(RULE_15, 42);
    case 131:
      return reduce(RULE_15, 42);
    case 118:
      return reduce(RULE_15, 42);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, LANGLE, MUTABLE_KEYWORD, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action192(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 156:
      return reduce(RULE_2, 0);
    case 165:
      return reduce(RULE_2, 0);
    case 98:
      return reduce(RULE_2, 0);
    case 142:
      return reduce(RULE_2, 0);
    case 181:
      return reduce(RULE_2, 0);
    case 186:
      return reduce(RULE_2, 0);
    case 201:
      return reduce(RULE_2, 0);
    case 128:
      return reduce(RULE_2, 0);
    case 171:
      return reduce(RULE_2, 0);
    case 179:
      return reduce(RULE_2, 0);
    case 202:
      return reduce(RULE_2, 0);
    case 132:
      return reduce(RULE_2, 0);
    case 133:
      return reduce(RULE_2, 0);
    case 205:
      return reduce(RULE_2, 0);
    case 158:
      return reduce(RULE_2, 0);
    case 131:
      return reduce(RULE_2, 0);
    case 200:
      return reduce(RULE_2, 0);
    case 192:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto192(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 16;
    case 27: return 315;
    case 20: return 316;
    default: return -1;
    }
  }

  private final boolean action193(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto193(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 318;
    default: return -1;
    }
  }

  private final boolean action194(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(319);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LANGLE});
    }
  }

  private final boolean action195(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_35, 5);
    case 123:
      return reduce(RULE_35, 5);
    case 107:
      return reduce(RULE_35, 5);
    case 150:
      return reduce(RULE_35, 5);
    case 127:
      return reduce(RULE_35, 5);
    case 104:
      return reduce(RULE_35, 5);
    case 121:
      return reduce(RULE_35, 5);
    case 114:
      return reduce(RULE_35, 5);
    case 135:
      return reduce(RULE_35, 5);
    case 152:
      return reduce(RULE_35, 5);
    case 141:
      return reduce(RULE_35, 5);
    case 137:
      return reduce(RULE_35, 5);
    case 139:
      return reduce(RULE_35, 5);
    case 148:
      return reduce(RULE_35, 5);
    case 109:
      return reduce(RULE_35, 5);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, CARET_EQUALS, SEMICOLON, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS, MINUS_EQUALS, STAR_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, RPAREN, COMMA});
    }
  }

  private final boolean action196(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto196(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 342;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action197(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(352);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(353);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto197(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 354;
    case 96: return 355;
    default: return -1;
    }
  }

  private final boolean action198(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 4);
    case 173:
      return reduce(RULE_36, 4);
    case 101:
      return reduce(RULE_36, 4);
    case 145:
      return reduce(RULE_36, 4);
    case 116:
      return reduce(RULE_36, 4);
    case 151:
      return reduce(RULE_36, 4);
    case 132:
      return reduce(RULE_36, 4);
    case 134:
      return reduce(RULE_36, 4);
    case 103:
      return reduce(RULE_36, 4);
    case 133:
      return reduce(RULE_36, 4);
    case 120:
      return reduce(RULE_36, 4);
    case 148:
      return reduce(RULE_36, 4);
    case 112:
      return reduce(RULE_36, 4);
    case 149:
      return reduce(RULE_36, 4);
    case 110:
      return reduce(RULE_36, 4);
    case 108:
      return reduce(RULE_36, 4);
    case 106:
      return reduce(RULE_36, 4);
    case 125:
      return reduce(RULE_36, 4);
    case 178:
      return reduce(RULE_36, 4);
    case 155:
      return reduce(RULE_36, 4);
    case 124:
      return reduce(RULE_36, 4);
    case 142:
      return reduce(RULE_36, 4);
    case 146:
      return reduce(RULE_36, 4);
    case 138:
      return reduce(RULE_36, 4);
    case 150:
      return reduce(RULE_36, 4);
    case 183:
      return reduce(RULE_36, 4);
    case 175:
      return reduce(RULE_36, 4);
    case 113:
      return reduce(RULE_36, 4);
    case 169:
      return reduce(RULE_36, 4);
    case 190:
      return reduce(RULE_36, 4);
    case 143:
      return reduce(RULE_36, 4);
    case 164:
      return reduce(RULE_36, 4);
    case 203:
      return reduce(RULE_36, 4);
    case 147:
      return reduce(RULE_36, 4);
    case 130:
      return reduce(RULE_36, 4);
    case 193:
      return reduce(RULE_36, 4);
    case 129:
      return reduce(RULE_36, 4);
    case 144:
      return reduce(RULE_36, 4);
    case 136:
      return reduce(RULE_36, 4);
    case 182:
      return reduce(RULE_36, 4);
    case 122:
      return reduce(RULE_36, 4);
    case 140:
      return reduce(RULE_36, 4);
    case 109:
      return reduce(RULE_36, 4);
    case 191:
      return reduce(RULE_36, 4);
    case 131:
      return reduce(RULE_36, 4);
    case 118:
      return reduce(RULE_36, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action199(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto199(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 356;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action200(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto200(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 357;
    default: return -1;
    }
  }

  private final boolean action201(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final boolean action202(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 133:
      return reduce(RULE_37, 1);
    case 144:
      return reduce(RULE_37, 1);
    case 122:
      return reduce(RULE_37, 1);
    default: throw new BadTokenException(token, new Object[] {LPAREN, LSQUARE, QUESTION_MARK_DOT, DOT});
    }
  }

  private final int goto202(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 360;
    default: return -1;
    }
  }

  private final boolean action203(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, INTEGER_LITERAL});
    }
  }

  private final boolean action204(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 21);
    case 173:
      return reduce(RULE_36, 21);
    case 101:
      return reduce(RULE_36, 21);
    case 145:
      return reduce(RULE_36, 21);
    case 116:
      return reduce(RULE_36, 21);
    case 151:
      return reduce(RULE_36, 21);
    case 132:
      return reduce(RULE_36, 21);
    case 134:
      return reduce(RULE_36, 21);
    case 103:
      return reduce(RULE_36, 21);
    case 133:
      return reduce(RULE_36, 21);
    case 120:
      return reduce(RULE_36, 21);
    case 148:
      return reduce(RULE_36, 21);
    case 112:
      return reduce(RULE_36, 21);
    case 149:
      return reduce(RULE_36, 21);
    case 110:
      return reduce(RULE_36, 21);
    case 108:
      return reduce(RULE_36, 21);
    case 106:
      return reduce(RULE_36, 21);
    case 125:
      return reduce(RULE_36, 21);
    case 178:
      return reduce(RULE_36, 21);
    case 155:
      return reduce(RULE_36, 21);
    case 124:
      return reduce(RULE_36, 21);
    case 142:
      return reduce(RULE_36, 21);
    case 146:
      return reduce(RULE_36, 21);
    case 138:
      return reduce(RULE_36, 21);
    case 150:
      return reduce(RULE_36, 21);
    case 183:
      return reduce(RULE_36, 21);
    case 175:
      return reduce(RULE_36, 21);
    case 113:
      return reduce(RULE_36, 21);
    case 169:
      return reduce(RULE_36, 21);
    case 190:
      return reduce(RULE_36, 21);
    case 143:
      return reduce(RULE_36, 21);
    case 164:
      return reduce(RULE_36, 21);
    case 203:
      return reduce(RULE_36, 21);
    case 147:
      return reduce(RULE_36, 21);
    case 130:
      return reduce(RULE_36, 21);
    case 193:
      return reduce(RULE_36, 21);
    case 129:
      return reduce(RULE_36, 21);
    case 144:
      return reduce(RULE_36, 21);
    case 136:
      return reduce(RULE_36, 21);
    case 182:
      return reduce(RULE_36, 21);
    case 122:
      return reduce(RULE_36, 21);
    case 140:
      return reduce(RULE_36, 21);
    case 109:
      return reduce(RULE_36, 21);
    case 191:
      return reduce(RULE_36, 21);
    case 131:
      return reduce(RULE_36, 21);
    case 118:
      return reduce(RULE_36, 21);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action205(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto205(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 84: return 329;
    case 89: return 330;
    case 56: return 154;
    case 94: return 331;
    case 79: return 363;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 29: return 156;
    case 30: return 364;
    case 97: return 338;
    case 87: return 339;
    case 60: return 236;
    case 80: return 341;
    case 81: return 343;
    case 54: return 227;
    case 92: return 228;
    case 28: return 365;
    case 91: return 346;
    case 58: return 95;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action206(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 3);
    case 173:
      return reduce(RULE_36, 3);
    case 101:
      return reduce(RULE_36, 3);
    case 145:
      return reduce(RULE_36, 3);
    case 116:
      return reduce(RULE_36, 3);
    case 151:
      return reduce(RULE_36, 3);
    case 132:
      return reduce(RULE_36, 3);
    case 134:
      return reduce(RULE_36, 3);
    case 103:
      return reduce(RULE_36, 3);
    case 133:
      return reduce(RULE_36, 3);
    case 120:
      return reduce(RULE_36, 3);
    case 148:
      return reduce(RULE_36, 3);
    case 112:
      return reduce(RULE_36, 3);
    case 149:
      return reduce(RULE_36, 3);
    case 110:
      return reduce(RULE_36, 3);
    case 108:
      return reduce(RULE_36, 3);
    case 106:
      return reduce(RULE_36, 3);
    case 125:
      return reduce(RULE_36, 3);
    case 178:
      return reduce(RULE_36, 3);
    case 155:
      return reduce(RULE_36, 3);
    case 124:
      return reduce(RULE_36, 3);
    case 142:
      return reduce(RULE_36, 3);
    case 146:
      return reduce(RULE_36, 3);
    case 138:
      return reduce(RULE_36, 3);
    case 150:
      return reduce(RULE_36, 3);
    case 183:
      return reduce(RULE_36, 3);
    case 175:
      return reduce(RULE_36, 3);
    case 113:
      return reduce(RULE_36, 3);
    case 169:
      return reduce(RULE_36, 3);
    case 190:
      return reduce(RULE_36, 3);
    case 143:
      return reduce(RULE_36, 3);
    case 164:
      return reduce(RULE_36, 3);
    case 203:
      return reduce(RULE_36, 3);
    case 147:
      return reduce(RULE_36, 3);
    case 130:
      return reduce(RULE_36, 3);
    case 193:
      return reduce(RULE_36, 3);
    case 129:
      return reduce(RULE_36, 3);
    case 144:
      return reduce(RULE_36, 3);
    case 136:
      return reduce(RULE_36, 3);
    case 182:
      return reduce(RULE_36, 3);
    case 122:
      return reduce(RULE_36, 3);
    case 140:
      return reduce(RULE_36, 3);
    case 109:
      return reduce(RULE_36, 3);
    case 191:
      return reduce(RULE_36, 3);
    case 131:
      return reduce(RULE_36, 3);
    case 118:
      return reduce(RULE_36, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action207(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN, DOT});
    }
  }

  private final int goto207(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 367;
    default: return -1;
    }
  }

  private final boolean action208(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto208(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 369;
    default: return -1;
    }
  }

  private final boolean action209(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, SEMICOLON, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto209(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 371;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action210(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(372);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(373);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, INTEGER_LITERAL});
    }
  }

  private final boolean action211(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 2);
    case 173:
      return reduce(RULE_36, 2);
    case 101:
      return reduce(RULE_36, 2);
    case 145:
      return reduce(RULE_36, 2);
    case 116:
      return reduce(RULE_36, 2);
    case 151:
      return reduce(RULE_36, 2);
    case 132:
      return reduce(RULE_36, 2);
    case 134:
      return reduce(RULE_36, 2);
    case 103:
      return reduce(RULE_36, 2);
    case 133:
      return reduce(RULE_36, 2);
    case 120:
      return reduce(RULE_36, 2);
    case 148:
      return reduce(RULE_36, 2);
    case 112:
      return reduce(RULE_36, 2);
    case 149:
      return reduce(RULE_36, 2);
    case 110:
      return reduce(RULE_36, 2);
    case 108:
      return reduce(RULE_36, 2);
    case 106:
      return reduce(RULE_36, 2);
    case 125:
      return reduce(RULE_36, 2);
    case 178:
      return reduce(RULE_36, 2);
    case 155:
      return reduce(RULE_36, 2);
    case 124:
      return reduce(RULE_36, 2);
    case 142:
      return reduce(RULE_36, 2);
    case 146:
      return reduce(RULE_36, 2);
    case 138:
      return reduce(RULE_36, 2);
    case 150:
      return reduce(RULE_36, 2);
    case 183:
      return reduce(RULE_36, 2);
    case 175:
      return reduce(RULE_36, 2);
    case 113:
      return reduce(RULE_36, 2);
    case 169:
      return reduce(RULE_36, 2);
    case 190:
      return reduce(RULE_36, 2);
    case 143:
      return reduce(RULE_36, 2);
    case 164:
      return reduce(RULE_36, 2);
    case 203:
      return reduce(RULE_36, 2);
    case 147:
      return reduce(RULE_36, 2);
    case 130:
      return reduce(RULE_36, 2);
    case 193:
      return reduce(RULE_36, 2);
    case 129:
      return reduce(RULE_36, 2);
    case 144:
      return reduce(RULE_36, 2);
    case 136:
      return reduce(RULE_36, 2);
    case 182:
      return reduce(RULE_36, 2);
    case 122:
      return reduce(RULE_36, 2);
    case 140:
      return reduce(RULE_36, 2);
    case 109:
      return reduce(RULE_36, 2);
    case 191:
      return reduce(RULE_36, 2);
    case 131:
      return reduce(RULE_36, 2);
    case 118:
      return reduce(RULE_36, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action212(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 1);
    case 173:
      return reduce(RULE_36, 1);
    case 101:
      return reduce(RULE_36, 1);
    case 145:
      return reduce(RULE_36, 1);
    case 116:
      return reduce(RULE_36, 1);
    case 151:
      return reduce(RULE_36, 1);
    case 132:
      return reduce(RULE_36, 1);
    case 134:
      return reduce(RULE_36, 1);
    case 103:
      return reduce(RULE_36, 1);
    case 133:
      return reduce(RULE_36, 1);
    case 120:
      return reduce(RULE_36, 1);
    case 148:
      return reduce(RULE_36, 1);
    case 112:
      return reduce(RULE_36, 1);
    case 149:
      return reduce(RULE_36, 1);
    case 110:
      return reduce(RULE_36, 1);
    case 108:
      return reduce(RULE_36, 1);
    case 106:
      return reduce(RULE_36, 1);
    case 125:
      return reduce(RULE_36, 1);
    case 178:
      return reduce(RULE_36, 1);
    case 155:
      return reduce(RULE_36, 1);
    case 124:
      return reduce(RULE_36, 1);
    case 142:
      return reduce(RULE_36, 1);
    case 146:
      return reduce(RULE_36, 1);
    case 138:
      return reduce(RULE_36, 1);
    case 150:
      return reduce(RULE_36, 1);
    case 183:
      return reduce(RULE_36, 1);
    case 175:
      return reduce(RULE_36, 1);
    case 113:
      return reduce(RULE_36, 1);
    case 169:
      return reduce(RULE_36, 1);
    case 190:
      return reduce(RULE_36, 1);
    case 143:
      return reduce(RULE_36, 1);
    case 164:
      return reduce(RULE_36, 1);
    case 203:
      return reduce(RULE_36, 1);
    case 147:
      return reduce(RULE_36, 1);
    case 130:
      return reduce(RULE_36, 1);
    case 193:
      return reduce(RULE_36, 1);
    case 129:
      return reduce(RULE_36, 1);
    case 144:
      return reduce(RULE_36, 1);
    case 136:
      return reduce(RULE_36, 1);
    case 182:
      return reduce(RULE_36, 1);
    case 122:
      return reduce(RULE_36, 1);
    case 140:
      return reduce(RULE_36, 1);
    case 109:
      return reduce(RULE_36, 1);
    case 191:
      return reduce(RULE_36, 1);
    case 131:
      return reduce(RULE_36, 1);
    case 118:
      return reduce(RULE_36, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action213(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_38, 1);
    case 154:
      return reduce(RULE_38, 1);
    case 181:
      return reduce(RULE_38, 1);
    case 188:
      return reduce(RULE_38, 1);
    case 174:
      return reduce(RULE_38, 1);
    case 184:
      return reduce(RULE_38, 1);
    case 160:
      return reduce(RULE_38, 1);
    case 185:
      return reduce(RULE_38, 1);
    case 205:
      return reduce(RULE_38, 1);
    case 196:
      return reduce(RULE_38, 1);
    case 98:
      return reduce(RULE_38, 1);
    case 155:
      return reduce(RULE_38, 1);
    case 142:
      return reduce(RULE_38, 1);
    case 186:
      return reduce(RULE_38, 1);
    case 175:
      return reduce(RULE_38, 1);
    case 128:
      return reduce(RULE_38, 1);
    case 179:
      return reduce(RULE_38, 1);
    case 164:
      return reduce(RULE_38, 1);
    case 203:
      return reduce(RULE_38, 1);
    case 172:
      return reduce(RULE_38, 1);
    case 157:
      return reduce(RULE_38, 1);
    case 195:
      return reduce(RULE_38, 1);
    case 193:
      return reduce(RULE_38, 1);
    case 158:
      return reduce(RULE_38, 1);
    case 131:
      return reduce(RULE_38, 1);
    case 156:
      return reduce(RULE_38, 1);
    case 173:
      return reduce(RULE_38, 1);
    case 101:
      return reduce(RULE_38, 1);
    case 102:
      return reduce(RULE_38, 1);
    case 201:
      return reduce(RULE_38, 1);
    case 202:
      return reduce(RULE_38, 1);
    case 132:
      return reduce(RULE_38, 1);
    case 133:
      return reduce(RULE_38, 1);
    case 168:
      return reduce(RULE_38, 1);
    case 206:
      return reduce(RULE_38, 1);
    case 194:
      return reduce(RULE_38, 1);
    case 199:
      return reduce(RULE_38, 1);
    case 200:
      return reduce(RULE_38, 1);
    case 192:
      return reduce(RULE_38, 1);
    case 165:
      return reduce(RULE_38, 1);
    case 150:
      return reduce(RULE_38, 1);
    case 189:
      return reduce(RULE_38, 1);
    case 183:
      return reduce(RULE_38, 1);
    case 163:
      return reduce(RULE_38, 1);
    case 198:
      return reduce(RULE_38, 1);
    case 100:
      return reduce(RULE_38, 1);
    case 171:
      return reduce(RULE_38, 1);
    case 169:
      return reduce(RULE_38, 1);
    case 190:
      return reduce(RULE_38, 1);
    case 166:
      return reduce(RULE_38, 1);
    case 170:
      return reduce(RULE_38, 1);
    case 147:
      return reduce(RULE_38, 1);
    case 207:
      return reduce(RULE_38, 1);
    case 99:
      return reduce(RULE_38, 1);
    case 115:
      return reduce(RULE_38, 1);
    case 119:
      return reduce(RULE_38, 1);
    case 182:
      return reduce(RULE_38, 1);
    case 191:
      return reduce(RULE_38, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, PROPERTY_KEYWORD, IF_KEYWORD, NEW_KEYWORD, CATCH_KEYWORD, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, VOID_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, ELSE_KEYWORD, FINALLY_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final boolean action214(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto214(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 374;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action215(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto215(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 13: return 375;
    case 94: return 331;
    case 14: return 376;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 224;
    case 91: return 241;
    case 28: return 377;
    case 30: return 378;
    case 97: return 235;
    case 60: return 340;
    default: return -1;
    }
  }

  private final boolean action216(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto216(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 13: return 379;
    case 94: return 331;
    case 14: return 376;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 224;
    case 91: return 241;
    case 28: return 377;
    case 30: return 378;
    case 97: return 235;
    case 60: return 340;
    default: return -1;
    }
  }

  private final boolean action217(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 0);
    case 173:
      return reduce(RULE_36, 0);
    case 101:
      return reduce(RULE_36, 0);
    case 145:
      return reduce(RULE_36, 0);
    case 116:
      return reduce(RULE_36, 0);
    case 151:
      return reduce(RULE_36, 0);
    case 132:
      return reduce(RULE_36, 0);
    case 134:
      return reduce(RULE_36, 0);
    case 103:
      return reduce(RULE_36, 0);
    case 133:
      return reduce(RULE_36, 0);
    case 120:
      return reduce(RULE_36, 0);
    case 148:
      return reduce(RULE_36, 0);
    case 112:
      return reduce(RULE_36, 0);
    case 149:
      return reduce(RULE_36, 0);
    case 110:
      return reduce(RULE_36, 0);
    case 108:
      return reduce(RULE_36, 0);
    case 106:
      return reduce(RULE_36, 0);
    case 125:
      return reduce(RULE_36, 0);
    case 178:
      return reduce(RULE_36, 0);
    case 155:
      return reduce(RULE_36, 0);
    case 124:
      return reduce(RULE_36, 0);
    case 142:
      return reduce(RULE_36, 0);
    case 146:
      return reduce(RULE_36, 0);
    case 138:
      return reduce(RULE_36, 0);
    case 150:
      return reduce(RULE_36, 0);
    case 183:
      return reduce(RULE_36, 0);
    case 175:
      return reduce(RULE_36, 0);
    case 113:
      return reduce(RULE_36, 0);
    case 169:
      return reduce(RULE_36, 0);
    case 190:
      return reduce(RULE_36, 0);
    case 143:
      return reduce(RULE_36, 0);
    case 164:
      return reduce(RULE_36, 0);
    case 203:
      return reduce(RULE_36, 0);
    case 147:
      return reduce(RULE_36, 0);
    case 130:
      return reduce(RULE_36, 0);
    case 193:
      return reduce(RULE_36, 0);
    case 129:
      return reduce(RULE_36, 0);
    case 144:
      return reduce(RULE_36, 0);
    case 136:
      return reduce(RULE_36, 0);
    case 182:
      return reduce(RULE_36, 0);
    case 122:
      return reduce(RULE_36, 0);
    case 140:
      return reduce(RULE_36, 0);
    case 109:
      return reduce(RULE_36, 0);
    case 191:
      return reduce(RULE_36, 0);
    case 131:
      return reduce(RULE_36, 0);
    case 118:
      return reduce(RULE_36, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action218(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 2);
    case 156:
      return reduce(RULE_39, 2);
    case 101:
      return reduce(RULE_39, 2);
    case 102:
      return reduce(RULE_39, 2);
    case 154:
      return reduce(RULE_39, 2);
    case 181:
      return reduce(RULE_39, 2);
    case 174:
      return reduce(RULE_39, 2);
    case 184:
      return reduce(RULE_39, 2);
    case 201:
      return reduce(RULE_39, 2);
    case 132:
      return reduce(RULE_39, 2);
    case 202:
      return reduce(RULE_39, 2);
    case 185:
      return reduce(RULE_39, 2);
    case 133:
      return reduce(RULE_39, 2);
    case 205:
      return reduce(RULE_39, 2);
    case 168:
      return reduce(RULE_39, 2);
    case 196:
      return reduce(RULE_39, 2);
    case 194:
      return reduce(RULE_39, 2);
    case 199:
      return reduce(RULE_39, 2);
    case 200:
      return reduce(RULE_39, 2);
    case 192:
      return reduce(RULE_39, 2);
    case 165:
      return reduce(RULE_39, 2);
    case 98:
      return reduce(RULE_39, 2);
    case 155:
      return reduce(RULE_39, 2);
    case 142:
      return reduce(RULE_39, 2);
    case 189:
      return reduce(RULE_39, 2);
    case 183:
      return reduce(RULE_39, 2);
    case 163:
      return reduce(RULE_39, 2);
    case 186:
      return reduce(RULE_39, 2);
    case 198:
      return reduce(RULE_39, 2);
    case 100:
      return reduce(RULE_39, 2);
    case 175:
      return reduce(RULE_39, 2);
    case 128:
      return reduce(RULE_39, 2);
    case 169:
      return reduce(RULE_39, 2);
    case 190:
      return reduce(RULE_39, 2);
    case 171:
      return reduce(RULE_39, 2);
    case 179:
      return reduce(RULE_39, 2);
    case 164:
      return reduce(RULE_39, 2);
    case 203:
      return reduce(RULE_39, 2);
    case 172:
      return reduce(RULE_39, 2);
    case 195:
      return reduce(RULE_39, 2);
    case 157:
      return reduce(RULE_39, 2);
    case 147:
      return reduce(RULE_39, 2);
    case 207:
      return reduce(RULE_39, 2);
    case 193:
      return reduce(RULE_39, 2);
    case 119:
      return reduce(RULE_39, 2);
    case 115:
      return reduce(RULE_39, 2);
    case 99:
      return reduce(RULE_39, 2);
    case 182:
      return reduce(RULE_39, 2);
    case 158:
      return reduce(RULE_39, 2);
    case 131:
      return reduce(RULE_39, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action219(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_40, 2);
    case 123:
      return reduce(RULE_40, 2);
    case 135:
      return reduce(RULE_40, 2);
    case 107:
      return reduce(RULE_40, 2);
    case 152:
      return reduce(RULE_40, 2);
    case 141:
      return reduce(RULE_40, 2);
    case 137:
      return reduce(RULE_40, 2);
    case 127:
      return reduce(RULE_40, 2);
    case 139:
      return reduce(RULE_40, 2);
    case 104:
      return reduce(RULE_40, 2);
    case 121:
      return reduce(RULE_40, 2);
    case 114:
      return reduce(RULE_40, 2);
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, MINUS_EQUALS, CARET_EQUALS, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS});
    }
  }

  private final boolean action220(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(380);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_41, 1);
    case 123:
      return reduce(RULE_41, 1);
    case 135:
      return reduce(RULE_41, 1);
    case 107:
      return reduce(RULE_41, 1);
    case 152:
      return reduce(RULE_41, 1);
    case 141:
      return reduce(RULE_41, 1);
    case 137:
      return reduce(RULE_41, 1);
    case 127:
      return reduce(RULE_41, 1);
    case 139:
      return reduce(RULE_41, 1);
    case 104:
      return reduce(RULE_41, 1);
    case 121:
      return reduce(RULE_41, 1);
    case 114:
      return reduce(RULE_41, 1);
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, MINUS_EQUALS, CARET_EQUALS, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, COMMA, DOUBLE_LANGLE_EQUALS});
    }
  }

  private final boolean action221(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 132:
      return reduce(RULE_36, 19);
    case 133:
      return reduce(RULE_36, 19);
    case 144:
      return reduce(RULE_36, 19);
    case 122:
      return reduce(RULE_36, 19);
    default: throw new BadTokenException(token, new Object[] {LPAREN, LSQUARE, SEMICOLON, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action222(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 6);
    case 156:
      return reduce(RULE_39, 6);
    case 101:
      return reduce(RULE_39, 6);
    case 102:
      return reduce(RULE_39, 6);
    case 154:
      return reduce(RULE_39, 6);
    case 181:
      return reduce(RULE_39, 6);
    case 174:
      return reduce(RULE_39, 6);
    case 184:
      return reduce(RULE_39, 6);
    case 201:
      return reduce(RULE_39, 6);
    case 132:
      return reduce(RULE_39, 6);
    case 202:
      return reduce(RULE_39, 6);
    case 185:
      return reduce(RULE_39, 6);
    case 133:
      return reduce(RULE_39, 6);
    case 205:
      return reduce(RULE_39, 6);
    case 168:
      return reduce(RULE_39, 6);
    case 196:
      return reduce(RULE_39, 6);
    case 194:
      return reduce(RULE_39, 6);
    case 199:
      return reduce(RULE_39, 6);
    case 200:
      return reduce(RULE_39, 6);
    case 192:
      return reduce(RULE_39, 6);
    case 165:
      return reduce(RULE_39, 6);
    case 98:
      return reduce(RULE_39, 6);
    case 155:
      return reduce(RULE_39, 6);
    case 142:
      return reduce(RULE_39, 6);
    case 189:
      return reduce(RULE_39, 6);
    case 183:
      return reduce(RULE_39, 6);
    case 163:
      return reduce(RULE_39, 6);
    case 186:
      return reduce(RULE_39, 6);
    case 198:
      return reduce(RULE_39, 6);
    case 100:
      return reduce(RULE_39, 6);
    case 175:
      return reduce(RULE_39, 6);
    case 128:
      return reduce(RULE_39, 6);
    case 169:
      return reduce(RULE_39, 6);
    case 190:
      return reduce(RULE_39, 6);
    case 171:
      return reduce(RULE_39, 6);
    case 179:
      return reduce(RULE_39, 6);
    case 164:
      return reduce(RULE_39, 6);
    case 203:
      return reduce(RULE_39, 6);
    case 172:
      return reduce(RULE_39, 6);
    case 195:
      return reduce(RULE_39, 6);
    case 157:
      return reduce(RULE_39, 6);
    case 147:
      return reduce(RULE_39, 6);
    case 207:
      return reduce(RULE_39, 6);
    case 193:
      return reduce(RULE_39, 6);
    case 119:
      return reduce(RULE_39, 6);
    case 115:
      return reduce(RULE_39, 6);
    case 99:
      return reduce(RULE_39, 6);
    case 182:
      return reduce(RULE_39, 6);
    case 158:
      return reduce(RULE_39, 6);
    case 131:
      return reduce(RULE_39, 6);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action223(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 3);
    case 156:
      return reduce(RULE_39, 3);
    case 101:
      return reduce(RULE_39, 3);
    case 102:
      return reduce(RULE_39, 3);
    case 154:
      return reduce(RULE_39, 3);
    case 181:
      return reduce(RULE_39, 3);
    case 174:
      return reduce(RULE_39, 3);
    case 184:
      return reduce(RULE_39, 3);
    case 201:
      return reduce(RULE_39, 3);
    case 132:
      return reduce(RULE_39, 3);
    case 202:
      return reduce(RULE_39, 3);
    case 185:
      return reduce(RULE_39, 3);
    case 133:
      return reduce(RULE_39, 3);
    case 205:
      return reduce(RULE_39, 3);
    case 168:
      return reduce(RULE_39, 3);
    case 196:
      return reduce(RULE_39, 3);
    case 194:
      return reduce(RULE_39, 3);
    case 199:
      return reduce(RULE_39, 3);
    case 200:
      return reduce(RULE_39, 3);
    case 192:
      return reduce(RULE_39, 3);
    case 165:
      return reduce(RULE_39, 3);
    case 98:
      return reduce(RULE_39, 3);
    case 155:
      return reduce(RULE_39, 3);
    case 142:
      return reduce(RULE_39, 3);
    case 189:
      return reduce(RULE_39, 3);
    case 183:
      return reduce(RULE_39, 3);
    case 163:
      return reduce(RULE_39, 3);
    case 186:
      return reduce(RULE_39, 3);
    case 198:
      return reduce(RULE_39, 3);
    case 100:
      return reduce(RULE_39, 3);
    case 175:
      return reduce(RULE_39, 3);
    case 128:
      return reduce(RULE_39, 3);
    case 169:
      return reduce(RULE_39, 3);
    case 190:
      return reduce(RULE_39, 3);
    case 171:
      return reduce(RULE_39, 3);
    case 179:
      return reduce(RULE_39, 3);
    case 164:
      return reduce(RULE_39, 3);
    case 203:
      return reduce(RULE_39, 3);
    case 172:
      return reduce(RULE_39, 3);
    case 195:
      return reduce(RULE_39, 3);
    case 157:
      return reduce(RULE_39, 3);
    case 147:
      return reduce(RULE_39, 3);
    case 207:
      return reduce(RULE_39, 3);
    case 193:
      return reduce(RULE_39, 3);
    case 119:
      return reduce(RULE_39, 3);
    case 115:
      return reduce(RULE_39, 3);
    case 99:
      return reduce(RULE_39, 3);
    case 182:
      return reduce(RULE_39, 3);
    case 158:
      return reduce(RULE_39, 3);
    case 131:
      return reduce(RULE_39, 3);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action224(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 111:
      stateStack.addFirst(382);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action225(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 10);
    case 156:
      return reduce(RULE_39, 10);
    case 101:
      return reduce(RULE_39, 10);
    case 102:
      return reduce(RULE_39, 10);
    case 154:
      return reduce(RULE_39, 10);
    case 181:
      return reduce(RULE_39, 10);
    case 174:
      return reduce(RULE_39, 10);
    case 184:
      return reduce(RULE_39, 10);
    case 201:
      return reduce(RULE_39, 10);
    case 132:
      return reduce(RULE_39, 10);
    case 202:
      return reduce(RULE_39, 10);
    case 185:
      return reduce(RULE_39, 10);
    case 133:
      return reduce(RULE_39, 10);
    case 205:
      return reduce(RULE_39, 10);
    case 168:
      return reduce(RULE_39, 10);
    case 196:
      return reduce(RULE_39, 10);
    case 194:
      return reduce(RULE_39, 10);
    case 199:
      return reduce(RULE_39, 10);
    case 200:
      return reduce(RULE_39, 10);
    case 192:
      return reduce(RULE_39, 10);
    case 165:
      return reduce(RULE_39, 10);
    case 98:
      return reduce(RULE_39, 10);
    case 155:
      return reduce(RULE_39, 10);
    case 142:
      return reduce(RULE_39, 10);
    case 189:
      return reduce(RULE_39, 10);
    case 183:
      return reduce(RULE_39, 10);
    case 163:
      return reduce(RULE_39, 10);
    case 186:
      return reduce(RULE_39, 10);
    case 198:
      return reduce(RULE_39, 10);
    case 100:
      return reduce(RULE_39, 10);
    case 175:
      return reduce(RULE_39, 10);
    case 128:
      return reduce(RULE_39, 10);
    case 169:
      return reduce(RULE_39, 10);
    case 190:
      return reduce(RULE_39, 10);
    case 171:
      return reduce(RULE_39, 10);
    case 179:
      return reduce(RULE_39, 10);
    case 164:
      return reduce(RULE_39, 10);
    case 203:
      return reduce(RULE_39, 10);
    case 172:
      return reduce(RULE_39, 10);
    case 195:
      return reduce(RULE_39, 10);
    case 157:
      return reduce(RULE_39, 10);
    case 147:
      return reduce(RULE_39, 10);
    case 207:
      return reduce(RULE_39, 10);
    case 193:
      return reduce(RULE_39, 10);
    case 119:
      return reduce(RULE_39, 10);
    case 115:
      return reduce(RULE_39, 10);
    case 99:
      return reduce(RULE_39, 10);
    case 182:
      return reduce(RULE_39, 10);
    case 158:
      return reduce(RULE_39, 10);
    case 131:
      return reduce(RULE_39, 10);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action226(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto226(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 383;
    case 54: return 94;
    case 58: return 95;
    case 28: return 384;
    case 30: return 385;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action227(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      return reduce(RULE_19, 0);
    case 105:
      return reduce(RULE_19, 0);
    case 154:
      return reduce(RULE_19, 0);
    case 120:
      return reduce(RULE_19, 0);
    case 145:
      return reduce(RULE_19, 0);
    case 111:
      return reduce(RULE_42, 0);
    case 128:
      return reduce(RULE_19, 0);
    case 148:
      return reduce(RULE_19, 0);
    case 109:
      return reduce(RULE_19, 0);
    default: throw new BadTokenException(token, new Object[] {ARROW, NAME, UNDERSCORE, DOUBLE_RANGLE, DOUBLE_COLON, RANGLE, RPAREN, HASH, COMMA});
    }
  }

  private final boolean action228(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_37, 0);
    case 173:
      return reduce(RULE_37, 0);
    case 101:
      return reduce(RULE_37, 0);
    case 145:
      return reduce(RULE_37, 0);
    case 116:
      return reduce(RULE_37, 0);
    case 151:
      return reduce(RULE_37, 0);
    case 134:
      return reduce(RULE_37, 0);
    case 103:
      return reduce(RULE_37, 0);
    case 133:
      return reduce(RULE_37, 0);
    case 120:
      return reduce(RULE_37, 0);
    case 112:
      return reduce(RULE_37, 0);
    case 148:
      return reduce(RULE_37, 0);
    case 149:
      return reduce(RULE_37, 0);
    case 110:
      return reduce(RULE_37, 0);
    case 108:
      return reduce(RULE_37, 0);
    case 106:
      return reduce(RULE_37, 0);
    case 125:
      return reduce(RULE_37, 0);
    case 178:
      return reduce(RULE_37, 0);
    case 155:
      return reduce(RULE_37, 0);
    case 124:
      return reduce(RULE_37, 0);
    case 142:
      return reduce(RULE_37, 0);
    case 146:
      return reduce(RULE_37, 0);
    case 138:
      return reduce(RULE_37, 0);
    case 150:
      return reduce(RULE_37, 0);
    case 183:
      return reduce(RULE_37, 0);
    case 175:
      return reduce(RULE_37, 0);
    case 113:
      return reduce(RULE_37, 0);
    case 169:
      return reduce(RULE_37, 0);
    case 190:
      return reduce(RULE_37, 0);
    case 143:
      return reduce(RULE_37, 0);
    case 164:
      return reduce(RULE_37, 0);
    case 203:
      return reduce(RULE_37, 0);
    case 147:
      return reduce(RULE_37, 0);
    case 130:
      return reduce(RULE_37, 0);
    case 193:
      return reduce(RULE_37, 0);
    case 136:
      return reduce(RULE_37, 0);
    case 129:
      return reduce(RULE_37, 0);
    case 144:
      return reduce(RULE_37, 0);
    case 182:
      return reduce(RULE_37, 0);
    case 122:
      return reduce(RULE_37, 0);
    case 140:
      return reduce(RULE_37, 0);
    case 109:
      return reduce(RULE_37, 0);
    case 191:
      return reduce(RULE_37, 0);
    case 131:
      return reduce(RULE_37, 0);
    case 118:
      return reduce(RULE_37, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto228(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 386;
    default: return -1;
    }
  }

  private final boolean action229(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_43, 0);
    case 156:
      return reduce(RULE_43, 0);
    case 101:
      return reduce(RULE_43, 0);
    case 102:
      return reduce(RULE_43, 0);
    case 154:
      return reduce(RULE_43, 0);
    case 181:
      return reduce(RULE_43, 0);
    case 174:
      return reduce(RULE_43, 0);
    case 184:
      return reduce(RULE_43, 0);
    case 201:
      return reduce(RULE_43, 0);
    case 132:
      return reduce(RULE_43, 0);
    case 202:
      return reduce(RULE_43, 0);
    case 185:
      return reduce(RULE_43, 0);
    case 133:
      return reduce(RULE_43, 0);
    case 205:
      return reduce(RULE_43, 0);
    case 168:
      return reduce(RULE_43, 0);
    case 196:
      return reduce(RULE_43, 0);
    case 194:
      return reduce(RULE_43, 0);
    case 199:
      return reduce(RULE_43, 0);
    case 200:
      return reduce(RULE_43, 0);
    case 192:
      return reduce(RULE_43, 0);
    case 165:
      return reduce(RULE_43, 0);
    case 98:
      return reduce(RULE_43, 0);
    case 155:
      return reduce(RULE_43, 0);
    case 142:
      return reduce(RULE_43, 0);
    case 189:
      return reduce(RULE_43, 0);
    case 183:
      return reduce(RULE_43, 0);
    case 163:
      return reduce(RULE_43, 0);
    case 186:
      return reduce(RULE_43, 0);
    case 198:
      return reduce(RULE_43, 0);
    case 100:
      return reduce(RULE_43, 0);
    case 175:
      return reduce(RULE_43, 0);
    case 128:
      return reduce(RULE_43, 0);
    case 169:
      return reduce(RULE_43, 0);
    case 190:
      return reduce(RULE_43, 0);
    case 171:
      return reduce(RULE_43, 0);
    case 179:
      return reduce(RULE_43, 0);
    case 164:
      return reduce(RULE_43, 0);
    case 203:
      return reduce(RULE_43, 0);
    case 172:
      return reduce(RULE_43, 0);
    case 195:
      return reduce(RULE_43, 0);
    case 157:
      return reduce(RULE_43, 0);
    case 147:
      return reduce(RULE_43, 0);
    case 207:
      return reduce(RULE_43, 0);
    case 193:
      return reduce(RULE_43, 0);
    case 119:
      return reduce(RULE_43, 0);
    case 115:
      return reduce(RULE_43, 0);
    case 99:
      return reduce(RULE_43, 0);
    case 182:
      return reduce(RULE_43, 0);
    case 158:
      return reduce(RULE_43, 0);
    case 131:
      return reduce(RULE_43, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action230(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_26, 4);
    case 128:
      return reduce(RULE_26, 4);
    default: throw new BadTokenException(token, new Object[] {ARROW, NAME, UNDERSCORE, HASH, COMMA});
    }
  }

  private final int goto230(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 389;
    default: return -1;
    }
  }

  private final boolean action231(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(390);
      tokenStack.addFirst(token);
      return true;
    case 132:
      return reduce(RULE_36, 17);
    case 133:
      return reduce(RULE_36, 17);
    case 144:
      return reduce(RULE_36, 17);
    case 122:
      return reduce(RULE_36, 17);
    default: throw new BadTokenException(token, new Object[] {LPAREN, LSQUARE, SEMICOLON, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action232(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 1);
    case 156:
      return reduce(RULE_39, 1);
    case 101:
      return reduce(RULE_39, 1);
    case 102:
      return reduce(RULE_39, 1);
    case 154:
      return reduce(RULE_39, 1);
    case 181:
      return reduce(RULE_39, 1);
    case 174:
      return reduce(RULE_39, 1);
    case 184:
      return reduce(RULE_39, 1);
    case 201:
      return reduce(RULE_39, 1);
    case 132:
      return reduce(RULE_39, 1);
    case 202:
      return reduce(RULE_39, 1);
    case 185:
      return reduce(RULE_39, 1);
    case 133:
      return reduce(RULE_39, 1);
    case 205:
      return reduce(RULE_39, 1);
    case 168:
      return reduce(RULE_39, 1);
    case 196:
      return reduce(RULE_39, 1);
    case 194:
      return reduce(RULE_39, 1);
    case 199:
      return reduce(RULE_39, 1);
    case 200:
      return reduce(RULE_39, 1);
    case 192:
      return reduce(RULE_39, 1);
    case 165:
      return reduce(RULE_39, 1);
    case 98:
      return reduce(RULE_39, 1);
    case 155:
      return reduce(RULE_39, 1);
    case 142:
      return reduce(RULE_39, 1);
    case 189:
      return reduce(RULE_39, 1);
    case 183:
      return reduce(RULE_39, 1);
    case 163:
      return reduce(RULE_39, 1);
    case 186:
      return reduce(RULE_39, 1);
    case 198:
      return reduce(RULE_39, 1);
    case 100:
      return reduce(RULE_39, 1);
    case 175:
      return reduce(RULE_39, 1);
    case 128:
      return reduce(RULE_39, 1);
    case 169:
      return reduce(RULE_39, 1);
    case 190:
      return reduce(RULE_39, 1);
    case 171:
      return reduce(RULE_39, 1);
    case 179:
      return reduce(RULE_39, 1);
    case 164:
      return reduce(RULE_39, 1);
    case 203:
      return reduce(RULE_39, 1);
    case 172:
      return reduce(RULE_39, 1);
    case 195:
      return reduce(RULE_39, 1);
    case 157:
      return reduce(RULE_39, 1);
    case 147:
      return reduce(RULE_39, 1);
    case 207:
      return reduce(RULE_39, 1);
    case 193:
      return reduce(RULE_39, 1);
    case 119:
      return reduce(RULE_39, 1);
    case 115:
      return reduce(RULE_39, 1);
    case 99:
      return reduce(RULE_39, 1);
    case 182:
      return reduce(RULE_39, 1);
    case 158:
      return reduce(RULE_39, 1);
    case 131:
      return reduce(RULE_39, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action233(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(269);
      tokenStack.addFirst(token);
      return true;
    case 132:
      return reduce(RULE_44, 1);
    case 105:
      return reduce(RULE_27, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 144:
      return reduce(RULE_44, 1);
    case 128:
      return reduce(RULE_27, 1);
    default: throw new BadTokenException(token, new Object[] {LPAREN, ARROW, NAME, LSQUARE, UNDERSCORE, DOUBLE_COLON, QUESTION_MARK_DOT, HASH, DOT, COMMA});
    }
  }

  private final int goto233(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 393;
    default: return -1;
    }
  }

  private final boolean action234(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(196);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 196:
      stateStack.addFirst(199);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(202);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 199:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(210);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(394);
      tokenStack.addFirst(token);
      return true;
    case 207:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD});
    }
  }

  private final int goto234(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 218;
    case 13: return 219;
    case 14: return 220;
    case 93: return 221;
    case 41: return 222;
    case 38: return 223;
    case 52: return 224;
    case 46: return 225;
    case 26: return 226;
    case 54: return 227;
    case 92: return 228;
    case 35: return 395;
    case 51: return 396;
    case 94: return 231;
    case 33: return 232;
    case 30: return 397;
    case 97: return 235;
    case 60: return 236;
    case 36: return 237;
    case 42: return 238;
    case 45: return 239;
    case 28: return 398;
    case 91: return 241;
    case 58: return 95;
    case 44: return 242;
    case 15: return 243;
    case 39: return 244;
    case 43: return 245;
    case 40: return 246;
    default: return -1;
    }
  }

  private final boolean action235(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final int goto235(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action236(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      return reduce(RULE_21, 4);
    case 105:
      return reduce(RULE_21, 4);
    case 154:
      return reduce(RULE_21, 4);
    case 120:
      return reduce(RULE_21, 4);
    case 111:
      return reduce(RULE_42, 3);
    case 145:
      return reduce(RULE_21, 4);
    case 128:
      return reduce(RULE_21, 4);
    case 148:
      return reduce(RULE_21, 4);
    case 109:
      return reduce(RULE_21, 4);
    default: throw new BadTokenException(token, new Object[] {ARROW, NAME, UNDERSCORE, DOUBLE_RANGLE, RANGLE, DOUBLE_COLON, RPAREN, HASH, COMMA});
    }
  }

  private final boolean action237(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 0);
    case 156:
      return reduce(RULE_39, 0);
    case 101:
      return reduce(RULE_39, 0);
    case 102:
      return reduce(RULE_39, 0);
    case 154:
      return reduce(RULE_39, 0);
    case 181:
      return reduce(RULE_39, 0);
    case 174:
      return reduce(RULE_39, 0);
    case 184:
      return reduce(RULE_39, 0);
    case 201:
      return reduce(RULE_39, 0);
    case 132:
      return reduce(RULE_39, 0);
    case 202:
      return reduce(RULE_39, 0);
    case 185:
      return reduce(RULE_39, 0);
    case 133:
      return reduce(RULE_39, 0);
    case 205:
      return reduce(RULE_39, 0);
    case 168:
      return reduce(RULE_39, 0);
    case 196:
      return reduce(RULE_39, 0);
    case 194:
      return reduce(RULE_39, 0);
    case 199:
      return reduce(RULE_39, 0);
    case 200:
      return reduce(RULE_39, 0);
    case 192:
      return reduce(RULE_39, 0);
    case 165:
      return reduce(RULE_39, 0);
    case 98:
      return reduce(RULE_39, 0);
    case 155:
      return reduce(RULE_39, 0);
    case 142:
      return reduce(RULE_39, 0);
    case 189:
      return reduce(RULE_39, 0);
    case 183:
      return reduce(RULE_39, 0);
    case 163:
      return reduce(RULE_39, 0);
    case 186:
      return reduce(RULE_39, 0);
    case 198:
      return reduce(RULE_39, 0);
    case 100:
      return reduce(RULE_39, 0);
    case 175:
      return reduce(RULE_39, 0);
    case 128:
      return reduce(RULE_39, 0);
    case 169:
      return reduce(RULE_39, 0);
    case 190:
      return reduce(RULE_39, 0);
    case 171:
      return reduce(RULE_39, 0);
    case 179:
      return reduce(RULE_39, 0);
    case 164:
      return reduce(RULE_39, 0);
    case 203:
      return reduce(RULE_39, 0);
    case 172:
      return reduce(RULE_39, 0);
    case 195:
      return reduce(RULE_39, 0);
    case 157:
      return reduce(RULE_39, 0);
    case 147:
      return reduce(RULE_39, 0);
    case 207:
      return reduce(RULE_39, 0);
    case 193:
      return reduce(RULE_39, 0);
    case 119:
      return reduce(RULE_39, 0);
    case 115:
      return reduce(RULE_39, 0);
    case 99:
      return reduce(RULE_39, 0);
    case 182:
      return reduce(RULE_39, 0);
    case 158:
      return reduce(RULE_39, 0);
    case 131:
      return reduce(RULE_39, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action238(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 7);
    case 156:
      return reduce(RULE_39, 7);
    case 101:
      return reduce(RULE_39, 7);
    case 102:
      return reduce(RULE_39, 7);
    case 154:
      return reduce(RULE_39, 7);
    case 181:
      return reduce(RULE_39, 7);
    case 174:
      return reduce(RULE_39, 7);
    case 184:
      return reduce(RULE_39, 7);
    case 201:
      return reduce(RULE_39, 7);
    case 132:
      return reduce(RULE_39, 7);
    case 202:
      return reduce(RULE_39, 7);
    case 185:
      return reduce(RULE_39, 7);
    case 133:
      return reduce(RULE_39, 7);
    case 205:
      return reduce(RULE_39, 7);
    case 168:
      return reduce(RULE_39, 7);
    case 196:
      return reduce(RULE_39, 7);
    case 194:
      return reduce(RULE_39, 7);
    case 199:
      return reduce(RULE_39, 7);
    case 200:
      return reduce(RULE_39, 7);
    case 192:
      return reduce(RULE_39, 7);
    case 165:
      return reduce(RULE_39, 7);
    case 98:
      return reduce(RULE_39, 7);
    case 155:
      return reduce(RULE_39, 7);
    case 142:
      return reduce(RULE_39, 7);
    case 189:
      return reduce(RULE_39, 7);
    case 183:
      return reduce(RULE_39, 7);
    case 163:
      return reduce(RULE_39, 7);
    case 186:
      return reduce(RULE_39, 7);
    case 198:
      return reduce(RULE_39, 7);
    case 100:
      return reduce(RULE_39, 7);
    case 175:
      return reduce(RULE_39, 7);
    case 128:
      return reduce(RULE_39, 7);
    case 169:
      return reduce(RULE_39, 7);
    case 190:
      return reduce(RULE_39, 7);
    case 171:
      return reduce(RULE_39, 7);
    case 179:
      return reduce(RULE_39, 7);
    case 164:
      return reduce(RULE_39, 7);
    case 203:
      return reduce(RULE_39, 7);
    case 172:
      return reduce(RULE_39, 7);
    case 195:
      return reduce(RULE_39, 7);
    case 157:
      return reduce(RULE_39, 7);
    case 147:
      return reduce(RULE_39, 7);
    case 207:
      return reduce(RULE_39, 7);
    case 193:
      return reduce(RULE_39, 7);
    case 119:
      return reduce(RULE_39, 7);
    case 115:
      return reduce(RULE_39, 7);
    case 99:
      return reduce(RULE_39, 7);
    case 182:
      return reduce(RULE_39, 7);
    case 158:
      return reduce(RULE_39, 7);
    case 131:
      return reduce(RULE_39, 7);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action239(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 9);
    case 156:
      return reduce(RULE_39, 9);
    case 101:
      return reduce(RULE_39, 9);
    case 102:
      return reduce(RULE_39, 9);
    case 154:
      return reduce(RULE_39, 9);
    case 181:
      return reduce(RULE_39, 9);
    case 174:
      return reduce(RULE_39, 9);
    case 184:
      return reduce(RULE_39, 9);
    case 201:
      return reduce(RULE_39, 9);
    case 132:
      return reduce(RULE_39, 9);
    case 202:
      return reduce(RULE_39, 9);
    case 185:
      return reduce(RULE_39, 9);
    case 133:
      return reduce(RULE_39, 9);
    case 205:
      return reduce(RULE_39, 9);
    case 168:
      return reduce(RULE_39, 9);
    case 196:
      return reduce(RULE_39, 9);
    case 194:
      return reduce(RULE_39, 9);
    case 199:
      return reduce(RULE_39, 9);
    case 200:
      return reduce(RULE_39, 9);
    case 192:
      return reduce(RULE_39, 9);
    case 165:
      return reduce(RULE_39, 9);
    case 98:
      return reduce(RULE_39, 9);
    case 155:
      return reduce(RULE_39, 9);
    case 142:
      return reduce(RULE_39, 9);
    case 189:
      return reduce(RULE_39, 9);
    case 183:
      return reduce(RULE_39, 9);
    case 163:
      return reduce(RULE_39, 9);
    case 186:
      return reduce(RULE_39, 9);
    case 198:
      return reduce(RULE_39, 9);
    case 100:
      return reduce(RULE_39, 9);
    case 175:
      return reduce(RULE_39, 9);
    case 128:
      return reduce(RULE_39, 9);
    case 169:
      return reduce(RULE_39, 9);
    case 190:
      return reduce(RULE_39, 9);
    case 171:
      return reduce(RULE_39, 9);
    case 179:
      return reduce(RULE_39, 9);
    case 164:
      return reduce(RULE_39, 9);
    case 203:
      return reduce(RULE_39, 9);
    case 172:
      return reduce(RULE_39, 9);
    case 195:
      return reduce(RULE_39, 9);
    case 157:
      return reduce(RULE_39, 9);
    case 147:
      return reduce(RULE_39, 9);
    case 207:
      return reduce(RULE_39, 9);
    case 193:
      return reduce(RULE_39, 9);
    case 119:
      return reduce(RULE_39, 9);
    case 115:
      return reduce(RULE_39, 9);
    case 99:
      return reduce(RULE_39, 9);
    case 182:
      return reduce(RULE_39, 9);
    case 158:
      return reduce(RULE_39, 9);
    case 131:
      return reduce(RULE_39, 9);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action240(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(401);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(253);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 123:
      return reduce(RULE_41, 0);
    case 117:
      return reduce(RULE_41, 0);
    case 105:
      return reduce(RULE_27, 0);
    case 107:
      return reduce(RULE_41, 0);
    case 127:
      return reduce(RULE_41, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 104:
      return reduce(RULE_41, 0);
    case 121:
      return reduce(RULE_41, 0);
    case 128:
      return reduce(RULE_27, 0);
    case 114:
      return reduce(RULE_41, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 135:
      return reduce(RULE_41, 0);
    case 141:
      return reduce(RULE_41, 0);
    case 152:
      return reduce(RULE_41, 0);
    case 137:
      return reduce(RULE_41, 0);
    case 139:
      return reduce(RULE_41, 0);
    case 144:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, NAME, ARROW, CARET_EQUALS, UNDERSCORE, FORWARD_SLASH_EQUALS, DOUBLE_COLON, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, HASH, DOUBLE_LANGLE_EQUALS, LPAREN, MINUS_EQUALS, LSQUARE, STAR_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, QUESTION_MARK_DOT, LANGLE, DOT, COMMA});
    }
  }

  private final int goto240(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 403;
    default: return -1;
    }
  }

  private final boolean action241(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(405);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(406);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LSQUARE, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action242(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 170:
      stateStack.addFirst(407);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(408);
      tokenStack.addFirst(token);
      return true;
    case 159:
      return reduce(RULE_39, 8);
    case 156:
      return reduce(RULE_39, 8);
    case 101:
      return reduce(RULE_39, 8);
    case 102:
      return reduce(RULE_39, 8);
    case 154:
      return reduce(RULE_39, 8);
    case 181:
      return reduce(RULE_39, 8);
    case 174:
      return reduce(RULE_39, 8);
    case 184:
      return reduce(RULE_39, 8);
    case 201:
      return reduce(RULE_39, 8);
    case 132:
      return reduce(RULE_39, 8);
    case 202:
      return reduce(RULE_39, 8);
    case 185:
      return reduce(RULE_39, 8);
    case 133:
      return reduce(RULE_39, 8);
    case 205:
      return reduce(RULE_39, 8);
    case 168:
      return reduce(RULE_39, 8);
    case 196:
      return reduce(RULE_39, 8);
    case 194:
      return reduce(RULE_39, 8);
    case 199:
      return reduce(RULE_39, 8);
    case 200:
      return reduce(RULE_39, 8);
    case 192:
      return reduce(RULE_39, 8);
    case 165:
      return reduce(RULE_39, 8);
    case 98:
      return reduce(RULE_39, 8);
    case 155:
      return reduce(RULE_39, 8);
    case 142:
      return reduce(RULE_39, 8);
    case 189:
      return reduce(RULE_39, 8);
    case 183:
      return reduce(RULE_39, 8);
    case 163:
      return reduce(RULE_39, 8);
    case 186:
      return reduce(RULE_39, 8);
    case 198:
      return reduce(RULE_39, 8);
    case 100:
      return reduce(RULE_39, 8);
    case 175:
      return reduce(RULE_39, 8);
    case 128:
      return reduce(RULE_39, 8);
    case 169:
      return reduce(RULE_39, 8);
    case 190:
      return reduce(RULE_39, 8);
    case 171:
      return reduce(RULE_39, 8);
    case 179:
      return reduce(RULE_39, 8);
    case 164:
      return reduce(RULE_39, 8);
    case 203:
      return reduce(RULE_39, 8);
    case 172:
      return reduce(RULE_39, 8);
    case 195:
      return reduce(RULE_39, 8);
    case 157:
      return reduce(RULE_39, 8);
    case 147:
      return reduce(RULE_39, 8);
    case 207:
      return reduce(RULE_39, 8);
    case 193:
      return reduce(RULE_39, 8);
    case 119:
      return reduce(RULE_39, 8);
    case 115:
      return reduce(RULE_39, 8);
    case 99:
      return reduce(RULE_39, 8);
    case 182:
      return reduce(RULE_39, 8);
    case 158:
      return reduce(RULE_39, 8);
    case 131:
      return reduce(RULE_39, 8);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, NULL_KEYWORD, CATCH_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, FINALLY_KEYWORD, RBRACE, WHILE_KEYWORD, INTEGER_LITERAL, DOUBLE_PLUS, DOUBLE_MINUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action243(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      stateStack.addFirst(409);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(410);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(411);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(412);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(413);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(414);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(415);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(416);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(417);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(418);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(419);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(420);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, MINUS_EQUALS, CARET_EQUALS, STAR_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS});
    }
  }

  private final boolean action244(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 5);
    case 156:
      return reduce(RULE_39, 5);
    case 101:
      return reduce(RULE_39, 5);
    case 102:
      return reduce(RULE_39, 5);
    case 154:
      return reduce(RULE_39, 5);
    case 181:
      return reduce(RULE_39, 5);
    case 174:
      return reduce(RULE_39, 5);
    case 184:
      return reduce(RULE_39, 5);
    case 201:
      return reduce(RULE_39, 5);
    case 132:
      return reduce(RULE_39, 5);
    case 202:
      return reduce(RULE_39, 5);
    case 185:
      return reduce(RULE_39, 5);
    case 133:
      return reduce(RULE_39, 5);
    case 205:
      return reduce(RULE_39, 5);
    case 168:
      return reduce(RULE_39, 5);
    case 196:
      return reduce(RULE_39, 5);
    case 194:
      return reduce(RULE_39, 5);
    case 199:
      return reduce(RULE_39, 5);
    case 200:
      return reduce(RULE_39, 5);
    case 192:
      return reduce(RULE_39, 5);
    case 165:
      return reduce(RULE_39, 5);
    case 98:
      return reduce(RULE_39, 5);
    case 155:
      return reduce(RULE_39, 5);
    case 142:
      return reduce(RULE_39, 5);
    case 189:
      return reduce(RULE_39, 5);
    case 183:
      return reduce(RULE_39, 5);
    case 163:
      return reduce(RULE_39, 5);
    case 186:
      return reduce(RULE_39, 5);
    case 198:
      return reduce(RULE_39, 5);
    case 100:
      return reduce(RULE_39, 5);
    case 175:
      return reduce(RULE_39, 5);
    case 128:
      return reduce(RULE_39, 5);
    case 169:
      return reduce(RULE_39, 5);
    case 190:
      return reduce(RULE_39, 5);
    case 171:
      return reduce(RULE_39, 5);
    case 179:
      return reduce(RULE_39, 5);
    case 164:
      return reduce(RULE_39, 5);
    case 203:
      return reduce(RULE_39, 5);
    case 172:
      return reduce(RULE_39, 5);
    case 195:
      return reduce(RULE_39, 5);
    case 157:
      return reduce(RULE_39, 5);
    case 147:
      return reduce(RULE_39, 5);
    case 207:
      return reduce(RULE_39, 5);
    case 193:
      return reduce(RULE_39, 5);
    case 119:
      return reduce(RULE_39, 5);
    case 115:
      return reduce(RULE_39, 5);
    case 99:
      return reduce(RULE_39, 5);
    case 182:
      return reduce(RULE_39, 5);
    case 158:
      return reduce(RULE_39, 5);
    case 131:
      return reduce(RULE_39, 5);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action245(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(421);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action246(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 4);
    case 156:
      return reduce(RULE_39, 4);
    case 101:
      return reduce(RULE_39, 4);
    case 102:
      return reduce(RULE_39, 4);
    case 154:
      return reduce(RULE_39, 4);
    case 181:
      return reduce(RULE_39, 4);
    case 174:
      return reduce(RULE_39, 4);
    case 184:
      return reduce(RULE_39, 4);
    case 201:
      return reduce(RULE_39, 4);
    case 132:
      return reduce(RULE_39, 4);
    case 202:
      return reduce(RULE_39, 4);
    case 185:
      return reduce(RULE_39, 4);
    case 133:
      return reduce(RULE_39, 4);
    case 205:
      return reduce(RULE_39, 4);
    case 168:
      return reduce(RULE_39, 4);
    case 196:
      return reduce(RULE_39, 4);
    case 194:
      return reduce(RULE_39, 4);
    case 199:
      return reduce(RULE_39, 4);
    case 200:
      return reduce(RULE_39, 4);
    case 192:
      return reduce(RULE_39, 4);
    case 165:
      return reduce(RULE_39, 4);
    case 98:
      return reduce(RULE_39, 4);
    case 155:
      return reduce(RULE_39, 4);
    case 142:
      return reduce(RULE_39, 4);
    case 189:
      return reduce(RULE_39, 4);
    case 183:
      return reduce(RULE_39, 4);
    case 163:
      return reduce(RULE_39, 4);
    case 186:
      return reduce(RULE_39, 4);
    case 198:
      return reduce(RULE_39, 4);
    case 100:
      return reduce(RULE_39, 4);
    case 175:
      return reduce(RULE_39, 4);
    case 128:
      return reduce(RULE_39, 4);
    case 169:
      return reduce(RULE_39, 4);
    case 190:
      return reduce(RULE_39, 4);
    case 171:
      return reduce(RULE_39, 4);
    case 179:
      return reduce(RULE_39, 4);
    case 164:
      return reduce(RULE_39, 4);
    case 203:
      return reduce(RULE_39, 4);
    case 172:
      return reduce(RULE_39, 4);
    case 195:
      return reduce(RULE_39, 4);
    case 157:
      return reduce(RULE_39, 4);
    case 147:
      return reduce(RULE_39, 4);
    case 207:
      return reduce(RULE_39, 4);
    case 193:
      return reduce(RULE_39, 4);
    case 119:
      return reduce(RULE_39, 4);
    case 115:
      return reduce(RULE_39, 4);
    case 99:
      return reduce(RULE_39, 4);
    case 182:
      return reduce(RULE_39, 4);
    case 158:
      return reduce(RULE_39, 4);
    case 131:
      return reduce(RULE_39, 4);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action247(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto247(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 422;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action248(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(423);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(424);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN, EQUALS, SEMICOLON});
    }
  }

  private final int goto248(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 425;
    default: return -1;
    }
  }

  private final boolean action249(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto249(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 426;
    default: return -1;
    }
  }

  private final boolean action250(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(427);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action251(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(428);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action252(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_24, 0);
    case 101:
      return reduce(RULE_24, 0);
    case 181:
      return reduce(RULE_24, 0);
    case 188:
      return reduce(RULE_24, 0);
    case 201:
      return reduce(RULE_24, 0);
    case 202:
      return reduce(RULE_24, 0);
    case 132:
      return reduce(RULE_24, 0);
    case 205:
      return reduce(RULE_24, 0);
    case 133:
      return reduce(RULE_24, 0);
    case 206:
      return reduce(RULE_24, 0);
    case 200:
      return reduce(RULE_24, 0);
    case 192:
      return reduce(RULE_24, 0);
    case 165:
      return reduce(RULE_24, 0);
    case 98:
      return reduce(RULE_24, 0);
    case 155:
      return reduce(RULE_24, 0);
    case 142:
      return reduce(RULE_24, 0);
    case 183:
      return reduce(RULE_24, 0);
    case 186:
      return reduce(RULE_24, 0);
    case 175:
      return reduce(RULE_24, 0);
    case 128:
      return reduce(RULE_24, 0);
    case 171:
      return reduce(RULE_24, 0);
    case 190:
      return reduce(RULE_24, 0);
    case 169:
      return reduce(RULE_24, 0);
    case 179:
      return reduce(RULE_24, 0);
    case 164:
      return reduce(RULE_24, 0);
    case 203:
      return reduce(RULE_24, 0);
    case 147:
      return reduce(RULE_24, 0);
    case 193:
      return reduce(RULE_24, 0);
    case 182:
      return reduce(RULE_24, 0);
    case 158:
      return reduce(RULE_24, 0);
    case 131:
      return reduce(RULE_24, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action253(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto253(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 172;
    case 64: return 173;
    case 62: return 285;
    case 68: return 175;
    case 30: return 176;
    case 67: return 177;
    case 60: return 99;
    case 61: return 102;
    case 54: return 94;
    case 49: return 178;
    case 58: return 95;
    case 28: return 179;
    case 59: return 98;
    case 65: return 180;
    default: return -1;
    }
  }

  private final boolean action254(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(429);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action255(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 37);
    case 101:
      return reduce(RULE_15, 37);
    case 154:
      return reduce(RULE_15, 37);
    case 145:
      return reduce(RULE_15, 37);
    case 132:
      return reduce(RULE_15, 37);
    case 167:
      return reduce(RULE_15, 37);
    case 103:
      return reduce(RULE_15, 37);
    case 120:
      return reduce(RULE_15, 37);
    case 194:
      return reduce(RULE_15, 37);
    case 112:
      return reduce(RULE_15, 37);
    case 148:
      return reduce(RULE_15, 37);
    case 110:
      return reduce(RULE_15, 37);
    case 149:
      return reduce(RULE_15, 37);
    case 108:
      return reduce(RULE_15, 37);
    case 106:
      return reduce(RULE_15, 37);
    case 125:
      return reduce(RULE_15, 37);
    case 98:
      return reduce(RULE_15, 37);
    case 105:
      return reduce(RULE_15, 37);
    case 155:
      return reduce(RULE_15, 37);
    case 142:
      return reduce(RULE_15, 37);
    case 138:
      return reduce(RULE_15, 37);
    case 197:
      return reduce(RULE_15, 37);
    case 150:
      return reduce(RULE_15, 37);
    case 111:
      return reduce(RULE_15, 37);
    case 183:
      return reduce(RULE_15, 37);
    case 175:
      return reduce(RULE_15, 37);
    case 128:
      return reduce(RULE_15, 37);
    case 169:
      return reduce(RULE_15, 37);
    case 190:
      return reduce(RULE_15, 37);
    case 143:
      return reduce(RULE_15, 37);
    case 164:
      return reduce(RULE_15, 37);
    case 203:
      return reduce(RULE_15, 37);
    case 147:
      return reduce(RULE_15, 37);
    case 193:
      return reduce(RULE_15, 37);
    case 182:
      return reduce(RULE_15, 37);
    case 109:
      return reduce(RULE_15, 37);
    case 191:
      return reduce(RULE_15, 37);
    case 131:
      return reduce(RULE_15, 37);
    case 118:
      return reduce(RULE_15, 37);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action256(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(430);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_15, 43);
    case 103:
      return reduce(RULE_15, 43);
    case 120:
      return reduce(RULE_15, 43);
    case 145:
      return reduce(RULE_15, 43);
    case 111:
      return reduce(RULE_15, 43);
    case 194:
      return reduce(RULE_15, 43);
    case 109:
      return reduce(RULE_15, 43);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, DOUBLE_COLON, RANGLE, LANGLE, SUPER_KEYWORD, DOT, COMMA});
    }
  }

  private final boolean action257(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(431);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action258(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto258(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 53: return 432;
    case 54: return 271;
    case 28: return 273;
    case 58: return 433;
    case 30: return 274;
    case 59: return 434;
    case 60: return 99;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action259(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto259(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 277;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    case 47: return 435;
    default: return -1;
    }
  }

  private final boolean action260(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(436);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, ARROW, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto260(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 191;
    default: return -1;
    }
  }

  private final boolean action261(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(438);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH});
    }
  }

  private final boolean action262(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto262(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 283;
    case 64: return 284;
    case 62: return 439;
    case 68: return 175;
    case 30: return 286;
    case 67: return 177;
    case 60: return 99;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 49: return 178;
    case 54: return 94;
    case 28: return 289;
    case 58: return 95;
    case 63: return 440;
    case 59: return 98;
    case 65: return 180;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action263(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto263(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 53: return 441;
    case 54: return 271;
    case 58: return 442;
    case 28: return 273;
    case 59: return 443;
    case 30: return 274;
    case 60: return 99;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action264(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto264(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 283;
    case 64: return 284;
    case 62: return 444;
    case 68: return 175;
    case 30: return 286;
    case 67: return 177;
    case 60: return 99;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 49: return 178;
    case 54: return 94;
    case 28: return 289;
    case 58: return 95;
    case 63: return 445;
    case 59: return 98;
    case 65: return 180;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action265(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto265(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 56: return 446;
    case 54: return 94;
    case 28: return 155;
    case 58: return 95;
    case 29: return 447;
    case 30: return 157;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action266(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 38);
    case 101:
      return reduce(RULE_15, 38);
    case 154:
      return reduce(RULE_15, 38);
    case 145:
      return reduce(RULE_15, 38);
    case 132:
      return reduce(RULE_15, 38);
    case 167:
      return reduce(RULE_15, 38);
    case 103:
      return reduce(RULE_15, 38);
    case 120:
      return reduce(RULE_15, 38);
    case 194:
      return reduce(RULE_15, 38);
    case 112:
      return reduce(RULE_15, 38);
    case 148:
      return reduce(RULE_15, 38);
    case 149:
      return reduce(RULE_15, 38);
    case 110:
      return reduce(RULE_15, 38);
    case 108:
      return reduce(RULE_15, 38);
    case 106:
      return reduce(RULE_15, 38);
    case 125:
      return reduce(RULE_15, 38);
    case 98:
      return reduce(RULE_15, 38);
    case 105:
      return reduce(RULE_15, 38);
    case 155:
      return reduce(RULE_15, 38);
    case 138:
      return reduce(RULE_15, 38);
    case 142:
      return reduce(RULE_15, 38);
    case 197:
      return reduce(RULE_15, 38);
    case 150:
      return reduce(RULE_15, 38);
    case 111:
      return reduce(RULE_15, 38);
    case 183:
      return reduce(RULE_15, 38);
    case 175:
      return reduce(RULE_15, 38);
    case 128:
      return reduce(RULE_15, 38);
    case 169:
      return reduce(RULE_15, 38);
    case 190:
      return reduce(RULE_15, 38);
    case 143:
      return reduce(RULE_15, 38);
    case 164:
      return reduce(RULE_15, 38);
    case 203:
      return reduce(RULE_15, 38);
    case 147:
      return reduce(RULE_15, 38);
    case 193:
      return reduce(RULE_15, 38);
    case 182:
      return reduce(RULE_15, 38);
    case 109:
      return reduce(RULE_15, 38);
    case 191:
      return reduce(RULE_15, 38);
    case 131:
      return reduce(RULE_15, 38);
    case 118:
      return reduce(RULE_15, 38);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action267(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto267(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 56: return 448;
    case 54: return 94;
    case 58: return 95;
    case 28: return 155;
    case 29: return 449;
    case 30: return 157;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action268(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 154:
      return reduce(RULE_45, 0);
    case 151:
      return reduce(RULE_45, 0);
    case 134:
      return reduce(RULE_45, 0);
    case 148:
      return reduce(RULE_45, 0);
    case 125:
      return reduce(RULE_45, 0);
    case 105:
      return reduce(RULE_45, 0);
    case 98:
      return reduce(RULE_45, 0);
    case 138:
      return reduce(RULE_45, 0);
    case 124:
      return reduce(RULE_45, 0);
    case 142:
      return reduce(RULE_45, 0);
    case 146:
      return reduce(RULE_45, 0);
    case 155:
      return reduce(RULE_45, 0);
    case 175:
      return reduce(RULE_45, 0);
    case 128:
      return reduce(RULE_45, 0);
    case 113:
      return reduce(RULE_45, 0);
    case 143:
      return reduce(RULE_45, 0);
    case 164:
      return reduce(RULE_45, 0);
    case 203:
      return reduce(RULE_45, 0);
    case 193:
      return reduce(RULE_45, 0);
    case 129:
      return reduce(RULE_45, 0);
    case 131:
      return reduce(RULE_45, 0);
    case 173:
      return reduce(RULE_45, 0);
    case 126:
      return reduce(RULE_45, 0);
    case 101:
      return reduce(RULE_45, 0);
    case 145:
      return reduce(RULE_45, 0);
    case 116:
      return reduce(RULE_45, 0);
    case 132:
      return reduce(RULE_45, 0);
    case 167:
      return reduce(RULE_45, 0);
    case 103:
      return reduce(RULE_45, 0);
    case 133:
      return reduce(RULE_45, 0);
    case 120:
      return reduce(RULE_45, 0);
    case 194:
      return reduce(RULE_45, 0);
    case 112:
      return reduce(RULE_45, 0);
    case 110:
      return reduce(RULE_45, 0);
    case 149:
      return reduce(RULE_45, 0);
    case 106:
      return reduce(RULE_45, 0);
    case 108:
      return reduce(RULE_45, 0);
    case 178:
      return reduce(RULE_45, 0);
    case 197:
      return reduce(RULE_45, 0);
    case 150:
      return reduce(RULE_45, 0);
    case 183:
      return reduce(RULE_45, 0);
    case 111:
      return reduce(RULE_45, 0);
    case 190:
      return reduce(RULE_45, 0);
    case 169:
      return reduce(RULE_45, 0);
    case 147:
      return reduce(RULE_45, 0);
    case 130:
      return reduce(RULE_45, 0);
    case 144:
      return reduce(RULE_45, 0);
    case 136:
      return reduce(RULE_45, 0);
    case 182:
      return reduce(RULE_45, 0);
    case 140:
      return reduce(RULE_45, 0);
    case 122:
      return reduce(RULE_45, 0);
    case 109:
      return reduce(RULE_45, 0);
    case 191:
      return reduce(RULE_45, 0);
    case 118:
      return reduce(RULE_45, 0);
    default: throw new BadTokenException(token, new Object[] {UNDERSCORE, STAR, MINUS, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, PIPE, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, ABSTRACT_KEYWORD, IMMUTABLE_KEYWORD, HASH, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, LANGLE, LBRACE, FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, LPAREN, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, SUPER_KEYWORD, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, INSTANCEOF_KEYWORD, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, SELFISH_KEYWORD, FINAL_KEYWORD, RBRACE, LANGLE_EQUALS, QUESTION_MARK_DOT, PERCENT, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action269(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto269(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 56: return 450;
    case 54: return 94;
    case 58: return 95;
    case 28: return 155;
    case 29: return 451;
    case 30: return 157;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action270(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 22);
    case 101:
      return reduce(RULE_15, 22);
    case 154:
      return reduce(RULE_15, 22);
    case 145:
      return reduce(RULE_15, 22);
    case 132:
      return reduce(RULE_15, 22);
    case 167:
      return reduce(RULE_15, 22);
    case 103:
      return reduce(RULE_15, 22);
    case 120:
      return reduce(RULE_15, 22);
    case 194:
      return reduce(RULE_15, 22);
    case 112:
      return reduce(RULE_15, 22);
    case 148:
      return reduce(RULE_15, 22);
    case 110:
      return reduce(RULE_15, 22);
    case 149:
      return reduce(RULE_15, 22);
    case 108:
      return reduce(RULE_15, 22);
    case 106:
      return reduce(RULE_15, 22);
    case 125:
      return reduce(RULE_15, 22);
    case 98:
      return reduce(RULE_15, 22);
    case 105:
      return reduce(RULE_15, 22);
    case 155:
      return reduce(RULE_15, 22);
    case 142:
      return reduce(RULE_15, 22);
    case 138:
      return reduce(RULE_15, 22);
    case 197:
      return reduce(RULE_15, 22);
    case 150:
      return reduce(RULE_15, 22);
    case 111:
      return reduce(RULE_15, 22);
    case 183:
      return reduce(RULE_15, 22);
    case 175:
      return reduce(RULE_15, 22);
    case 128:
      return reduce(RULE_15, 22);
    case 169:
      return reduce(RULE_15, 22);
    case 190:
      return reduce(RULE_15, 22);
    case 143:
      return reduce(RULE_15, 22);
    case 164:
      return reduce(RULE_15, 22);
    case 203:
      return reduce(RULE_15, 22);
    case 147:
      return reduce(RULE_15, 22);
    case 193:
      return reduce(RULE_15, 22);
    case 182:
      return reduce(RULE_15, 22);
    case 109:
      return reduce(RULE_15, 22);
    case 191:
      return reduce(RULE_15, 22);
    case 131:
      return reduce(RULE_15, 22);
    case 118:
      return reduce(RULE_15, 22);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action271(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_46, 0);
    case 101:
      return reduce(RULE_46, 0);
    case 154:
      return reduce(RULE_46, 0);
    case 145:
      return reduce(RULE_46, 0);
    case 132:
      return reduce(RULE_46, 0);
    case 167:
      return reduce(RULE_46, 0);
    case 103:
      return reduce(RULE_46, 0);
    case 120:
      return reduce(RULE_46, 0);
    case 194:
      return reduce(RULE_46, 0);
    case 112:
      return reduce(RULE_46, 0);
    case 148:
      return reduce(RULE_46, 0);
    case 149:
      return reduce(RULE_46, 0);
    case 110:
      return reduce(RULE_46, 0);
    case 108:
      return reduce(RULE_46, 0);
    case 106:
      return reduce(RULE_46, 0);
    case 125:
      return reduce(RULE_46, 0);
    case 105:
      return reduce(RULE_46, 0);
    case 98:
      return reduce(RULE_46, 0);
    case 155:
      return reduce(RULE_46, 0);
    case 142:
      return reduce(RULE_46, 0);
    case 138:
      return reduce(RULE_46, 0);
    case 197:
      return reduce(RULE_46, 0);
    case 150:
      return reduce(RULE_46, 0);
    case 111:
      return reduce(RULE_46, 0);
    case 183:
      return reduce(RULE_46, 0);
    case 175:
      return reduce(RULE_46, 0);
    case 128:
      return reduce(RULE_46, 0);
    case 190:
      return reduce(RULE_46, 0);
    case 169:
      return reduce(RULE_46, 0);
    case 143:
      return reduce(RULE_46, 0);
    case 164:
      return reduce(RULE_46, 0);
    case 203:
      return reduce(RULE_46, 0);
    case 147:
      return reduce(RULE_46, 0);
    case 193:
      return reduce(RULE_46, 0);
    case 182:
      return reduce(RULE_46, 0);
    case 109:
      return reduce(RULE_46, 0);
    case 191:
      return reduce(RULE_46, 0);
    case 131:
      return reduce(RULE_46, 0);
    case 118:
      return reduce(RULE_46, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action272(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_47, 0);
    case 101:
      return reduce(RULE_47, 0);
    case 154:
      return reduce(RULE_47, 0);
    case 145:
      return reduce(RULE_47, 0);
    case 132:
      return reduce(RULE_47, 0);
    case 167:
      return reduce(RULE_47, 0);
    case 103:
      return reduce(RULE_47, 0);
    case 120:
      return reduce(RULE_47, 0);
    case 194:
      return reduce(RULE_47, 0);
    case 112:
      return reduce(RULE_47, 0);
    case 148:
      return reduce(RULE_47, 0);
    case 149:
      return reduce(RULE_47, 0);
    case 110:
      return reduce(RULE_47, 0);
    case 108:
      return reduce(RULE_47, 0);
    case 106:
      return reduce(RULE_47, 0);
    case 125:
      return reduce(RULE_47, 0);
    case 98:
      return reduce(RULE_47, 0);
    case 105:
      return reduce(RULE_47, 0);
    case 155:
      return reduce(RULE_47, 0);
    case 142:
      return reduce(RULE_47, 0);
    case 138:
      return reduce(RULE_47, 0);
    case 197:
      return reduce(RULE_47, 0);
    case 150:
      return reduce(RULE_47, 0);
    case 111:
      return reduce(RULE_47, 0);
    case 183:
      return reduce(RULE_47, 0);
    case 175:
      return reduce(RULE_47, 0);
    case 128:
      return reduce(RULE_47, 0);
    case 169:
      return reduce(RULE_47, 0);
    case 190:
      return reduce(RULE_47, 0);
    case 143:
      return reduce(RULE_47, 0);
    case 164:
      return reduce(RULE_47, 0);
    case 203:
      return reduce(RULE_47, 0);
    case 147:
      return reduce(RULE_47, 0);
    case 193:
      return reduce(RULE_47, 0);
    case 182:
      return reduce(RULE_47, 0);
    case 109:
      return reduce(RULE_47, 0);
    case 191:
      return reduce(RULE_47, 0);
    case 131:
      return reduce(RULE_47, 0);
    case 118:
      return reduce(RULE_47, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action273(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_46, 1);
    case 103:
      return reduce(RULE_46, 1);
    case 120:
      return reduce(RULE_46, 1);
    case 145:
      return reduce(RULE_46, 1);
    case 111:
      return reduce(RULE_46, 1);
    case 194:
      return reduce(RULE_46, 1);
    case 109:
      return reduce(RULE_46, 1);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, DOUBLE_COLON, RANGLE, LANGLE, SUPER_KEYWORD, DOT, COMMA});
    }
  }

  private final boolean action274(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_46, 2);
    case 101:
      return reduce(RULE_46, 2);
    case 154:
      return reduce(RULE_46, 2);
    case 145:
      return reduce(RULE_46, 2);
    case 132:
      return reduce(RULE_46, 2);
    case 167:
      return reduce(RULE_46, 2);
    case 103:
      return reduce(RULE_46, 2);
    case 120:
      return reduce(RULE_46, 2);
    case 194:
      return reduce(RULE_46, 2);
    case 112:
      return reduce(RULE_46, 2);
    case 148:
      return reduce(RULE_46, 2);
    case 149:
      return reduce(RULE_46, 2);
    case 110:
      return reduce(RULE_46, 2);
    case 108:
      return reduce(RULE_46, 2);
    case 106:
      return reduce(RULE_46, 2);
    case 125:
      return reduce(RULE_46, 2);
    case 105:
      return reduce(RULE_46, 2);
    case 98:
      return reduce(RULE_46, 2);
    case 155:
      return reduce(RULE_46, 2);
    case 142:
      return reduce(RULE_46, 2);
    case 138:
      return reduce(RULE_46, 2);
    case 197:
      return reduce(RULE_46, 2);
    case 150:
      return reduce(RULE_46, 2);
    case 111:
      return reduce(RULE_46, 2);
    case 183:
      return reduce(RULE_46, 2);
    case 175:
      return reduce(RULE_46, 2);
    case 128:
      return reduce(RULE_46, 2);
    case 190:
      return reduce(RULE_46, 2);
    case 169:
      return reduce(RULE_46, 2);
    case 143:
      return reduce(RULE_46, 2);
    case 164:
      return reduce(RULE_46, 2);
    case 203:
      return reduce(RULE_46, 2);
    case 147:
      return reduce(RULE_46, 2);
    case 193:
      return reduce(RULE_46, 2);
    case 182:
      return reduce(RULE_46, 2);
    case 109:
      return reduce(RULE_46, 2);
    case 191:
      return reduce(RULE_46, 2);
    case 131:
      return reduce(RULE_46, 2);
    case 118:
      return reduce(RULE_46, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action275(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_48, 0);
    case 154:
      return reduce(RULE_48, 0);
    case 181:
      return reduce(RULE_48, 0);
    case 184:
      return reduce(RULE_48, 0);
    case 134:
      return reduce(RULE_48, 0);
    case 185:
      return reduce(RULE_48, 0);
    case 153:
      return reduce(RULE_48, 0);
    case 205:
      return reduce(RULE_48, 0);
    case 148:
      return reduce(RULE_48, 0);
    case 125:
      return reduce(RULE_48, 0);
    case 105:
      return reduce(RULE_48, 0);
    case 98:
      return reduce(RULE_48, 0);
    case 155:
      return reduce(RULE_48, 0);
    case 124:
      return reduce(RULE_48, 0);
    case 142:
      return reduce(RULE_48, 0);
    case 138:
      return reduce(RULE_48, 0);
    case 186:
      return reduce(RULE_48, 0);
    case 175:
      return reduce(RULE_48, 0);
    case 128:
      return reduce(RULE_48, 0);
    case 143:
      return reduce(RULE_48, 0);
    case 179:
      return reduce(RULE_48, 0);
    case 164:
      return reduce(RULE_48, 0);
    case 203:
      return reduce(RULE_48, 0);
    case 195:
      return reduce(RULE_48, 0);
    case 193:
      return reduce(RULE_48, 0);
    case 158:
      return reduce(RULE_48, 0);
    case 131:
      return reduce(RULE_48, 0);
    case 156:
      return reduce(RULE_48, 0);
    case 173:
      return reduce(RULE_48, 0);
    case 101:
      return reduce(RULE_48, 0);
    case 102:
      return reduce(RULE_48, 0);
    case 145:
      return reduce(RULE_48, 0);
    case 201:
      return reduce(RULE_48, 0);
    case 132:
      return reduce(RULE_48, 0);
    case 202:
      return reduce(RULE_48, 0);
    case 167:
      return reduce(RULE_48, 0);
    case 103:
      return reduce(RULE_48, 0);
    case 133:
      return reduce(RULE_48, 0);
    case 120:
      return reduce(RULE_48, 0);
    case 168:
      return reduce(RULE_48, 0);
    case 194:
      return reduce(RULE_48, 0);
    case 112:
      return reduce(RULE_48, 0);
    case 110:
      return reduce(RULE_48, 0);
    case 149:
      return reduce(RULE_48, 0);
    case 192:
      return reduce(RULE_48, 0);
    case 200:
      return reduce(RULE_48, 0);
    case 106:
      return reduce(RULE_48, 0);
    case 108:
      return reduce(RULE_48, 0);
    case 165:
      return reduce(RULE_48, 0);
    case 197:
      return reduce(RULE_48, 0);
    case 150:
      return reduce(RULE_48, 0);
    case 111:
      return reduce(RULE_48, 0);
    case 183:
      return reduce(RULE_48, 0);
    case 198:
      return reduce(RULE_48, 0);
    case 100:
      return reduce(RULE_48, 0);
    case 171:
      return reduce(RULE_48, 0);
    case 169:
      return reduce(RULE_48, 0);
    case 190:
      return reduce(RULE_48, 0);
    case 176:
      return reduce(RULE_48, 0);
    case 147:
      return reduce(RULE_48, 0);
    case 99:
      return reduce(RULE_48, 0);
    case 182:
      return reduce(RULE_48, 0);
    case 109:
      return reduce(RULE_48, 0);
    case 191:
      return reduce(RULE_48, 0);
    case 118:
      return reduce(RULE_48, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action276(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_49, 1);
    case 197:
      return reduce(RULE_49, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final boolean action277(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_49, 0);
    case 197:
      return reduce(RULE_49, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final boolean action278(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto278(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 452;
    default: return -1;
    }
  }

  private final boolean action279(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto279(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 277;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    case 47: return 453;
    default: return -1;
    }
  }

  private final boolean action280(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto280(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 277;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    case 47: return 454;
    default: return -1;
    }
  }

  private final boolean action281(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(455);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action282(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(298);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(137);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(140);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(456);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(143);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(457);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(458);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, LONG_KEYWORD, RANGLE, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, LSQUARE, USHORT_KEYWORD, DOUBLE_RANGLE, SUPER_KEYWORD, COMMA, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto282(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 148;
    case 30: return 149;
    default: return -1;
    }
  }

  private final boolean action283(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(459);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_30, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, RANGLE, COMMA});
    }
  }

  private final boolean action284(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(460);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA});
    }
  }

  private final boolean action285(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_21, 0);
    case 101:
      return reduce(RULE_21, 0);
    case 154:
      return reduce(RULE_21, 0);
    case 145:
      return reduce(RULE_21, 0);
    case 132:
      return reduce(RULE_21, 0);
    case 167:
      return reduce(RULE_21, 0);
    case 103:
      return reduce(RULE_21, 0);
    case 120:
      return reduce(RULE_21, 0);
    case 194:
      return reduce(RULE_21, 0);
    case 112:
      return reduce(RULE_21, 0);
    case 148:
      return reduce(RULE_21, 0);
    case 110:
      return reduce(RULE_21, 0);
    case 149:
      return reduce(RULE_21, 0);
    case 108:
      return reduce(RULE_21, 0);
    case 106:
      return reduce(RULE_21, 0);
    case 125:
      return reduce(RULE_21, 0);
    case 105:
      return reduce(RULE_21, 0);
    case 98:
      return reduce(RULE_21, 0);
    case 155:
      return reduce(RULE_21, 0);
    case 142:
      return reduce(RULE_21, 0);
    case 138:
      return reduce(RULE_21, 0);
    case 197:
      return reduce(RULE_21, 0);
    case 150:
      return reduce(RULE_21, 0);
    case 111:
      return reduce(RULE_21, 0);
    case 183:
      return reduce(RULE_21, 0);
    case 175:
      return reduce(RULE_21, 0);
    case 128:
      return reduce(RULE_21, 0);
    case 190:
      return reduce(RULE_21, 0);
    case 169:
      return reduce(RULE_21, 0);
    case 143:
      return reduce(RULE_21, 0);
    case 164:
      return reduce(RULE_21, 0);
    case 203:
      return reduce(RULE_21, 0);
    case 147:
      return reduce(RULE_21, 0);
    case 193:
      return reduce(RULE_21, 0);
    case 182:
      return reduce(RULE_21, 0);
    case 109:
      return reduce(RULE_21, 0);
    case 191:
      return reduce(RULE_21, 0);
    case 131:
      return reduce(RULE_21, 0);
    case 118:
      return reduce(RULE_21, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action286(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(461);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(462);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, RANGLE, COMMA});
    }
  }

  private final boolean action287(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_50, 1);
    case 154:
      return reduce(RULE_50, 1);
    case 181:
      return reduce(RULE_50, 1);
    case 184:
      return reduce(RULE_50, 1);
    case 134:
      return reduce(RULE_50, 1);
    case 153:
      return reduce(RULE_50, 1);
    case 185:
      return reduce(RULE_50, 1);
    case 205:
      return reduce(RULE_50, 1);
    case 148:
      return reduce(RULE_50, 1);
    case 125:
      return reduce(RULE_50, 1);
    case 105:
      return reduce(RULE_50, 1);
    case 98:
      return reduce(RULE_50, 1);
    case 155:
      return reduce(RULE_50, 1);
    case 138:
      return reduce(RULE_50, 1);
    case 142:
      return reduce(RULE_50, 1);
    case 124:
      return reduce(RULE_50, 1);
    case 186:
      return reduce(RULE_50, 1);
    case 175:
      return reduce(RULE_50, 1);
    case 128:
      return reduce(RULE_50, 1);
    case 143:
      return reduce(RULE_50, 1);
    case 179:
      return reduce(RULE_50, 1);
    case 164:
      return reduce(RULE_50, 1);
    case 203:
      return reduce(RULE_50, 1);
    case 195:
      return reduce(RULE_50, 1);
    case 193:
      return reduce(RULE_50, 1);
    case 158:
      return reduce(RULE_50, 1);
    case 131:
      return reduce(RULE_50, 1);
    case 156:
      return reduce(RULE_50, 1);
    case 173:
      return reduce(RULE_50, 1);
    case 101:
      return reduce(RULE_50, 1);
    case 102:
      return reduce(RULE_50, 1);
    case 145:
      return reduce(RULE_50, 1);
    case 201:
      return reduce(RULE_50, 1);
    case 132:
      return reduce(RULE_50, 1);
    case 202:
      return reduce(RULE_50, 1);
    case 167:
      return reduce(RULE_50, 1);
    case 103:
      return reduce(RULE_50, 1);
    case 133:
      return reduce(RULE_50, 1);
    case 120:
      return reduce(RULE_50, 1);
    case 168:
      return reduce(RULE_50, 1);
    case 194:
      return reduce(RULE_50, 1);
    case 112:
      return reduce(RULE_50, 1);
    case 149:
      return reduce(RULE_50, 1);
    case 110:
      return reduce(RULE_50, 1);
    case 192:
      return reduce(RULE_50, 1);
    case 200:
      return reduce(RULE_50, 1);
    case 106:
      return reduce(RULE_50, 1);
    case 108:
      return reduce(RULE_50, 1);
    case 165:
      return reduce(RULE_50, 1);
    case 197:
      return reduce(RULE_50, 1);
    case 150:
      return reduce(RULE_50, 1);
    case 111:
      return reduce(RULE_50, 1);
    case 183:
      return reduce(RULE_50, 1);
    case 198:
      return reduce(RULE_50, 1);
    case 100:
      return reduce(RULE_50, 1);
    case 171:
      return reduce(RULE_50, 1);
    case 190:
      return reduce(RULE_50, 1);
    case 169:
      return reduce(RULE_50, 1);
    case 176:
      return reduce(RULE_50, 1);
    case 147:
      return reduce(RULE_50, 1);
    case 99:
      return reduce(RULE_50, 1);
    case 182:
      return reduce(RULE_50, 1);
    case 109:
      return reduce(RULE_50, 1);
    case 191:
      return reduce(RULE_50, 1);
    case 118:
      return reduce(RULE_50, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action288(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_51, 0);
    case 154:
      return reduce(RULE_51, 0);
    case 181:
      return reduce(RULE_51, 0);
    case 184:
      return reduce(RULE_51, 0);
    case 134:
      return reduce(RULE_51, 0);
    case 153:
      return reduce(RULE_51, 0);
    case 185:
      return reduce(RULE_51, 0);
    case 205:
      return reduce(RULE_51, 0);
    case 148:
      return reduce(RULE_51, 0);
    case 125:
      return reduce(RULE_51, 0);
    case 105:
      return reduce(RULE_51, 0);
    case 98:
      return reduce(RULE_51, 0);
    case 155:
      return reduce(RULE_51, 0);
    case 138:
      return reduce(RULE_51, 0);
    case 142:
      return reduce(RULE_51, 0);
    case 124:
      return reduce(RULE_51, 0);
    case 186:
      return reduce(RULE_51, 0);
    case 175:
      return reduce(RULE_51, 0);
    case 128:
      return reduce(RULE_51, 0);
    case 143:
      return reduce(RULE_51, 0);
    case 179:
      return reduce(RULE_51, 0);
    case 164:
      return reduce(RULE_51, 0);
    case 203:
      return reduce(RULE_51, 0);
    case 195:
      return reduce(RULE_51, 0);
    case 193:
      return reduce(RULE_51, 0);
    case 158:
      return reduce(RULE_51, 0);
    case 131:
      return reduce(RULE_51, 0);
    case 156:
      return reduce(RULE_51, 0);
    case 173:
      return reduce(RULE_51, 0);
    case 101:
      return reduce(RULE_51, 0);
    case 102:
      return reduce(RULE_51, 0);
    case 145:
      return reduce(RULE_51, 0);
    case 201:
      return reduce(RULE_51, 0);
    case 132:
      return reduce(RULE_51, 0);
    case 202:
      return reduce(RULE_51, 0);
    case 167:
      return reduce(RULE_51, 0);
    case 103:
      return reduce(RULE_51, 0);
    case 133:
      return reduce(RULE_51, 0);
    case 120:
      return reduce(RULE_51, 0);
    case 168:
      return reduce(RULE_51, 0);
    case 194:
      return reduce(RULE_51, 0);
    case 112:
      return reduce(RULE_51, 0);
    case 149:
      return reduce(RULE_51, 0);
    case 110:
      return reduce(RULE_51, 0);
    case 192:
      return reduce(RULE_51, 0);
    case 200:
      return reduce(RULE_51, 0);
    case 106:
      return reduce(RULE_51, 0);
    case 108:
      return reduce(RULE_51, 0);
    case 165:
      return reduce(RULE_51, 0);
    case 197:
      return reduce(RULE_51, 0);
    case 150:
      return reduce(RULE_51, 0);
    case 111:
      return reduce(RULE_51, 0);
    case 183:
      return reduce(RULE_51, 0);
    case 198:
      return reduce(RULE_51, 0);
    case 100:
      return reduce(RULE_51, 0);
    case 171:
      return reduce(RULE_51, 0);
    case 190:
      return reduce(RULE_51, 0);
    case 169:
      return reduce(RULE_51, 0);
    case 176:
      return reduce(RULE_51, 0);
    case 147:
      return reduce(RULE_51, 0);
    case 99:
      return reduce(RULE_51, 0);
    case 182:
      return reduce(RULE_51, 0);
    case 109:
      return reduce(RULE_51, 0);
    case 191:
      return reduce(RULE_51, 0);
    case 118:
      return reduce(RULE_51, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action289(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(463);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(464);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_RANGLE, RANGLE, LANGLE, DOT, COMMA});
    }
  }

  private final boolean action290(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 0);
    case 154:
      return reduce(RULE_22, 0);
    case 181:
      return reduce(RULE_22, 0);
    case 184:
      return reduce(RULE_22, 0);
    case 134:
      return reduce(RULE_22, 0);
    case 185:
      return reduce(RULE_22, 0);
    case 153:
      return reduce(RULE_22, 0);
    case 205:
      return reduce(RULE_22, 0);
    case 148:
      return reduce(RULE_22, 0);
    case 125:
      return reduce(RULE_22, 0);
    case 105:
      return reduce(RULE_22, 0);
    case 98:
      return reduce(RULE_22, 0);
    case 155:
      return reduce(RULE_22, 0);
    case 142:
      return reduce(RULE_22, 0);
    case 124:
      return reduce(RULE_22, 0);
    case 138:
      return reduce(RULE_22, 0);
    case 186:
      return reduce(RULE_22, 0);
    case 175:
      return reduce(RULE_22, 0);
    case 128:
      return reduce(RULE_22, 0);
    case 143:
      return reduce(RULE_22, 0);
    case 179:
      return reduce(RULE_22, 0);
    case 164:
      return reduce(RULE_22, 0);
    case 203:
      return reduce(RULE_22, 0);
    case 195:
      return reduce(RULE_22, 0);
    case 193:
      return reduce(RULE_22, 0);
    case 158:
      return reduce(RULE_22, 0);
    case 131:
      return reduce(RULE_22, 0);
    case 156:
      return reduce(RULE_22, 0);
    case 173:
      return reduce(RULE_22, 0);
    case 101:
      return reduce(RULE_22, 0);
    case 102:
      return reduce(RULE_22, 0);
    case 145:
      return reduce(RULE_22, 0);
    case 201:
      return reduce(RULE_22, 0);
    case 202:
      return reduce(RULE_22, 0);
    case 132:
      return reduce(RULE_22, 0);
    case 167:
      return reduce(RULE_22, 0);
    case 103:
      return reduce(RULE_22, 0);
    case 133:
      return reduce(RULE_22, 0);
    case 120:
      return reduce(RULE_22, 0);
    case 168:
      return reduce(RULE_22, 0);
    case 194:
      return reduce(RULE_22, 0);
    case 112:
      return reduce(RULE_22, 0);
    case 110:
      return reduce(RULE_22, 0);
    case 149:
      return reduce(RULE_22, 0);
    case 192:
      return reduce(RULE_22, 0);
    case 200:
      return reduce(RULE_22, 0);
    case 108:
      return reduce(RULE_22, 0);
    case 106:
      return reduce(RULE_22, 0);
    case 165:
      return reduce(RULE_22, 0);
    case 197:
      return reduce(RULE_22, 0);
    case 150:
      return reduce(RULE_22, 0);
    case 111:
      return reduce(RULE_22, 0);
    case 183:
      return reduce(RULE_22, 0);
    case 198:
      return reduce(RULE_22, 0);
    case 100:
      return reduce(RULE_22, 0);
    case 171:
      return reduce(RULE_22, 0);
    case 190:
      return reduce(RULE_22, 0);
    case 169:
      return reduce(RULE_22, 0);
    case 176:
      return reduce(RULE_22, 0);
    case 147:
      return reduce(RULE_22, 0);
    case 99:
      return reduce(RULE_22, 0);
    case 182:
      return reduce(RULE_22, 0);
    case 109:
      return reduce(RULE_22, 0);
    case 191:
      return reduce(RULE_22, 0);
    case 118:
      return reduce(RULE_22, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, PIPE, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, SHORT_KEYWORD, UBYTE_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action291(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_50, 0);
    case 154:
      return reduce(RULE_50, 0);
    case 181:
      return reduce(RULE_50, 0);
    case 184:
      return reduce(RULE_50, 0);
    case 134:
      return reduce(RULE_50, 0);
    case 153:
      return reduce(RULE_50, 0);
    case 185:
      return reduce(RULE_50, 0);
    case 205:
      return reduce(RULE_50, 0);
    case 148:
      return reduce(RULE_50, 0);
    case 125:
      return reduce(RULE_50, 0);
    case 105:
      return reduce(RULE_50, 0);
    case 98:
      return reduce(RULE_50, 0);
    case 155:
      return reduce(RULE_50, 0);
    case 138:
      return reduce(RULE_50, 0);
    case 142:
      return reduce(RULE_50, 0);
    case 124:
      return reduce(RULE_50, 0);
    case 186:
      return reduce(RULE_50, 0);
    case 175:
      return reduce(RULE_50, 0);
    case 128:
      return reduce(RULE_50, 0);
    case 143:
      return reduce(RULE_50, 0);
    case 179:
      return reduce(RULE_50, 0);
    case 164:
      return reduce(RULE_50, 0);
    case 203:
      return reduce(RULE_50, 0);
    case 195:
      return reduce(RULE_50, 0);
    case 193:
      return reduce(RULE_50, 0);
    case 158:
      return reduce(RULE_50, 0);
    case 131:
      return reduce(RULE_50, 0);
    case 156:
      return reduce(RULE_50, 0);
    case 173:
      return reduce(RULE_50, 0);
    case 101:
      return reduce(RULE_50, 0);
    case 102:
      return reduce(RULE_50, 0);
    case 145:
      return reduce(RULE_50, 0);
    case 201:
      return reduce(RULE_50, 0);
    case 132:
      return reduce(RULE_50, 0);
    case 202:
      return reduce(RULE_50, 0);
    case 167:
      return reduce(RULE_50, 0);
    case 103:
      return reduce(RULE_50, 0);
    case 133:
      return reduce(RULE_50, 0);
    case 120:
      return reduce(RULE_50, 0);
    case 168:
      return reduce(RULE_50, 0);
    case 194:
      return reduce(RULE_50, 0);
    case 112:
      return reduce(RULE_50, 0);
    case 149:
      return reduce(RULE_50, 0);
    case 110:
      return reduce(RULE_50, 0);
    case 192:
      return reduce(RULE_50, 0);
    case 200:
      return reduce(RULE_50, 0);
    case 106:
      return reduce(RULE_50, 0);
    case 108:
      return reduce(RULE_50, 0);
    case 165:
      return reduce(RULE_50, 0);
    case 197:
      return reduce(RULE_50, 0);
    case 150:
      return reduce(RULE_50, 0);
    case 111:
      return reduce(RULE_50, 0);
    case 183:
      return reduce(RULE_50, 0);
    case 198:
      return reduce(RULE_50, 0);
    case 100:
      return reduce(RULE_50, 0);
    case 171:
      return reduce(RULE_50, 0);
    case 190:
      return reduce(RULE_50, 0);
    case 169:
      return reduce(RULE_50, 0);
    case 176:
      return reduce(RULE_50, 0);
    case 147:
      return reduce(RULE_50, 0);
    case 99:
      return reduce(RULE_50, 0);
    case 182:
      return reduce(RULE_50, 0);
    case 109:
      return reduce(RULE_50, 0);
    case 191:
      return reduce(RULE_50, 0);
    case 118:
      return reduce(RULE_50, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action292(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 167:
      return reduce(RULE_17, 1);
    case 103:
      return reduce(RULE_17, 1);
    case 194:
      return reduce(RULE_17, 1);
    case 109:
      return reduce(RULE_17, 1);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action293(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_18, 1);
    case 101:
      return reduce(RULE_18, 1);
    case 154:
      return reduce(RULE_18, 1);
    case 145:
      return reduce(RULE_18, 1);
    case 132:
      return reduce(RULE_18, 1);
    case 167:
      return reduce(RULE_18, 1);
    case 103:
      return reduce(RULE_18, 1);
    case 120:
      return reduce(RULE_18, 1);
    case 194:
      return reduce(RULE_18, 1);
    case 112:
      return reduce(RULE_18, 1);
    case 148:
      return reduce(RULE_18, 1);
    case 110:
      return reduce(RULE_18, 1);
    case 149:
      return reduce(RULE_18, 1);
    case 108:
      return reduce(RULE_18, 1);
    case 106:
      return reduce(RULE_18, 1);
    case 125:
      return reduce(RULE_18, 1);
    case 105:
      return reduce(RULE_18, 1);
    case 98:
      return reduce(RULE_18, 1);
    case 142:
      return reduce(RULE_18, 1);
    case 155:
      return reduce(RULE_18, 1);
    case 138:
      return reduce(RULE_18, 1);
    case 150:
      return reduce(RULE_18, 1);
    case 197:
      return reduce(RULE_18, 1);
    case 111:
      return reduce(RULE_18, 1);
    case 183:
      return reduce(RULE_18, 1);
    case 175:
      return reduce(RULE_18, 1);
    case 128:
      return reduce(RULE_18, 1);
    case 190:
      return reduce(RULE_18, 1);
    case 169:
      return reduce(RULE_18, 1);
    case 143:
      return reduce(RULE_18, 1);
    case 176:
      return reduce(RULE_18, 1);
    case 164:
      return reduce(RULE_18, 1);
    case 203:
      return reduce(RULE_18, 1);
    case 147:
      return reduce(RULE_18, 1);
    case 193:
      return reduce(RULE_18, 1);
    case 182:
      return reduce(RULE_18, 1);
    case 109:
      return reduce(RULE_18, 1);
    case 191:
      return reduce(RULE_18, 1);
    case 131:
      return reduce(RULE_18, 1);
    case 118:
      return reduce(RULE_18, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, PIPE, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action294(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_12, 3);
    case 167:
      return reduce(RULE_12, 3);
    case 131:
      return reduce(RULE_12, 3);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action295(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_8, 3);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, COMMA});
    }
  }

  private final boolean action296(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_12, 4);
    case 167:
      return reduce(RULE_12, 4);
    case 131:
      return reduce(RULE_12, 4);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, EXTENDS_KEYWORD, LBRACE});
    }
  }

  private final boolean action297(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_8, 4);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, COMMA});
    }
  }

  private final boolean action298(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_52, 0);
    case 101:
      return reduce(RULE_52, 0);
    case 154:
      return reduce(RULE_52, 0);
    case 145:
      return reduce(RULE_52, 0);
    case 132:
      return reduce(RULE_52, 0);
    case 167:
      return reduce(RULE_52, 0);
    case 103:
      return reduce(RULE_52, 0);
    case 120:
      return reduce(RULE_52, 0);
    case 194:
      return reduce(RULE_52, 0);
    case 148:
      return reduce(RULE_52, 0);
    case 112:
      return reduce(RULE_52, 0);
    case 149:
      return reduce(RULE_52, 0);
    case 110:
      return reduce(RULE_52, 0);
    case 106:
      return reduce(RULE_52, 0);
    case 108:
      return reduce(RULE_52, 0);
    case 125:
      return reduce(RULE_52, 0);
    case 98:
      return reduce(RULE_52, 0);
    case 105:
      return reduce(RULE_52, 0);
    case 155:
      return reduce(RULE_52, 0);
    case 138:
      return reduce(RULE_52, 0);
    case 142:
      return reduce(RULE_52, 0);
    case 197:
      return reduce(RULE_52, 0);
    case 150:
      return reduce(RULE_52, 0);
    case 111:
      return reduce(RULE_52, 0);
    case 183:
      return reduce(RULE_52, 0);
    case 175:
      return reduce(RULE_52, 0);
    case 128:
      return reduce(RULE_52, 0);
    case 169:
      return reduce(RULE_52, 0);
    case 190:
      return reduce(RULE_52, 0);
    case 143:
      return reduce(RULE_52, 0);
    case 176:
      return reduce(RULE_52, 0);
    case 164:
      return reduce(RULE_52, 0);
    case 203:
      return reduce(RULE_52, 0);
    case 147:
      return reduce(RULE_52, 0);
    case 193:
      return reduce(RULE_52, 0);
    case 182:
      return reduce(RULE_52, 0);
    case 109:
      return reduce(RULE_52, 0);
    case 191:
      return reduce(RULE_52, 0);
    case 131:
      return reduce(RULE_52, 0);
    case 118:
      return reduce(RULE_52, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action299(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto299(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 91;
    case 48: return 92;
    case 49: return 93;
    case 54: return 94;
    case 58: return 95;
    case 28: return 96;
    case 30: return 97;
    case 59: return 98;
    case 60: return 99;
    case 71: return 465;
    case 70: return 466;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action300(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto300(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 91;
    case 48: return 92;
    case 49: return 93;
    case 54: return 94;
    case 58: return 95;
    case 28: return 96;
    case 30: return 97;
    case 59: return 98;
    case 60: return 99;
    case 71: return 467;
    case 70: return 468;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action301(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto301(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 172;
    case 64: return 173;
    case 62: return 469;
    case 68: return 175;
    case 30: return 176;
    case 67: return 177;
    case 60: return 99;
    case 61: return 102;
    case 54: return 94;
    case 49: return 178;
    case 58: return 95;
    case 28: return 179;
    case 59: return 98;
    case 65: return 180;
    default: return -1;
    }
  }

  private final boolean action302(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto302(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 172;
    case 64: return 173;
    case 62: return 470;
    case 68: return 175;
    case 30: return 176;
    case 67: return 177;
    case 60: return 99;
    case 61: return 102;
    case 54: return 94;
    case 49: return 178;
    case 58: return 95;
    case 28: return 179;
    case 59: return 98;
    case 65: return 180;
    default: return -1;
    }
  }

  private final boolean action303(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto303(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 172;
    case 64: return 173;
    case 62: return 471;
    case 68: return 175;
    case 30: return 176;
    case 67: return 177;
    case 60: return 99;
    case 61: return 102;
    case 54: return 94;
    case 49: return 178;
    case 58: return 95;
    case 28: return 179;
    case 59: return 98;
    case 65: return 180;
    default: return -1;
    }
  }

  private final boolean action304(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(116);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(472);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 188:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto304(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 11: return 119;
    case 51: return 120;
    case 8: return 121;
    case 27: return 122;
    case 33: return 123;
    case 7: return 124;
    case 30: return 125;
    case 9: return 126;
    case 60: return 99;
    case 48: return 127;
    case 26: return 128;
    case 10: return 129;
    case 54: return 94;
    case 28: return 130;
    case 58: return 95;
    default: return -1;
    }
  }

  private final boolean action305(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_23, 1);
    }
    switch (token.getType().ordinal())
    {
    case 203:
      return reduce(RULE_23, 1);
    case 161:
      return reduce(RULE_23, 1);
    case 101:
      return reduce(RULE_23, 1);
    case 155:
      return reduce(RULE_23, 1);
    case 180:
      return reduce(RULE_23, 1);
    case 183:
      return reduce(RULE_23, 1);
    case 193:
      return reduce(RULE_23, 1);
    case 182:
      return reduce(RULE_23, 1);
    case 175:
      return reduce(RULE_23, 1);
    case 162:
      return reduce(RULE_23, 1);
    case 190:
      return reduce(RULE_23, 1);
    case 169:
      return reduce(RULE_23, 1);
    default: throw new BadTokenException(token, new Object[] {null, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, UNBACKED_KEYWORD, INTERFACE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, COMPOUND_KEYWORD});
    }
  }

  private final boolean action306(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(253);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_46, 1);
    case 101:
      return reduce(RULE_46, 1);
    case 154:
      return reduce(RULE_46, 1);
    case 145:
      return reduce(RULE_46, 1);
    case 132:
      return reduce(RULE_46, 1);
    case 103:
      return reduce(RULE_46, 1);
    case 112:
      return reduce(RULE_46, 1);
    case 148:
      return reduce(RULE_46, 1);
    case 149:
      return reduce(RULE_46, 1);
    case 110:
      return reduce(RULE_46, 1);
    case 108:
      return reduce(RULE_46, 1);
    case 106:
      return reduce(RULE_46, 1);
    case 125:
      return reduce(RULE_46, 1);
    case 98:
      return reduce(RULE_46, 1);
    case 105:
      return reduce(RULE_46, 1);
    case 155:
      return reduce(RULE_46, 1);
    case 142:
      return reduce(RULE_46, 1);
    case 138:
      return reduce(RULE_46, 1);
    case 197:
      return reduce(RULE_46, 1);
    case 150:
      return reduce(RULE_46, 1);
    case 183:
      return reduce(RULE_46, 1);
    case 111:
      return reduce(RULE_46, 1);
    case 175:
      return reduce(RULE_46, 1);
    case 128:
      return reduce(RULE_46, 1);
    case 190:
      return reduce(RULE_46, 1);
    case 169:
      return reduce(RULE_46, 1);
    case 143:
      return reduce(RULE_46, 1);
    case 164:
      return reduce(RULE_46, 1);
    case 203:
      return reduce(RULE_46, 1);
    case 147:
      return reduce(RULE_46, 1);
    case 193:
      return reduce(RULE_46, 1);
    case 182:
      return reduce(RULE_46, 1);
    case 109:
      return reduce(RULE_46, 1);
    case 191:
      return reduce(RULE_46, 1);
    case 131:
      return reduce(RULE_46, 1);
    case 118:
      return reduce(RULE_46, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, LANGLE, MUTABLE_KEYWORD, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action307(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 150:
      return reduce(RULE_34, 0);
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto307(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 473;
    default: return -1;
    }
  }

  private final boolean action308(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(474);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action309(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(475);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_15, 43);
    case 101:
      return reduce(RULE_15, 43);
    case 154:
      return reduce(RULE_15, 43);
    case 145:
      return reduce(RULE_15, 43);
    case 132:
      return reduce(RULE_15, 43);
    case 103:
      return reduce(RULE_15, 43);
    case 112:
      return reduce(RULE_15, 43);
    case 148:
      return reduce(RULE_15, 43);
    case 110:
      return reduce(RULE_15, 43);
    case 149:
      return reduce(RULE_15, 43);
    case 108:
      return reduce(RULE_15, 43);
    case 106:
      return reduce(RULE_15, 43);
    case 125:
      return reduce(RULE_15, 43);
    case 105:
      return reduce(RULE_15, 43);
    case 98:
      return reduce(RULE_15, 43);
    case 155:
      return reduce(RULE_15, 43);
    case 142:
      return reduce(RULE_15, 43);
    case 138:
      return reduce(RULE_15, 43);
    case 197:
      return reduce(RULE_15, 43);
    case 150:
      return reduce(RULE_15, 43);
    case 183:
      return reduce(RULE_15, 43);
    case 111:
      return reduce(RULE_15, 43);
    case 175:
      return reduce(RULE_15, 43);
    case 128:
      return reduce(RULE_15, 43);
    case 169:
      return reduce(RULE_15, 43);
    case 190:
      return reduce(RULE_15, 43);
    case 143:
      return reduce(RULE_15, 43);
    case 164:
      return reduce(RULE_15, 43);
    case 203:
      return reduce(RULE_15, 43);
    case 147:
      return reduce(RULE_15, 43);
    case 193:
      return reduce(RULE_15, 43);
    case 182:
      return reduce(RULE_15, 43);
    case 109:
      return reduce(RULE_15, 43);
    case 191:
      return reduce(RULE_15, 43);
    case 131:
      return reduce(RULE_15, 43);
    case 118:
      return reduce(RULE_15, 43);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, LANGLE, MUTABLE_KEYWORD, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action310(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto310(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 53: return 432;
    case 54: return 271;
    case 28: return 306;
    case 58: return 433;
    case 30: return 274;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action311(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto311(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 172;
    case 64: return 173;
    case 62: return 439;
    case 68: return 175;
    case 30: return 176;
    case 67: return 177;
    case 60: return 99;
    case 61: return 102;
    case 54: return 94;
    case 49: return 178;
    case 58: return 95;
    case 28: return 179;
    case 59: return 98;
    case 65: return 180;
    default: return -1;
    }
  }

  private final boolean action312(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto312(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 53: return 441;
    case 54: return 271;
    case 58: return 442;
    case 28: return 306;
    case 30: return 274;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action313(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto313(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 172;
    case 64: return 173;
    case 62: return 444;
    case 68: return 175;
    case 30: return 176;
    case 67: return 177;
    case 60: return 99;
    case 61: return 102;
    case 54: return 94;
    case 49: return 178;
    case 58: return 95;
    case 28: return 179;
    case 59: return 98;
    case 65: return 180;
    default: return -1;
    }
  }

  private final boolean action314(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_53, 1);
    case 197:
      return reduce(RULE_53, 1);
    case 131:
      return reduce(RULE_53, 1);
    default: throw new BadTokenException(token, new Object[] {THROWS_KEYWORD, SEMICOLON, LBRACE});
    }
  }

  private final boolean action315(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto315(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 476;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action316(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(477);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(478);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN, COMMA});
    }
  }

  private final boolean action317(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 204:
      stateStack.addFirst(479);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNCHECKED_KEYWORD, NAME});
    }
  }

  private final int goto317(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 480;
    case 32: return 481;
    default: return -1;
    }
  }

  private final boolean action318(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto318(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 482;
    default: return -1;
    }
  }

  private final boolean action319(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto319(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 483;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action320(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(484);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LANGLE});
    }
  }

  private final boolean action321(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(352);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(353);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto321(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 354;
    case 96: return 485;
    default: return -1;
    }
  }

  private final boolean action322(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, TILDE, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto322(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 488;
    case 60: return 340;
    case 90: return 489;
    default: return -1;
    }
  }

  private final boolean action323(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, TILDE, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto323(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 490;
    case 60: return 340;
    case 90: return 491;
    default: return -1;
    }
  }

  private final boolean action324(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOT});
    }
  }

  private final boolean action325(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, TILDE, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto325(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 492;
    case 60: return 340;
    case 90: return 493;
    default: return -1;
    }
  }

  private final boolean action326(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(135);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(136);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(494);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(138);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(139);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(140);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(141);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(142);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(188);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(144);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(145);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(146);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(147);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto326(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 495;
    case 30: return 149;
    default: return -1;
    }
  }

  private final boolean action327(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(151);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto327(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 496;
    default: return -1;
    }
  }

  private final boolean action328(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_37, 1);
    case 173:
      return reduce(RULE_37, 1);
    case 101:
      return reduce(RULE_37, 1);
    case 145:
      return reduce(RULE_37, 1);
    case 116:
      return reduce(RULE_37, 1);
    case 151:
      return reduce(RULE_37, 1);
    case 134:
      return reduce(RULE_37, 1);
    case 103:
      return reduce(RULE_37, 1);
    case 133:
      return reduce(RULE_37, 1);
    case 120:
      return reduce(RULE_37, 1);
    case 112:
      return reduce(RULE_37, 1);
    case 148:
      return reduce(RULE_37, 1);
    case 149:
      return reduce(RULE_37, 1);
    case 110:
      return reduce(RULE_37, 1);
    case 108:
      return reduce(RULE_37, 1);
    case 106:
      return reduce(RULE_37, 1);
    case 125:
      return reduce(RULE_37, 1);
    case 178:
      return reduce(RULE_37, 1);
    case 155:
      return reduce(RULE_37, 1);
    case 124:
      return reduce(RULE_37, 1);
    case 142:
      return reduce(RULE_37, 1);
    case 146:
      return reduce(RULE_37, 1);
    case 138:
      return reduce(RULE_37, 1);
    case 150:
      return reduce(RULE_37, 1);
    case 183:
      return reduce(RULE_37, 1);
    case 175:
      return reduce(RULE_37, 1);
    case 113:
      return reduce(RULE_37, 1);
    case 169:
      return reduce(RULE_37, 1);
    case 190:
      return reduce(RULE_37, 1);
    case 143:
      return reduce(RULE_37, 1);
    case 164:
      return reduce(RULE_37, 1);
    case 203:
      return reduce(RULE_37, 1);
    case 147:
      return reduce(RULE_37, 1);
    case 130:
      return reduce(RULE_37, 1);
    case 193:
      return reduce(RULE_37, 1);
    case 136:
      return reduce(RULE_37, 1);
    case 129:
      return reduce(RULE_37, 1);
    case 144:
      return reduce(RULE_37, 1);
    case 182:
      return reduce(RULE_37, 1);
    case 122:
      return reduce(RULE_37, 1);
    case 140:
      return reduce(RULE_37, 1);
    case 109:
      return reduce(RULE_37, 1);
    case 191:
      return reduce(RULE_37, 1);
    case 131:
      return reduce(RULE_37, 1);
    case 118:
      return reduce(RULE_37, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action329(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_54, 9);
    case 101:
      return reduce(RULE_54, 9);
    case 103:
      return reduce(RULE_55, 1);
    case 148:
      return reduce(RULE_54, 9);
    case 112:
      return reduce(RULE_55, 1);
    case 110:
      return reduce(RULE_55, 1);
    case 149:
      return reduce(RULE_54, 9);
    case 108:
      return reduce(RULE_54, 9);
    case 106:
      return reduce(RULE_55, 1);
    case 125:
      return reduce(RULE_55, 1);
    case 155:
      return reduce(RULE_54, 9);
    case 142:
      return reduce(RULE_55, 1);
    case 138:
      return reduce(RULE_55, 1);
    case 150:
      return reduce(RULE_54, 9);
    case 183:
      return reduce(RULE_54, 9);
    case 175:
      return reduce(RULE_54, 9);
    case 169:
      return reduce(RULE_54, 9);
    case 190:
      return reduce(RULE_54, 9);
    case 143:
      return reduce(RULE_55, 1);
    case 164:
      return reduce(RULE_54, 9);
    case 203:
      return reduce(RULE_54, 9);
    case 193:
      return reduce(RULE_54, 9);
    case 182:
      return reduce(RULE_54, 9);
    case 191:
      return reduce(RULE_54, 9);
    case 131:
      return reduce(RULE_54, 9);
    case 118:
      return reduce(RULE_55, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, ABSTRACT_KEYWORD, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action330(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(497);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 0);
    case 173:
      return reduce(RULE_56, 0);
    case 101:
      return reduce(RULE_56, 0);
    case 145:
      return reduce(RULE_56, 0);
    case 116:
      return reduce(RULE_56, 0);
    case 151:
      return reduce(RULE_56, 0);
    case 134:
      return reduce(RULE_56, 0);
    case 103:
      return reduce(RULE_56, 0);
    case 120:
      return reduce(RULE_56, 0);
    case 112:
      return reduce(RULE_56, 0);
    case 148:
      return reduce(RULE_56, 0);
    case 149:
      return reduce(RULE_56, 0);
    case 110:
      return reduce(RULE_56, 0);
    case 108:
      return reduce(RULE_56, 0);
    case 106:
      return reduce(RULE_56, 0);
    case 125:
      return reduce(RULE_56, 0);
    case 178:
      return reduce(RULE_56, 0);
    case 155:
      return reduce(RULE_56, 0);
    case 142:
      return reduce(RULE_56, 0);
    case 146:
      return reduce(RULE_56, 0);
    case 138:
      return reduce(RULE_56, 0);
    case 150:
      return reduce(RULE_56, 0);
    case 183:
      return reduce(RULE_56, 0);
    case 175:
      return reduce(RULE_56, 0);
    case 113:
      return reduce(RULE_56, 0);
    case 190:
      return reduce(RULE_56, 0);
    case 169:
      return reduce(RULE_56, 0);
    case 143:
      return reduce(RULE_56, 0);
    case 164:
      return reduce(RULE_56, 0);
    case 203:
      return reduce(RULE_56, 0);
    case 147:
      return reduce(RULE_56, 0);
    case 130:
      return reduce(RULE_56, 0);
    case 193:
      return reduce(RULE_56, 0);
    case 129:
      return reduce(RULE_56, 0);
    case 136:
      return reduce(RULE_56, 0);
    case 182:
      return reduce(RULE_56, 0);
    case 140:
      return reduce(RULE_56, 0);
    case 109:
      return reduce(RULE_56, 0);
    case 191:
      return reduce(RULE_56, 0);
    case 131:
      return reduce(RULE_56, 0);
    case 118:
      return reduce(RULE_56, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action331(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 17);
    case 173:
      return reduce(RULE_36, 17);
    case 101:
      return reduce(RULE_36, 17);
    case 145:
      return reduce(RULE_36, 17);
    case 116:
      return reduce(RULE_36, 17);
    case 151:
      return reduce(RULE_36, 17);
    case 132:
      return reduce(RULE_36, 17);
    case 134:
      return reduce(RULE_36, 17);
    case 103:
      return reduce(RULE_36, 17);
    case 133:
      return reduce(RULE_36, 17);
    case 120:
      return reduce(RULE_36, 17);
    case 148:
      return reduce(RULE_36, 17);
    case 112:
      return reduce(RULE_36, 17);
    case 149:
      return reduce(RULE_36, 17);
    case 110:
      return reduce(RULE_36, 17);
    case 108:
      return reduce(RULE_36, 17);
    case 106:
      return reduce(RULE_36, 17);
    case 125:
      return reduce(RULE_36, 17);
    case 178:
      return reduce(RULE_36, 17);
    case 155:
      return reduce(RULE_36, 17);
    case 124:
      return reduce(RULE_36, 17);
    case 142:
      return reduce(RULE_36, 17);
    case 146:
      return reduce(RULE_36, 17);
    case 138:
      return reduce(RULE_36, 17);
    case 150:
      return reduce(RULE_36, 17);
    case 183:
      return reduce(RULE_36, 17);
    case 175:
      return reduce(RULE_36, 17);
    case 113:
      return reduce(RULE_36, 17);
    case 169:
      return reduce(RULE_36, 17);
    case 190:
      return reduce(RULE_36, 17);
    case 143:
      return reduce(RULE_36, 17);
    case 164:
      return reduce(RULE_36, 17);
    case 203:
      return reduce(RULE_36, 17);
    case 147:
      return reduce(RULE_36, 17);
    case 130:
      return reduce(RULE_36, 17);
    case 193:
      return reduce(RULE_36, 17);
    case 136:
      return reduce(RULE_36, 17);
    case 129:
      return reduce(RULE_36, 17);
    case 144:
      return reduce(RULE_36, 17);
    case 182:
      return reduce(RULE_36, 17);
    case 122:
      return reduce(RULE_36, 17);
    case 140:
      return reduce(RULE_36, 17);
    case 109:
      return reduce(RULE_36, 17);
    case 191:
      return reduce(RULE_36, 17);
    case 131:
      return reduce(RULE_36, 17);
    case 118:
      return reduce(RULE_36, 17);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action332(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 19);
    case 173:
      return reduce(RULE_36, 19);
    case 101:
      return reduce(RULE_36, 19);
    case 145:
      return reduce(RULE_36, 19);
    case 116:
      return reduce(RULE_36, 19);
    case 151:
      return reduce(RULE_36, 19);
    case 132:
      return reduce(RULE_36, 19);
    case 134:
      return reduce(RULE_36, 19);
    case 103:
      return reduce(RULE_36, 19);
    case 133:
      return reduce(RULE_36, 19);
    case 120:
      return reduce(RULE_36, 19);
    case 148:
      return reduce(RULE_36, 19);
    case 112:
      return reduce(RULE_36, 19);
    case 149:
      return reduce(RULE_36, 19);
    case 110:
      return reduce(RULE_36, 19);
    case 108:
      return reduce(RULE_36, 19);
    case 106:
      return reduce(RULE_36, 19);
    case 125:
      return reduce(RULE_36, 19);
    case 178:
      return reduce(RULE_36, 19);
    case 155:
      return reduce(RULE_36, 19);
    case 124:
      return reduce(RULE_36, 19);
    case 142:
      return reduce(RULE_36, 19);
    case 146:
      return reduce(RULE_36, 19);
    case 138:
      return reduce(RULE_36, 19);
    case 150:
      return reduce(RULE_36, 19);
    case 183:
      return reduce(RULE_36, 19);
    case 175:
      return reduce(RULE_36, 19);
    case 113:
      return reduce(RULE_36, 19);
    case 169:
      return reduce(RULE_36, 19);
    case 190:
      return reduce(RULE_36, 19);
    case 143:
      return reduce(RULE_36, 19);
    case 164:
      return reduce(RULE_36, 19);
    case 203:
      return reduce(RULE_36, 19);
    case 147:
      return reduce(RULE_36, 19);
    case 130:
      return reduce(RULE_36, 19);
    case 193:
      return reduce(RULE_36, 19);
    case 136:
      return reduce(RULE_36, 19);
    case 129:
      return reduce(RULE_36, 19);
    case 144:
      return reduce(RULE_36, 19);
    case 182:
      return reduce(RULE_36, 19);
    case 122:
      return reduce(RULE_36, 19);
    case 140:
      return reduce(RULE_36, 19);
    case 109:
      return reduce(RULE_36, 19);
    case 191:
      return reduce(RULE_36, 19);
    case 131:
      return reduce(RULE_36, 19);
    case 118:
      return reduce(RULE_36, 19);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action333(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_57, 0);
    case 173:
      return reduce(RULE_57, 0);
    case 101:
      return reduce(RULE_57, 0);
    case 155:
      return reduce(RULE_57, 0);
    case 150:
      return reduce(RULE_57, 0);
    case 183:
      return reduce(RULE_57, 0);
    case 175:
      return reduce(RULE_57, 0);
    case 190:
      return reduce(RULE_57, 0);
    case 169:
      return reduce(RULE_57, 0);
    case 164:
      return reduce(RULE_57, 0);
    case 203:
      return reduce(RULE_57, 0);
    case 193:
      return reduce(RULE_57, 0);
    case 182:
      return reduce(RULE_57, 0);
    case 148:
      return reduce(RULE_57, 0);
    case 191:
      return reduce(RULE_57, 0);
    case 149:
      return reduce(RULE_57, 0);
    case 131:
      return reduce(RULE_57, 0);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, LBRACE, RSQUARE});
    }
  }

  private final boolean action334(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 111:
      stateStack.addFirst(498);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action335(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(500);
      tokenStack.addFirst(token);
      return true;
    case 146:
      stateStack.addFirst(501);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(502);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(503);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(504);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 0);
    case 101:
      return reduce(RULE_58, 0);
    case 103:
      return reduce(RULE_58, 0);
    case 148:
      return reduce(RULE_58, 0);
    case 112:
      return reduce(RULE_58, 0);
    case 149:
      return reduce(RULE_58, 0);
    case 110:
      return reduce(RULE_58, 0);
    case 108:
      return reduce(RULE_58, 0);
    case 106:
      return reduce(RULE_58, 0);
    case 125:
      return reduce(RULE_58, 0);
    case 138:
      return reduce(RULE_58, 0);
    case 142:
      return reduce(RULE_58, 0);
    case 155:
      return reduce(RULE_58, 0);
    case 150:
      return reduce(RULE_58, 0);
    case 183:
      return reduce(RULE_58, 0);
    case 175:
      return reduce(RULE_58, 0);
    case 169:
      return reduce(RULE_58, 0);
    case 190:
      return reduce(RULE_58, 0);
    case 143:
      return reduce(RULE_58, 0);
    case 164:
      return reduce(RULE_58, 0);
    case 203:
      return reduce(RULE_58, 0);
    case 147:
      return reduce(RULE_58, 0);
    case 193:
      return reduce(RULE_58, 0);
    case 182:
      return reduce(RULE_58, 0);
    case 109:
      return reduce(RULE_58, 0);
    case 191:
      return reduce(RULE_58, 0);
    case 131:
      return reduce(RULE_58, 0);
    case 118:
      return reduce(RULE_58, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, RANGLE, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, RANGLE_EQUALS, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action336(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_57, 1);
    case 173:
      return reduce(RULE_57, 1);
    case 101:
      return reduce(RULE_57, 1);
    case 155:
      return reduce(RULE_57, 1);
    case 150:
      return reduce(RULE_57, 1);
    case 183:
      return reduce(RULE_57, 1);
    case 175:
      return reduce(RULE_57, 1);
    case 190:
      return reduce(RULE_57, 1);
    case 169:
      return reduce(RULE_57, 1);
    case 164:
      return reduce(RULE_57, 1);
    case 203:
      return reduce(RULE_57, 1);
    case 193:
      return reduce(RULE_57, 1);
    case 182:
      return reduce(RULE_57, 1);
    case 148:
      return reduce(RULE_57, 1);
    case 191:
      return reduce(RULE_57, 1);
    case 149:
      return reduce(RULE_57, 1);
    case 131:
      return reduce(RULE_57, 1);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, LBRACE, RSQUARE});
    }
  }

  private final boolean action337(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(508);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(509);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(510);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_27, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 101:
      return reduce(RULE_27, 1);
    case 116:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_44, 1);
    case 148:
      return reduce(RULE_27, 1);
    case 112:
      return reduce(RULE_44, 1);
    case 149:
      return reduce(RULE_27, 1);
    case 110:
      return reduce(RULE_44, 1);
    case 106:
      return reduce(RULE_44, 1);
    case 108:
      return reduce(RULE_27, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 178:
      return reduce(RULE_44, 1);
    case 155:
      return reduce(RULE_27, 1);
    case 146:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 150:
      return reduce(RULE_27, 1);
    case 183:
      return reduce(RULE_27, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 175:
      return reduce(RULE_27, 1);
    case 169:
      return reduce(RULE_27, 1);
    case 190:
      return reduce(RULE_27, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 164:
      return reduce(RULE_27, 1);
    case 203:
      return reduce(RULE_27, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 193:
      return reduce(RULE_27, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 182:
      return reduce(RULE_27, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 191:
      return reduce(RULE_27, 1);
    case 131:
      return reduce(RULE_27, 1);
    case 118:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, RANGLE_EQUALS, SEMICOLON, DOUBLE_COLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_LANGLE, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action338(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 178:
      stateStack.addFirst(513);
      tokenStack.addFirst(token);
      return true;
    case 146:
      stateStack.addFirst(514);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(516);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_55, 0);
    case 101:
      return reduce(RULE_55, 0);
    case 103:
      return reduce(RULE_55, 0);
    case 112:
      return reduce(RULE_55, 0);
    case 148:
      return reduce(RULE_55, 0);
    case 149:
      return reduce(RULE_55, 0);
    case 110:
      return reduce(RULE_55, 0);
    case 108:
      return reduce(RULE_55, 0);
    case 106:
      return reduce(RULE_55, 0);
    case 125:
      return reduce(RULE_55, 0);
    case 138:
      return reduce(RULE_55, 0);
    case 142:
      return reduce(RULE_55, 0);
    case 155:
      return reduce(RULE_55, 0);
    case 150:
      return reduce(RULE_55, 0);
    case 183:
      return reduce(RULE_55, 0);
    case 175:
      return reduce(RULE_55, 0);
    case 169:
      return reduce(RULE_55, 0);
    case 190:
      return reduce(RULE_55, 0);
    case 143:
      return reduce(RULE_55, 0);
    case 164:
      return reduce(RULE_55, 0);
    case 203:
      return reduce(RULE_55, 0);
    case 147:
      return reduce(RULE_55, 0);
    case 193:
      return reduce(RULE_55, 0);
    case 182:
      return reduce(RULE_55, 0);
    case 109:
      return reduce(RULE_55, 0);
    case 191:
      return reduce(RULE_55, 0);
    case 131:
      return reduce(RULE_55, 0);
    case 118:
      return reduce(RULE_55, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto338(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action339(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(522);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(524);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_59, 0);
    case 101:
      return reduce(RULE_59, 0);
    case 145:
      return reduce(RULE_59, 0);
    case 134:
      return reduce(RULE_59, 0);
    case 103:
      return reduce(RULE_59, 0);
    case 148:
      return reduce(RULE_59, 0);
    case 112:
      return reduce(RULE_59, 0);
    case 149:
      return reduce(RULE_59, 0);
    case 110:
      return reduce(RULE_59, 0);
    case 108:
      return reduce(RULE_59, 0);
    case 106:
      return reduce(RULE_59, 0);
    case 125:
      return reduce(RULE_59, 0);
    case 178:
      return reduce(RULE_59, 0);
    case 155:
      return reduce(RULE_59, 0);
    case 142:
      return reduce(RULE_59, 0);
    case 146:
      return reduce(RULE_59, 0);
    case 138:
      return reduce(RULE_59, 0);
    case 150:
      return reduce(RULE_59, 0);
    case 183:
      return reduce(RULE_59, 0);
    case 175:
      return reduce(RULE_59, 0);
    case 169:
      return reduce(RULE_59, 0);
    case 190:
      return reduce(RULE_59, 0);
    case 143:
      return reduce(RULE_59, 0);
    case 164:
      return reduce(RULE_59, 0);
    case 203:
      return reduce(RULE_59, 0);
    case 147:
      return reduce(RULE_59, 0);
    case 130:
      return reduce(RULE_59, 0);
    case 193:
      return reduce(RULE_59, 0);
    case 129:
      return reduce(RULE_59, 0);
    case 182:
      return reduce(RULE_59, 0);
    case 140:
      return reduce(RULE_59, 0);
    case 109:
      return reduce(RULE_59, 0);
    case 191:
      return reduce(RULE_59, 0);
    case 131:
      return reduce(RULE_59, 0);
    case 118:
      return reduce(RULE_59, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action340(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 111:
      return reduce(RULE_42, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action341(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(526);
      tokenStack.addFirst(token);
      return true;
    case 108:
      return reduce(RULE_54, 8);
    case 173:
      return reduce(RULE_54, 8);
    case 101:
      return reduce(RULE_54, 8);
    case 155:
      return reduce(RULE_54, 8);
    case 150:
      return reduce(RULE_54, 8);
    case 183:
      return reduce(RULE_54, 8);
    case 175:
      return reduce(RULE_54, 8);
    case 190:
      return reduce(RULE_54, 8);
    case 169:
      return reduce(RULE_54, 8);
    case 164:
      return reduce(RULE_54, 8);
    case 203:
      return reduce(RULE_54, 8);
    case 193:
      return reduce(RULE_54, 8);
    case 182:
      return reduce(RULE_54, 8);
    case 148:
      return reduce(RULE_54, 8);
    case 191:
      return reduce(RULE_54, 8);
    case 149:
      return reduce(RULE_54, 8);
    case 131:
      return reduce(RULE_54, 8);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, COMMA, LBRACE, RSQUARE});
    }
  }

  private final boolean action342(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto342(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 527;
    default: return -1;
    }
  }

  private final boolean action343(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(528);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(529);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(530);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(531);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(532);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(533);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(534);
      tokenStack.addFirst(token);
      return true;
    case 108:
      return reduce(RULE_60, 0);
    case 173:
      return reduce(RULE_60, 0);
    case 101:
      return reduce(RULE_60, 0);
    case 155:
      return reduce(RULE_60, 0);
    case 150:
      return reduce(RULE_60, 0);
    case 183:
      return reduce(RULE_60, 0);
    case 175:
      return reduce(RULE_60, 0);
    case 169:
      return reduce(RULE_60, 0);
    case 190:
      return reduce(RULE_60, 0);
    case 164:
      return reduce(RULE_60, 0);
    case 203:
      return reduce(RULE_60, 0);
    case 147:
      return reduce(RULE_60, 0);
    case 193:
      return reduce(RULE_60, 0);
    case 182:
      return reduce(RULE_60, 0);
    case 148:
      return reduce(RULE_60, 0);
    case 109:
      return reduce(RULE_60, 0);
    case 191:
      return reduce(RULE_60, 0);
    case 149:
      return reduce(RULE_60, 0);
    case 131:
      return reduce(RULE_60, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action344(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 111:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action345(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(538);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(539);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_27, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 101:
      return reduce(RULE_27, 0);
    case 116:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_44, 0);
    case 148:
      return reduce(RULE_27, 0);
    case 112:
      return reduce(RULE_44, 0);
    case 149:
      return reduce(RULE_27, 0);
    case 110:
      return reduce(RULE_44, 0);
    case 106:
      return reduce(RULE_44, 0);
    case 108:
      return reduce(RULE_27, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 178:
      return reduce(RULE_44, 0);
    case 155:
      return reduce(RULE_27, 0);
    case 146:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 150:
      return reduce(RULE_27, 0);
    case 183:
      return reduce(RULE_27, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 175:
      return reduce(RULE_27, 0);
    case 169:
      return reduce(RULE_27, 0);
    case 190:
      return reduce(RULE_27, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 164:
      return reduce(RULE_27, 0);
    case 203:
      return reduce(RULE_27, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 193:
      return reduce(RULE_27, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 182:
      return reduce(RULE_27, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 191:
      return reduce(RULE_27, 0);
    case 131:
      return reduce(RULE_27, 0);
    case 118:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, RANGLE_EQUALS, SEMICOLON, DOUBLE_COLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_LANGLE, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action346(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(405);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_61, 0);
    case 173:
      return reduce(RULE_61, 0);
    case 101:
      return reduce(RULE_61, 0);
    case 145:
      return reduce(RULE_61, 0);
    case 116:
      return reduce(RULE_61, 0);
    case 151:
      return reduce(RULE_61, 0);
    case 134:
      return reduce(RULE_61, 0);
    case 103:
      return reduce(RULE_61, 0);
    case 120:
      return reduce(RULE_61, 0);
    case 112:
      return reduce(RULE_61, 0);
    case 148:
      return reduce(RULE_61, 0);
    case 149:
      return reduce(RULE_61, 0);
    case 110:
      return reduce(RULE_61, 0);
    case 108:
      return reduce(RULE_61, 0);
    case 106:
      return reduce(RULE_61, 0);
    case 125:
      return reduce(RULE_61, 0);
    case 178:
      return reduce(RULE_61, 0);
    case 155:
      return reduce(RULE_61, 0);
    case 124:
      return reduce(RULE_61, 0);
    case 142:
      return reduce(RULE_61, 0);
    case 146:
      return reduce(RULE_61, 0);
    case 138:
      return reduce(RULE_61, 0);
    case 150:
      return reduce(RULE_61, 0);
    case 183:
      return reduce(RULE_61, 0);
    case 175:
      return reduce(RULE_61, 0);
    case 113:
      return reduce(RULE_61, 0);
    case 169:
      return reduce(RULE_61, 0);
    case 190:
      return reduce(RULE_61, 0);
    case 143:
      return reduce(RULE_61, 0);
    case 164:
      return reduce(RULE_61, 0);
    case 203:
      return reduce(RULE_61, 0);
    case 147:
      return reduce(RULE_61, 0);
    case 130:
      return reduce(RULE_61, 0);
    case 193:
      return reduce(RULE_61, 0);
    case 129:
      return reduce(RULE_61, 0);
    case 136:
      return reduce(RULE_61, 0);
    case 182:
      return reduce(RULE_61, 0);
    case 140:
      return reduce(RULE_61, 0);
    case 109:
      return reduce(RULE_61, 0);
    case 191:
      return reduce(RULE_61, 0);
    case 131:
      return reduce(RULE_61, 0);
    case 118:
      return reduce(RULE_61, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, PIPE, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action347(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 0);
    case 173:
      return reduce(RULE_62, 0);
    case 101:
      return reduce(RULE_62, 0);
    case 145:
      return reduce(RULE_62, 0);
    case 116:
      return reduce(RULE_62, 0);
    case 151:
      return reduce(RULE_62, 0);
    case 134:
      return reduce(RULE_62, 0);
    case 103:
      return reduce(RULE_62, 0);
    case 148:
      return reduce(RULE_62, 0);
    case 112:
      return reduce(RULE_62, 0);
    case 110:
      return reduce(RULE_62, 0);
    case 149:
      return reduce(RULE_62, 0);
    case 108:
      return reduce(RULE_62, 0);
    case 106:
      return reduce(RULE_62, 0);
    case 125:
      return reduce(RULE_62, 0);
    case 178:
      return reduce(RULE_62, 0);
    case 155:
      return reduce(RULE_62, 0);
    case 142:
      return reduce(RULE_62, 0);
    case 146:
      return reduce(RULE_62, 0);
    case 138:
      return reduce(RULE_62, 0);
    case 150:
      return reduce(RULE_62, 0);
    case 183:
      return reduce(RULE_62, 0);
    case 175:
      return reduce(RULE_62, 0);
    case 190:
      return reduce(RULE_62, 0);
    case 169:
      return reduce(RULE_62, 0);
    case 143:
      return reduce(RULE_62, 0);
    case 164:
      return reduce(RULE_62, 0);
    case 203:
      return reduce(RULE_62, 0);
    case 147:
      return reduce(RULE_62, 0);
    case 130:
      return reduce(RULE_62, 0);
    case 193:
      return reduce(RULE_62, 0);
    case 129:
      return reduce(RULE_62, 0);
    case 136:
      return reduce(RULE_62, 0);
    case 182:
      return reduce(RULE_62, 0);
    case 140:
      return reduce(RULE_62, 0);
    case 109:
      return reduce(RULE_62, 0);
    case 191:
      return reduce(RULE_62, 0);
    case 131:
      return reduce(RULE_62, 0);
    case 118:
      return reduce(RULE_62, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action348(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 0);
    case 101:
      return reduce(RULE_63, 0);
    case 103:
      return reduce(RULE_63, 0);
    case 148:
      return reduce(RULE_63, 0);
    case 110:
      return reduce(RULE_63, 0);
    case 149:
      return reduce(RULE_63, 0);
    case 108:
      return reduce(RULE_63, 0);
    case 106:
      return reduce(RULE_63, 0);
    case 155:
      return reduce(RULE_63, 0);
    case 138:
      return reduce(RULE_63, 0);
    case 142:
      return reduce(RULE_63, 0);
    case 150:
      return reduce(RULE_63, 0);
    case 183:
      return reduce(RULE_63, 0);
    case 175:
      return reduce(RULE_63, 0);
    case 190:
      return reduce(RULE_63, 0);
    case 169:
      return reduce(RULE_63, 0);
    case 143:
      return reduce(RULE_63, 0);
    case 164:
      return reduce(RULE_63, 0);
    case 203:
      return reduce(RULE_63, 0);
    case 147:
      return reduce(RULE_63, 0);
    case 193:
      return reduce(RULE_63, 0);
    case 182:
      return reduce(RULE_63, 0);
    case 191:
      return reduce(RULE_63, 0);
    case 109:
      return reduce(RULE_63, 0);
    case 131:
      return reduce(RULE_63, 0);
    case 118:
      return reduce(RULE_63, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action349(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(544);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(545);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_64, 0);
    case 101:
      return reduce(RULE_64, 0);
    case 103:
      return reduce(RULE_64, 0);
    case 148:
      return reduce(RULE_64, 0);
    case 110:
      return reduce(RULE_64, 0);
    case 149:
      return reduce(RULE_64, 0);
    case 108:
      return reduce(RULE_64, 0);
    case 106:
      return reduce(RULE_64, 0);
    case 155:
      return reduce(RULE_64, 0);
    case 138:
      return reduce(RULE_64, 0);
    case 142:
      return reduce(RULE_64, 0);
    case 150:
      return reduce(RULE_64, 0);
    case 183:
      return reduce(RULE_64, 0);
    case 175:
      return reduce(RULE_64, 0);
    case 190:
      return reduce(RULE_64, 0);
    case 169:
      return reduce(RULE_64, 0);
    case 143:
      return reduce(RULE_64, 0);
    case 164:
      return reduce(RULE_64, 0);
    case 203:
      return reduce(RULE_64, 0);
    case 147:
      return reduce(RULE_64, 0);
    case 193:
      return reduce(RULE_64, 0);
    case 182:
      return reduce(RULE_64, 0);
    case 191:
      return reduce(RULE_64, 0);
    case 109:
      return reduce(RULE_64, 0);
    case 131:
      return reduce(RULE_64, 0);
    case 118:
      return reduce(RULE_64, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action350(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_65, 0);
    case 173:
      return reduce(RULE_65, 0);
    case 101:
      return reduce(RULE_65, 0);
    case 145:
      return reduce(RULE_65, 0);
    case 116:
      return reduce(RULE_65, 0);
    case 151:
      return reduce(RULE_65, 0);
    case 134:
      return reduce(RULE_65, 0);
    case 103:
      return reduce(RULE_65, 0);
    case 120:
      return reduce(RULE_65, 0);
    case 112:
      return reduce(RULE_65, 0);
    case 148:
      return reduce(RULE_65, 0);
    case 149:
      return reduce(RULE_65, 0);
    case 110:
      return reduce(RULE_65, 0);
    case 108:
      return reduce(RULE_65, 0);
    case 106:
      return reduce(RULE_65, 0);
    case 125:
      return reduce(RULE_65, 0);
    case 178:
      return reduce(RULE_65, 0);
    case 155:
      return reduce(RULE_65, 0);
    case 124:
      return reduce(RULE_65, 0);
    case 142:
      return reduce(RULE_65, 0);
    case 146:
      return reduce(RULE_65, 0);
    case 138:
      return reduce(RULE_65, 0);
    case 150:
      return reduce(RULE_65, 0);
    case 183:
      return reduce(RULE_65, 0);
    case 175:
      return reduce(RULE_65, 0);
    case 113:
      return reduce(RULE_65, 0);
    case 169:
      return reduce(RULE_65, 0);
    case 190:
      return reduce(RULE_65, 0);
    case 143:
      return reduce(RULE_65, 0);
    case 164:
      return reduce(RULE_65, 0);
    case 203:
      return reduce(RULE_65, 0);
    case 147:
      return reduce(RULE_65, 0);
    case 130:
      return reduce(RULE_65, 0);
    case 193:
      return reduce(RULE_65, 0);
    case 129:
      return reduce(RULE_65, 0);
    case 136:
      return reduce(RULE_65, 0);
    case 182:
      return reduce(RULE_65, 0);
    case 140:
      return reduce(RULE_65, 0);
    case 109:
      return reduce(RULE_65, 0);
    case 191:
      return reduce(RULE_65, 0);
    case 131:
      return reduce(RULE_65, 0);
    case 118:
      return reduce(RULE_65, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action351(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CARET, EXCLAIMATION_MARK_EQUALS, AMPERSAND, QUESTION_MARK, PIPE, DOUBLE_EQUALS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, DOUBLE_PIPE});
    }
  }

  private final boolean action352(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(555);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, RSQUARE, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto352(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 556;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action353(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto353(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 557;
    default: return -1;
    }
  }

  private final boolean action354(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto354(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 558;
    default: return -1;
    }
  }

  private final boolean action355(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto355(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 560;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action356(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(561);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action357(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto357(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 562;
    default: return -1;
    }
  }

  private final boolean action358(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(563);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto358(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 396;
    case 13: return 219;
    case 94: return 331;
    case 14: return 220;
    case 93: return 332;
    case 52: return 224;
    case 30: return 397;
    case 97: return 235;
    case 60: return 236;
    case 36: return 564;
    case 22: return 565;
    case 26: return 226;
    case 54: return 227;
    case 92: return 228;
    case 58: return 95;
    case 28: return 398;
    case 91: return 241;
    case 15: return 243;
    case 43: return 566;
    default: return -1;
    }
  }

  private final boolean action359(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(567);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto359(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 569;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 570;
    case 95: return 571;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 572;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 573;
    default: return -1;
    }
  }

  private final boolean action360(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(574);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action361(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_66, 0);
    case 156:
      return reduce(RULE_66, 0);
    case 102:
      return reduce(RULE_66, 0);
    case 101:
      return reduce(RULE_66, 0);
    case 154:
      return reduce(RULE_66, 0);
    case 181:
      return reduce(RULE_66, 0);
    case 174:
      return reduce(RULE_66, 0);
    case 184:
      return reduce(RULE_66, 0);
    case 201:
      return reduce(RULE_66, 0);
    case 202:
      return reduce(RULE_66, 0);
    case 132:
      return reduce(RULE_66, 0);
    case 185:
      return reduce(RULE_66, 0);
    case 133:
      return reduce(RULE_66, 0);
    case 205:
      return reduce(RULE_66, 0);
    case 168:
      return reduce(RULE_66, 0);
    case 196:
      return reduce(RULE_66, 0);
    case 194:
      return reduce(RULE_66, 0);
    case 199:
      return reduce(RULE_66, 0);
    case 200:
      return reduce(RULE_66, 0);
    case 192:
      return reduce(RULE_66, 0);
    case 165:
      return reduce(RULE_66, 0);
    case 98:
      return reduce(RULE_66, 0);
    case 155:
      return reduce(RULE_66, 0);
    case 142:
      return reduce(RULE_66, 0);
    case 189:
      return reduce(RULE_66, 0);
    case 183:
      return reduce(RULE_66, 0);
    case 186:
      return reduce(RULE_66, 0);
    case 163:
      return reduce(RULE_66, 0);
    case 198:
      return reduce(RULE_66, 0);
    case 175:
      return reduce(RULE_66, 0);
    case 100:
      return reduce(RULE_66, 0);
    case 128:
      return reduce(RULE_66, 0);
    case 171:
      return reduce(RULE_66, 0);
    case 190:
      return reduce(RULE_66, 0);
    case 169:
      return reduce(RULE_66, 0);
    case 179:
      return reduce(RULE_66, 0);
    case 164:
      return reduce(RULE_66, 0);
    case 203:
      return reduce(RULE_66, 0);
    case 172:
      return reduce(RULE_66, 0);
    case 147:
      return reduce(RULE_66, 0);
    case 157:
      return reduce(RULE_66, 0);
    case 195:
      return reduce(RULE_66, 0);
    case 207:
      return reduce(RULE_66, 0);
    case 193:
      return reduce(RULE_66, 0);
    case 99:
      return reduce(RULE_66, 0);
    case 115:
      return reduce(RULE_66, 0);
    case 119:
      return reduce(RULE_66, 0);
    case 182:
      return reduce(RULE_66, 0);
    case 158:
      return reduce(RULE_66, 0);
    case 131:
      return reduce(RULE_66, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action362(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(575);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action363(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(576);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action364(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(508);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(509);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(577);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 178:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_44, 1);
    case 146:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 116:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_44, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 148:
      return reduce(RULE_27, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_44, 1);
    case 118:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE_EQUALS, PERCENT, LANGLE, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action365(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(578);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(579);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 178:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_44, 0);
    case 146:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 116:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_44, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 148:
      return reduce(RULE_27, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_44, 0);
    case 118:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE_EQUALS, PERCENT, LANGLE, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action366(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(580);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action367(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(581);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action368(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(196);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 196:
      stateStack.addFirst(199);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(202);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(207);
      tokenStack.addFirst(token);
      return true;
    case 199:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 189:
      stateStack.addFirst(209);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(210);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 207:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_MINUS, DOUBLE_PLUS, INTEGER_LITERAL, MUTABLE_KEYWORD});
    }
  }

  private final int goto368(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 37: return 218;
    case 13: return 219;
    case 14: return 220;
    case 93: return 221;
    case 41: return 222;
    case 38: return 223;
    case 52: return 224;
    case 46: return 225;
    case 26: return 226;
    case 54: return 227;
    case 92: return 228;
    case 35: return 229;
    case 51: return 396;
    case 94: return 231;
    case 33: return 232;
    case 34: return 234;
    case 30: return 397;
    case 97: return 235;
    case 60: return 236;
    case 36: return 237;
    case 42: return 238;
    case 45: return 239;
    case 91: return 241;
    case 28: return 398;
    case 58: return 95;
    case 44: return 242;
    case 15: return 243;
    case 39: return 244;
    case 43: return 245;
    case 40: return 246;
    default: return -1;
    }
  }

  private final boolean action369(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 160:
      stateStack.addFirst(582);
      tokenStack.addFirst(token);
      return true;
    case 170:
      stateStack.addFirst(583);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {FINALLY_KEYWORD, CATCH_KEYWORD});
    }
  }

  private final boolean action370(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_67, 1);
    case 156:
      return reduce(RULE_67, 1);
    case 102:
      return reduce(RULE_67, 1);
    case 101:
      return reduce(RULE_67, 1);
    case 154:
      return reduce(RULE_67, 1);
    case 181:
      return reduce(RULE_67, 1);
    case 174:
      return reduce(RULE_67, 1);
    case 184:
      return reduce(RULE_67, 1);
    case 201:
      return reduce(RULE_67, 1);
    case 202:
      return reduce(RULE_67, 1);
    case 132:
      return reduce(RULE_67, 1);
    case 185:
      return reduce(RULE_67, 1);
    case 133:
      return reduce(RULE_67, 1);
    case 205:
      return reduce(RULE_67, 1);
    case 168:
      return reduce(RULE_67, 1);
    case 196:
      return reduce(RULE_67, 1);
    case 194:
      return reduce(RULE_67, 1);
    case 199:
      return reduce(RULE_67, 1);
    case 200:
      return reduce(RULE_67, 1);
    case 192:
      return reduce(RULE_67, 1);
    case 165:
      return reduce(RULE_67, 1);
    case 98:
      return reduce(RULE_67, 1);
    case 155:
      return reduce(RULE_67, 1);
    case 142:
      return reduce(RULE_67, 1);
    case 189:
      return reduce(RULE_67, 1);
    case 183:
      return reduce(RULE_67, 1);
    case 186:
      return reduce(RULE_67, 1);
    case 163:
      return reduce(RULE_67, 1);
    case 198:
      return reduce(RULE_67, 1);
    case 175:
      return reduce(RULE_67, 1);
    case 100:
      return reduce(RULE_67, 1);
    case 128:
      return reduce(RULE_67, 1);
    case 171:
      return reduce(RULE_67, 1);
    case 190:
      return reduce(RULE_67, 1);
    case 169:
      return reduce(RULE_67, 1);
    case 179:
      return reduce(RULE_67, 1);
    case 164:
      return reduce(RULE_67, 1);
    case 203:
      return reduce(RULE_67, 1);
    case 172:
      return reduce(RULE_67, 1);
    case 147:
      return reduce(RULE_67, 1);
    case 157:
      return reduce(RULE_67, 1);
    case 195:
      return reduce(RULE_67, 1);
    case 207:
      return reduce(RULE_67, 1);
    case 193:
      return reduce(RULE_67, 1);
    case 99:
      return reduce(RULE_67, 1);
    case 115:
      return reduce(RULE_67, 1);
    case 119:
      return reduce(RULE_67, 1);
    case 182:
      return reduce(RULE_67, 1);
    case 158:
      return reduce(RULE_67, 1);
    case 131:
      return reduce(RULE_67, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action371(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(584);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action372(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_68, 0);
    case 156:
      return reduce(RULE_68, 0);
    case 102:
      return reduce(RULE_68, 0);
    case 101:
      return reduce(RULE_68, 0);
    case 154:
      return reduce(RULE_68, 0);
    case 181:
      return reduce(RULE_68, 0);
    case 174:
      return reduce(RULE_68, 0);
    case 184:
      return reduce(RULE_68, 0);
    case 201:
      return reduce(RULE_68, 0);
    case 202:
      return reduce(RULE_68, 0);
    case 132:
      return reduce(RULE_68, 0);
    case 185:
      return reduce(RULE_68, 0);
    case 133:
      return reduce(RULE_68, 0);
    case 205:
      return reduce(RULE_68, 0);
    case 168:
      return reduce(RULE_68, 0);
    case 196:
      return reduce(RULE_68, 0);
    case 194:
      return reduce(RULE_68, 0);
    case 199:
      return reduce(RULE_68, 0);
    case 200:
      return reduce(RULE_68, 0);
    case 192:
      return reduce(RULE_68, 0);
    case 165:
      return reduce(RULE_68, 0);
    case 98:
      return reduce(RULE_68, 0);
    case 155:
      return reduce(RULE_68, 0);
    case 142:
      return reduce(RULE_68, 0);
    case 189:
      return reduce(RULE_68, 0);
    case 183:
      return reduce(RULE_68, 0);
    case 186:
      return reduce(RULE_68, 0);
    case 163:
      return reduce(RULE_68, 0);
    case 198:
      return reduce(RULE_68, 0);
    case 175:
      return reduce(RULE_68, 0);
    case 100:
      return reduce(RULE_68, 0);
    case 128:
      return reduce(RULE_68, 0);
    case 171:
      return reduce(RULE_68, 0);
    case 190:
      return reduce(RULE_68, 0);
    case 169:
      return reduce(RULE_68, 0);
    case 179:
      return reduce(RULE_68, 0);
    case 164:
      return reduce(RULE_68, 0);
    case 203:
      return reduce(RULE_68, 0);
    case 172:
      return reduce(RULE_68, 0);
    case 147:
      return reduce(RULE_68, 0);
    case 157:
      return reduce(RULE_68, 0);
    case 195:
      return reduce(RULE_68, 0);
    case 207:
      return reduce(RULE_68, 0);
    case 193:
      return reduce(RULE_68, 0);
    case 99:
      return reduce(RULE_68, 0);
    case 115:
      return reduce(RULE_68, 0);
    case 119:
      return reduce(RULE_68, 0);
    case 182:
      return reduce(RULE_68, 0);
    case 158:
      return reduce(RULE_68, 0);
    case 131:
      return reduce(RULE_68, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action373(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(585);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action374(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto374(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 586;
    default: return -1;
    }
  }

  private final boolean action375(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(587);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action376(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_41, 1);
    case 148:
      return reduce(RULE_41, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action377(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(401);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 132:
      return reduce(RULE_44, 0);
    case 150:
      return reduce(RULE_41, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 144:
      return reduce(RULE_44, 0);
    case 148:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {LPAREN, LSQUARE, SEMICOLON, DOUBLE_COLON, QUESTION_MARK_DOT, RPAREN, DOT});
    }
  }

  private final boolean action378(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 132:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 144:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {LPAREN, LSQUARE, DOUBLE_COLON, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action379(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(588);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action380(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto380(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 13: return 219;
    case 94: return 331;
    case 14: return 220;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 224;
    case 91: return 241;
    case 28: return 589;
    case 15: return 590;
    case 30: return 378;
    case 97: return 235;
    case 60: return 340;
    default: return -1;
    }
  }

  private final boolean action381(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 14);
    case 156:
      return reduce(RULE_39, 14);
    case 102:
      return reduce(RULE_39, 14);
    case 101:
      return reduce(RULE_39, 14);
    case 154:
      return reduce(RULE_39, 14);
    case 181:
      return reduce(RULE_39, 14);
    case 174:
      return reduce(RULE_39, 14);
    case 184:
      return reduce(RULE_39, 14);
    case 201:
      return reduce(RULE_39, 14);
    case 202:
      return reduce(RULE_39, 14);
    case 132:
      return reduce(RULE_39, 14);
    case 185:
      return reduce(RULE_39, 14);
    case 133:
      return reduce(RULE_39, 14);
    case 205:
      return reduce(RULE_39, 14);
    case 168:
      return reduce(RULE_39, 14);
    case 196:
      return reduce(RULE_39, 14);
    case 194:
      return reduce(RULE_39, 14);
    case 199:
      return reduce(RULE_39, 14);
    case 200:
      return reduce(RULE_39, 14);
    case 192:
      return reduce(RULE_39, 14);
    case 165:
      return reduce(RULE_39, 14);
    case 98:
      return reduce(RULE_39, 14);
    case 155:
      return reduce(RULE_39, 14);
    case 142:
      return reduce(RULE_39, 14);
    case 189:
      return reduce(RULE_39, 14);
    case 183:
      return reduce(RULE_39, 14);
    case 186:
      return reduce(RULE_39, 14);
    case 163:
      return reduce(RULE_39, 14);
    case 198:
      return reduce(RULE_39, 14);
    case 175:
      return reduce(RULE_39, 14);
    case 100:
      return reduce(RULE_39, 14);
    case 128:
      return reduce(RULE_39, 14);
    case 171:
      return reduce(RULE_39, 14);
    case 190:
      return reduce(RULE_39, 14);
    case 169:
      return reduce(RULE_39, 14);
    case 179:
      return reduce(RULE_39, 14);
    case 164:
      return reduce(RULE_39, 14);
    case 203:
      return reduce(RULE_39, 14);
    case 172:
      return reduce(RULE_39, 14);
    case 147:
      return reduce(RULE_39, 14);
    case 157:
      return reduce(RULE_39, 14);
    case 195:
      return reduce(RULE_39, 14);
    case 207:
      return reduce(RULE_39, 14);
    case 193:
      return reduce(RULE_39, 14);
    case 99:
      return reduce(RULE_39, 14);
    case 115:
      return reduce(RULE_39, 14);
    case 119:
      return reduce(RULE_39, 14);
    case 182:
      return reduce(RULE_39, 14);
    case 158:
      return reduce(RULE_39, 14);
    case 131:
      return reduce(RULE_39, 14);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action382(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(591);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action383(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto383(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 592;
    default: return -1;
    }
  }

  private final boolean action384(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(253);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE, LANGLE, DOT});
    }
  }

  private final int goto384(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 593;
    default: return -1;
    }
  }

  private final boolean action385(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto385(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 594;
    default: return -1;
    }
  }

  private final boolean action386(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_69, 0);
    case 173:
      return reduce(RULE_69, 0);
    case 101:
      return reduce(RULE_69, 0);
    case 145:
      return reduce(RULE_69, 0);
    case 116:
      return reduce(RULE_69, 0);
    case 151:
      return reduce(RULE_69, 0);
    case 134:
      return reduce(RULE_69, 0);
    case 132:
      return reduce(RULE_69, 0);
    case 103:
      return reduce(RULE_69, 0);
    case 133:
      return reduce(RULE_69, 0);
    case 120:
      return reduce(RULE_69, 0);
    case 112:
      return reduce(RULE_69, 0);
    case 148:
      return reduce(RULE_69, 0);
    case 149:
      return reduce(RULE_69, 0);
    case 110:
      return reduce(RULE_69, 0);
    case 108:
      return reduce(RULE_69, 0);
    case 106:
      return reduce(RULE_69, 0);
    case 125:
      return reduce(RULE_69, 0);
    case 178:
      return reduce(RULE_69, 0);
    case 155:
      return reduce(RULE_69, 0);
    case 124:
      return reduce(RULE_69, 0);
    case 142:
      return reduce(RULE_69, 0);
    case 146:
      return reduce(RULE_69, 0);
    case 138:
      return reduce(RULE_69, 0);
    case 150:
      return reduce(RULE_69, 0);
    case 183:
      return reduce(RULE_69, 0);
    case 175:
      return reduce(RULE_69, 0);
    case 113:
      return reduce(RULE_69, 0);
    case 169:
      return reduce(RULE_69, 0);
    case 190:
      return reduce(RULE_69, 0);
    case 143:
      return reduce(RULE_69, 0);
    case 164:
      return reduce(RULE_69, 0);
    case 203:
      return reduce(RULE_69, 0);
    case 147:
      return reduce(RULE_69, 0);
    case 130:
      return reduce(RULE_69, 0);
    case 193:
      return reduce(RULE_69, 0);
    case 136:
      return reduce(RULE_69, 0);
    case 129:
      return reduce(RULE_69, 0);
    case 144:
      return reduce(RULE_69, 0);
    case 182:
      return reduce(RULE_69, 0);
    case 140:
      return reduce(RULE_69, 0);
    case 122:
      return reduce(RULE_69, 0);
    case 109:
      return reduce(RULE_69, 0);
    case 191:
      return reduce(RULE_69, 0);
    case 131:
      return reduce(RULE_69, 0);
    case 118:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, LANGLE, PERCENT, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action387(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      return reduce(RULE_70, 0);
    case 150:
      return reduce(RULE_70, 0);
    case 109:
      return reduce(RULE_70, 0);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action388(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      return reduce(RULE_70, 1);
    case 150:
      return reduce(RULE_70, 1);
    case 109:
      return reduce(RULE_70, 1);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action389(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(595);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(596);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(597);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action390(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 12);
    case 156:
      return reduce(RULE_39, 12);
    case 102:
      return reduce(RULE_39, 12);
    case 101:
      return reduce(RULE_39, 12);
    case 154:
      return reduce(RULE_39, 12);
    case 181:
      return reduce(RULE_39, 12);
    case 174:
      return reduce(RULE_39, 12);
    case 184:
      return reduce(RULE_39, 12);
    case 201:
      return reduce(RULE_39, 12);
    case 202:
      return reduce(RULE_39, 12);
    case 132:
      return reduce(RULE_39, 12);
    case 185:
      return reduce(RULE_39, 12);
    case 133:
      return reduce(RULE_39, 12);
    case 205:
      return reduce(RULE_39, 12);
    case 168:
      return reduce(RULE_39, 12);
    case 196:
      return reduce(RULE_39, 12);
    case 194:
      return reduce(RULE_39, 12);
    case 199:
      return reduce(RULE_39, 12);
    case 200:
      return reduce(RULE_39, 12);
    case 192:
      return reduce(RULE_39, 12);
    case 165:
      return reduce(RULE_39, 12);
    case 98:
      return reduce(RULE_39, 12);
    case 155:
      return reduce(RULE_39, 12);
    case 142:
      return reduce(RULE_39, 12);
    case 189:
      return reduce(RULE_39, 12);
    case 183:
      return reduce(RULE_39, 12);
    case 186:
      return reduce(RULE_39, 12);
    case 163:
      return reduce(RULE_39, 12);
    case 198:
      return reduce(RULE_39, 12);
    case 175:
      return reduce(RULE_39, 12);
    case 100:
      return reduce(RULE_39, 12);
    case 128:
      return reduce(RULE_39, 12);
    case 171:
      return reduce(RULE_39, 12);
    case 190:
      return reduce(RULE_39, 12);
    case 169:
      return reduce(RULE_39, 12);
    case 179:
      return reduce(RULE_39, 12);
    case 164:
      return reduce(RULE_39, 12);
    case 203:
      return reduce(RULE_39, 12);
    case 172:
      return reduce(RULE_39, 12);
    case 147:
      return reduce(RULE_39, 12);
    case 157:
      return reduce(RULE_39, 12);
    case 195:
      return reduce(RULE_39, 12);
    case 207:
      return reduce(RULE_39, 12);
    case 193:
      return reduce(RULE_39, 12);
    case 99:
      return reduce(RULE_39, 12);
    case 115:
      return reduce(RULE_39, 12);
    case 119:
      return reduce(RULE_39, 12);
    case 182:
      return reduce(RULE_39, 12);
    case 158:
      return reduce(RULE_39, 12);
    case 131:
      return reduce(RULE_39, 12);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action391(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto391(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 598;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action392(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(599);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action393(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(600);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(601);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(597);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action394(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_38, 0);
    case 154:
      return reduce(RULE_38, 0);
    case 188:
      return reduce(RULE_38, 0);
    case 181:
      return reduce(RULE_38, 0);
    case 174:
      return reduce(RULE_38, 0);
    case 184:
      return reduce(RULE_38, 0);
    case 160:
      return reduce(RULE_38, 0);
    case 185:
      return reduce(RULE_38, 0);
    case 205:
      return reduce(RULE_38, 0);
    case 196:
      return reduce(RULE_38, 0);
    case 98:
      return reduce(RULE_38, 0);
    case 155:
      return reduce(RULE_38, 0);
    case 142:
      return reduce(RULE_38, 0);
    case 186:
      return reduce(RULE_38, 0);
    case 175:
      return reduce(RULE_38, 0);
    case 128:
      return reduce(RULE_38, 0);
    case 179:
      return reduce(RULE_38, 0);
    case 164:
      return reduce(RULE_38, 0);
    case 203:
      return reduce(RULE_38, 0);
    case 172:
      return reduce(RULE_38, 0);
    case 195:
      return reduce(RULE_38, 0);
    case 157:
      return reduce(RULE_38, 0);
    case 193:
      return reduce(RULE_38, 0);
    case 158:
      return reduce(RULE_38, 0);
    case 131:
      return reduce(RULE_38, 0);
    case 156:
      return reduce(RULE_38, 0);
    case 173:
      return reduce(RULE_38, 0);
    case 101:
      return reduce(RULE_38, 0);
    case 102:
      return reduce(RULE_38, 0);
    case 201:
      return reduce(RULE_38, 0);
    case 132:
      return reduce(RULE_38, 0);
    case 202:
      return reduce(RULE_38, 0);
    case 133:
      return reduce(RULE_38, 0);
    case 168:
      return reduce(RULE_38, 0);
    case 206:
      return reduce(RULE_38, 0);
    case 194:
      return reduce(RULE_38, 0);
    case 199:
      return reduce(RULE_38, 0);
    case 192:
      return reduce(RULE_38, 0);
    case 200:
      return reduce(RULE_38, 0);
    case 165:
      return reduce(RULE_38, 0);
    case 150:
      return reduce(RULE_38, 0);
    case 189:
      return reduce(RULE_38, 0);
    case 183:
      return reduce(RULE_38, 0);
    case 163:
      return reduce(RULE_38, 0);
    case 198:
      return reduce(RULE_38, 0);
    case 100:
      return reduce(RULE_38, 0);
    case 171:
      return reduce(RULE_38, 0);
    case 169:
      return reduce(RULE_38, 0);
    case 190:
      return reduce(RULE_38, 0);
    case 166:
      return reduce(RULE_38, 0);
    case 170:
      return reduce(RULE_38, 0);
    case 147:
      return reduce(RULE_38, 0);
    case 207:
      return reduce(RULE_38, 0);
    case 99:
      return reduce(RULE_38, 0);
    case 115:
      return reduce(RULE_38, 0);
    case 119:
      return reduce(RULE_38, 0);
    case 182:
      return reduce(RULE_38, 0);
    case 191:
      return reduce(RULE_38, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, PROPERTY_KEYWORD, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, CATCH_KEYWORD, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, VOID_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, ELSE_KEYWORD, FINALLY_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final boolean action395(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_43, 1);
    case 156:
      return reduce(RULE_43, 1);
    case 102:
      return reduce(RULE_43, 1);
    case 101:
      return reduce(RULE_43, 1);
    case 154:
      return reduce(RULE_43, 1);
    case 181:
      return reduce(RULE_43, 1);
    case 174:
      return reduce(RULE_43, 1);
    case 184:
      return reduce(RULE_43, 1);
    case 201:
      return reduce(RULE_43, 1);
    case 202:
      return reduce(RULE_43, 1);
    case 132:
      return reduce(RULE_43, 1);
    case 185:
      return reduce(RULE_43, 1);
    case 133:
      return reduce(RULE_43, 1);
    case 205:
      return reduce(RULE_43, 1);
    case 168:
      return reduce(RULE_43, 1);
    case 196:
      return reduce(RULE_43, 1);
    case 194:
      return reduce(RULE_43, 1);
    case 199:
      return reduce(RULE_43, 1);
    case 200:
      return reduce(RULE_43, 1);
    case 192:
      return reduce(RULE_43, 1);
    case 165:
      return reduce(RULE_43, 1);
    case 98:
      return reduce(RULE_43, 1);
    case 155:
      return reduce(RULE_43, 1);
    case 142:
      return reduce(RULE_43, 1);
    case 189:
      return reduce(RULE_43, 1);
    case 183:
      return reduce(RULE_43, 1);
    case 186:
      return reduce(RULE_43, 1);
    case 163:
      return reduce(RULE_43, 1);
    case 198:
      return reduce(RULE_43, 1);
    case 175:
      return reduce(RULE_43, 1);
    case 100:
      return reduce(RULE_43, 1);
    case 128:
      return reduce(RULE_43, 1);
    case 171:
      return reduce(RULE_43, 1);
    case 190:
      return reduce(RULE_43, 1);
    case 169:
      return reduce(RULE_43, 1);
    case 179:
      return reduce(RULE_43, 1);
    case 164:
      return reduce(RULE_43, 1);
    case 203:
      return reduce(RULE_43, 1);
    case 172:
      return reduce(RULE_43, 1);
    case 147:
      return reduce(RULE_43, 1);
    case 157:
      return reduce(RULE_43, 1);
    case 195:
      return reduce(RULE_43, 1);
    case 207:
      return reduce(RULE_43, 1);
    case 193:
      return reduce(RULE_43, 1);
    case 99:
      return reduce(RULE_43, 1);
    case 115:
      return reduce(RULE_43, 1);
    case 119:
      return reduce(RULE_43, 1);
    case 182:
      return reduce(RULE_43, 1);
    case 158:
      return reduce(RULE_43, 1);
    case 131:
      return reduce(RULE_43, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action396(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto396(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 389;
    default: return -1;
    }
  }

  private final boolean action397(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 132:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 144:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {LPAREN, NAME, LSQUARE, UNDERSCORE, DOUBLE_COLON, QUESTION_MARK_DOT, DOT});
    }
  }

  private final int goto397(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 393;
    default: return -1;
    }
  }

  private final boolean action398(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(401);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(253);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(602);
      tokenStack.addFirst(token);
      return true;
    case 123:
      return reduce(RULE_41, 0);
    case 117:
      return reduce(RULE_41, 0);
    case 107:
      return reduce(RULE_41, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 127:
      return reduce(RULE_41, 0);
    case 104:
      return reduce(RULE_41, 0);
    case 121:
      return reduce(RULE_41, 0);
    case 114:
      return reduce(RULE_41, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 135:
      return reduce(RULE_41, 0);
    case 141:
      return reduce(RULE_41, 0);
    case 152:
      return reduce(RULE_41, 0);
    case 137:
      return reduce(RULE_41, 0);
    case 139:
      return reduce(RULE_41, 0);
    case 144:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, NAME, CARET_EQUALS, UNDERSCORE, DOUBLE_COLON, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS, LPAREN, MINUS_EQUALS, LSQUARE, STAR_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, QUESTION_MARK_DOT, LANGLE, DOT, COMMA});
    }
  }

  private final int goto398(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 403;
    default: return -1;
    }
  }

  private final boolean action399(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(603);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action400(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_69, 1);
    case 173:
      return reduce(RULE_69, 1);
    case 101:
      return reduce(RULE_69, 1);
    case 145:
      return reduce(RULE_69, 1);
    case 116:
      return reduce(RULE_69, 1);
    case 151:
      return reduce(RULE_69, 1);
    case 132:
      return reduce(RULE_69, 1);
    case 134:
      return reduce(RULE_69, 1);
    case 103:
      return reduce(RULE_69, 1);
    case 133:
      return reduce(RULE_69, 1);
    case 120:
      return reduce(RULE_69, 1);
    case 112:
      return reduce(RULE_69, 1);
    case 148:
      return reduce(RULE_69, 1);
    case 149:
      return reduce(RULE_69, 1);
    case 110:
      return reduce(RULE_69, 1);
    case 108:
      return reduce(RULE_69, 1);
    case 106:
      return reduce(RULE_69, 1);
    case 125:
      return reduce(RULE_69, 1);
    case 178:
      return reduce(RULE_69, 1);
    case 155:
      return reduce(RULE_69, 1);
    case 124:
      return reduce(RULE_69, 1);
    case 142:
      return reduce(RULE_69, 1);
    case 146:
      return reduce(RULE_69, 1);
    case 138:
      return reduce(RULE_69, 1);
    case 150:
      return reduce(RULE_69, 1);
    case 183:
      return reduce(RULE_69, 1);
    case 175:
      return reduce(RULE_69, 1);
    case 113:
      return reduce(RULE_69, 1);
    case 169:
      return reduce(RULE_69, 1);
    case 190:
      return reduce(RULE_69, 1);
    case 143:
      return reduce(RULE_69, 1);
    case 164:
      return reduce(RULE_69, 1);
    case 203:
      return reduce(RULE_69, 1);
    case 147:
      return reduce(RULE_69, 1);
    case 130:
      return reduce(RULE_69, 1);
    case 193:
      return reduce(RULE_69, 1);
    case 144:
      return reduce(RULE_69, 1);
    case 136:
      return reduce(RULE_69, 1);
    case 129:
      return reduce(RULE_69, 1);
    case 182:
      return reduce(RULE_69, 1);
    case 122:
      return reduce(RULE_69, 1);
    case 140:
      return reduce(RULE_69, 1);
    case 109:
      return reduce(RULE_69, 1);
    case 191:
      return reduce(RULE_69, 1);
    case 131:
      return reduce(RULE_69, 1);
    case 118:
      return reduce(RULE_69, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action401(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto401(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 604;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action402(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto402(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 56: return 448;
    case 13: return 219;
    case 14: return 220;
    case 94: return 331;
    case 93: return 332;
    case 52: return 224;
    case 29: return 449;
    case 30: return 605;
    case 97: return 235;
    case 60: return 236;
    case 54: return 227;
    case 92: return 228;
    case 91: return 241;
    case 28: return 606;
    case 58: return 95;
    case 15: return 607;
    default: return -1;
    }
  }

  private final boolean action403(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(608);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(609);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(597);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action404(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto404(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 610;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action405(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(611);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action406(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(612);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action407(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto407(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 613;
    default: return -1;
    }
  }

  private final boolean action408(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto408(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 614;
    case 26: return 615;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 17: return 616;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action409(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto409(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 617;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action410(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto410(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 618;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action411(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto411(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 619;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action412(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto412(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 620;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action413(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto413(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 621;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action414(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto414(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 622;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action415(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto415(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 623;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action416(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto416(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 624;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action417(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto417(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 625;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action418(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto418(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 626;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action419(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto419(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 627;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action420(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto420(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 628;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action421(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 11);
    case 156:
      return reduce(RULE_39, 11);
    case 102:
      return reduce(RULE_39, 11);
    case 101:
      return reduce(RULE_39, 11);
    case 154:
      return reduce(RULE_39, 11);
    case 181:
      return reduce(RULE_39, 11);
    case 174:
      return reduce(RULE_39, 11);
    case 184:
      return reduce(RULE_39, 11);
    case 201:
      return reduce(RULE_39, 11);
    case 202:
      return reduce(RULE_39, 11);
    case 132:
      return reduce(RULE_39, 11);
    case 185:
      return reduce(RULE_39, 11);
    case 133:
      return reduce(RULE_39, 11);
    case 205:
      return reduce(RULE_39, 11);
    case 168:
      return reduce(RULE_39, 11);
    case 196:
      return reduce(RULE_39, 11);
    case 194:
      return reduce(RULE_39, 11);
    case 199:
      return reduce(RULE_39, 11);
    case 200:
      return reduce(RULE_39, 11);
    case 192:
      return reduce(RULE_39, 11);
    case 165:
      return reduce(RULE_39, 11);
    case 98:
      return reduce(RULE_39, 11);
    case 155:
      return reduce(RULE_39, 11);
    case 142:
      return reduce(RULE_39, 11);
    case 189:
      return reduce(RULE_39, 11);
    case 183:
      return reduce(RULE_39, 11);
    case 186:
      return reduce(RULE_39, 11);
    case 163:
      return reduce(RULE_39, 11);
    case 198:
      return reduce(RULE_39, 11);
    case 175:
      return reduce(RULE_39, 11);
    case 100:
      return reduce(RULE_39, 11);
    case 128:
      return reduce(RULE_39, 11);
    case 171:
      return reduce(RULE_39, 11);
    case 190:
      return reduce(RULE_39, 11);
    case 169:
      return reduce(RULE_39, 11);
    case 179:
      return reduce(RULE_39, 11);
    case 164:
      return reduce(RULE_39, 11);
    case 203:
      return reduce(RULE_39, 11);
    case 172:
      return reduce(RULE_39, 11);
    case 147:
      return reduce(RULE_39, 11);
    case 157:
      return reduce(RULE_39, 11);
    case 195:
      return reduce(RULE_39, 11);
    case 207:
      return reduce(RULE_39, 11);
    case 193:
      return reduce(RULE_39, 11);
    case 99:
      return reduce(RULE_39, 11);
    case 115:
      return reduce(RULE_39, 11);
    case 119:
      return reduce(RULE_39, 11);
    case 182:
      return reduce(RULE_39, 11);
    case 158:
      return reduce(RULE_39, 11);
    case 131:
      return reduce(RULE_39, 11);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action422(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action423(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto423(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 630;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action424(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_71, 0);
    case 101:
      return reduce(RULE_71, 0);
    case 188:
      return reduce(RULE_71, 0);
    case 181:
      return reduce(RULE_71, 0);
    case 201:
      return reduce(RULE_71, 0);
    case 132:
      return reduce(RULE_71, 0);
    case 202:
      return reduce(RULE_71, 0);
    case 133:
      return reduce(RULE_71, 0);
    case 205:
      return reduce(RULE_71, 0);
    case 206:
      return reduce(RULE_71, 0);
    case 192:
      return reduce(RULE_71, 0);
    case 200:
      return reduce(RULE_71, 0);
    case 165:
      return reduce(RULE_71, 0);
    case 98:
      return reduce(RULE_71, 0);
    case 155:
      return reduce(RULE_71, 0);
    case 142:
      return reduce(RULE_71, 0);
    case 183:
      return reduce(RULE_71, 0);
    case 186:
      return reduce(RULE_71, 0);
    case 175:
      return reduce(RULE_71, 0);
    case 128:
      return reduce(RULE_71, 0);
    case 171:
      return reduce(RULE_71, 0);
    case 190:
      return reduce(RULE_71, 0);
    case 169:
      return reduce(RULE_71, 0);
    case 179:
      return reduce(RULE_71, 0);
    case 164:
      return reduce(RULE_71, 0);
    case 203:
      return reduce(RULE_71, 0);
    case 147:
      return reduce(RULE_71, 0);
    case 193:
      return reduce(RULE_71, 0);
    case 182:
      return reduce(RULE_71, 0);
    case 158:
      return reduce(RULE_71, 0);
    case 131:
      return reduce(RULE_71, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action425(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 150:
      return reduce(RULE_34, 0);
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto425(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 631;
    default: return -1;
    }
  }

  private final boolean action426(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto426(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 632;
    default: return -1;
    }
  }

  private final boolean action427(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto427(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 633;
    default: return -1;
    }
  }

  private final boolean action428(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(634);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(192);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(635);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN, EQUALS, SEMICOLON});
    }
  }

  private final int goto428(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 636;
    default: return -1;
    }
  }

  private final boolean action429(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto429(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 53: return 637;
    case 54: return 271;
    case 58: return 638;
    case 28: return 273;
    case 30: return 274;
    case 59: return 639;
    case 60: return 99;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action430(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto430(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 283;
    case 64: return 284;
    case 62: return 640;
    case 68: return 175;
    case 30: return 286;
    case 67: return 177;
    case 60: return 99;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 49: return 178;
    case 54: return 94;
    case 28: return 289;
    case 58: return 95;
    case 63: return 641;
    case 59: return 98;
    case 65: return 180;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action431(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 39);
    case 101:
      return reduce(RULE_15, 39);
    case 154:
      return reduce(RULE_15, 39);
    case 145:
      return reduce(RULE_15, 39);
    case 132:
      return reduce(RULE_15, 39);
    case 167:
      return reduce(RULE_15, 39);
    case 103:
      return reduce(RULE_15, 39);
    case 120:
      return reduce(RULE_15, 39);
    case 194:
      return reduce(RULE_15, 39);
    case 112:
      return reduce(RULE_15, 39);
    case 148:
      return reduce(RULE_15, 39);
    case 110:
      return reduce(RULE_15, 39);
    case 149:
      return reduce(RULE_15, 39);
    case 108:
      return reduce(RULE_15, 39);
    case 106:
      return reduce(RULE_15, 39);
    case 125:
      return reduce(RULE_15, 39);
    case 105:
      return reduce(RULE_15, 39);
    case 98:
      return reduce(RULE_15, 39);
    case 142:
      return reduce(RULE_15, 39);
    case 138:
      return reduce(RULE_15, 39);
    case 155:
      return reduce(RULE_15, 39);
    case 150:
      return reduce(RULE_15, 39);
    case 197:
      return reduce(RULE_15, 39);
    case 111:
      return reduce(RULE_15, 39);
    case 183:
      return reduce(RULE_15, 39);
    case 175:
      return reduce(RULE_15, 39);
    case 128:
      return reduce(RULE_15, 39);
    case 169:
      return reduce(RULE_15, 39);
    case 190:
      return reduce(RULE_15, 39);
    case 143:
      return reduce(RULE_15, 39);
    case 164:
      return reduce(RULE_15, 39);
    case 203:
      return reduce(RULE_15, 39);
    case 147:
      return reduce(RULE_15, 39);
    case 193:
      return reduce(RULE_15, 39);
    case 182:
      return reduce(RULE_15, 39);
    case 109:
      return reduce(RULE_15, 39);
    case 191:
      return reduce(RULE_15, 39);
    case 131:
      return reduce(RULE_15, 39);
    case 118:
      return reduce(RULE_15, 39);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action432(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 23);
    case 101:
      return reduce(RULE_15, 23);
    case 154:
      return reduce(RULE_15, 23);
    case 145:
      return reduce(RULE_15, 23);
    case 132:
      return reduce(RULE_15, 23);
    case 167:
      return reduce(RULE_15, 23);
    case 103:
      return reduce(RULE_15, 23);
    case 120:
      return reduce(RULE_15, 23);
    case 194:
      return reduce(RULE_15, 23);
    case 112:
      return reduce(RULE_15, 23);
    case 148:
      return reduce(RULE_15, 23);
    case 110:
      return reduce(RULE_15, 23);
    case 149:
      return reduce(RULE_15, 23);
    case 108:
      return reduce(RULE_15, 23);
    case 106:
      return reduce(RULE_15, 23);
    case 125:
      return reduce(RULE_15, 23);
    case 105:
      return reduce(RULE_15, 23);
    case 98:
      return reduce(RULE_15, 23);
    case 138:
      return reduce(RULE_15, 23);
    case 142:
      return reduce(RULE_15, 23);
    case 155:
      return reduce(RULE_15, 23);
    case 150:
      return reduce(RULE_15, 23);
    case 197:
      return reduce(RULE_15, 23);
    case 111:
      return reduce(RULE_15, 23);
    case 183:
      return reduce(RULE_15, 23);
    case 175:
      return reduce(RULE_15, 23);
    case 128:
      return reduce(RULE_15, 23);
    case 169:
      return reduce(RULE_15, 23);
    case 190:
      return reduce(RULE_15, 23);
    case 143:
      return reduce(RULE_15, 23);
    case 164:
      return reduce(RULE_15, 23);
    case 203:
      return reduce(RULE_15, 23);
    case 147:
      return reduce(RULE_15, 23);
    case 193:
      return reduce(RULE_15, 23);
    case 182:
      return reduce(RULE_15, 23);
    case 109:
      return reduce(RULE_15, 23);
    case 191:
      return reduce(RULE_15, 23);
    case 131:
      return reduce(RULE_15, 23);
    case 118:
      return reduce(RULE_15, 23);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action433(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_47, 2);
    case 101:
      return reduce(RULE_47, 2);
    case 154:
      return reduce(RULE_47, 2);
    case 145:
      return reduce(RULE_47, 2);
    case 132:
      return reduce(RULE_47, 2);
    case 167:
      return reduce(RULE_47, 2);
    case 103:
      return reduce(RULE_47, 2);
    case 120:
      return reduce(RULE_47, 2);
    case 194:
      return reduce(RULE_47, 2);
    case 112:
      return reduce(RULE_47, 2);
    case 148:
      return reduce(RULE_47, 2);
    case 149:
      return reduce(RULE_47, 2);
    case 110:
      return reduce(RULE_47, 2);
    case 108:
      return reduce(RULE_47, 2);
    case 106:
      return reduce(RULE_47, 2);
    case 125:
      return reduce(RULE_47, 2);
    case 105:
      return reduce(RULE_47, 2);
    case 98:
      return reduce(RULE_47, 2);
    case 138:
      return reduce(RULE_47, 2);
    case 142:
      return reduce(RULE_47, 2);
    case 155:
      return reduce(RULE_47, 2);
    case 150:
      return reduce(RULE_47, 2);
    case 197:
      return reduce(RULE_47, 2);
    case 111:
      return reduce(RULE_47, 2);
    case 183:
      return reduce(RULE_47, 2);
    case 175:
      return reduce(RULE_47, 2);
    case 128:
      return reduce(RULE_47, 2);
    case 169:
      return reduce(RULE_47, 2);
    case 190:
      return reduce(RULE_47, 2);
    case 143:
      return reduce(RULE_47, 2);
    case 164:
      return reduce(RULE_47, 2);
    case 203:
      return reduce(RULE_47, 2);
    case 147:
      return reduce(RULE_47, 2);
    case 193:
      return reduce(RULE_47, 2);
    case 182:
      return reduce(RULE_47, 2);
    case 109:
      return reduce(RULE_47, 2);
    case 191:
      return reduce(RULE_47, 2);
    case 131:
      return reduce(RULE_47, 2);
    case 118:
      return reduce(RULE_47, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action434(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_48, 1);
    case 154:
      return reduce(RULE_48, 1);
    case 181:
      return reduce(RULE_48, 1);
    case 184:
      return reduce(RULE_48, 1);
    case 134:
      return reduce(RULE_48, 1);
    case 153:
      return reduce(RULE_48, 1);
    case 185:
      return reduce(RULE_48, 1);
    case 205:
      return reduce(RULE_48, 1);
    case 148:
      return reduce(RULE_48, 1);
    case 125:
      return reduce(RULE_48, 1);
    case 105:
      return reduce(RULE_48, 1);
    case 98:
      return reduce(RULE_48, 1);
    case 138:
      return reduce(RULE_48, 1);
    case 155:
      return reduce(RULE_48, 1);
    case 124:
      return reduce(RULE_48, 1);
    case 142:
      return reduce(RULE_48, 1);
    case 186:
      return reduce(RULE_48, 1);
    case 175:
      return reduce(RULE_48, 1);
    case 128:
      return reduce(RULE_48, 1);
    case 143:
      return reduce(RULE_48, 1);
    case 179:
      return reduce(RULE_48, 1);
    case 164:
      return reduce(RULE_48, 1);
    case 203:
      return reduce(RULE_48, 1);
    case 195:
      return reduce(RULE_48, 1);
    case 193:
      return reduce(RULE_48, 1);
    case 158:
      return reduce(RULE_48, 1);
    case 131:
      return reduce(RULE_48, 1);
    case 156:
      return reduce(RULE_48, 1);
    case 173:
      return reduce(RULE_48, 1);
    case 101:
      return reduce(RULE_48, 1);
    case 102:
      return reduce(RULE_48, 1);
    case 145:
      return reduce(RULE_48, 1);
    case 201:
      return reduce(RULE_48, 1);
    case 132:
      return reduce(RULE_48, 1);
    case 202:
      return reduce(RULE_48, 1);
    case 167:
      return reduce(RULE_48, 1);
    case 103:
      return reduce(RULE_48, 1);
    case 133:
      return reduce(RULE_48, 1);
    case 120:
      return reduce(RULE_48, 1);
    case 168:
      return reduce(RULE_48, 1);
    case 194:
      return reduce(RULE_48, 1);
    case 112:
      return reduce(RULE_48, 1);
    case 149:
      return reduce(RULE_48, 1);
    case 110:
      return reduce(RULE_48, 1);
    case 192:
      return reduce(RULE_48, 1);
    case 200:
      return reduce(RULE_48, 1);
    case 106:
      return reduce(RULE_48, 1);
    case 108:
      return reduce(RULE_48, 1);
    case 165:
      return reduce(RULE_48, 1);
    case 197:
      return reduce(RULE_48, 1);
    case 150:
      return reduce(RULE_48, 1);
    case 111:
      return reduce(RULE_48, 1);
    case 183:
      return reduce(RULE_48, 1);
    case 198:
      return reduce(RULE_48, 1);
    case 100:
      return reduce(RULE_48, 1);
    case 171:
      return reduce(RULE_48, 1);
    case 169:
      return reduce(RULE_48, 1);
    case 190:
      return reduce(RULE_48, 1);
    case 176:
      return reduce(RULE_48, 1);
    case 147:
      return reduce(RULE_48, 1);
    case 99:
      return reduce(RULE_48, 1);
    case 182:
      return reduce(RULE_48, 1);
    case 109:
      return reduce(RULE_48, 1);
    case 191:
      return reduce(RULE_48, 1);
    case 118:
      return reduce(RULE_48, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, PIPE, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action435(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto435(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 642;
    default: return -1;
    }
  }

  private final boolean action436(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto436(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 277;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    case 47: return 643;
    default: return -1;
    }
  }

  private final boolean action437(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto437(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 277;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    case 47: return 644;
    default: return -1;
    }
  }

  private final boolean action438(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(645);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action439(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_21, 1);
    case 101:
      return reduce(RULE_21, 1);
    case 154:
      return reduce(RULE_21, 1);
    case 145:
      return reduce(RULE_21, 1);
    case 132:
      return reduce(RULE_21, 1);
    case 167:
      return reduce(RULE_21, 1);
    case 103:
      return reduce(RULE_21, 1);
    case 120:
      return reduce(RULE_21, 1);
    case 194:
      return reduce(RULE_21, 1);
    case 112:
      return reduce(RULE_21, 1);
    case 148:
      return reduce(RULE_21, 1);
    case 110:
      return reduce(RULE_21, 1);
    case 149:
      return reduce(RULE_21, 1);
    case 108:
      return reduce(RULE_21, 1);
    case 106:
      return reduce(RULE_21, 1);
    case 125:
      return reduce(RULE_21, 1);
    case 105:
      return reduce(RULE_21, 1);
    case 98:
      return reduce(RULE_21, 1);
    case 138:
      return reduce(RULE_21, 1);
    case 142:
      return reduce(RULE_21, 1);
    case 155:
      return reduce(RULE_21, 1);
    case 150:
      return reduce(RULE_21, 1);
    case 197:
      return reduce(RULE_21, 1);
    case 111:
      return reduce(RULE_21, 1);
    case 183:
      return reduce(RULE_21, 1);
    case 175:
      return reduce(RULE_21, 1);
    case 128:
      return reduce(RULE_21, 1);
    case 169:
      return reduce(RULE_21, 1);
    case 190:
      return reduce(RULE_21, 1);
    case 143:
      return reduce(RULE_21, 1);
    case 164:
      return reduce(RULE_21, 1);
    case 203:
      return reduce(RULE_21, 1);
    case 147:
      return reduce(RULE_21, 1);
    case 193:
      return reduce(RULE_21, 1);
    case 182:
      return reduce(RULE_21, 1);
    case 109:
      return reduce(RULE_21, 1);
    case 191:
      return reduce(RULE_21, 1);
    case 131:
      return reduce(RULE_21, 1);
    case 118:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action440(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 1);
    case 154:
      return reduce(RULE_22, 1);
    case 181:
      return reduce(RULE_22, 1);
    case 184:
      return reduce(RULE_22, 1);
    case 134:
      return reduce(RULE_22, 1);
    case 153:
      return reduce(RULE_22, 1);
    case 185:
      return reduce(RULE_22, 1);
    case 205:
      return reduce(RULE_22, 1);
    case 148:
      return reduce(RULE_22, 1);
    case 125:
      return reduce(RULE_22, 1);
    case 105:
      return reduce(RULE_22, 1);
    case 98:
      return reduce(RULE_22, 1);
    case 138:
      return reduce(RULE_22, 1);
    case 155:
      return reduce(RULE_22, 1);
    case 124:
      return reduce(RULE_22, 1);
    case 142:
      return reduce(RULE_22, 1);
    case 186:
      return reduce(RULE_22, 1);
    case 175:
      return reduce(RULE_22, 1);
    case 128:
      return reduce(RULE_22, 1);
    case 143:
      return reduce(RULE_22, 1);
    case 179:
      return reduce(RULE_22, 1);
    case 164:
      return reduce(RULE_22, 1);
    case 203:
      return reduce(RULE_22, 1);
    case 195:
      return reduce(RULE_22, 1);
    case 193:
      return reduce(RULE_22, 1);
    case 158:
      return reduce(RULE_22, 1);
    case 131:
      return reduce(RULE_22, 1);
    case 156:
      return reduce(RULE_22, 1);
    case 173:
      return reduce(RULE_22, 1);
    case 101:
      return reduce(RULE_22, 1);
    case 102:
      return reduce(RULE_22, 1);
    case 145:
      return reduce(RULE_22, 1);
    case 201:
      return reduce(RULE_22, 1);
    case 132:
      return reduce(RULE_22, 1);
    case 202:
      return reduce(RULE_22, 1);
    case 167:
      return reduce(RULE_22, 1);
    case 103:
      return reduce(RULE_22, 1);
    case 133:
      return reduce(RULE_22, 1);
    case 120:
      return reduce(RULE_22, 1);
    case 168:
      return reduce(RULE_22, 1);
    case 194:
      return reduce(RULE_22, 1);
    case 112:
      return reduce(RULE_22, 1);
    case 149:
      return reduce(RULE_22, 1);
    case 110:
      return reduce(RULE_22, 1);
    case 192:
      return reduce(RULE_22, 1);
    case 200:
      return reduce(RULE_22, 1);
    case 106:
      return reduce(RULE_22, 1);
    case 108:
      return reduce(RULE_22, 1);
    case 165:
      return reduce(RULE_22, 1);
    case 197:
      return reduce(RULE_22, 1);
    case 150:
      return reduce(RULE_22, 1);
    case 111:
      return reduce(RULE_22, 1);
    case 183:
      return reduce(RULE_22, 1);
    case 198:
      return reduce(RULE_22, 1);
    case 100:
      return reduce(RULE_22, 1);
    case 171:
      return reduce(RULE_22, 1);
    case 169:
      return reduce(RULE_22, 1);
    case 190:
      return reduce(RULE_22, 1);
    case 176:
      return reduce(RULE_22, 1);
    case 147:
      return reduce(RULE_22, 1);
    case 99:
      return reduce(RULE_22, 1);
    case 182:
      return reduce(RULE_22, 1);
    case 109:
      return reduce(RULE_22, 1);
    case 191:
      return reduce(RULE_22, 1);
    case 118:
      return reduce(RULE_22, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, PIPE, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action441(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 24);
    case 101:
      return reduce(RULE_15, 24);
    case 154:
      return reduce(RULE_15, 24);
    case 145:
      return reduce(RULE_15, 24);
    case 132:
      return reduce(RULE_15, 24);
    case 167:
      return reduce(RULE_15, 24);
    case 103:
      return reduce(RULE_15, 24);
    case 120:
      return reduce(RULE_15, 24);
    case 194:
      return reduce(RULE_15, 24);
    case 112:
      return reduce(RULE_15, 24);
    case 148:
      return reduce(RULE_15, 24);
    case 110:
      return reduce(RULE_15, 24);
    case 149:
      return reduce(RULE_15, 24);
    case 108:
      return reduce(RULE_15, 24);
    case 106:
      return reduce(RULE_15, 24);
    case 125:
      return reduce(RULE_15, 24);
    case 98:
      return reduce(RULE_15, 24);
    case 105:
      return reduce(RULE_15, 24);
    case 138:
      return reduce(RULE_15, 24);
    case 142:
      return reduce(RULE_15, 24);
    case 155:
      return reduce(RULE_15, 24);
    case 150:
      return reduce(RULE_15, 24);
    case 197:
      return reduce(RULE_15, 24);
    case 111:
      return reduce(RULE_15, 24);
    case 183:
      return reduce(RULE_15, 24);
    case 175:
      return reduce(RULE_15, 24);
    case 128:
      return reduce(RULE_15, 24);
    case 169:
      return reduce(RULE_15, 24);
    case 190:
      return reduce(RULE_15, 24);
    case 143:
      return reduce(RULE_15, 24);
    case 164:
      return reduce(RULE_15, 24);
    case 203:
      return reduce(RULE_15, 24);
    case 147:
      return reduce(RULE_15, 24);
    case 193:
      return reduce(RULE_15, 24);
    case 182:
      return reduce(RULE_15, 24);
    case 109:
      return reduce(RULE_15, 24);
    case 191:
      return reduce(RULE_15, 24);
    case 131:
      return reduce(RULE_15, 24);
    case 118:
      return reduce(RULE_15, 24);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action442(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_47, 1);
    case 101:
      return reduce(RULE_47, 1);
    case 154:
      return reduce(RULE_47, 1);
    case 145:
      return reduce(RULE_47, 1);
    case 132:
      return reduce(RULE_47, 1);
    case 167:
      return reduce(RULE_47, 1);
    case 103:
      return reduce(RULE_47, 1);
    case 120:
      return reduce(RULE_47, 1);
    case 194:
      return reduce(RULE_47, 1);
    case 112:
      return reduce(RULE_47, 1);
    case 148:
      return reduce(RULE_47, 1);
    case 149:
      return reduce(RULE_47, 1);
    case 110:
      return reduce(RULE_47, 1);
    case 108:
      return reduce(RULE_47, 1);
    case 106:
      return reduce(RULE_47, 1);
    case 125:
      return reduce(RULE_47, 1);
    case 98:
      return reduce(RULE_47, 1);
    case 105:
      return reduce(RULE_47, 1);
    case 138:
      return reduce(RULE_47, 1);
    case 142:
      return reduce(RULE_47, 1);
    case 155:
      return reduce(RULE_47, 1);
    case 150:
      return reduce(RULE_47, 1);
    case 197:
      return reduce(RULE_47, 1);
    case 111:
      return reduce(RULE_47, 1);
    case 183:
      return reduce(RULE_47, 1);
    case 175:
      return reduce(RULE_47, 1);
    case 128:
      return reduce(RULE_47, 1);
    case 169:
      return reduce(RULE_47, 1);
    case 190:
      return reduce(RULE_47, 1);
    case 143:
      return reduce(RULE_47, 1);
    case 164:
      return reduce(RULE_47, 1);
    case 203:
      return reduce(RULE_47, 1);
    case 147:
      return reduce(RULE_47, 1);
    case 193:
      return reduce(RULE_47, 1);
    case 182:
      return reduce(RULE_47, 1);
    case 109:
      return reduce(RULE_47, 1);
    case 191:
      return reduce(RULE_47, 1);
    case 131:
      return reduce(RULE_47, 1);
    case 118:
      return reduce(RULE_47, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action443(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_48, 2);
    case 154:
      return reduce(RULE_48, 2);
    case 181:
      return reduce(RULE_48, 2);
    case 184:
      return reduce(RULE_48, 2);
    case 134:
      return reduce(RULE_48, 2);
    case 153:
      return reduce(RULE_48, 2);
    case 185:
      return reduce(RULE_48, 2);
    case 205:
      return reduce(RULE_48, 2);
    case 148:
      return reduce(RULE_48, 2);
    case 125:
      return reduce(RULE_48, 2);
    case 105:
      return reduce(RULE_48, 2);
    case 98:
      return reduce(RULE_48, 2);
    case 138:
      return reduce(RULE_48, 2);
    case 142:
      return reduce(RULE_48, 2);
    case 124:
      return reduce(RULE_48, 2);
    case 155:
      return reduce(RULE_48, 2);
    case 186:
      return reduce(RULE_48, 2);
    case 175:
      return reduce(RULE_48, 2);
    case 128:
      return reduce(RULE_48, 2);
    case 143:
      return reduce(RULE_48, 2);
    case 179:
      return reduce(RULE_48, 2);
    case 164:
      return reduce(RULE_48, 2);
    case 203:
      return reduce(RULE_48, 2);
    case 195:
      return reduce(RULE_48, 2);
    case 193:
      return reduce(RULE_48, 2);
    case 158:
      return reduce(RULE_48, 2);
    case 131:
      return reduce(RULE_48, 2);
    case 156:
      return reduce(RULE_48, 2);
    case 173:
      return reduce(RULE_48, 2);
    case 101:
      return reduce(RULE_48, 2);
    case 102:
      return reduce(RULE_48, 2);
    case 145:
      return reduce(RULE_48, 2);
    case 201:
      return reduce(RULE_48, 2);
    case 132:
      return reduce(RULE_48, 2);
    case 202:
      return reduce(RULE_48, 2);
    case 167:
      return reduce(RULE_48, 2);
    case 103:
      return reduce(RULE_48, 2);
    case 133:
      return reduce(RULE_48, 2);
    case 120:
      return reduce(RULE_48, 2);
    case 168:
      return reduce(RULE_48, 2);
    case 194:
      return reduce(RULE_48, 2);
    case 112:
      return reduce(RULE_48, 2);
    case 149:
      return reduce(RULE_48, 2);
    case 110:
      return reduce(RULE_48, 2);
    case 200:
      return reduce(RULE_48, 2);
    case 192:
      return reduce(RULE_48, 2);
    case 108:
      return reduce(RULE_48, 2);
    case 106:
      return reduce(RULE_48, 2);
    case 165:
      return reduce(RULE_48, 2);
    case 197:
      return reduce(RULE_48, 2);
    case 150:
      return reduce(RULE_48, 2);
    case 111:
      return reduce(RULE_48, 2);
    case 183:
      return reduce(RULE_48, 2);
    case 198:
      return reduce(RULE_48, 2);
    case 100:
      return reduce(RULE_48, 2);
    case 171:
      return reduce(RULE_48, 2);
    case 169:
      return reduce(RULE_48, 2);
    case 190:
      return reduce(RULE_48, 2);
    case 176:
      return reduce(RULE_48, 2);
    case 147:
      return reduce(RULE_48, 2);
    case 99:
      return reduce(RULE_48, 2);
    case 182:
      return reduce(RULE_48, 2);
    case 109:
      return reduce(RULE_48, 2);
    case 191:
      return reduce(RULE_48, 2);
    case 118:
      return reduce(RULE_48, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action444(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_21, 2);
    case 101:
      return reduce(RULE_21, 2);
    case 154:
      return reduce(RULE_21, 2);
    case 145:
      return reduce(RULE_21, 2);
    case 132:
      return reduce(RULE_21, 2);
    case 167:
      return reduce(RULE_21, 2);
    case 103:
      return reduce(RULE_21, 2);
    case 120:
      return reduce(RULE_21, 2);
    case 194:
      return reduce(RULE_21, 2);
    case 112:
      return reduce(RULE_21, 2);
    case 148:
      return reduce(RULE_21, 2);
    case 110:
      return reduce(RULE_21, 2);
    case 149:
      return reduce(RULE_21, 2);
    case 108:
      return reduce(RULE_21, 2);
    case 106:
      return reduce(RULE_21, 2);
    case 125:
      return reduce(RULE_21, 2);
    case 98:
      return reduce(RULE_21, 2);
    case 105:
      return reduce(RULE_21, 2);
    case 138:
      return reduce(RULE_21, 2);
    case 142:
      return reduce(RULE_21, 2);
    case 155:
      return reduce(RULE_21, 2);
    case 150:
      return reduce(RULE_21, 2);
    case 197:
      return reduce(RULE_21, 2);
    case 111:
      return reduce(RULE_21, 2);
    case 183:
      return reduce(RULE_21, 2);
    case 175:
      return reduce(RULE_21, 2);
    case 128:
      return reduce(RULE_21, 2);
    case 169:
      return reduce(RULE_21, 2);
    case 190:
      return reduce(RULE_21, 2);
    case 143:
      return reduce(RULE_21, 2);
    case 164:
      return reduce(RULE_21, 2);
    case 203:
      return reduce(RULE_21, 2);
    case 147:
      return reduce(RULE_21, 2);
    case 193:
      return reduce(RULE_21, 2);
    case 182:
      return reduce(RULE_21, 2);
    case 109:
      return reduce(RULE_21, 2);
    case 191:
      return reduce(RULE_21, 2);
    case 131:
      return reduce(RULE_21, 2);
    case 118:
      return reduce(RULE_21, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action445(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 2);
    case 154:
      return reduce(RULE_22, 2);
    case 181:
      return reduce(RULE_22, 2);
    case 184:
      return reduce(RULE_22, 2);
    case 134:
      return reduce(RULE_22, 2);
    case 153:
      return reduce(RULE_22, 2);
    case 185:
      return reduce(RULE_22, 2);
    case 205:
      return reduce(RULE_22, 2);
    case 148:
      return reduce(RULE_22, 2);
    case 125:
      return reduce(RULE_22, 2);
    case 105:
      return reduce(RULE_22, 2);
    case 98:
      return reduce(RULE_22, 2);
    case 138:
      return reduce(RULE_22, 2);
    case 142:
      return reduce(RULE_22, 2);
    case 124:
      return reduce(RULE_22, 2);
    case 155:
      return reduce(RULE_22, 2);
    case 186:
      return reduce(RULE_22, 2);
    case 175:
      return reduce(RULE_22, 2);
    case 128:
      return reduce(RULE_22, 2);
    case 143:
      return reduce(RULE_22, 2);
    case 179:
      return reduce(RULE_22, 2);
    case 164:
      return reduce(RULE_22, 2);
    case 203:
      return reduce(RULE_22, 2);
    case 195:
      return reduce(RULE_22, 2);
    case 193:
      return reduce(RULE_22, 2);
    case 158:
      return reduce(RULE_22, 2);
    case 131:
      return reduce(RULE_22, 2);
    case 156:
      return reduce(RULE_22, 2);
    case 173:
      return reduce(RULE_22, 2);
    case 101:
      return reduce(RULE_22, 2);
    case 102:
      return reduce(RULE_22, 2);
    case 145:
      return reduce(RULE_22, 2);
    case 201:
      return reduce(RULE_22, 2);
    case 132:
      return reduce(RULE_22, 2);
    case 202:
      return reduce(RULE_22, 2);
    case 167:
      return reduce(RULE_22, 2);
    case 103:
      return reduce(RULE_22, 2);
    case 133:
      return reduce(RULE_22, 2);
    case 120:
      return reduce(RULE_22, 2);
    case 168:
      return reduce(RULE_22, 2);
    case 194:
      return reduce(RULE_22, 2);
    case 112:
      return reduce(RULE_22, 2);
    case 149:
      return reduce(RULE_22, 2);
    case 110:
      return reduce(RULE_22, 2);
    case 200:
      return reduce(RULE_22, 2);
    case 192:
      return reduce(RULE_22, 2);
    case 108:
      return reduce(RULE_22, 2);
    case 106:
      return reduce(RULE_22, 2);
    case 165:
      return reduce(RULE_22, 2);
    case 197:
      return reduce(RULE_22, 2);
    case 150:
      return reduce(RULE_22, 2);
    case 111:
      return reduce(RULE_22, 2);
    case 183:
      return reduce(RULE_22, 2);
    case 198:
      return reduce(RULE_22, 2);
    case 100:
      return reduce(RULE_22, 2);
    case 171:
      return reduce(RULE_22, 2);
    case 169:
      return reduce(RULE_22, 2);
    case 190:
      return reduce(RULE_22, 2);
    case 176:
      return reduce(RULE_22, 2);
    case 147:
      return reduce(RULE_22, 2);
    case 99:
      return reduce(RULE_22, 2);
    case 182:
      return reduce(RULE_22, 2);
    case 109:
      return reduce(RULE_22, 2);
    case 191:
      return reduce(RULE_22, 2);
    case 118:
      return reduce(RULE_22, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action446(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_26, 2);
    case 148:
      return reduce(RULE_26, 2);
    case 128:
      return reduce(RULE_26, 2);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH, RPAREN});
    }
  }

  private final boolean action447(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_26, 3);
    case 148:
      return reduce(RULE_26, 3);
    case 128:
      return reduce(RULE_26, 3);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH, RPAREN});
    }
  }

  private final boolean action448(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_26, 0);
    case 148:
      return reduce(RULE_26, 0);
    case 128:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH, RPAREN});
    }
  }

  private final boolean action449(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_27, 2);
    case 105:
      return reduce(RULE_27, 2);
    case 173:
      return reduce(RULE_27, 2);
    case 101:
      return reduce(RULE_27, 2);
    case 155:
      return reduce(RULE_27, 2);
    case 150:
      return reduce(RULE_27, 2);
    case 183:
      return reduce(RULE_27, 2);
    case 175:
      return reduce(RULE_27, 2);
    case 128:
      return reduce(RULE_27, 2);
    case 169:
      return reduce(RULE_27, 2);
    case 190:
      return reduce(RULE_27, 2);
    case 164:
      return reduce(RULE_27, 2);
    case 203:
      return reduce(RULE_27, 2);
    case 193:
      return reduce(RULE_27, 2);
    case 182:
      return reduce(RULE_27, 2);
    case 148:
      return reduce(RULE_27, 2);
    case 191:
      return reduce(RULE_27, 2);
    case 149:
      return reduce(RULE_27, 2);
    case 131:
      return reduce(RULE_27, 2);
    default: throw new BadTokenException(token, new Object[] {COLON, ARROW, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, LBRACE, RSQUARE});
    }
  }

  private final boolean action450(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      return reduce(RULE_26, 1);
    case 148:
      return reduce(RULE_26, 1);
    case 128:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {ARROW, HASH, RPAREN});
    }
  }

  private final boolean action451(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_27, 3);
    case 105:
      return reduce(RULE_27, 3);
    case 173:
      return reduce(RULE_27, 3);
    case 101:
      return reduce(RULE_27, 3);
    case 155:
      return reduce(RULE_27, 3);
    case 150:
      return reduce(RULE_27, 3);
    case 183:
      return reduce(RULE_27, 3);
    case 175:
      return reduce(RULE_27, 3);
    case 128:
      return reduce(RULE_27, 3);
    case 169:
      return reduce(RULE_27, 3);
    case 190:
      return reduce(RULE_27, 3);
    case 164:
      return reduce(RULE_27, 3);
    case 203:
      return reduce(RULE_27, 3);
    case 193:
      return reduce(RULE_27, 3);
    case 182:
      return reduce(RULE_27, 3);
    case 148:
      return reduce(RULE_27, 3);
    case 191:
      return reduce(RULE_27, 3);
    case 149:
      return reduce(RULE_27, 3);
    case 131:
      return reduce(RULE_27, 3);
    default: throw new BadTokenException(token, new Object[] {COLON, ARROW, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, LBRACE, RSQUARE});
    }
  }

  private final boolean action452(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(646);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action453(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto453(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 647;
    default: return -1;
    }
  }

  private final boolean action454(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto454(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 648;
    default: return -1;
    }
  }

  private final boolean action455(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto455(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 277;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    case 47: return 649;
    default: return -1;
    }
  }

  private final boolean action456(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto456(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 650;
    case 30: return 651;
    case 72: return 652;
    case 60: return 99;
    case 70: return 653;
    case 61: return 102;
    case 48: return 92;
    case 54: return 94;
    case 49: return 93;
    case 58: return 95;
    case 28: return 654;
    case 59: return 98;
    case 50: return 655;
    case 71: return 465;
    default: return -1;
    }
  }

  private final boolean action457(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_72, 0);
    case 154:
      return reduce(RULE_72, 0);
    case 181:
      return reduce(RULE_72, 0);
    case 184:
      return reduce(RULE_72, 0);
    case 134:
      return reduce(RULE_72, 0);
    case 185:
      return reduce(RULE_72, 0);
    case 153:
      return reduce(RULE_72, 0);
    case 205:
      return reduce(RULE_72, 0);
    case 148:
      return reduce(RULE_72, 0);
    case 125:
      return reduce(RULE_72, 0);
    case 105:
      return reduce(RULE_72, 0);
    case 98:
      return reduce(RULE_72, 0);
    case 124:
      return reduce(RULE_72, 0);
    case 142:
      return reduce(RULE_72, 0);
    case 138:
      return reduce(RULE_72, 0);
    case 155:
      return reduce(RULE_72, 0);
    case 186:
      return reduce(RULE_72, 0);
    case 175:
      return reduce(RULE_72, 0);
    case 128:
      return reduce(RULE_72, 0);
    case 143:
      return reduce(RULE_72, 0);
    case 179:
      return reduce(RULE_72, 0);
    case 164:
      return reduce(RULE_72, 0);
    case 203:
      return reduce(RULE_72, 0);
    case 195:
      return reduce(RULE_72, 0);
    case 193:
      return reduce(RULE_72, 0);
    case 158:
      return reduce(RULE_72, 0);
    case 131:
      return reduce(RULE_72, 0);
    case 156:
      return reduce(RULE_72, 0);
    case 173:
      return reduce(RULE_72, 0);
    case 101:
      return reduce(RULE_72, 0);
    case 102:
      return reduce(RULE_72, 0);
    case 145:
      return reduce(RULE_72, 0);
    case 201:
      return reduce(RULE_72, 0);
    case 132:
      return reduce(RULE_72, 0);
    case 202:
      return reduce(RULE_72, 0);
    case 167:
      return reduce(RULE_72, 0);
    case 103:
      return reduce(RULE_72, 0);
    case 133:
      return reduce(RULE_72, 0);
    case 120:
      return reduce(RULE_72, 0);
    case 168:
      return reduce(RULE_72, 0);
    case 194:
      return reduce(RULE_72, 0);
    case 112:
      return reduce(RULE_72, 0);
    case 110:
      return reduce(RULE_72, 0);
    case 149:
      return reduce(RULE_72, 0);
    case 200:
      return reduce(RULE_72, 0);
    case 192:
      return reduce(RULE_72, 0);
    case 108:
      return reduce(RULE_72, 0);
    case 106:
      return reduce(RULE_72, 0);
    case 165:
      return reduce(RULE_72, 0);
    case 197:
      return reduce(RULE_72, 0);
    case 150:
      return reduce(RULE_72, 0);
    case 111:
      return reduce(RULE_72, 0);
    case 183:
      return reduce(RULE_72, 0);
    case 198:
      return reduce(RULE_72, 0);
    case 100:
      return reduce(RULE_72, 0);
    case 171:
      return reduce(RULE_72, 0);
    case 190:
      return reduce(RULE_72, 0);
    case 169:
      return reduce(RULE_72, 0);
    case 176:
      return reduce(RULE_72, 0);
    case 147:
      return reduce(RULE_72, 0);
    case 99:
      return reduce(RULE_72, 0);
    case 182:
      return reduce(RULE_72, 0);
    case 109:
      return reduce(RULE_72, 0);
    case 191:
      return reduce(RULE_72, 0);
    case 118:
      return reduce(RULE_72, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action458(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto458(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 650;
    case 30: return 651;
    case 72: return 656;
    case 60: return 99;
    case 61: return 102;
    case 70: return 657;
    case 48: return 92;
    case 54: return 94;
    case 49: return 93;
    case 58: return 95;
    case 28: return 654;
    case 59: return 98;
    case 50: return 655;
    case 71: return 467;
    default: return -1;
    }
  }

  private final boolean action459(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_73, 0);
    case 154:
      return reduce(RULE_73, 0);
    case 181:
      return reduce(RULE_73, 0);
    case 184:
      return reduce(RULE_73, 0);
    case 134:
      return reduce(RULE_73, 0);
    case 185:
      return reduce(RULE_73, 0);
    case 153:
      return reduce(RULE_73, 0);
    case 205:
      return reduce(RULE_73, 0);
    case 148:
      return reduce(RULE_73, 0);
    case 125:
      return reduce(RULE_73, 0);
    case 105:
      return reduce(RULE_73, 0);
    case 98:
      return reduce(RULE_73, 0);
    case 124:
      return reduce(RULE_73, 0);
    case 142:
      return reduce(RULE_73, 0);
    case 138:
      return reduce(RULE_73, 0);
    case 155:
      return reduce(RULE_73, 0);
    case 186:
      return reduce(RULE_73, 0);
    case 175:
      return reduce(RULE_73, 0);
    case 128:
      return reduce(RULE_73, 0);
    case 143:
      return reduce(RULE_73, 0);
    case 179:
      return reduce(RULE_73, 0);
    case 164:
      return reduce(RULE_73, 0);
    case 203:
      return reduce(RULE_73, 0);
    case 195:
      return reduce(RULE_73, 0);
    case 193:
      return reduce(RULE_73, 0);
    case 158:
      return reduce(RULE_73, 0);
    case 131:
      return reduce(RULE_73, 0);
    case 156:
      return reduce(RULE_73, 0);
    case 173:
      return reduce(RULE_73, 0);
    case 101:
      return reduce(RULE_73, 0);
    case 102:
      return reduce(RULE_73, 0);
    case 145:
      return reduce(RULE_73, 0);
    case 201:
      return reduce(RULE_73, 0);
    case 132:
      return reduce(RULE_73, 0);
    case 202:
      return reduce(RULE_73, 0);
    case 167:
      return reduce(RULE_73, 0);
    case 103:
      return reduce(RULE_73, 0);
    case 133:
      return reduce(RULE_73, 0);
    case 120:
      return reduce(RULE_73, 0);
    case 168:
      return reduce(RULE_73, 0);
    case 194:
      return reduce(RULE_73, 0);
    case 112:
      return reduce(RULE_73, 0);
    case 110:
      return reduce(RULE_73, 0);
    case 149:
      return reduce(RULE_73, 0);
    case 200:
      return reduce(RULE_73, 0);
    case 192:
      return reduce(RULE_73, 0);
    case 108:
      return reduce(RULE_73, 0);
    case 106:
      return reduce(RULE_73, 0);
    case 165:
      return reduce(RULE_73, 0);
    case 197:
      return reduce(RULE_73, 0);
    case 150:
      return reduce(RULE_73, 0);
    case 111:
      return reduce(RULE_73, 0);
    case 183:
      return reduce(RULE_73, 0);
    case 198:
      return reduce(RULE_73, 0);
    case 100:
      return reduce(RULE_73, 0);
    case 171:
      return reduce(RULE_73, 0);
    case 190:
      return reduce(RULE_73, 0);
    case 169:
      return reduce(RULE_73, 0);
    case 176:
      return reduce(RULE_73, 0);
    case 147:
      return reduce(RULE_73, 0);
    case 99:
      return reduce(RULE_73, 0);
    case 182:
      return reduce(RULE_73, 0);
    case 109:
      return reduce(RULE_73, 0);
    case 191:
      return reduce(RULE_73, 0);
    case 118:
      return reduce(RULE_73, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action460(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto460(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 283;
    case 64: return 284;
    case 62: return 469;
    case 68: return 175;
    case 30: return 286;
    case 67: return 177;
    case 60: return 99;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 49: return 178;
    case 54: return 94;
    case 28: return 289;
    case 58: return 95;
    case 63: return 658;
    case 59: return 98;
    case 65: return 180;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action461(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_73, 2);
    case 154:
      return reduce(RULE_73, 2);
    case 181:
      return reduce(RULE_73, 2);
    case 184:
      return reduce(RULE_73, 2);
    case 134:
      return reduce(RULE_73, 2);
    case 185:
      return reduce(RULE_73, 2);
    case 153:
      return reduce(RULE_73, 2);
    case 205:
      return reduce(RULE_73, 2);
    case 148:
      return reduce(RULE_73, 2);
    case 125:
      return reduce(RULE_73, 2);
    case 105:
      return reduce(RULE_73, 2);
    case 98:
      return reduce(RULE_73, 2);
    case 124:
      return reduce(RULE_73, 2);
    case 142:
      return reduce(RULE_73, 2);
    case 138:
      return reduce(RULE_73, 2);
    case 155:
      return reduce(RULE_73, 2);
    case 186:
      return reduce(RULE_73, 2);
    case 175:
      return reduce(RULE_73, 2);
    case 128:
      return reduce(RULE_73, 2);
    case 143:
      return reduce(RULE_73, 2);
    case 179:
      return reduce(RULE_73, 2);
    case 164:
      return reduce(RULE_73, 2);
    case 203:
      return reduce(RULE_73, 2);
    case 195:
      return reduce(RULE_73, 2);
    case 193:
      return reduce(RULE_73, 2);
    case 158:
      return reduce(RULE_73, 2);
    case 131:
      return reduce(RULE_73, 2);
    case 156:
      return reduce(RULE_73, 2);
    case 173:
      return reduce(RULE_73, 2);
    case 101:
      return reduce(RULE_73, 2);
    case 102:
      return reduce(RULE_73, 2);
    case 145:
      return reduce(RULE_73, 2);
    case 201:
      return reduce(RULE_73, 2);
    case 132:
      return reduce(RULE_73, 2);
    case 202:
      return reduce(RULE_73, 2);
    case 167:
      return reduce(RULE_73, 2);
    case 103:
      return reduce(RULE_73, 2);
    case 133:
      return reduce(RULE_73, 2);
    case 120:
      return reduce(RULE_73, 2);
    case 168:
      return reduce(RULE_73, 2);
    case 194:
      return reduce(RULE_73, 2);
    case 112:
      return reduce(RULE_73, 2);
    case 110:
      return reduce(RULE_73, 2);
    case 149:
      return reduce(RULE_73, 2);
    case 200:
      return reduce(RULE_73, 2);
    case 192:
      return reduce(RULE_73, 2);
    case 108:
      return reduce(RULE_73, 2);
    case 106:
      return reduce(RULE_73, 2);
    case 165:
      return reduce(RULE_73, 2);
    case 197:
      return reduce(RULE_73, 2);
    case 150:
      return reduce(RULE_73, 2);
    case 111:
      return reduce(RULE_73, 2);
    case 183:
      return reduce(RULE_73, 2);
    case 198:
      return reduce(RULE_73, 2);
    case 100:
      return reduce(RULE_73, 2);
    case 171:
      return reduce(RULE_73, 2);
    case 190:
      return reduce(RULE_73, 2);
    case 169:
      return reduce(RULE_73, 2);
    case 176:
      return reduce(RULE_73, 2);
    case 147:
      return reduce(RULE_73, 2);
    case 99:
      return reduce(RULE_73, 2);
    case 182:
      return reduce(RULE_73, 2);
    case 109:
      return reduce(RULE_73, 2);
    case 191:
      return reduce(RULE_73, 2);
    case 118:
      return reduce(RULE_73, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action462(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto462(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 283;
    case 64: return 284;
    case 62: return 470;
    case 68: return 175;
    case 30: return 286;
    case 67: return 177;
    case 60: return 99;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 49: return 178;
    case 54: return 94;
    case 28: return 289;
    case 58: return 95;
    case 63: return 659;
    case 59: return 98;
    case 65: return 180;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action463(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_73, 1);
    case 154:
      return reduce(RULE_73, 1);
    case 181:
      return reduce(RULE_73, 1);
    case 184:
      return reduce(RULE_73, 1);
    case 134:
      return reduce(RULE_73, 1);
    case 185:
      return reduce(RULE_73, 1);
    case 153:
      return reduce(RULE_73, 1);
    case 205:
      return reduce(RULE_73, 1);
    case 148:
      return reduce(RULE_73, 1);
    case 125:
      return reduce(RULE_73, 1);
    case 105:
      return reduce(RULE_73, 1);
    case 98:
      return reduce(RULE_73, 1);
    case 124:
      return reduce(RULE_73, 1);
    case 142:
      return reduce(RULE_73, 1);
    case 138:
      return reduce(RULE_73, 1);
    case 155:
      return reduce(RULE_73, 1);
    case 186:
      return reduce(RULE_73, 1);
    case 175:
      return reduce(RULE_73, 1);
    case 128:
      return reduce(RULE_73, 1);
    case 143:
      return reduce(RULE_73, 1);
    case 179:
      return reduce(RULE_73, 1);
    case 164:
      return reduce(RULE_73, 1);
    case 203:
      return reduce(RULE_73, 1);
    case 195:
      return reduce(RULE_73, 1);
    case 193:
      return reduce(RULE_73, 1);
    case 158:
      return reduce(RULE_73, 1);
    case 131:
      return reduce(RULE_73, 1);
    case 156:
      return reduce(RULE_73, 1);
    case 173:
      return reduce(RULE_73, 1);
    case 101:
      return reduce(RULE_73, 1);
    case 102:
      return reduce(RULE_73, 1);
    case 145:
      return reduce(RULE_73, 1);
    case 201:
      return reduce(RULE_73, 1);
    case 132:
      return reduce(RULE_73, 1);
    case 202:
      return reduce(RULE_73, 1);
    case 167:
      return reduce(RULE_73, 1);
    case 103:
      return reduce(RULE_73, 1);
    case 133:
      return reduce(RULE_73, 1);
    case 120:
      return reduce(RULE_73, 1);
    case 168:
      return reduce(RULE_73, 1);
    case 194:
      return reduce(RULE_73, 1);
    case 112:
      return reduce(RULE_73, 1);
    case 110:
      return reduce(RULE_73, 1);
    case 149:
      return reduce(RULE_73, 1);
    case 200:
      return reduce(RULE_73, 1);
    case 192:
      return reduce(RULE_73, 1);
    case 108:
      return reduce(RULE_73, 1);
    case 106:
      return reduce(RULE_73, 1);
    case 165:
      return reduce(RULE_73, 1);
    case 197:
      return reduce(RULE_73, 1);
    case 150:
      return reduce(RULE_73, 1);
    case 111:
      return reduce(RULE_73, 1);
    case 183:
      return reduce(RULE_73, 1);
    case 198:
      return reduce(RULE_73, 1);
    case 100:
      return reduce(RULE_73, 1);
    case 171:
      return reduce(RULE_73, 1);
    case 190:
      return reduce(RULE_73, 1);
    case 169:
      return reduce(RULE_73, 1);
    case 176:
      return reduce(RULE_73, 1);
    case 147:
      return reduce(RULE_73, 1);
    case 99:
      return reduce(RULE_73, 1);
    case 182:
      return reduce(RULE_73, 1);
    case 109:
      return reduce(RULE_73, 1);
    case 191:
      return reduce(RULE_73, 1);
    case 118:
      return reduce(RULE_73, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action464(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto464(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 283;
    case 64: return 284;
    case 62: return 471;
    case 68: return 175;
    case 30: return 286;
    case 67: return 177;
    case 60: return 99;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 49: return 178;
    case 54: return 94;
    case 28: return 289;
    case 58: return 95;
    case 63: return 660;
    case 59: return 98;
    case 65: return 180;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action465(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_52, 1);
    case 101:
      return reduce(RULE_52, 1);
    case 154:
      return reduce(RULE_52, 1);
    case 145:
      return reduce(RULE_52, 1);
    case 132:
      return reduce(RULE_52, 1);
    case 167:
      return reduce(RULE_52, 1);
    case 103:
      return reduce(RULE_52, 1);
    case 120:
      return reduce(RULE_52, 1);
    case 194:
      return reduce(RULE_52, 1);
    case 112:
      return reduce(RULE_52, 1);
    case 148:
      return reduce(RULE_52, 1);
    case 149:
      return reduce(RULE_52, 1);
    case 110:
      return reduce(RULE_52, 1);
    case 108:
      return reduce(RULE_52, 1);
    case 106:
      return reduce(RULE_52, 1);
    case 125:
      return reduce(RULE_52, 1);
    case 98:
      return reduce(RULE_52, 1);
    case 105:
      return reduce(RULE_52, 1);
    case 142:
      return reduce(RULE_52, 1);
    case 138:
      return reduce(RULE_52, 1);
    case 155:
      return reduce(RULE_52, 1);
    case 150:
      return reduce(RULE_52, 1);
    case 197:
      return reduce(RULE_52, 1);
    case 111:
      return reduce(RULE_52, 1);
    case 183:
      return reduce(RULE_52, 1);
    case 175:
      return reduce(RULE_52, 1);
    case 128:
      return reduce(RULE_52, 1);
    case 169:
      return reduce(RULE_52, 1);
    case 190:
      return reduce(RULE_52, 1);
    case 143:
      return reduce(RULE_52, 1);
    case 176:
      return reduce(RULE_52, 1);
    case 164:
      return reduce(RULE_52, 1);
    case 203:
      return reduce(RULE_52, 1);
    case 147:
      return reduce(RULE_52, 1);
    case 193:
      return reduce(RULE_52, 1);
    case 182:
      return reduce(RULE_52, 1);
    case 109:
      return reduce(RULE_52, 1);
    case 191:
      return reduce(RULE_52, 1);
    case 131:
      return reduce(RULE_52, 1);
    case 118:
      return reduce(RULE_52, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action466(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(661);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 1);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action467(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_52, 2);
    case 101:
      return reduce(RULE_52, 2);
    case 154:
      return reduce(RULE_52, 2);
    case 145:
      return reduce(RULE_52, 2);
    case 132:
      return reduce(RULE_52, 2);
    case 167:
      return reduce(RULE_52, 2);
    case 103:
      return reduce(RULE_52, 2);
    case 120:
      return reduce(RULE_52, 2);
    case 194:
      return reduce(RULE_52, 2);
    case 112:
      return reduce(RULE_52, 2);
    case 148:
      return reduce(RULE_52, 2);
    case 149:
      return reduce(RULE_52, 2);
    case 110:
      return reduce(RULE_52, 2);
    case 108:
      return reduce(RULE_52, 2);
    case 106:
      return reduce(RULE_52, 2);
    case 125:
      return reduce(RULE_52, 2);
    case 98:
      return reduce(RULE_52, 2);
    case 105:
      return reduce(RULE_52, 2);
    case 142:
      return reduce(RULE_52, 2);
    case 138:
      return reduce(RULE_52, 2);
    case 155:
      return reduce(RULE_52, 2);
    case 150:
      return reduce(RULE_52, 2);
    case 197:
      return reduce(RULE_52, 2);
    case 111:
      return reduce(RULE_52, 2);
    case 183:
      return reduce(RULE_52, 2);
    case 175:
      return reduce(RULE_52, 2);
    case 128:
      return reduce(RULE_52, 2);
    case 169:
      return reduce(RULE_52, 2);
    case 190:
      return reduce(RULE_52, 2);
    case 143:
      return reduce(RULE_52, 2);
    case 176:
      return reduce(RULE_52, 2);
    case 164:
      return reduce(RULE_52, 2);
    case 203:
      return reduce(RULE_52, 2);
    case 147:
      return reduce(RULE_52, 2);
    case 193:
      return reduce(RULE_52, 2);
    case 182:
      return reduce(RULE_52, 2);
    case 109:
      return reduce(RULE_52, 2);
    case 191:
      return reduce(RULE_52, 2);
    case 131:
      return reduce(RULE_52, 2);
    case 118:
      return reduce(RULE_52, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action468(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 167:
      stateStack.addFirst(662);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 2);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, COMMA});
    }
  }

  private final boolean action469(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_32, 1);
    case 101:
      return reduce(RULE_32, 1);
    case 154:
      return reduce(RULE_32, 1);
    case 145:
      return reduce(RULE_32, 1);
    case 132:
      return reduce(RULE_32, 1);
    case 167:
      return reduce(RULE_32, 1);
    case 103:
      return reduce(RULE_32, 1);
    case 120:
      return reduce(RULE_32, 1);
    case 194:
      return reduce(RULE_32, 1);
    case 112:
      return reduce(RULE_32, 1);
    case 148:
      return reduce(RULE_32, 1);
    case 149:
      return reduce(RULE_32, 1);
    case 110:
      return reduce(RULE_32, 1);
    case 108:
      return reduce(RULE_32, 1);
    case 106:
      return reduce(RULE_32, 1);
    case 125:
      return reduce(RULE_32, 1);
    case 98:
      return reduce(RULE_32, 1);
    case 105:
      return reduce(RULE_32, 1);
    case 142:
      return reduce(RULE_32, 1);
    case 138:
      return reduce(RULE_32, 1);
    case 155:
      return reduce(RULE_32, 1);
    case 150:
      return reduce(RULE_32, 1);
    case 197:
      return reduce(RULE_32, 1);
    case 111:
      return reduce(RULE_32, 1);
    case 183:
      return reduce(RULE_32, 1);
    case 175:
      return reduce(RULE_32, 1);
    case 128:
      return reduce(RULE_32, 1);
    case 169:
      return reduce(RULE_32, 1);
    case 190:
      return reduce(RULE_32, 1);
    case 143:
      return reduce(RULE_32, 1);
    case 176:
      return reduce(RULE_32, 1);
    case 164:
      return reduce(RULE_32, 1);
    case 203:
      return reduce(RULE_32, 1);
    case 147:
      return reduce(RULE_32, 1);
    case 193:
      return reduce(RULE_32, 1);
    case 182:
      return reduce(RULE_32, 1);
    case 109:
      return reduce(RULE_32, 1);
    case 191:
      return reduce(RULE_32, 1);
    case 131:
      return reduce(RULE_32, 1);
    case 118:
      return reduce(RULE_32, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action470(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_32, 3);
    case 101:
      return reduce(RULE_32, 3);
    case 154:
      return reduce(RULE_32, 3);
    case 145:
      return reduce(RULE_32, 3);
    case 132:
      return reduce(RULE_32, 3);
    case 167:
      return reduce(RULE_32, 3);
    case 103:
      return reduce(RULE_32, 3);
    case 120:
      return reduce(RULE_32, 3);
    case 194:
      return reduce(RULE_32, 3);
    case 112:
      return reduce(RULE_32, 3);
    case 148:
      return reduce(RULE_32, 3);
    case 149:
      return reduce(RULE_32, 3);
    case 110:
      return reduce(RULE_32, 3);
    case 108:
      return reduce(RULE_32, 3);
    case 106:
      return reduce(RULE_32, 3);
    case 125:
      return reduce(RULE_32, 3);
    case 98:
      return reduce(RULE_32, 3);
    case 105:
      return reduce(RULE_32, 3);
    case 142:
      return reduce(RULE_32, 3);
    case 138:
      return reduce(RULE_32, 3);
    case 155:
      return reduce(RULE_32, 3);
    case 150:
      return reduce(RULE_32, 3);
    case 197:
      return reduce(RULE_32, 3);
    case 111:
      return reduce(RULE_32, 3);
    case 183:
      return reduce(RULE_32, 3);
    case 175:
      return reduce(RULE_32, 3);
    case 128:
      return reduce(RULE_32, 3);
    case 169:
      return reduce(RULE_32, 3);
    case 190:
      return reduce(RULE_32, 3);
    case 143:
      return reduce(RULE_32, 3);
    case 176:
      return reduce(RULE_32, 3);
    case 164:
      return reduce(RULE_32, 3);
    case 203:
      return reduce(RULE_32, 3);
    case 147:
      return reduce(RULE_32, 3);
    case 193:
      return reduce(RULE_32, 3);
    case 182:
      return reduce(RULE_32, 3);
    case 109:
      return reduce(RULE_32, 3);
    case 191:
      return reduce(RULE_32, 3);
    case 131:
      return reduce(RULE_32, 3);
    case 118:
      return reduce(RULE_32, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action471(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_32, 2);
    case 101:
      return reduce(RULE_32, 2);
    case 154:
      return reduce(RULE_32, 2);
    case 145:
      return reduce(RULE_32, 2);
    case 132:
      return reduce(RULE_32, 2);
    case 167:
      return reduce(RULE_32, 2);
    case 103:
      return reduce(RULE_32, 2);
    case 120:
      return reduce(RULE_32, 2);
    case 194:
      return reduce(RULE_32, 2);
    case 112:
      return reduce(RULE_32, 2);
    case 148:
      return reduce(RULE_32, 2);
    case 149:
      return reduce(RULE_32, 2);
    case 110:
      return reduce(RULE_32, 2);
    case 108:
      return reduce(RULE_32, 2);
    case 106:
      return reduce(RULE_32, 2);
    case 125:
      return reduce(RULE_32, 2);
    case 98:
      return reduce(RULE_32, 2);
    case 105:
      return reduce(RULE_32, 2);
    case 142:
      return reduce(RULE_32, 2);
    case 138:
      return reduce(RULE_32, 2);
    case 155:
      return reduce(RULE_32, 2);
    case 150:
      return reduce(RULE_32, 2);
    case 197:
      return reduce(RULE_32, 2);
    case 111:
      return reduce(RULE_32, 2);
    case 183:
      return reduce(RULE_32, 2);
    case 175:
      return reduce(RULE_32, 2);
    case 128:
      return reduce(RULE_32, 2);
    case 169:
      return reduce(RULE_32, 2);
    case 190:
      return reduce(RULE_32, 2);
    case 143:
      return reduce(RULE_32, 2);
    case 176:
      return reduce(RULE_32, 2);
    case 164:
      return reduce(RULE_32, 2);
    case 203:
      return reduce(RULE_32, 2);
    case 147:
      return reduce(RULE_32, 2);
    case 193:
      return reduce(RULE_32, 2);
    case 182:
      return reduce(RULE_32, 2);
    case 109:
      return reduce(RULE_32, 2);
    case 191:
      return reduce(RULE_32, 2);
    case 131:
      return reduce(RULE_32, 2);
    case 118:
      return reduce(RULE_32, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action472(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_33, 1);
    }
    switch (token.getType().ordinal())
    {
    case 161:
      return reduce(RULE_33, 1);
    case 101:
      return reduce(RULE_33, 1);
    case 155:
      return reduce(RULE_33, 1);
    case 183:
      return reduce(RULE_33, 1);
    case 175:
      return reduce(RULE_33, 1);
    case 169:
      return reduce(RULE_33, 1);
    case 190:
      return reduce(RULE_33, 1);
    case 203:
      return reduce(RULE_33, 1);
    case 180:
      return reduce(RULE_33, 1);
    case 193:
      return reduce(RULE_33, 1);
    case 182:
      return reduce(RULE_33, 1);
    case 162:
      return reduce(RULE_33, 1);
    default: throw new BadTokenException(token, new Object[] {null, UNBACKED_KEYWORD, CLASS_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, IMMUTABLE_KEYWORD, COMPOUND_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action473(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(663);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto473(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 664;
    default: return -1;
    }
  }

  private final boolean action474(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto474(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 53: return 637;
    case 54: return 271;
    case 28: return 306;
    case 58: return 638;
    case 30: return 274;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action475(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto475(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 172;
    case 64: return 173;
    case 62: return 640;
    case 68: return 175;
    case 30: return 176;
    case 67: return 177;
    case 60: return 99;
    case 61: return 102;
    case 54: return 94;
    case 49: return 178;
    case 58: return 95;
    case 28: return 179;
    case 59: return 98;
    case 65: return 180;
    default: return -1;
    }
  }

  private final boolean action476(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(665);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action477(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      return reduce(RULE_53, 0);
    case 150:
      return reduce(RULE_53, 0);
    case 131:
      return reduce(RULE_53, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final boolean action478(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 156:
      return reduce(RULE_2, 0);
    case 165:
      return reduce(RULE_2, 0);
    case 98:
      return reduce(RULE_2, 0);
    case 142:
      return reduce(RULE_2, 0);
    case 181:
      return reduce(RULE_2, 0);
    case 186:
      return reduce(RULE_2, 0);
    case 201:
      return reduce(RULE_2, 0);
    case 128:
      return reduce(RULE_2, 0);
    case 171:
      return reduce(RULE_2, 0);
    case 179:
      return reduce(RULE_2, 0);
    case 202:
      return reduce(RULE_2, 0);
    case 132:
      return reduce(RULE_2, 0);
    case 133:
      return reduce(RULE_2, 0);
    case 205:
      return reduce(RULE_2, 0);
    case 158:
      return reduce(RULE_2, 0);
    case 131:
      return reduce(RULE_2, 0);
    case 200:
      return reduce(RULE_2, 0);
    case 192:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto478(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 16;
    case 27: return 666;
    default: return -1;
    }
  }

  private final boolean action479(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto479(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 667;
    default: return -1;
    }
  }

  private final boolean action480(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_74, 0);
    case 150:
      return reduce(RULE_74, 0);
    case 109:
      return reduce(RULE_74, 0);
    case 131:
      return reduce(RULE_74, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE});
    }
  }

  private final boolean action481(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(668);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_34, 1);
    case 150:
      return reduce(RULE_34, 1);
    case 131:
      return reduce(RULE_34, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE});
    }
  }

  private final boolean action482(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_75, 1);
    case 101:
      return reduce(RULE_75, 1);
    case 181:
      return reduce(RULE_75, 1);
    case 188:
      return reduce(RULE_75, 1);
    case 201:
      return reduce(RULE_75, 1);
    case 202:
      return reduce(RULE_75, 1);
    case 132:
      return reduce(RULE_75, 1);
    case 205:
      return reduce(RULE_75, 1);
    case 133:
      return reduce(RULE_75, 1);
    case 206:
      return reduce(RULE_75, 1);
    case 200:
      return reduce(RULE_75, 1);
    case 192:
      return reduce(RULE_75, 1);
    case 165:
      return reduce(RULE_75, 1);
    case 98:
      return reduce(RULE_75, 1);
    case 155:
      return reduce(RULE_75, 1);
    case 142:
      return reduce(RULE_75, 1);
    case 183:
      return reduce(RULE_75, 1);
    case 186:
      return reduce(RULE_75, 1);
    case 175:
      return reduce(RULE_75, 1);
    case 128:
      return reduce(RULE_75, 1);
    case 171:
      return reduce(RULE_75, 1);
    case 190:
      return reduce(RULE_75, 1);
    case 169:
      return reduce(RULE_75, 1);
    case 179:
      return reduce(RULE_75, 1);
    case 164:
      return reduce(RULE_75, 1);
    case 203:
      return reduce(RULE_75, 1);
    case 147:
      return reduce(RULE_75, 1);
    case 193:
      return reduce(RULE_75, 1);
    case 182:
      return reduce(RULE_75, 1);
    case 158:
      return reduce(RULE_75, 1);
    case 131:
      return reduce(RULE_75, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action483(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(669);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE});
    }
  }

  private final boolean action484(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto484(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 670;
    case 54: return 94;
    case 49: return 671;
    case 58: return 95;
    case 28: return 672;
    case 30: return 673;
    case 59: return 98;
    case 60: return 99;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action485(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(559);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto485(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 674;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action486(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 0);
    case 173:
      return reduce(RULE_44, 0);
    case 101:
      return reduce(RULE_44, 0);
    case 145:
      return reduce(RULE_44, 0);
    case 116:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_44, 0);
    case 120:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_44, 0);
    case 148:
      return reduce(RULE_44, 0);
    case 149:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_44, 0);
    case 108:
      return reduce(RULE_44, 0);
    case 106:
      return reduce(RULE_44, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 178:
      return reduce(RULE_44, 0);
    case 155:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 146:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_44, 0);
    case 150:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 183:
      return reduce(RULE_44, 0);
    case 175:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 190:
      return reduce(RULE_44, 0);
    case 169:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 164:
      return reduce(RULE_44, 0);
    case 203:
      return reduce(RULE_44, 0);
    case 147:
      return reduce(RULE_44, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 193:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 129:
      return reduce(RULE_44, 0);
    case 182:
      return reduce(RULE_44, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 109:
      return reduce(RULE_44, 0);
    case 191:
      return reduce(RULE_44, 0);
    case 131:
      return reduce(RULE_44, 0);
    case 118:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, PIPE, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, QUESTION_MARK_DOT, PERCENT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action487(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 1);
    case 173:
      return reduce(RULE_44, 1);
    case 101:
      return reduce(RULE_44, 1);
    case 145:
      return reduce(RULE_44, 1);
    case 116:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_44, 1);
    case 120:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_44, 1);
    case 148:
      return reduce(RULE_44, 1);
    case 149:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_44, 1);
    case 108:
      return reduce(RULE_44, 1);
    case 106:
      return reduce(RULE_44, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 178:
      return reduce(RULE_44, 1);
    case 155:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 146:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_44, 1);
    case 150:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 183:
      return reduce(RULE_44, 1);
    case 175:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 190:
      return reduce(RULE_44, 1);
    case 169:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 164:
      return reduce(RULE_44, 1);
    case 203:
      return reduce(RULE_44, 1);
    case 147:
      return reduce(RULE_44, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 193:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 129:
      return reduce(RULE_44, 1);
    case 182:
      return reduce(RULE_44, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 109:
      return reduce(RULE_44, 1);
    case 191:
      return reduce(RULE_44, 1);
    case 131:
      return reduce(RULE_44, 1);
    case 118:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, PIPE, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, QUESTION_MARK_DOT, PERCENT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action488(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_61, 4);
    case 173:
      return reduce(RULE_61, 4);
    case 101:
      return reduce(RULE_61, 4);
    case 145:
      return reduce(RULE_61, 4);
    case 116:
      return reduce(RULE_61, 4);
    case 151:
      return reduce(RULE_61, 4);
    case 134:
      return reduce(RULE_61, 4);
    case 103:
      return reduce(RULE_61, 4);
    case 120:
      return reduce(RULE_61, 4);
    case 148:
      return reduce(RULE_61, 4);
    case 112:
      return reduce(RULE_61, 4);
    case 149:
      return reduce(RULE_61, 4);
    case 110:
      return reduce(RULE_61, 4);
    case 108:
      return reduce(RULE_61, 4);
    case 106:
      return reduce(RULE_61, 4);
    case 125:
      return reduce(RULE_61, 4);
    case 178:
      return reduce(RULE_61, 4);
    case 155:
      return reduce(RULE_61, 4);
    case 124:
      return reduce(RULE_61, 4);
    case 142:
      return reduce(RULE_61, 4);
    case 146:
      return reduce(RULE_61, 4);
    case 138:
      return reduce(RULE_61, 4);
    case 150:
      return reduce(RULE_61, 4);
    case 183:
      return reduce(RULE_61, 4);
    case 175:
      return reduce(RULE_61, 4);
    case 113:
      return reduce(RULE_61, 4);
    case 169:
      return reduce(RULE_61, 4);
    case 190:
      return reduce(RULE_61, 4);
    case 143:
      return reduce(RULE_61, 4);
    case 164:
      return reduce(RULE_61, 4);
    case 203:
      return reduce(RULE_61, 4);
    case 147:
      return reduce(RULE_61, 4);
    case 130:
      return reduce(RULE_61, 4);
    case 193:
      return reduce(RULE_61, 4);
    case 129:
      return reduce(RULE_61, 4);
    case 136:
      return reduce(RULE_61, 4);
    case 182:
      return reduce(RULE_61, 4);
    case 140:
      return reduce(RULE_61, 4);
    case 109:
      return reduce(RULE_61, 4);
    case 191:
      return reduce(RULE_61, 4);
    case 131:
      return reduce(RULE_61, 4);
    case 118:
      return reduce(RULE_61, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto488(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action489(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_61, 3);
    case 173:
      return reduce(RULE_61, 3);
    case 101:
      return reduce(RULE_61, 3);
    case 145:
      return reduce(RULE_61, 3);
    case 116:
      return reduce(RULE_61, 3);
    case 151:
      return reduce(RULE_61, 3);
    case 134:
      return reduce(RULE_61, 3);
    case 103:
      return reduce(RULE_61, 3);
    case 120:
      return reduce(RULE_61, 3);
    case 148:
      return reduce(RULE_61, 3);
    case 112:
      return reduce(RULE_61, 3);
    case 149:
      return reduce(RULE_61, 3);
    case 110:
      return reduce(RULE_61, 3);
    case 108:
      return reduce(RULE_61, 3);
    case 106:
      return reduce(RULE_61, 3);
    case 125:
      return reduce(RULE_61, 3);
    case 178:
      return reduce(RULE_61, 3);
    case 155:
      return reduce(RULE_61, 3);
    case 124:
      return reduce(RULE_61, 3);
    case 142:
      return reduce(RULE_61, 3);
    case 146:
      return reduce(RULE_61, 3);
    case 138:
      return reduce(RULE_61, 3);
    case 150:
      return reduce(RULE_61, 3);
    case 183:
      return reduce(RULE_61, 3);
    case 175:
      return reduce(RULE_61, 3);
    case 113:
      return reduce(RULE_61, 3);
    case 169:
      return reduce(RULE_61, 3);
    case 190:
      return reduce(RULE_61, 3);
    case 143:
      return reduce(RULE_61, 3);
    case 164:
      return reduce(RULE_61, 3);
    case 203:
      return reduce(RULE_61, 3);
    case 147:
      return reduce(RULE_61, 3);
    case 130:
      return reduce(RULE_61, 3);
    case 193:
      return reduce(RULE_61, 3);
    case 129:
      return reduce(RULE_61, 3);
    case 136:
      return reduce(RULE_61, 3);
    case 182:
      return reduce(RULE_61, 3);
    case 140:
      return reduce(RULE_61, 3);
    case 109:
      return reduce(RULE_61, 3);
    case 191:
      return reduce(RULE_61, 3);
    case 131:
      return reduce(RULE_61, 3);
    case 118:
      return reduce(RULE_61, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action490(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_61, 8);
    case 173:
      return reduce(RULE_61, 8);
    case 101:
      return reduce(RULE_61, 8);
    case 145:
      return reduce(RULE_61, 8);
    case 116:
      return reduce(RULE_61, 8);
    case 151:
      return reduce(RULE_61, 8);
    case 134:
      return reduce(RULE_61, 8);
    case 103:
      return reduce(RULE_61, 8);
    case 120:
      return reduce(RULE_61, 8);
    case 148:
      return reduce(RULE_61, 8);
    case 112:
      return reduce(RULE_61, 8);
    case 149:
      return reduce(RULE_61, 8);
    case 110:
      return reduce(RULE_61, 8);
    case 108:
      return reduce(RULE_61, 8);
    case 106:
      return reduce(RULE_61, 8);
    case 125:
      return reduce(RULE_61, 8);
    case 178:
      return reduce(RULE_61, 8);
    case 155:
      return reduce(RULE_61, 8);
    case 124:
      return reduce(RULE_61, 8);
    case 142:
      return reduce(RULE_61, 8);
    case 146:
      return reduce(RULE_61, 8);
    case 138:
      return reduce(RULE_61, 8);
    case 150:
      return reduce(RULE_61, 8);
    case 183:
      return reduce(RULE_61, 8);
    case 175:
      return reduce(RULE_61, 8);
    case 113:
      return reduce(RULE_61, 8);
    case 169:
      return reduce(RULE_61, 8);
    case 190:
      return reduce(RULE_61, 8);
    case 143:
      return reduce(RULE_61, 8);
    case 164:
      return reduce(RULE_61, 8);
    case 203:
      return reduce(RULE_61, 8);
    case 147:
      return reduce(RULE_61, 8);
    case 130:
      return reduce(RULE_61, 8);
    case 193:
      return reduce(RULE_61, 8);
    case 129:
      return reduce(RULE_61, 8);
    case 136:
      return reduce(RULE_61, 8);
    case 182:
      return reduce(RULE_61, 8);
    case 140:
      return reduce(RULE_61, 8);
    case 109:
      return reduce(RULE_61, 8);
    case 191:
      return reduce(RULE_61, 8);
    case 131:
      return reduce(RULE_61, 8);
    case 118:
      return reduce(RULE_61, 8);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto490(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action491(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_61, 7);
    case 173:
      return reduce(RULE_61, 7);
    case 101:
      return reduce(RULE_61, 7);
    case 145:
      return reduce(RULE_61, 7);
    case 116:
      return reduce(RULE_61, 7);
    case 151:
      return reduce(RULE_61, 7);
    case 134:
      return reduce(RULE_61, 7);
    case 103:
      return reduce(RULE_61, 7);
    case 120:
      return reduce(RULE_61, 7);
    case 148:
      return reduce(RULE_61, 7);
    case 112:
      return reduce(RULE_61, 7);
    case 149:
      return reduce(RULE_61, 7);
    case 110:
      return reduce(RULE_61, 7);
    case 108:
      return reduce(RULE_61, 7);
    case 106:
      return reduce(RULE_61, 7);
    case 125:
      return reduce(RULE_61, 7);
    case 178:
      return reduce(RULE_61, 7);
    case 155:
      return reduce(RULE_61, 7);
    case 124:
      return reduce(RULE_61, 7);
    case 142:
      return reduce(RULE_61, 7);
    case 146:
      return reduce(RULE_61, 7);
    case 138:
      return reduce(RULE_61, 7);
    case 150:
      return reduce(RULE_61, 7);
    case 183:
      return reduce(RULE_61, 7);
    case 175:
      return reduce(RULE_61, 7);
    case 113:
      return reduce(RULE_61, 7);
    case 169:
      return reduce(RULE_61, 7);
    case 190:
      return reduce(RULE_61, 7);
    case 143:
      return reduce(RULE_61, 7);
    case 164:
      return reduce(RULE_61, 7);
    case 203:
      return reduce(RULE_61, 7);
    case 147:
      return reduce(RULE_61, 7);
    case 130:
      return reduce(RULE_61, 7);
    case 193:
      return reduce(RULE_61, 7);
    case 129:
      return reduce(RULE_61, 7);
    case 136:
      return reduce(RULE_61, 7);
    case 182:
      return reduce(RULE_61, 7);
    case 140:
      return reduce(RULE_61, 7);
    case 109:
      return reduce(RULE_61, 7);
    case 191:
      return reduce(RULE_61, 7);
    case 131:
      return reduce(RULE_61, 7);
    case 118:
      return reduce(RULE_61, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action492(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_61, 6);
    case 173:
      return reduce(RULE_61, 6);
    case 101:
      return reduce(RULE_61, 6);
    case 145:
      return reduce(RULE_61, 6);
    case 116:
      return reduce(RULE_61, 6);
    case 151:
      return reduce(RULE_61, 6);
    case 134:
      return reduce(RULE_61, 6);
    case 103:
      return reduce(RULE_61, 6);
    case 120:
      return reduce(RULE_61, 6);
    case 148:
      return reduce(RULE_61, 6);
    case 112:
      return reduce(RULE_61, 6);
    case 149:
      return reduce(RULE_61, 6);
    case 110:
      return reduce(RULE_61, 6);
    case 108:
      return reduce(RULE_61, 6);
    case 106:
      return reduce(RULE_61, 6);
    case 125:
      return reduce(RULE_61, 6);
    case 178:
      return reduce(RULE_61, 6);
    case 155:
      return reduce(RULE_61, 6);
    case 124:
      return reduce(RULE_61, 6);
    case 142:
      return reduce(RULE_61, 6);
    case 146:
      return reduce(RULE_61, 6);
    case 138:
      return reduce(RULE_61, 6);
    case 150:
      return reduce(RULE_61, 6);
    case 183:
      return reduce(RULE_61, 6);
    case 175:
      return reduce(RULE_61, 6);
    case 113:
      return reduce(RULE_61, 6);
    case 169:
      return reduce(RULE_61, 6);
    case 190:
      return reduce(RULE_61, 6);
    case 143:
      return reduce(RULE_61, 6);
    case 164:
      return reduce(RULE_61, 6);
    case 203:
      return reduce(RULE_61, 6);
    case 147:
      return reduce(RULE_61, 6);
    case 130:
      return reduce(RULE_61, 6);
    case 193:
      return reduce(RULE_61, 6);
    case 129:
      return reduce(RULE_61, 6);
    case 136:
      return reduce(RULE_61, 6);
    case 182:
      return reduce(RULE_61, 6);
    case 140:
      return reduce(RULE_61, 6);
    case 109:
      return reduce(RULE_61, 6);
    case 191:
      return reduce(RULE_61, 6);
    case 131:
      return reduce(RULE_61, 6);
    case 118:
      return reduce(RULE_61, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto492(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action493(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_61, 5);
    case 173:
      return reduce(RULE_61, 5);
    case 101:
      return reduce(RULE_61, 5);
    case 145:
      return reduce(RULE_61, 5);
    case 116:
      return reduce(RULE_61, 5);
    case 151:
      return reduce(RULE_61, 5);
    case 134:
      return reduce(RULE_61, 5);
    case 103:
      return reduce(RULE_61, 5);
    case 120:
      return reduce(RULE_61, 5);
    case 148:
      return reduce(RULE_61, 5);
    case 112:
      return reduce(RULE_61, 5);
    case 149:
      return reduce(RULE_61, 5);
    case 110:
      return reduce(RULE_61, 5);
    case 108:
      return reduce(RULE_61, 5);
    case 106:
      return reduce(RULE_61, 5);
    case 125:
      return reduce(RULE_61, 5);
    case 178:
      return reduce(RULE_61, 5);
    case 155:
      return reduce(RULE_61, 5);
    case 124:
      return reduce(RULE_61, 5);
    case 142:
      return reduce(RULE_61, 5);
    case 146:
      return reduce(RULE_61, 5);
    case 138:
      return reduce(RULE_61, 5);
    case 150:
      return reduce(RULE_61, 5);
    case 183:
      return reduce(RULE_61, 5);
    case 175:
      return reduce(RULE_61, 5);
    case 113:
      return reduce(RULE_61, 5);
    case 169:
      return reduce(RULE_61, 5);
    case 190:
      return reduce(RULE_61, 5);
    case 143:
      return reduce(RULE_61, 5);
    case 164:
      return reduce(RULE_61, 5);
    case 203:
      return reduce(RULE_61, 5);
    case 147:
      return reduce(RULE_61, 5);
    case 130:
      return reduce(RULE_61, 5);
    case 193:
      return reduce(RULE_61, 5);
    case 129:
      return reduce(RULE_61, 5);
    case 136:
      return reduce(RULE_61, 5);
    case 182:
      return reduce(RULE_61, 5);
    case 140:
      return reduce(RULE_61, 5);
    case 109:
      return reduce(RULE_61, 5);
    case 191:
      return reduce(RULE_61, 5);
    case 131:
      return reduce(RULE_61, 5);
    case 118:
      return reduce(RULE_61, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action494(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(255);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, LSQUARE, OBJECT_KEYWORD});
    }
  }

  private final int goto494(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 675;
    default: return -1;
    }
  }

  private final boolean action495(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 111:
      return reduce(RULE_15, 41);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, DOT});
    }
  }

  private final boolean action496(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 111:
      return reduce(RULE_15, 42);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, DOT});
    }
  }

  private final boolean action497(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(676);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL});
    }
  }

  private final boolean action498(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(677);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action499(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto499(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 679;
    case 87: return 680;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 28: return 681;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action500(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto500(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 682;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action501(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto501(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 683;
    case 30: return 678;
    case 97: return 684;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action502(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto502(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 685;
    case 30: return 678;
    case 97: return 686;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action503(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto503(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 687;
    case 30: return 678;
    case 97: return 688;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action504(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto504(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 689;
    case 30: return 678;
    case 97: return 690;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action505(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto505(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 691;
    case 87: return 692;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 28: return 681;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action506(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto506(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 693;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action507(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto507(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 694;
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 695;
    case 60: return 340;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action508(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto508(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 696;
    case 30: return 678;
    case 97: return 697;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action509(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto509(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 698;
    case 30: return 699;
    case 97: return 700;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 701;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action510(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto510(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 79: return 702;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 29: return 451;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action511(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto511(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 703;
    case 87: return 704;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 28: return 681;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action512(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto512(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 705;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 88: return 706;
    case 28: return 681;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action513(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto513(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 707;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action514(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto514(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 708;
    case 30: return 678;
    case 97: return 709;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action515(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 99:
      stateStack.addFirst(710);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL});
    }
  }

  private final boolean action516(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto516(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 711;
    case 30: return 678;
    case 97: return 712;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action517(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto517(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 713;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 88: return 714;
    case 28: return 681;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action518(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto518(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 715;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 88: return 716;
    case 28: return 681;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action519(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto519(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 717;
    case 87: return 718;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 28: return 681;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action520(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto520(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 719;
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 720;
    case 60: return 340;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action521(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto521(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 721;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 88: return 722;
    case 28: return 681;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action522(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto522(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 723;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 88: return 724;
    case 28: return 681;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action523(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto523(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 725;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 88: return 726;
    case 28: return 681;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action524(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto524(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 727;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 88: return 728;
    case 28: return 681;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action525(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto525(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 30: return 678;
    case 97: return 729;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 88: return 730;
    case 28: return 681;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action526(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto526(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 79: return 731;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 29: return 732;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action527(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 166:
      stateStack.addFirst(733);
      tokenStack.addFirst(token);
      return true;
    case 159:
      return reduce(RULE_76, 0);
    case 156:
      return reduce(RULE_76, 0);
    case 101:
      return reduce(RULE_76, 0);
    case 102:
      return reduce(RULE_76, 0);
    case 154:
      return reduce(RULE_76, 0);
    case 181:
      return reduce(RULE_76, 0);
    case 174:
      return reduce(RULE_76, 0);
    case 184:
      return reduce(RULE_76, 0);
    case 201:
      return reduce(RULE_76, 0);
    case 132:
      return reduce(RULE_76, 0);
    case 202:
      return reduce(RULE_76, 0);
    case 185:
      return reduce(RULE_76, 0);
    case 133:
      return reduce(RULE_76, 0);
    case 205:
      return reduce(RULE_76, 0);
    case 168:
      return reduce(RULE_76, 0);
    case 196:
      return reduce(RULE_76, 0);
    case 194:
      return reduce(RULE_76, 0);
    case 199:
      return reduce(RULE_76, 0);
    case 200:
      return reduce(RULE_76, 0);
    case 192:
      return reduce(RULE_76, 0);
    case 165:
      return reduce(RULE_76, 0);
    case 98:
      return reduce(RULE_76, 0);
    case 155:
      return reduce(RULE_76, 0);
    case 142:
      return reduce(RULE_76, 0);
    case 189:
      return reduce(RULE_76, 0);
    case 183:
      return reduce(RULE_76, 0);
    case 163:
      return reduce(RULE_76, 0);
    case 186:
      return reduce(RULE_76, 0);
    case 198:
      return reduce(RULE_76, 0);
    case 100:
      return reduce(RULE_76, 0);
    case 175:
      return reduce(RULE_76, 0);
    case 128:
      return reduce(RULE_76, 0);
    case 169:
      return reduce(RULE_76, 0);
    case 190:
      return reduce(RULE_76, 0);
    case 171:
      return reduce(RULE_76, 0);
    case 179:
      return reduce(RULE_76, 0);
    case 164:
      return reduce(RULE_76, 0);
    case 203:
      return reduce(RULE_76, 0);
    case 172:
      return reduce(RULE_76, 0);
    case 195:
      return reduce(RULE_76, 0);
    case 157:
      return reduce(RULE_76, 0);
    case 147:
      return reduce(RULE_76, 0);
    case 207:
      return reduce(RULE_76, 0);
    case 193:
      return reduce(RULE_76, 0);
    case 119:
      return reduce(RULE_76, 0);
    case 115:
      return reduce(RULE_76, 0);
    case 99:
      return reduce(RULE_76, 0);
    case 182:
      return reduce(RULE_76, 0);
    case 158:
      return reduce(RULE_76, 0);
    case 131:
      return reduce(RULE_76, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, ELSE_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action528(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto528(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 736;
    case 85: return 349;
    case 90: return 350;
    case 83: return 737;
    default: return -1;
    }
  }

  private final boolean action529(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto529(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 738;
    case 85: return 349;
    case 90: return 350;
    case 83: return 739;
    default: return -1;
    }
  }

  private final boolean action530(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto530(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 740;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action531(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto531(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 741;
    case 85: return 349;
    case 90: return 350;
    case 83: return 742;
    default: return -1;
    }
  }

  private final boolean action532(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto532(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 743;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 744;
    default: return -1;
    }
  }

  private final boolean action533(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto533(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 745;
    case 85: return 349;
    case 90: return 350;
    case 83: return 746;
    default: return -1;
    }
  }

  private final boolean action534(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto534(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 747;
    case 85: return 349;
    case 90: return 350;
    case 83: return 748;
    default: return -1;
    }
  }

  private final boolean action535(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto535(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 749;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action536(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto536(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 750;
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 751;
    case 60: return 340;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action537(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto537(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 752;
    case 30: return 678;
    case 97: return 753;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action538(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto538(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 754;
    case 30: return 755;
    case 97: return 700;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 756;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action539(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto539(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 79: return 757;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 29: return 449;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action540(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto540(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 758;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action541(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(759);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action542(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto542(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 760;
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 761;
    case 60: return 340;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action543(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto543(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 762;
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 763;
    case 60: return 340;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action544(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto544(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 85: return 764;
    case 90: return 350;
    case 83: return 765;
    default: return -1;
    }
  }

  private final boolean action545(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto545(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 28: return 735;
    case 88: return 347;
    case 85: return 766;
    case 90: return 350;
    case 83: return 767;
    default: return -1;
    }
  }

  private final boolean action546(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto546(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 768;
    case 85: return 349;
    case 90: return 350;
    case 83: return 769;
    default: return -1;
    }
  }

  private final boolean action547(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto547(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 91: return 346;
    case 28: return 735;
    case 88: return 347;
    case 85: return 770;
    case 90: return 350;
    case 83: return 771;
    default: return -1;
    }
  }

  private final boolean action548(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto548(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 772;
    case 85: return 349;
    case 90: return 350;
    case 83: return 773;
    default: return -1;
    }
  }

  private final boolean action549(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto549(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 774;
    case 85: return 349;
    case 90: return 350;
    case 83: return 775;
    default: return -1;
    }
  }

  private final boolean action550(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto550(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 776;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action551(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto551(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 85: return 777;
    case 90: return 350;
    case 83: return 778;
    default: return -1;
    }
  }

  private final boolean action552(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto552(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 779;
    case 85: return 349;
    case 90: return 350;
    case 83: return 780;
    default: return -1;
    }
  }

  private final boolean action553(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto553(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 781;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 782;
    default: return -1;
    }
  }

  private final boolean action554(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto554(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 783;
    case 85: return 349;
    case 90: return 350;
    case 83: return 784;
    default: return -1;
    }
  }

  private final boolean action555(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto555(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 785;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action556(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(786);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action557(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 20);
    case 173:
      return reduce(RULE_36, 20);
    case 101:
      return reduce(RULE_36, 20);
    case 145:
      return reduce(RULE_36, 20);
    case 116:
      return reduce(RULE_36, 20);
    case 151:
      return reduce(RULE_36, 20);
    case 134:
      return reduce(RULE_36, 20);
    case 132:
      return reduce(RULE_36, 20);
    case 103:
      return reduce(RULE_36, 20);
    case 133:
      return reduce(RULE_36, 20);
    case 120:
      return reduce(RULE_36, 20);
    case 148:
      return reduce(RULE_36, 20);
    case 112:
      return reduce(RULE_36, 20);
    case 149:
      return reduce(RULE_36, 20);
    case 110:
      return reduce(RULE_36, 20);
    case 108:
      return reduce(RULE_36, 20);
    case 106:
      return reduce(RULE_36, 20);
    case 125:
      return reduce(RULE_36, 20);
    case 178:
      return reduce(RULE_36, 20);
    case 155:
      return reduce(RULE_36, 20);
    case 124:
      return reduce(RULE_36, 20);
    case 142:
      return reduce(RULE_36, 20);
    case 146:
      return reduce(RULE_36, 20);
    case 138:
      return reduce(RULE_36, 20);
    case 150:
      return reduce(RULE_36, 20);
    case 183:
      return reduce(RULE_36, 20);
    case 175:
      return reduce(RULE_36, 20);
    case 113:
      return reduce(RULE_36, 20);
    case 169:
      return reduce(RULE_36, 20);
    case 190:
      return reduce(RULE_36, 20);
    case 143:
      return reduce(RULE_36, 20);
    case 164:
      return reduce(RULE_36, 20);
    case 203:
      return reduce(RULE_36, 20);
    case 147:
      return reduce(RULE_36, 20);
    case 130:
      return reduce(RULE_36, 20);
    case 193:
      return reduce(RULE_36, 20);
    case 129:
      return reduce(RULE_36, 20);
    case 136:
      return reduce(RULE_36, 20);
    case 144:
      return reduce(RULE_36, 20);
    case 182:
      return reduce(RULE_36, 20);
    case 140:
      return reduce(RULE_36, 20);
    case 122:
      return reduce(RULE_36, 20);
    case 109:
      return reduce(RULE_36, 20);
    case 191:
      return reduce(RULE_36, 20);
    case 131:
      return reduce(RULE_36, 20);
    case 118:
      return reduce(RULE_36, 20);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action558(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_77, 0);
    case 173:
      return reduce(RULE_77, 0);
    case 101:
      return reduce(RULE_77, 0);
    case 145:
      return reduce(RULE_77, 0);
    case 116:
      return reduce(RULE_77, 0);
    case 151:
      return reduce(RULE_77, 0);
    case 134:
      return reduce(RULE_77, 0);
    case 132:
      return reduce(RULE_77, 0);
    case 103:
      return reduce(RULE_77, 0);
    case 133:
      return reduce(RULE_77, 0);
    case 120:
      return reduce(RULE_77, 0);
    case 148:
      return reduce(RULE_77, 0);
    case 112:
      return reduce(RULE_77, 0);
    case 149:
      return reduce(RULE_77, 0);
    case 110:
      return reduce(RULE_77, 0);
    case 108:
      return reduce(RULE_77, 0);
    case 106:
      return reduce(RULE_77, 0);
    case 125:
      return reduce(RULE_77, 0);
    case 178:
      return reduce(RULE_77, 0);
    case 155:
      return reduce(RULE_77, 0);
    case 124:
      return reduce(RULE_77, 0);
    case 142:
      return reduce(RULE_77, 0);
    case 146:
      return reduce(RULE_77, 0);
    case 138:
      return reduce(RULE_77, 0);
    case 150:
      return reduce(RULE_77, 0);
    case 183:
      return reduce(RULE_77, 0);
    case 175:
      return reduce(RULE_77, 0);
    case 113:
      return reduce(RULE_77, 0);
    case 169:
      return reduce(RULE_77, 0);
    case 190:
      return reduce(RULE_77, 0);
    case 143:
      return reduce(RULE_77, 0);
    case 164:
      return reduce(RULE_77, 0);
    case 203:
      return reduce(RULE_77, 0);
    case 147:
      return reduce(RULE_77, 0);
    case 130:
      return reduce(RULE_77, 0);
    case 193:
      return reduce(RULE_77, 0);
    case 129:
      return reduce(RULE_77, 0);
    case 136:
      return reduce(RULE_77, 0);
    case 144:
      return reduce(RULE_77, 0);
    case 182:
      return reduce(RULE_77, 0);
    case 140:
      return reduce(RULE_77, 0);
    case 122:
      return reduce(RULE_77, 0);
    case 109:
      return reduce(RULE_77, 0);
    case 191:
      return reduce(RULE_77, 0);
    case 131:
      return reduce(RULE_77, 0);
    case 118:
      return reduce(RULE_77, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action559(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(185);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, RSQUARE, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto559(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 787;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action560(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(788);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final boolean action561(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 17);
    case 156:
      return reduce(RULE_39, 17);
    case 101:
      return reduce(RULE_39, 17);
    case 102:
      return reduce(RULE_39, 17);
    case 154:
      return reduce(RULE_39, 17);
    case 181:
      return reduce(RULE_39, 17);
    case 174:
      return reduce(RULE_39, 17);
    case 184:
      return reduce(RULE_39, 17);
    case 201:
      return reduce(RULE_39, 17);
    case 132:
      return reduce(RULE_39, 17);
    case 202:
      return reduce(RULE_39, 17);
    case 185:
      return reduce(RULE_39, 17);
    case 133:
      return reduce(RULE_39, 17);
    case 205:
      return reduce(RULE_39, 17);
    case 168:
      return reduce(RULE_39, 17);
    case 196:
      return reduce(RULE_39, 17);
    case 194:
      return reduce(RULE_39, 17);
    case 199:
      return reduce(RULE_39, 17);
    case 200:
      return reduce(RULE_39, 17);
    case 192:
      return reduce(RULE_39, 17);
    case 165:
      return reduce(RULE_39, 17);
    case 98:
      return reduce(RULE_39, 17);
    case 155:
      return reduce(RULE_39, 17);
    case 142:
      return reduce(RULE_39, 17);
    case 189:
      return reduce(RULE_39, 17);
    case 183:
      return reduce(RULE_39, 17);
    case 163:
      return reduce(RULE_39, 17);
    case 186:
      return reduce(RULE_39, 17);
    case 198:
      return reduce(RULE_39, 17);
    case 100:
      return reduce(RULE_39, 17);
    case 175:
      return reduce(RULE_39, 17);
    case 128:
      return reduce(RULE_39, 17);
    case 169:
      return reduce(RULE_39, 17);
    case 190:
      return reduce(RULE_39, 17);
    case 171:
      return reduce(RULE_39, 17);
    case 179:
      return reduce(RULE_39, 17);
    case 164:
      return reduce(RULE_39, 17);
    case 203:
      return reduce(RULE_39, 17);
    case 172:
      return reduce(RULE_39, 17);
    case 195:
      return reduce(RULE_39, 17);
    case 157:
      return reduce(RULE_39, 17);
    case 147:
      return reduce(RULE_39, 17);
    case 207:
      return reduce(RULE_39, 17);
    case 193:
      return reduce(RULE_39, 17);
    case 119:
      return reduce(RULE_39, 17);
    case 115:
      return reduce(RULE_39, 17);
    case 99:
      return reduce(RULE_39, 17);
    case 182:
      return reduce(RULE_39, 17);
    case 158:
      return reduce(RULE_39, 17);
    case 131:
      return reduce(RULE_39, 17);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action562(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_77, 1);
    case 173:
      return reduce(RULE_77, 1);
    case 101:
      return reduce(RULE_77, 1);
    case 145:
      return reduce(RULE_77, 1);
    case 116:
      return reduce(RULE_77, 1);
    case 151:
      return reduce(RULE_77, 1);
    case 132:
      return reduce(RULE_77, 1);
    case 134:
      return reduce(RULE_77, 1);
    case 103:
      return reduce(RULE_77, 1);
    case 133:
      return reduce(RULE_77, 1);
    case 120:
      return reduce(RULE_77, 1);
    case 112:
      return reduce(RULE_77, 1);
    case 148:
      return reduce(RULE_77, 1);
    case 149:
      return reduce(RULE_77, 1);
    case 110:
      return reduce(RULE_77, 1);
    case 108:
      return reduce(RULE_77, 1);
    case 106:
      return reduce(RULE_77, 1);
    case 125:
      return reduce(RULE_77, 1);
    case 178:
      return reduce(RULE_77, 1);
    case 155:
      return reduce(RULE_77, 1);
    case 124:
      return reduce(RULE_77, 1);
    case 142:
      return reduce(RULE_77, 1);
    case 146:
      return reduce(RULE_77, 1);
    case 138:
      return reduce(RULE_77, 1);
    case 150:
      return reduce(RULE_77, 1);
    case 183:
      return reduce(RULE_77, 1);
    case 175:
      return reduce(RULE_77, 1);
    case 113:
      return reduce(RULE_77, 1);
    case 169:
      return reduce(RULE_77, 1);
    case 190:
      return reduce(RULE_77, 1);
    case 143:
      return reduce(RULE_77, 1);
    case 164:
      return reduce(RULE_77, 1);
    case 203:
      return reduce(RULE_77, 1);
    case 147:
      return reduce(RULE_77, 1);
    case 130:
      return reduce(RULE_77, 1);
    case 193:
      return reduce(RULE_77, 1);
    case 144:
      return reduce(RULE_77, 1);
    case 136:
      return reduce(RULE_77, 1);
    case 129:
      return reduce(RULE_77, 1);
    case 182:
      return reduce(RULE_77, 1);
    case 122:
      return reduce(RULE_77, 1);
    case 140:
      return reduce(RULE_77, 1);
    case 109:
      return reduce(RULE_77, 1);
    case 191:
      return reduce(RULE_77, 1);
    case 131:
      return reduce(RULE_77, 1);
    case 118:
      return reduce(RULE_77, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action563(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_78, 2);
    case 156:
      return reduce(RULE_78, 2);
    case 102:
      return reduce(RULE_78, 2);
    case 181:
      return reduce(RULE_78, 2);
    case 184:
      return reduce(RULE_78, 2);
    case 201:
      return reduce(RULE_78, 2);
    case 202:
      return reduce(RULE_78, 2);
    case 132:
      return reduce(RULE_78, 2);
    case 134:
      return reduce(RULE_78, 2);
    case 153:
      return reduce(RULE_78, 2);
    case 185:
      return reduce(RULE_78, 2);
    case 133:
      return reduce(RULE_78, 2);
    case 205:
      return reduce(RULE_78, 2);
    case 168:
      return reduce(RULE_78, 2);
    case 194:
      return reduce(RULE_78, 2);
    case 200:
      return reduce(RULE_78, 2);
    case 192:
      return reduce(RULE_78, 2);
    case 165:
      return reduce(RULE_78, 2);
    case 98:
      return reduce(RULE_78, 2);
    case 142:
      return reduce(RULE_78, 2);
    case 124:
      return reduce(RULE_78, 2);
    case 150:
      return reduce(RULE_78, 2);
    case 186:
      return reduce(RULE_78, 2);
    case 198:
      return reduce(RULE_78, 2);
    case 100:
      return reduce(RULE_78, 2);
    case 128:
      return reduce(RULE_78, 2);
    case 171:
      return reduce(RULE_78, 2);
    case 179:
      return reduce(RULE_78, 2);
    case 164:
      return reduce(RULE_78, 2);
    case 195:
      return reduce(RULE_78, 2);
    case 99:
      return reduce(RULE_78, 2);
    case 158:
      return reduce(RULE_78, 2);
    case 131:
      return reduce(RULE_78, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, MINUS, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, EXCLAIMATION_MARK, SEMICOLON, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action564(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_78, 0);
    case 156:
      return reduce(RULE_78, 0);
    case 102:
      return reduce(RULE_78, 0);
    case 181:
      return reduce(RULE_78, 0);
    case 184:
      return reduce(RULE_78, 0);
    case 201:
      return reduce(RULE_78, 0);
    case 202:
      return reduce(RULE_78, 0);
    case 132:
      return reduce(RULE_78, 0);
    case 134:
      return reduce(RULE_78, 0);
    case 153:
      return reduce(RULE_78, 0);
    case 185:
      return reduce(RULE_78, 0);
    case 133:
      return reduce(RULE_78, 0);
    case 205:
      return reduce(RULE_78, 0);
    case 168:
      return reduce(RULE_78, 0);
    case 194:
      return reduce(RULE_78, 0);
    case 200:
      return reduce(RULE_78, 0);
    case 192:
      return reduce(RULE_78, 0);
    case 165:
      return reduce(RULE_78, 0);
    case 98:
      return reduce(RULE_78, 0);
    case 142:
      return reduce(RULE_78, 0);
    case 124:
      return reduce(RULE_78, 0);
    case 150:
      return reduce(RULE_78, 0);
    case 186:
      return reduce(RULE_78, 0);
    case 198:
      return reduce(RULE_78, 0);
    case 100:
      return reduce(RULE_78, 0);
    case 128:
      return reduce(RULE_78, 0);
    case 171:
      return reduce(RULE_78, 0);
    case 179:
      return reduce(RULE_78, 0);
    case 164:
      return reduce(RULE_78, 0);
    case 195:
      return reduce(RULE_78, 0);
    case 99:
      return reduce(RULE_78, 0);
    case 158:
      return reduce(RULE_78, 0);
    case 131:
      return reduce(RULE_78, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, MINUS, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, EXCLAIMATION_MARK, SEMICOLON, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action565(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(789);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, SEMICOLON, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto565(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 790;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action566(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(791);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action567(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_79, 1);
    case 173:
      return reduce(RULE_79, 1);
    case 101:
      return reduce(RULE_79, 1);
    case 145:
      return reduce(RULE_79, 1);
    case 116:
      return reduce(RULE_79, 1);
    case 151:
      return reduce(RULE_79, 1);
    case 134:
      return reduce(RULE_79, 1);
    case 132:
      return reduce(RULE_79, 1);
    case 103:
      return reduce(RULE_79, 1);
    case 133:
      return reduce(RULE_79, 1);
    case 120:
      return reduce(RULE_79, 1);
    case 112:
      return reduce(RULE_79, 1);
    case 148:
      return reduce(RULE_79, 1);
    case 149:
      return reduce(RULE_79, 1);
    case 110:
      return reduce(RULE_79, 1);
    case 108:
      return reduce(RULE_79, 1);
    case 106:
      return reduce(RULE_79, 1);
    case 125:
      return reduce(RULE_79, 1);
    case 178:
      return reduce(RULE_79, 1);
    case 155:
      return reduce(RULE_79, 1);
    case 124:
      return reduce(RULE_79, 1);
    case 142:
      return reduce(RULE_79, 1);
    case 146:
      return reduce(RULE_79, 1);
    case 138:
      return reduce(RULE_79, 1);
    case 150:
      return reduce(RULE_79, 1);
    case 183:
      return reduce(RULE_79, 1);
    case 175:
      return reduce(RULE_79, 1);
    case 113:
      return reduce(RULE_79, 1);
    case 190:
      return reduce(RULE_79, 1);
    case 169:
      return reduce(RULE_79, 1);
    case 143:
      return reduce(RULE_79, 1);
    case 164:
      return reduce(RULE_79, 1);
    case 203:
      return reduce(RULE_79, 1);
    case 147:
      return reduce(RULE_79, 1);
    case 130:
      return reduce(RULE_79, 1);
    case 193:
      return reduce(RULE_79, 1);
    case 129:
      return reduce(RULE_79, 1);
    case 136:
      return reduce(RULE_79, 1);
    case 144:
      return reduce(RULE_79, 1);
    case 182:
      return reduce(RULE_79, 1);
    case 140:
      return reduce(RULE_79, 1);
    case 122:
      return reduce(RULE_79, 1);
    case 109:
      return reduce(RULE_79, 1);
    case 191:
      return reduce(RULE_79, 1);
    case 131:
      return reduce(RULE_79, 1);
    case 118:
      return reduce(RULE_79, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action568(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_55, 1);
    case 101:
      return reduce(RULE_55, 1);
    case 103:
      return reduce(RULE_55, 1);
    case 112:
      return reduce(RULE_55, 1);
    case 148:
      return reduce(RULE_55, 1);
    case 149:
      return reduce(RULE_55, 1);
    case 110:
      return reduce(RULE_55, 1);
    case 108:
      return reduce(RULE_55, 1);
    case 106:
      return reduce(RULE_55, 1);
    case 125:
      return reduce(RULE_55, 1);
    case 138:
      return reduce(RULE_55, 1);
    case 142:
      return reduce(RULE_55, 1);
    case 155:
      return reduce(RULE_55, 1);
    case 150:
      return reduce(RULE_55, 1);
    case 183:
      return reduce(RULE_55, 1);
    case 175:
      return reduce(RULE_55, 1);
    case 169:
      return reduce(RULE_55, 1);
    case 190:
      return reduce(RULE_55, 1);
    case 143:
      return reduce(RULE_55, 1);
    case 164:
      return reduce(RULE_55, 1);
    case 203:
      return reduce(RULE_55, 1);
    case 147:
      return reduce(RULE_55, 1);
    case 193:
      return reduce(RULE_55, 1);
    case 182:
      return reduce(RULE_55, 1);
    case 109:
      return reduce(RULE_55, 1);
    case 191:
      return reduce(RULE_55, 1);
    case 131:
      return reduce(RULE_55, 1);
    case 118:
      return reduce(RULE_55, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action569(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(508);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(792);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(793);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 178:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_44, 1);
    case 146:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 116:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_44, 1);
    case 147:
      return reduce(RULE_44, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 148:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_44, 1);
    case 118:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, RBRACE, LANGLE_EQUALS, PERCENT, QUESTION_MARK_DOT, LANGLE, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action570(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(794);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_80, 7);
    case 148:
      return reduce(RULE_80, 7);
    default: throw new BadTokenException(token, new Object[] {RBRACE, RPAREN, COMMA});
    }
  }

  private final boolean action571(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(795);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action572(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(796);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(797);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 178:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_44, 0);
    case 146:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 116:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_44, 0);
    case 147:
      return reduce(RULE_44, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 148:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_44, 0);
    case 118:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, RBRACE, LANGLE_EQUALS, PERCENT, QUESTION_MARK_DOT, LANGLE, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action573(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_80, 8);
    case 148:
      return reduce(RULE_80, 8);
    default: throw new BadTokenException(token, new Object[] {CARET, EXCLAIMATION_MARK_EQUALS, AMPERSAND, RBRACE, QUESTION_MARK, PIPE, RPAREN, DOUBLE_EQUALS, QUESTION_MARK_COLON, DOUBLE_AMPERSAND, DOUBLE_PIPE});
    }
  }

  private final boolean action574(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 15);
    case 156:
      return reduce(RULE_39, 15);
    case 101:
      return reduce(RULE_39, 15);
    case 102:
      return reduce(RULE_39, 15);
    case 154:
      return reduce(RULE_39, 15);
    case 181:
      return reduce(RULE_39, 15);
    case 174:
      return reduce(RULE_39, 15);
    case 184:
      return reduce(RULE_39, 15);
    case 201:
      return reduce(RULE_39, 15);
    case 132:
      return reduce(RULE_39, 15);
    case 202:
      return reduce(RULE_39, 15);
    case 185:
      return reduce(RULE_39, 15);
    case 133:
      return reduce(RULE_39, 15);
    case 205:
      return reduce(RULE_39, 15);
    case 168:
      return reduce(RULE_39, 15);
    case 196:
      return reduce(RULE_39, 15);
    case 194:
      return reduce(RULE_39, 15);
    case 199:
      return reduce(RULE_39, 15);
    case 200:
      return reduce(RULE_39, 15);
    case 192:
      return reduce(RULE_39, 15);
    case 165:
      return reduce(RULE_39, 15);
    case 98:
      return reduce(RULE_39, 15);
    case 155:
      return reduce(RULE_39, 15);
    case 142:
      return reduce(RULE_39, 15);
    case 189:
      return reduce(RULE_39, 15);
    case 183:
      return reduce(RULE_39, 15);
    case 163:
      return reduce(RULE_39, 15);
    case 186:
      return reduce(RULE_39, 15);
    case 198:
      return reduce(RULE_39, 15);
    case 100:
      return reduce(RULE_39, 15);
    case 175:
      return reduce(RULE_39, 15);
    case 128:
      return reduce(RULE_39, 15);
    case 169:
      return reduce(RULE_39, 15);
    case 190:
      return reduce(RULE_39, 15);
    case 171:
      return reduce(RULE_39, 15);
    case 179:
      return reduce(RULE_39, 15);
    case 164:
      return reduce(RULE_39, 15);
    case 203:
      return reduce(RULE_39, 15);
    case 172:
      return reduce(RULE_39, 15);
    case 195:
      return reduce(RULE_39, 15);
    case 157:
      return reduce(RULE_39, 15);
    case 147:
      return reduce(RULE_39, 15);
    case 207:
      return reduce(RULE_39, 15);
    case 193:
      return reduce(RULE_39, 15);
    case 119:
      return reduce(RULE_39, 15);
    case 115:
      return reduce(RULE_39, 15);
    case 99:
      return reduce(RULE_39, 15);
    case 182:
      return reduce(RULE_39, 15);
    case 158:
      return reduce(RULE_39, 15);
    case 131:
      return reduce(RULE_39, 15);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action575(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_66, 1);
    case 156:
      return reduce(RULE_66, 1);
    case 101:
      return reduce(RULE_66, 1);
    case 102:
      return reduce(RULE_66, 1);
    case 154:
      return reduce(RULE_66, 1);
    case 181:
      return reduce(RULE_66, 1);
    case 174:
      return reduce(RULE_66, 1);
    case 184:
      return reduce(RULE_66, 1);
    case 201:
      return reduce(RULE_66, 1);
    case 132:
      return reduce(RULE_66, 1);
    case 202:
      return reduce(RULE_66, 1);
    case 185:
      return reduce(RULE_66, 1);
    case 133:
      return reduce(RULE_66, 1);
    case 205:
      return reduce(RULE_66, 1);
    case 168:
      return reduce(RULE_66, 1);
    case 196:
      return reduce(RULE_66, 1);
    case 194:
      return reduce(RULE_66, 1);
    case 199:
      return reduce(RULE_66, 1);
    case 200:
      return reduce(RULE_66, 1);
    case 192:
      return reduce(RULE_66, 1);
    case 165:
      return reduce(RULE_66, 1);
    case 98:
      return reduce(RULE_66, 1);
    case 155:
      return reduce(RULE_66, 1);
    case 142:
      return reduce(RULE_66, 1);
    case 189:
      return reduce(RULE_66, 1);
    case 183:
      return reduce(RULE_66, 1);
    case 163:
      return reduce(RULE_66, 1);
    case 186:
      return reduce(RULE_66, 1);
    case 198:
      return reduce(RULE_66, 1);
    case 100:
      return reduce(RULE_66, 1);
    case 175:
      return reduce(RULE_66, 1);
    case 128:
      return reduce(RULE_66, 1);
    case 169:
      return reduce(RULE_66, 1);
    case 190:
      return reduce(RULE_66, 1);
    case 171:
      return reduce(RULE_66, 1);
    case 179:
      return reduce(RULE_66, 1);
    case 164:
      return reduce(RULE_66, 1);
    case 203:
      return reduce(RULE_66, 1);
    case 172:
      return reduce(RULE_66, 1);
    case 195:
      return reduce(RULE_66, 1);
    case 157:
      return reduce(RULE_66, 1);
    case 147:
      return reduce(RULE_66, 1);
    case 207:
      return reduce(RULE_66, 1);
    case 193:
      return reduce(RULE_66, 1);
    case 119:
      return reduce(RULE_66, 1);
    case 115:
      return reduce(RULE_66, 1);
    case 99:
      return reduce(RULE_66, 1);
    case 182:
      return reduce(RULE_66, 1);
    case 158:
      return reduce(RULE_66, 1);
    case 131:
      return reduce(RULE_66, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action576(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 18);
    case 173:
      return reduce(RULE_36, 18);
    case 101:
      return reduce(RULE_36, 18);
    case 145:
      return reduce(RULE_36, 18);
    case 116:
      return reduce(RULE_36, 18);
    case 151:
      return reduce(RULE_36, 18);
    case 132:
      return reduce(RULE_36, 18);
    case 134:
      return reduce(RULE_36, 18);
    case 103:
      return reduce(RULE_36, 18);
    case 133:
      return reduce(RULE_36, 18);
    case 120:
      return reduce(RULE_36, 18);
    case 112:
      return reduce(RULE_36, 18);
    case 148:
      return reduce(RULE_36, 18);
    case 149:
      return reduce(RULE_36, 18);
    case 110:
      return reduce(RULE_36, 18);
    case 108:
      return reduce(RULE_36, 18);
    case 106:
      return reduce(RULE_36, 18);
    case 125:
      return reduce(RULE_36, 18);
    case 178:
      return reduce(RULE_36, 18);
    case 155:
      return reduce(RULE_36, 18);
    case 124:
      return reduce(RULE_36, 18);
    case 142:
      return reduce(RULE_36, 18);
    case 146:
      return reduce(RULE_36, 18);
    case 138:
      return reduce(RULE_36, 18);
    case 150:
      return reduce(RULE_36, 18);
    case 183:
      return reduce(RULE_36, 18);
    case 175:
      return reduce(RULE_36, 18);
    case 113:
      return reduce(RULE_36, 18);
    case 169:
      return reduce(RULE_36, 18);
    case 190:
      return reduce(RULE_36, 18);
    case 143:
      return reduce(RULE_36, 18);
    case 164:
      return reduce(RULE_36, 18);
    case 203:
      return reduce(RULE_36, 18);
    case 147:
      return reduce(RULE_36, 18);
    case 130:
      return reduce(RULE_36, 18);
    case 193:
      return reduce(RULE_36, 18);
    case 129:
      return reduce(RULE_36, 18);
    case 136:
      return reduce(RULE_36, 18);
    case 144:
      return reduce(RULE_36, 18);
    case 182:
      return reduce(RULE_36, 18);
    case 122:
      return reduce(RULE_36, 18);
    case 140:
      return reduce(RULE_36, 18);
    case 109:
      return reduce(RULE_36, 18);
    case 191:
      return reduce(RULE_36, 18);
    case 131:
      return reduce(RULE_36, 18);
    case 118:
      return reduce(RULE_36, 18);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action577(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto577(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 84: return 329;
    case 89: return 330;
    case 56: return 450;
    case 94: return 331;
    case 93: return 332;
    case 79: return 702;
    case 52: return 334;
    case 86: return 335;
    case 29: return 451;
    case 30: return 364;
    case 97: return 338;
    case 87: return 339;
    case 60: return 236;
    case 80: return 341;
    case 81: return 343;
    case 54: return 227;
    case 92: return 228;
    case 28: return 365;
    case 91: return 346;
    case 58: return 95;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action578(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto578(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 173;
    case 62: return 285;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 61: return 102;
    case 49: return 178;
    case 54: return 227;
    case 92: return 228;
    case 88: return 347;
    case 59: return 98;
    case 90: return 350;
    case 51: return 172;
    case 89: return 330;
    case 94: return 331;
    case 86: return 754;
    case 30: return 798;
    case 97: return 700;
    case 67: return 177;
    case 60: return 236;
    case 58: return 95;
    case 91: return 346;
    case 28: return 799;
    case 65: return 180;
    default: return -1;
    }
  }

  private final boolean action579(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto579(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 153;
    case 84: return 329;
    case 89: return 330;
    case 56: return 448;
    case 94: return 331;
    case 93: return 332;
    case 79: return 757;
    case 52: return 334;
    case 86: return 335;
    case 29: return 449;
    case 30: return 364;
    case 97: return 338;
    case 87: return 339;
    case 60: return 236;
    case 80: return 341;
    case 81: return 343;
    case 54: return 227;
    case 92: return 228;
    case 28: return 365;
    case 91: return 346;
    case 58: return 95;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action580(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 11);
    case 173:
      return reduce(RULE_36, 11);
    case 101:
      return reduce(RULE_36, 11);
    case 145:
      return reduce(RULE_36, 11);
    case 116:
      return reduce(RULE_36, 11);
    case 151:
      return reduce(RULE_36, 11);
    case 134:
      return reduce(RULE_36, 11);
    case 132:
      return reduce(RULE_36, 11);
    case 103:
      return reduce(RULE_36, 11);
    case 133:
      return reduce(RULE_36, 11);
    case 120:
      return reduce(RULE_36, 11);
    case 148:
      return reduce(RULE_36, 11);
    case 112:
      return reduce(RULE_36, 11);
    case 149:
      return reduce(RULE_36, 11);
    case 110:
      return reduce(RULE_36, 11);
    case 108:
      return reduce(RULE_36, 11);
    case 106:
      return reduce(RULE_36, 11);
    case 125:
      return reduce(RULE_36, 11);
    case 178:
      return reduce(RULE_36, 11);
    case 155:
      return reduce(RULE_36, 11);
    case 124:
      return reduce(RULE_36, 11);
    case 142:
      return reduce(RULE_36, 11);
    case 146:
      return reduce(RULE_36, 11);
    case 138:
      return reduce(RULE_36, 11);
    case 150:
      return reduce(RULE_36, 11);
    case 183:
      return reduce(RULE_36, 11);
    case 175:
      return reduce(RULE_36, 11);
    case 113:
      return reduce(RULE_36, 11);
    case 169:
      return reduce(RULE_36, 11);
    case 190:
      return reduce(RULE_36, 11);
    case 143:
      return reduce(RULE_36, 11);
    case 164:
      return reduce(RULE_36, 11);
    case 203:
      return reduce(RULE_36, 11);
    case 147:
      return reduce(RULE_36, 11);
    case 130:
      return reduce(RULE_36, 11);
    case 193:
      return reduce(RULE_36, 11);
    case 129:
      return reduce(RULE_36, 11);
    case 136:
      return reduce(RULE_36, 11);
    case 144:
      return reduce(RULE_36, 11);
    case 182:
      return reduce(RULE_36, 11);
    case 140:
      return reduce(RULE_36, 11);
    case 122:
      return reduce(RULE_36, 11);
    case 109:
      return reduce(RULE_36, 11);
    case 191:
      return reduce(RULE_36, 11);
    case 131:
      return reduce(RULE_36, 11);
    case 118:
      return reduce(RULE_36, 11);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action581(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 16);
    case 156:
      return reduce(RULE_39, 16);
    case 101:
      return reduce(RULE_39, 16);
    case 102:
      return reduce(RULE_39, 16);
    case 154:
      return reduce(RULE_39, 16);
    case 181:
      return reduce(RULE_39, 16);
    case 174:
      return reduce(RULE_39, 16);
    case 184:
      return reduce(RULE_39, 16);
    case 201:
      return reduce(RULE_39, 16);
    case 132:
      return reduce(RULE_39, 16);
    case 202:
      return reduce(RULE_39, 16);
    case 185:
      return reduce(RULE_39, 16);
    case 133:
      return reduce(RULE_39, 16);
    case 205:
      return reduce(RULE_39, 16);
    case 168:
      return reduce(RULE_39, 16);
    case 196:
      return reduce(RULE_39, 16);
    case 194:
      return reduce(RULE_39, 16);
    case 199:
      return reduce(RULE_39, 16);
    case 200:
      return reduce(RULE_39, 16);
    case 192:
      return reduce(RULE_39, 16);
    case 165:
      return reduce(RULE_39, 16);
    case 98:
      return reduce(RULE_39, 16);
    case 155:
      return reduce(RULE_39, 16);
    case 142:
      return reduce(RULE_39, 16);
    case 189:
      return reduce(RULE_39, 16);
    case 183:
      return reduce(RULE_39, 16);
    case 163:
      return reduce(RULE_39, 16);
    case 186:
      return reduce(RULE_39, 16);
    case 198:
      return reduce(RULE_39, 16);
    case 100:
      return reduce(RULE_39, 16);
    case 175:
      return reduce(RULE_39, 16);
    case 128:
      return reduce(RULE_39, 16);
    case 169:
      return reduce(RULE_39, 16);
    case 190:
      return reduce(RULE_39, 16);
    case 171:
      return reduce(RULE_39, 16);
    case 179:
      return reduce(RULE_39, 16);
    case 164:
      return reduce(RULE_39, 16);
    case 203:
      return reduce(RULE_39, 16);
    case 172:
      return reduce(RULE_39, 16);
    case 195:
      return reduce(RULE_39, 16);
    case 157:
      return reduce(RULE_39, 16);
    case 147:
      return reduce(RULE_39, 16);
    case 207:
      return reduce(RULE_39, 16);
    case 193:
      return reduce(RULE_39, 16);
    case 119:
      return reduce(RULE_39, 16);
    case 115:
      return reduce(RULE_39, 16);
    case 99:
      return reduce(RULE_39, 16);
    case 182:
      return reduce(RULE_39, 16);
    case 158:
      return reduce(RULE_39, 16);
    case 131:
      return reduce(RULE_39, 16);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action582(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto582(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 614;
    case 26: return 800;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 17: return 801;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action583(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto583(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 802;
    default: return -1;
    }
  }

  private final boolean action584(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_67, 0);
    case 156:
      return reduce(RULE_67, 0);
    case 101:
      return reduce(RULE_67, 0);
    case 102:
      return reduce(RULE_67, 0);
    case 154:
      return reduce(RULE_67, 0);
    case 181:
      return reduce(RULE_67, 0);
    case 174:
      return reduce(RULE_67, 0);
    case 184:
      return reduce(RULE_67, 0);
    case 201:
      return reduce(RULE_67, 0);
    case 132:
      return reduce(RULE_67, 0);
    case 202:
      return reduce(RULE_67, 0);
    case 185:
      return reduce(RULE_67, 0);
    case 133:
      return reduce(RULE_67, 0);
    case 205:
      return reduce(RULE_67, 0);
    case 168:
      return reduce(RULE_67, 0);
    case 196:
      return reduce(RULE_67, 0);
    case 194:
      return reduce(RULE_67, 0);
    case 199:
      return reduce(RULE_67, 0);
    case 200:
      return reduce(RULE_67, 0);
    case 192:
      return reduce(RULE_67, 0);
    case 165:
      return reduce(RULE_67, 0);
    case 98:
      return reduce(RULE_67, 0);
    case 155:
      return reduce(RULE_67, 0);
    case 142:
      return reduce(RULE_67, 0);
    case 189:
      return reduce(RULE_67, 0);
    case 183:
      return reduce(RULE_67, 0);
    case 163:
      return reduce(RULE_67, 0);
    case 186:
      return reduce(RULE_67, 0);
    case 198:
      return reduce(RULE_67, 0);
    case 100:
      return reduce(RULE_67, 0);
    case 175:
      return reduce(RULE_67, 0);
    case 128:
      return reduce(RULE_67, 0);
    case 169:
      return reduce(RULE_67, 0);
    case 190:
      return reduce(RULE_67, 0);
    case 171:
      return reduce(RULE_67, 0);
    case 179:
      return reduce(RULE_67, 0);
    case 164:
      return reduce(RULE_67, 0);
    case 203:
      return reduce(RULE_67, 0);
    case 172:
      return reduce(RULE_67, 0);
    case 195:
      return reduce(RULE_67, 0);
    case 157:
      return reduce(RULE_67, 0);
    case 147:
      return reduce(RULE_67, 0);
    case 207:
      return reduce(RULE_67, 0);
    case 193:
      return reduce(RULE_67, 0);
    case 119:
      return reduce(RULE_67, 0);
    case 115:
      return reduce(RULE_67, 0);
    case 99:
      return reduce(RULE_67, 0);
    case 182:
      return reduce(RULE_67, 0);
    case 158:
      return reduce(RULE_67, 0);
    case 131:
      return reduce(RULE_67, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action585(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_68, 1);
    case 156:
      return reduce(RULE_68, 1);
    case 101:
      return reduce(RULE_68, 1);
    case 102:
      return reduce(RULE_68, 1);
    case 154:
      return reduce(RULE_68, 1);
    case 181:
      return reduce(RULE_68, 1);
    case 174:
      return reduce(RULE_68, 1);
    case 184:
      return reduce(RULE_68, 1);
    case 201:
      return reduce(RULE_68, 1);
    case 132:
      return reduce(RULE_68, 1);
    case 202:
      return reduce(RULE_68, 1);
    case 185:
      return reduce(RULE_68, 1);
    case 133:
      return reduce(RULE_68, 1);
    case 205:
      return reduce(RULE_68, 1);
    case 168:
      return reduce(RULE_68, 1);
    case 196:
      return reduce(RULE_68, 1);
    case 194:
      return reduce(RULE_68, 1);
    case 199:
      return reduce(RULE_68, 1);
    case 200:
      return reduce(RULE_68, 1);
    case 192:
      return reduce(RULE_68, 1);
    case 165:
      return reduce(RULE_68, 1);
    case 98:
      return reduce(RULE_68, 1);
    case 155:
      return reduce(RULE_68, 1);
    case 142:
      return reduce(RULE_68, 1);
    case 189:
      return reduce(RULE_68, 1);
    case 183:
      return reduce(RULE_68, 1);
    case 163:
      return reduce(RULE_68, 1);
    case 186:
      return reduce(RULE_68, 1);
    case 198:
      return reduce(RULE_68, 1);
    case 100:
      return reduce(RULE_68, 1);
    case 175:
      return reduce(RULE_68, 1);
    case 128:
      return reduce(RULE_68, 1);
    case 169:
      return reduce(RULE_68, 1);
    case 190:
      return reduce(RULE_68, 1);
    case 171:
      return reduce(RULE_68, 1);
    case 179:
      return reduce(RULE_68, 1);
    case 164:
      return reduce(RULE_68, 1);
    case 203:
      return reduce(RULE_68, 1);
    case 172:
      return reduce(RULE_68, 1);
    case 195:
      return reduce(RULE_68, 1);
    case 157:
      return reduce(RULE_68, 1);
    case 147:
      return reduce(RULE_68, 1);
    case 207:
      return reduce(RULE_68, 1);
    case 193:
      return reduce(RULE_68, 1);
    case 119:
      return reduce(RULE_68, 1);
    case 115:
      return reduce(RULE_68, 1);
    case 99:
      return reduce(RULE_68, 1);
    case 182:
      return reduce(RULE_68, 1);
    case 158:
      return reduce(RULE_68, 1);
    case 131:
      return reduce(RULE_68, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action586(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_81, 0);
    case 156:
      return reduce(RULE_81, 0);
    case 101:
      return reduce(RULE_81, 0);
    case 102:
      return reduce(RULE_81, 0);
    case 154:
      return reduce(RULE_81, 0);
    case 181:
      return reduce(RULE_81, 0);
    case 174:
      return reduce(RULE_81, 0);
    case 184:
      return reduce(RULE_81, 0);
    case 201:
      return reduce(RULE_81, 0);
    case 132:
      return reduce(RULE_81, 0);
    case 202:
      return reduce(RULE_81, 0);
    case 185:
      return reduce(RULE_81, 0);
    case 133:
      return reduce(RULE_81, 0);
    case 205:
      return reduce(RULE_81, 0);
    case 168:
      return reduce(RULE_81, 0);
    case 196:
      return reduce(RULE_81, 0);
    case 194:
      return reduce(RULE_81, 0);
    case 199:
      return reduce(RULE_81, 0);
    case 200:
      return reduce(RULE_81, 0);
    case 192:
      return reduce(RULE_81, 0);
    case 165:
      return reduce(RULE_81, 0);
    case 98:
      return reduce(RULE_81, 0);
    case 155:
      return reduce(RULE_81, 0);
    case 142:
      return reduce(RULE_81, 0);
    case 189:
      return reduce(RULE_81, 0);
    case 183:
      return reduce(RULE_81, 0);
    case 163:
      return reduce(RULE_81, 0);
    case 186:
      return reduce(RULE_81, 0);
    case 198:
      return reduce(RULE_81, 0);
    case 100:
      return reduce(RULE_81, 0);
    case 175:
      return reduce(RULE_81, 0);
    case 128:
      return reduce(RULE_81, 0);
    case 169:
      return reduce(RULE_81, 0);
    case 190:
      return reduce(RULE_81, 0);
    case 171:
      return reduce(RULE_81, 0);
    case 179:
      return reduce(RULE_81, 0);
    case 164:
      return reduce(RULE_81, 0);
    case 203:
      return reduce(RULE_81, 0);
    case 172:
      return reduce(RULE_81, 0);
    case 195:
      return reduce(RULE_81, 0);
    case 157:
      return reduce(RULE_81, 0);
    case 147:
      return reduce(RULE_81, 0);
    case 207:
      return reduce(RULE_81, 0);
    case 193:
      return reduce(RULE_81, 0);
    case 119:
      return reduce(RULE_81, 0);
    case 115:
      return reduce(RULE_81, 0);
    case 99:
      return reduce(RULE_81, 0);
    case 182:
      return reduce(RULE_81, 0);
    case 158:
      return reduce(RULE_81, 0);
    case 131:
      return reduce(RULE_81, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action587(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_82, 0);
    case 156:
      return reduce(RULE_82, 0);
    case 101:
      return reduce(RULE_82, 0);
    case 102:
      return reduce(RULE_82, 0);
    case 154:
      return reduce(RULE_82, 0);
    case 181:
      return reduce(RULE_82, 0);
    case 174:
      return reduce(RULE_82, 0);
    case 184:
      return reduce(RULE_82, 0);
    case 201:
      return reduce(RULE_82, 0);
    case 132:
      return reduce(RULE_82, 0);
    case 202:
      return reduce(RULE_82, 0);
    case 185:
      return reduce(RULE_82, 0);
    case 133:
      return reduce(RULE_82, 0);
    case 205:
      return reduce(RULE_82, 0);
    case 168:
      return reduce(RULE_82, 0);
    case 196:
      return reduce(RULE_82, 0);
    case 194:
      return reduce(RULE_82, 0);
    case 199:
      return reduce(RULE_82, 0);
    case 200:
      return reduce(RULE_82, 0);
    case 192:
      return reduce(RULE_82, 0);
    case 165:
      return reduce(RULE_82, 0);
    case 98:
      return reduce(RULE_82, 0);
    case 155:
      return reduce(RULE_82, 0);
    case 142:
      return reduce(RULE_82, 0);
    case 189:
      return reduce(RULE_82, 0);
    case 183:
      return reduce(RULE_82, 0);
    case 163:
      return reduce(RULE_82, 0);
    case 186:
      return reduce(RULE_82, 0);
    case 198:
      return reduce(RULE_82, 0);
    case 100:
      return reduce(RULE_82, 0);
    case 175:
      return reduce(RULE_82, 0);
    case 128:
      return reduce(RULE_82, 0);
    case 169:
      return reduce(RULE_82, 0);
    case 190:
      return reduce(RULE_82, 0);
    case 171:
      return reduce(RULE_82, 0);
    case 179:
      return reduce(RULE_82, 0);
    case 164:
      return reduce(RULE_82, 0);
    case 203:
      return reduce(RULE_82, 0);
    case 172:
      return reduce(RULE_82, 0);
    case 195:
      return reduce(RULE_82, 0);
    case 157:
      return reduce(RULE_82, 0);
    case 147:
      return reduce(RULE_82, 0);
    case 207:
      return reduce(RULE_82, 0);
    case 193:
      return reduce(RULE_82, 0);
    case 119:
      return reduce(RULE_82, 0);
    case 115:
      return reduce(RULE_82, 0);
    case 99:
      return reduce(RULE_82, 0);
    case 182:
      return reduce(RULE_82, 0);
    case 158:
      return reduce(RULE_82, 0);
    case 131:
      return reduce(RULE_82, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action588(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_82, 1);
    case 156:
      return reduce(RULE_82, 1);
    case 101:
      return reduce(RULE_82, 1);
    case 102:
      return reduce(RULE_82, 1);
    case 154:
      return reduce(RULE_82, 1);
    case 181:
      return reduce(RULE_82, 1);
    case 174:
      return reduce(RULE_82, 1);
    case 184:
      return reduce(RULE_82, 1);
    case 201:
      return reduce(RULE_82, 1);
    case 132:
      return reduce(RULE_82, 1);
    case 202:
      return reduce(RULE_82, 1);
    case 185:
      return reduce(RULE_82, 1);
    case 133:
      return reduce(RULE_82, 1);
    case 205:
      return reduce(RULE_82, 1);
    case 168:
      return reduce(RULE_82, 1);
    case 196:
      return reduce(RULE_82, 1);
    case 194:
      return reduce(RULE_82, 1);
    case 199:
      return reduce(RULE_82, 1);
    case 200:
      return reduce(RULE_82, 1);
    case 192:
      return reduce(RULE_82, 1);
    case 165:
      return reduce(RULE_82, 1);
    case 98:
      return reduce(RULE_82, 1);
    case 155:
      return reduce(RULE_82, 1);
    case 142:
      return reduce(RULE_82, 1);
    case 189:
      return reduce(RULE_82, 1);
    case 183:
      return reduce(RULE_82, 1);
    case 163:
      return reduce(RULE_82, 1);
    case 186:
      return reduce(RULE_82, 1);
    case 198:
      return reduce(RULE_82, 1);
    case 100:
      return reduce(RULE_82, 1);
    case 175:
      return reduce(RULE_82, 1);
    case 128:
      return reduce(RULE_82, 1);
    case 169:
      return reduce(RULE_82, 1);
    case 190:
      return reduce(RULE_82, 1);
    case 171:
      return reduce(RULE_82, 1);
    case 179:
      return reduce(RULE_82, 1);
    case 164:
      return reduce(RULE_82, 1);
    case 203:
      return reduce(RULE_82, 1);
    case 172:
      return reduce(RULE_82, 1);
    case 195:
      return reduce(RULE_82, 1);
    case 157:
      return reduce(RULE_82, 1);
    case 147:
      return reduce(RULE_82, 1);
    case 207:
      return reduce(RULE_82, 1);
    case 193:
      return reduce(RULE_82, 1);
    case 119:
      return reduce(RULE_82, 1);
    case 115:
      return reduce(RULE_82, 1);
    case 99:
      return reduce(RULE_82, 1);
    case 182:
      return reduce(RULE_82, 1);
    case 158:
      return reduce(RULE_82, 1);
    case 131:
      return reduce(RULE_82, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action589(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(401);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(602);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_41, 0);
    case 123:
      return reduce(RULE_41, 0);
    case 107:
      return reduce(RULE_41, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 127:
      return reduce(RULE_41, 0);
    case 104:
      return reduce(RULE_41, 0);
    case 121:
      return reduce(RULE_41, 0);
    case 114:
      return reduce(RULE_41, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 135:
      return reduce(RULE_41, 0);
    case 152:
      return reduce(RULE_41, 0);
    case 141:
      return reduce(RULE_41, 0);
    case 137:
      return reduce(RULE_41, 0);
    case 139:
      return reduce(RULE_41, 0);
    case 144:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, CARET_EQUALS, DOUBLE_COLON, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS, LPAREN, MINUS_EQUALS, LSQUARE, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, QUESTION_MARK_DOT, DOT, COMMA});
    }
  }

  private final boolean action590(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_40, 1);
    case 123:
      return reduce(RULE_40, 1);
    case 135:
      return reduce(RULE_40, 1);
    case 107:
      return reduce(RULE_40, 1);
    case 152:
      return reduce(RULE_40, 1);
    case 141:
      return reduce(RULE_40, 1);
    case 137:
      return reduce(RULE_40, 1);
    case 127:
      return reduce(RULE_40, 1);
    case 139:
      return reduce(RULE_40, 1);
    case 104:
      return reduce(RULE_40, 1);
    case 121:
      return reduce(RULE_40, 1);
    case 114:
      return reduce(RULE_40, 1);
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, MINUS_EQUALS, CARET_EQUALS, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS});
    }
  }

  private final boolean action591(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_35, 4);
    case 123:
      return reduce(RULE_35, 4);
    case 107:
      return reduce(RULE_35, 4);
    case 150:
      return reduce(RULE_35, 4);
    case 127:
      return reduce(RULE_35, 4);
    case 104:
      return reduce(RULE_35, 4);
    case 121:
      return reduce(RULE_35, 4);
    case 114:
      return reduce(RULE_35, 4);
    case 132:
      return reduce(RULE_36, 16);
    case 135:
      return reduce(RULE_35, 4);
    case 133:
      return reduce(RULE_36, 16);
    case 152:
      return reduce(RULE_35, 4);
    case 141:
      return reduce(RULE_35, 4);
    case 137:
      return reduce(RULE_35, 4);
    case 139:
      return reduce(RULE_35, 4);
    case 144:
      return reduce(RULE_36, 16);
    case 122:
      return reduce(RULE_36, 16);
    case 148:
      return reduce(RULE_35, 4);
    case 109:
      return reduce(RULE_35, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, CARET_EQUALS, SEMICOLON, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS, LPAREN, MINUS_EQUALS, LSQUARE, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, QUESTION_MARK_DOT, RPAREN, DOT, COMMA});
    }
  }

  private final boolean action592(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(803);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(804);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(597);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action593(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(805);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(806);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(597);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action594(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(807);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(808);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(597);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action595(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto595(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 809;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action596(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 1);
    case 154:
      return reduce(RULE_83, 1);
    case 181:
      return reduce(RULE_83, 1);
    case 174:
      return reduce(RULE_83, 1);
    case 184:
      return reduce(RULE_83, 1);
    case 134:
      return reduce(RULE_83, 1);
    case 153:
      return reduce(RULE_83, 1);
    case 185:
      return reduce(RULE_83, 1);
    case 205:
      return reduce(RULE_83, 1);
    case 196:
      return reduce(RULE_83, 1);
    case 98:
      return reduce(RULE_83, 1);
    case 155:
      return reduce(RULE_83, 1);
    case 142:
      return reduce(RULE_83, 1);
    case 124:
      return reduce(RULE_83, 1);
    case 186:
      return reduce(RULE_83, 1);
    case 175:
      return reduce(RULE_83, 1);
    case 128:
      return reduce(RULE_83, 1);
    case 179:
      return reduce(RULE_83, 1);
    case 164:
      return reduce(RULE_83, 1);
    case 203:
      return reduce(RULE_83, 1);
    case 172:
      return reduce(RULE_83, 1);
    case 157:
      return reduce(RULE_83, 1);
    case 195:
      return reduce(RULE_83, 1);
    case 193:
      return reduce(RULE_83, 1);
    case 158:
      return reduce(RULE_83, 1);
    case 131:
      return reduce(RULE_83, 1);
    case 156:
      return reduce(RULE_83, 1);
    case 101:
      return reduce(RULE_83, 1);
    case 102:
      return reduce(RULE_83, 1);
    case 201:
      return reduce(RULE_83, 1);
    case 132:
      return reduce(RULE_83, 1);
    case 202:
      return reduce(RULE_83, 1);
    case 133:
      return reduce(RULE_83, 1);
    case 168:
      return reduce(RULE_83, 1);
    case 194:
      return reduce(RULE_83, 1);
    case 199:
      return reduce(RULE_83, 1);
    case 192:
      return reduce(RULE_83, 1);
    case 200:
      return reduce(RULE_83, 1);
    case 165:
      return reduce(RULE_83, 1);
    case 150:
      return reduce(RULE_83, 1);
    case 189:
      return reduce(RULE_83, 1);
    case 183:
      return reduce(RULE_83, 1);
    case 163:
      return reduce(RULE_83, 1);
    case 198:
      return reduce(RULE_83, 1);
    case 100:
      return reduce(RULE_83, 1);
    case 169:
      return reduce(RULE_83, 1);
    case 190:
      return reduce(RULE_83, 1);
    case 171:
      return reduce(RULE_83, 1);
    case 147:
      return reduce(RULE_83, 1);
    case 207:
      return reduce(RULE_83, 1);
    case 99:
      return reduce(RULE_83, 1);
    case 115:
      return reduce(RULE_83, 1);
    case 119:
      return reduce(RULE_83, 1);
    case 182:
      return reduce(RULE_83, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD});
    }
  }

  private final boolean action597(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(810);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(811);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final boolean action598(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(812);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action599(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 13);
    case 173:
      return reduce(RULE_36, 13);
    case 101:
      return reduce(RULE_36, 13);
    case 145:
      return reduce(RULE_36, 13);
    case 116:
      return reduce(RULE_36, 13);
    case 151:
      return reduce(RULE_36, 13);
    case 134:
      return reduce(RULE_36, 13);
    case 132:
      return reduce(RULE_36, 13);
    case 103:
      return reduce(RULE_36, 13);
    case 133:
      return reduce(RULE_36, 13);
    case 120:
      return reduce(RULE_36, 13);
    case 112:
      return reduce(RULE_36, 13);
    case 148:
      return reduce(RULE_36, 13);
    case 149:
      return reduce(RULE_36, 13);
    case 110:
      return reduce(RULE_36, 13);
    case 108:
      return reduce(RULE_36, 13);
    case 106:
      return reduce(RULE_36, 13);
    case 125:
      return reduce(RULE_36, 13);
    case 178:
      return reduce(RULE_36, 13);
    case 155:
      return reduce(RULE_36, 13);
    case 124:
      return reduce(RULE_36, 13);
    case 142:
      return reduce(RULE_36, 13);
    case 146:
      return reduce(RULE_36, 13);
    case 138:
      return reduce(RULE_36, 13);
    case 150:
      return reduce(RULE_36, 13);
    case 183:
      return reduce(RULE_36, 13);
    case 175:
      return reduce(RULE_36, 13);
    case 113:
      return reduce(RULE_36, 13);
    case 169:
      return reduce(RULE_36, 13);
    case 190:
      return reduce(RULE_36, 13);
    case 143:
      return reduce(RULE_36, 13);
    case 164:
      return reduce(RULE_36, 13);
    case 203:
      return reduce(RULE_36, 13);
    case 147:
      return reduce(RULE_36, 13);
    case 130:
      return reduce(RULE_36, 13);
    case 193:
      return reduce(RULE_36, 13);
    case 129:
      return reduce(RULE_36, 13);
    case 136:
      return reduce(RULE_36, 13);
    case 144:
      return reduce(RULE_36, 13);
    case 182:
      return reduce(RULE_36, 13);
    case 140:
      return reduce(RULE_36, 13);
    case 122:
      return reduce(RULE_36, 13);
    case 109:
      return reduce(RULE_36, 13);
    case 191:
      return reduce(RULE_36, 13);
    case 131:
      return reduce(RULE_36, 13);
    case 118:
      return reduce(RULE_36, 13);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action600(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto600(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 813;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action601(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 9);
    case 154:
      return reduce(RULE_83, 9);
    case 181:
      return reduce(RULE_83, 9);
    case 174:
      return reduce(RULE_83, 9);
    case 184:
      return reduce(RULE_83, 9);
    case 134:
      return reduce(RULE_83, 9);
    case 153:
      return reduce(RULE_83, 9);
    case 185:
      return reduce(RULE_83, 9);
    case 205:
      return reduce(RULE_83, 9);
    case 196:
      return reduce(RULE_83, 9);
    case 98:
      return reduce(RULE_83, 9);
    case 155:
      return reduce(RULE_83, 9);
    case 142:
      return reduce(RULE_83, 9);
    case 124:
      return reduce(RULE_83, 9);
    case 186:
      return reduce(RULE_83, 9);
    case 175:
      return reduce(RULE_83, 9);
    case 128:
      return reduce(RULE_83, 9);
    case 179:
      return reduce(RULE_83, 9);
    case 164:
      return reduce(RULE_83, 9);
    case 203:
      return reduce(RULE_83, 9);
    case 172:
      return reduce(RULE_83, 9);
    case 157:
      return reduce(RULE_83, 9);
    case 195:
      return reduce(RULE_83, 9);
    case 193:
      return reduce(RULE_83, 9);
    case 158:
      return reduce(RULE_83, 9);
    case 131:
      return reduce(RULE_83, 9);
    case 156:
      return reduce(RULE_83, 9);
    case 101:
      return reduce(RULE_83, 9);
    case 102:
      return reduce(RULE_83, 9);
    case 201:
      return reduce(RULE_83, 9);
    case 132:
      return reduce(RULE_83, 9);
    case 202:
      return reduce(RULE_83, 9);
    case 133:
      return reduce(RULE_83, 9);
    case 168:
      return reduce(RULE_83, 9);
    case 194:
      return reduce(RULE_83, 9);
    case 199:
      return reduce(RULE_83, 9);
    case 192:
      return reduce(RULE_83, 9);
    case 200:
      return reduce(RULE_83, 9);
    case 165:
      return reduce(RULE_83, 9);
    case 150:
      return reduce(RULE_83, 9);
    case 189:
      return reduce(RULE_83, 9);
    case 183:
      return reduce(RULE_83, 9);
    case 163:
      return reduce(RULE_83, 9);
    case 198:
      return reduce(RULE_83, 9);
    case 100:
      return reduce(RULE_83, 9);
    case 169:
      return reduce(RULE_83, 9);
    case 190:
      return reduce(RULE_83, 9);
    case 171:
      return reduce(RULE_83, 9);
    case 147:
      return reduce(RULE_83, 9);
    case 207:
      return reduce(RULE_83, 9);
    case 99:
      return reduce(RULE_83, 9);
    case 115:
      return reduce(RULE_83, 9);
    case 119:
      return reduce(RULE_83, 9);
    case 182:
      return reduce(RULE_83, 9);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD});
    }
  }

  private final boolean action602(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto602(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 13: return 219;
    case 94: return 331;
    case 14: return 220;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 224;
    case 91: return 241;
    case 28: return 589;
    case 15: return 607;
    case 30: return 378;
    case 97: return 235;
    case 60: return 340;
    default: return -1;
    }
  }

  private final boolean action603(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 15);
    case 173:
      return reduce(RULE_36, 15);
    case 101:
      return reduce(RULE_36, 15);
    case 145:
      return reduce(RULE_36, 15);
    case 116:
      return reduce(RULE_36, 15);
    case 151:
      return reduce(RULE_36, 15);
    case 134:
      return reduce(RULE_36, 15);
    case 132:
      return reduce(RULE_36, 15);
    case 103:
      return reduce(RULE_36, 15);
    case 133:
      return reduce(RULE_36, 15);
    case 120:
      return reduce(RULE_36, 15);
    case 148:
      return reduce(RULE_36, 15);
    case 112:
      return reduce(RULE_36, 15);
    case 149:
      return reduce(RULE_36, 15);
    case 110:
      return reduce(RULE_36, 15);
    case 108:
      return reduce(RULE_36, 15);
    case 106:
      return reduce(RULE_36, 15);
    case 125:
      return reduce(RULE_36, 15);
    case 178:
      return reduce(RULE_36, 15);
    case 155:
      return reduce(RULE_36, 15);
    case 124:
      return reduce(RULE_36, 15);
    case 142:
      return reduce(RULE_36, 15);
    case 146:
      return reduce(RULE_36, 15);
    case 138:
      return reduce(RULE_36, 15);
    case 150:
      return reduce(RULE_36, 15);
    case 183:
      return reduce(RULE_36, 15);
    case 175:
      return reduce(RULE_36, 15);
    case 113:
      return reduce(RULE_36, 15);
    case 169:
      return reduce(RULE_36, 15);
    case 190:
      return reduce(RULE_36, 15);
    case 143:
      return reduce(RULE_36, 15);
    case 164:
      return reduce(RULE_36, 15);
    case 203:
      return reduce(RULE_36, 15);
    case 147:
      return reduce(RULE_36, 15);
    case 130:
      return reduce(RULE_36, 15);
    case 193:
      return reduce(RULE_36, 15);
    case 129:
      return reduce(RULE_36, 15);
    case 136:
      return reduce(RULE_36, 15);
    case 144:
      return reduce(RULE_36, 15);
    case 182:
      return reduce(RULE_36, 15);
    case 140:
      return reduce(RULE_36, 15);
    case 122:
      return reduce(RULE_36, 15);
    case 109:
      return reduce(RULE_36, 15);
    case 191:
      return reduce(RULE_36, 15);
    case 131:
      return reduce(RULE_36, 15);
    case 118:
      return reduce(RULE_36, 15);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action604(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(814);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action605(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(269);
      tokenStack.addFirst(token);
      return true;
    case 132:
      return reduce(RULE_44, 1);
    case 105:
      return reduce(RULE_27, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 144:
      return reduce(RULE_44, 1);
    case 128:
      return reduce(RULE_27, 1);
    default: throw new BadTokenException(token, new Object[] {LPAREN, ARROW, LSQUARE, DOUBLE_COLON, QUESTION_MARK_DOT, HASH, DOT, COMMA});
    }
  }

  private final boolean action606(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(401);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(253);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 117:
      return reduce(RULE_41, 0);
    case 123:
      return reduce(RULE_41, 0);
    case 105:
      return reduce(RULE_27, 0);
    case 107:
      return reduce(RULE_41, 0);
    case 127:
      return reduce(RULE_41, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 104:
      return reduce(RULE_41, 0);
    case 121:
      return reduce(RULE_41, 0);
    case 128:
      return reduce(RULE_27, 0);
    case 114:
      return reduce(RULE_41, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 135:
      return reduce(RULE_41, 0);
    case 152:
      return reduce(RULE_41, 0);
    case 141:
      return reduce(RULE_41, 0);
    case 137:
      return reduce(RULE_41, 0);
    case 139:
      return reduce(RULE_41, 0);
    case 144:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, ARROW, CARET_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_COLON, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, HASH, DOUBLE_LANGLE_EQUALS, LPAREN, MINUS_EQUALS, LSQUARE, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, QUESTION_MARK_DOT, LANGLE, DOT, COMMA});
    }
  }

  private final boolean action607(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_40, 0);
    case 123:
      return reduce(RULE_40, 0);
    case 135:
      return reduce(RULE_40, 0);
    case 107:
      return reduce(RULE_40, 0);
    case 152:
      return reduce(RULE_40, 0);
    case 141:
      return reduce(RULE_40, 0);
    case 137:
      return reduce(RULE_40, 0);
    case 127:
      return reduce(RULE_40, 0);
    case 139:
      return reduce(RULE_40, 0);
    case 104:
      return reduce(RULE_40, 0);
    case 121:
      return reduce(RULE_40, 0);
    case 114:
      return reduce(RULE_40, 0);
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, MINUS_EQUALS, CARET_EQUALS, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS});
    }
  }

  private final boolean action608(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto608(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 815;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action609(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 5);
    case 154:
      return reduce(RULE_83, 5);
    case 181:
      return reduce(RULE_83, 5);
    case 174:
      return reduce(RULE_83, 5);
    case 184:
      return reduce(RULE_83, 5);
    case 134:
      return reduce(RULE_83, 5);
    case 153:
      return reduce(RULE_83, 5);
    case 185:
      return reduce(RULE_83, 5);
    case 205:
      return reduce(RULE_83, 5);
    case 196:
      return reduce(RULE_83, 5);
    case 98:
      return reduce(RULE_83, 5);
    case 155:
      return reduce(RULE_83, 5);
    case 142:
      return reduce(RULE_83, 5);
    case 124:
      return reduce(RULE_83, 5);
    case 186:
      return reduce(RULE_83, 5);
    case 175:
      return reduce(RULE_83, 5);
    case 128:
      return reduce(RULE_83, 5);
    case 179:
      return reduce(RULE_83, 5);
    case 164:
      return reduce(RULE_83, 5);
    case 203:
      return reduce(RULE_83, 5);
    case 172:
      return reduce(RULE_83, 5);
    case 157:
      return reduce(RULE_83, 5);
    case 195:
      return reduce(RULE_83, 5);
    case 193:
      return reduce(RULE_83, 5);
    case 158:
      return reduce(RULE_83, 5);
    case 131:
      return reduce(RULE_83, 5);
    case 156:
      return reduce(RULE_83, 5);
    case 101:
      return reduce(RULE_83, 5);
    case 102:
      return reduce(RULE_83, 5);
    case 201:
      return reduce(RULE_83, 5);
    case 132:
      return reduce(RULE_83, 5);
    case 202:
      return reduce(RULE_83, 5);
    case 133:
      return reduce(RULE_83, 5);
    case 168:
      return reduce(RULE_83, 5);
    case 194:
      return reduce(RULE_83, 5);
    case 199:
      return reduce(RULE_83, 5);
    case 192:
      return reduce(RULE_83, 5);
    case 200:
      return reduce(RULE_83, 5);
    case 165:
      return reduce(RULE_83, 5);
    case 150:
      return reduce(RULE_83, 5);
    case 189:
      return reduce(RULE_83, 5);
    case 183:
      return reduce(RULE_83, 5);
    case 163:
      return reduce(RULE_83, 5);
    case 198:
      return reduce(RULE_83, 5);
    case 100:
      return reduce(RULE_83, 5);
    case 169:
      return reduce(RULE_83, 5);
    case 190:
      return reduce(RULE_83, 5);
    case 171:
      return reduce(RULE_83, 5);
    case 147:
      return reduce(RULE_83, 5);
    case 207:
      return reduce(RULE_83, 5);
    case 99:
      return reduce(RULE_83, 5);
    case 115:
      return reduce(RULE_83, 5);
    case 119:
      return reduce(RULE_83, 5);
    case 182:
      return reduce(RULE_83, 5);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD});
    }
  }

  private final boolean action610(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(816);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action611(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 14);
    case 173:
      return reduce(RULE_36, 14);
    case 101:
      return reduce(RULE_36, 14);
    case 145:
      return reduce(RULE_36, 14);
    case 116:
      return reduce(RULE_36, 14);
    case 151:
      return reduce(RULE_36, 14);
    case 134:
      return reduce(RULE_36, 14);
    case 132:
      return reduce(RULE_36, 14);
    case 103:
      return reduce(RULE_36, 14);
    case 133:
      return reduce(RULE_36, 14);
    case 120:
      return reduce(RULE_36, 14);
    case 148:
      return reduce(RULE_36, 14);
    case 112:
      return reduce(RULE_36, 14);
    case 149:
      return reduce(RULE_36, 14);
    case 110:
      return reduce(RULE_36, 14);
    case 108:
      return reduce(RULE_36, 14);
    case 106:
      return reduce(RULE_36, 14);
    case 125:
      return reduce(RULE_36, 14);
    case 178:
      return reduce(RULE_36, 14);
    case 155:
      return reduce(RULE_36, 14);
    case 124:
      return reduce(RULE_36, 14);
    case 142:
      return reduce(RULE_36, 14);
    case 146:
      return reduce(RULE_36, 14);
    case 138:
      return reduce(RULE_36, 14);
    case 150:
      return reduce(RULE_36, 14);
    case 183:
      return reduce(RULE_36, 14);
    case 175:
      return reduce(RULE_36, 14);
    case 113:
      return reduce(RULE_36, 14);
    case 169:
      return reduce(RULE_36, 14);
    case 190:
      return reduce(RULE_36, 14);
    case 143:
      return reduce(RULE_36, 14);
    case 164:
      return reduce(RULE_36, 14);
    case 203:
      return reduce(RULE_36, 14);
    case 147:
      return reduce(RULE_36, 14);
    case 130:
      return reduce(RULE_36, 14);
    case 193:
      return reduce(RULE_36, 14);
    case 129:
      return reduce(RULE_36, 14);
    case 136:
      return reduce(RULE_36, 14);
    case 144:
      return reduce(RULE_36, 14);
    case 182:
      return reduce(RULE_36, 14);
    case 140:
      return reduce(RULE_36, 14);
    case 122:
      return reduce(RULE_36, 14);
    case 109:
      return reduce(RULE_36, 14);
    case 191:
      return reduce(RULE_36, 14);
    case 131:
      return reduce(RULE_36, 14);
    case 118:
      return reduce(RULE_36, 14);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action612(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      return reduce(RULE_35, 3);
    case 123:
      return reduce(RULE_35, 3);
    case 107:
      return reduce(RULE_35, 3);
    case 150:
      return reduce(RULE_35, 3);
    case 127:
      return reduce(RULE_35, 3);
    case 104:
      return reduce(RULE_35, 3);
    case 121:
      return reduce(RULE_35, 3);
    case 114:
      return reduce(RULE_35, 3);
    case 132:
      return reduce(RULE_36, 12);
    case 135:
      return reduce(RULE_35, 3);
    case 133:
      return reduce(RULE_36, 12);
    case 152:
      return reduce(RULE_35, 3);
    case 141:
      return reduce(RULE_35, 3);
    case 137:
      return reduce(RULE_35, 3);
    case 139:
      return reduce(RULE_35, 3);
    case 144:
      return reduce(RULE_36, 12);
    case 122:
      return reduce(RULE_36, 12);
    case 148:
      return reduce(RULE_35, 3);
    case 109:
      return reduce(RULE_35, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_PERCENT_EQUALS, EQUALS, CARET_EQUALS, SEMICOLON, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS, LPAREN, MINUS_EQUALS, LSQUARE, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, QUESTION_MARK_DOT, RPAREN, DOT, COMMA});
    }
  }

  private final boolean action613(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_84, 1);
    case 156:
      return reduce(RULE_84, 1);
    case 101:
      return reduce(RULE_84, 1);
    case 102:
      return reduce(RULE_84, 1);
    case 154:
      return reduce(RULE_84, 1);
    case 181:
      return reduce(RULE_84, 1);
    case 174:
      return reduce(RULE_84, 1);
    case 184:
      return reduce(RULE_84, 1);
    case 201:
      return reduce(RULE_84, 1);
    case 132:
      return reduce(RULE_84, 1);
    case 202:
      return reduce(RULE_84, 1);
    case 185:
      return reduce(RULE_84, 1);
    case 133:
      return reduce(RULE_84, 1);
    case 205:
      return reduce(RULE_84, 1);
    case 168:
      return reduce(RULE_84, 1);
    case 196:
      return reduce(RULE_84, 1);
    case 194:
      return reduce(RULE_84, 1);
    case 199:
      return reduce(RULE_84, 1);
    case 200:
      return reduce(RULE_84, 1);
    case 192:
      return reduce(RULE_84, 1);
    case 165:
      return reduce(RULE_84, 1);
    case 98:
      return reduce(RULE_84, 1);
    case 155:
      return reduce(RULE_84, 1);
    case 142:
      return reduce(RULE_84, 1);
    case 189:
      return reduce(RULE_84, 1);
    case 183:
      return reduce(RULE_84, 1);
    case 163:
      return reduce(RULE_84, 1);
    case 186:
      return reduce(RULE_84, 1);
    case 198:
      return reduce(RULE_84, 1);
    case 100:
      return reduce(RULE_84, 1);
    case 175:
      return reduce(RULE_84, 1);
    case 128:
      return reduce(RULE_84, 1);
    case 169:
      return reduce(RULE_84, 1);
    case 190:
      return reduce(RULE_84, 1);
    case 171:
      return reduce(RULE_84, 1);
    case 179:
      return reduce(RULE_84, 1);
    case 164:
      return reduce(RULE_84, 1);
    case 203:
      return reduce(RULE_84, 1);
    case 172:
      return reduce(RULE_84, 1);
    case 195:
      return reduce(RULE_84, 1);
    case 157:
      return reduce(RULE_84, 1);
    case 147:
      return reduce(RULE_84, 1);
    case 207:
      return reduce(RULE_84, 1);
    case 193:
      return reduce(RULE_84, 1);
    case 119:
      return reduce(RULE_84, 1);
    case 115:
      return reduce(RULE_84, 1);
    case 99:
      return reduce(RULE_84, 1);
    case 182:
      return reduce(RULE_84, 1);
    case 158:
      return reduce(RULE_84, 1);
    case 131:
      return reduce(RULE_84, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action614(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      return reduce(RULE_85, 0);
    case 138:
      return reduce(RULE_85, 0);
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action615(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto615(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 614;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 17: return 817;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action616(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(818);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(819);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action617(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 5);
    case 148:
      return reduce(RULE_86, 5);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action618(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(820);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action619(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 1);
    case 148:
      return reduce(RULE_86, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action620(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 10);
    case 148:
      return reduce(RULE_86, 10);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action621(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 0);
    case 148:
      return reduce(RULE_86, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action622(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 2);
    case 148:
      return reduce(RULE_86, 2);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action623(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 4);
    case 148:
      return reduce(RULE_86, 4);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action624(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 3);
    case 148:
      return reduce(RULE_86, 3);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action625(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 9);
    case 148:
      return reduce(RULE_86, 9);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action626(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 8);
    case 148:
      return reduce(RULE_86, 8);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action627(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 7);
    case 148:
      return reduce(RULE_86, 7);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action628(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      return reduce(RULE_86, 6);
    case 148:
      return reduce(RULE_86, 6);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action629(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(821);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_87, 0);
    case 101:
      return reduce(RULE_87, 0);
    case 155:
      return reduce(RULE_87, 0);
    case 150:
      return reduce(RULE_87, 0);
    case 183:
      return reduce(RULE_87, 0);
    case 175:
      return reduce(RULE_87, 0);
    case 190:
      return reduce(RULE_87, 0);
    case 169:
      return reduce(RULE_87, 0);
    case 164:
      return reduce(RULE_87, 0);
    case 203:
      return reduce(RULE_87, 0);
    case 193:
      return reduce(RULE_87, 0);
    case 182:
      return reduce(RULE_87, 0);
    case 191:
      return reduce(RULE_87, 0);
    default: throw new BadTokenException(token, new Object[] {EQUALS, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final int goto629(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 822;
    default: return -1;
    }
  }

  private final boolean action630(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(823);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action631(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(824);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto631(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 825;
    default: return -1;
    }
  }

  private final boolean action632(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto632(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 826;
    default: return -1;
    }
  }

  private final boolean action633(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 150:
      return reduce(RULE_34, 0);
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto633(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 827;
    default: return -1;
    }
  }

  private final boolean action634(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto634(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 828;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action635(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_71, 2);
    case 101:
      return reduce(RULE_71, 2);
    case 181:
      return reduce(RULE_71, 2);
    case 188:
      return reduce(RULE_71, 2);
    case 201:
      return reduce(RULE_71, 2);
    case 202:
      return reduce(RULE_71, 2);
    case 132:
      return reduce(RULE_71, 2);
    case 205:
      return reduce(RULE_71, 2);
    case 133:
      return reduce(RULE_71, 2);
    case 206:
      return reduce(RULE_71, 2);
    case 200:
      return reduce(RULE_71, 2);
    case 192:
      return reduce(RULE_71, 2);
    case 165:
      return reduce(RULE_71, 2);
    case 98:
      return reduce(RULE_71, 2);
    case 155:
      return reduce(RULE_71, 2);
    case 142:
      return reduce(RULE_71, 2);
    case 183:
      return reduce(RULE_71, 2);
    case 186:
      return reduce(RULE_71, 2);
    case 175:
      return reduce(RULE_71, 2);
    case 128:
      return reduce(RULE_71, 2);
    case 171:
      return reduce(RULE_71, 2);
    case 190:
      return reduce(RULE_71, 2);
    case 169:
      return reduce(RULE_71, 2);
    case 179:
      return reduce(RULE_71, 2);
    case 164:
      return reduce(RULE_71, 2);
    case 203:
      return reduce(RULE_71, 2);
    case 147:
      return reduce(RULE_71, 2);
    case 193:
      return reduce(RULE_71, 2);
    case 182:
      return reduce(RULE_71, 2);
    case 158:
      return reduce(RULE_71, 2);
    case 131:
      return reduce(RULE_71, 2);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action636(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 150:
      return reduce(RULE_34, 0);
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto636(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 829;
    default: return -1;
    }
  }

  private final boolean action637(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 25);
    case 101:
      return reduce(RULE_15, 25);
    case 154:
      return reduce(RULE_15, 25);
    case 145:
      return reduce(RULE_15, 25);
    case 132:
      return reduce(RULE_15, 25);
    case 167:
      return reduce(RULE_15, 25);
    case 103:
      return reduce(RULE_15, 25);
    case 120:
      return reduce(RULE_15, 25);
    case 194:
      return reduce(RULE_15, 25);
    case 112:
      return reduce(RULE_15, 25);
    case 148:
      return reduce(RULE_15, 25);
    case 149:
      return reduce(RULE_15, 25);
    case 110:
      return reduce(RULE_15, 25);
    case 106:
      return reduce(RULE_15, 25);
    case 108:
      return reduce(RULE_15, 25);
    case 125:
      return reduce(RULE_15, 25);
    case 98:
      return reduce(RULE_15, 25);
    case 105:
      return reduce(RULE_15, 25);
    case 138:
      return reduce(RULE_15, 25);
    case 142:
      return reduce(RULE_15, 25);
    case 155:
      return reduce(RULE_15, 25);
    case 150:
      return reduce(RULE_15, 25);
    case 197:
      return reduce(RULE_15, 25);
    case 111:
      return reduce(RULE_15, 25);
    case 183:
      return reduce(RULE_15, 25);
    case 175:
      return reduce(RULE_15, 25);
    case 128:
      return reduce(RULE_15, 25);
    case 169:
      return reduce(RULE_15, 25);
    case 190:
      return reduce(RULE_15, 25);
    case 143:
      return reduce(RULE_15, 25);
    case 164:
      return reduce(RULE_15, 25);
    case 203:
      return reduce(RULE_15, 25);
    case 147:
      return reduce(RULE_15, 25);
    case 193:
      return reduce(RULE_15, 25);
    case 182:
      return reduce(RULE_15, 25);
    case 109:
      return reduce(RULE_15, 25);
    case 191:
      return reduce(RULE_15, 25);
    case 131:
      return reduce(RULE_15, 25);
    case 118:
      return reduce(RULE_15, 25);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action638(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_47, 3);
    case 101:
      return reduce(RULE_47, 3);
    case 154:
      return reduce(RULE_47, 3);
    case 145:
      return reduce(RULE_47, 3);
    case 132:
      return reduce(RULE_47, 3);
    case 167:
      return reduce(RULE_47, 3);
    case 103:
      return reduce(RULE_47, 3);
    case 120:
      return reduce(RULE_47, 3);
    case 194:
      return reduce(RULE_47, 3);
    case 112:
      return reduce(RULE_47, 3);
    case 148:
      return reduce(RULE_47, 3);
    case 110:
      return reduce(RULE_47, 3);
    case 149:
      return reduce(RULE_47, 3);
    case 106:
      return reduce(RULE_47, 3);
    case 108:
      return reduce(RULE_47, 3);
    case 125:
      return reduce(RULE_47, 3);
    case 98:
      return reduce(RULE_47, 3);
    case 105:
      return reduce(RULE_47, 3);
    case 138:
      return reduce(RULE_47, 3);
    case 142:
      return reduce(RULE_47, 3);
    case 155:
      return reduce(RULE_47, 3);
    case 150:
      return reduce(RULE_47, 3);
    case 197:
      return reduce(RULE_47, 3);
    case 111:
      return reduce(RULE_47, 3);
    case 183:
      return reduce(RULE_47, 3);
    case 175:
      return reduce(RULE_47, 3);
    case 128:
      return reduce(RULE_47, 3);
    case 169:
      return reduce(RULE_47, 3);
    case 190:
      return reduce(RULE_47, 3);
    case 143:
      return reduce(RULE_47, 3);
    case 164:
      return reduce(RULE_47, 3);
    case 203:
      return reduce(RULE_47, 3);
    case 147:
      return reduce(RULE_47, 3);
    case 193:
      return reduce(RULE_47, 3);
    case 182:
      return reduce(RULE_47, 3);
    case 109:
      return reduce(RULE_47, 3);
    case 191:
      return reduce(RULE_47, 3);
    case 131:
      return reduce(RULE_47, 3);
    case 118:
      return reduce(RULE_47, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action639(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_48, 3);
    case 154:
      return reduce(RULE_48, 3);
    case 181:
      return reduce(RULE_48, 3);
    case 184:
      return reduce(RULE_48, 3);
    case 134:
      return reduce(RULE_48, 3);
    case 185:
      return reduce(RULE_48, 3);
    case 153:
      return reduce(RULE_48, 3);
    case 205:
      return reduce(RULE_48, 3);
    case 148:
      return reduce(RULE_48, 3);
    case 125:
      return reduce(RULE_48, 3);
    case 105:
      return reduce(RULE_48, 3);
    case 98:
      return reduce(RULE_48, 3);
    case 155:
      return reduce(RULE_48, 3);
    case 138:
      return reduce(RULE_48, 3);
    case 124:
      return reduce(RULE_48, 3);
    case 142:
      return reduce(RULE_48, 3);
    case 186:
      return reduce(RULE_48, 3);
    case 175:
      return reduce(RULE_48, 3);
    case 128:
      return reduce(RULE_48, 3);
    case 143:
      return reduce(RULE_48, 3);
    case 179:
      return reduce(RULE_48, 3);
    case 164:
      return reduce(RULE_48, 3);
    case 203:
      return reduce(RULE_48, 3);
    case 195:
      return reduce(RULE_48, 3);
    case 193:
      return reduce(RULE_48, 3);
    case 158:
      return reduce(RULE_48, 3);
    case 131:
      return reduce(RULE_48, 3);
    case 156:
      return reduce(RULE_48, 3);
    case 173:
      return reduce(RULE_48, 3);
    case 101:
      return reduce(RULE_48, 3);
    case 102:
      return reduce(RULE_48, 3);
    case 145:
      return reduce(RULE_48, 3);
    case 201:
      return reduce(RULE_48, 3);
    case 132:
      return reduce(RULE_48, 3);
    case 202:
      return reduce(RULE_48, 3);
    case 167:
      return reduce(RULE_48, 3);
    case 103:
      return reduce(RULE_48, 3);
    case 133:
      return reduce(RULE_48, 3);
    case 120:
      return reduce(RULE_48, 3);
    case 168:
      return reduce(RULE_48, 3);
    case 194:
      return reduce(RULE_48, 3);
    case 112:
      return reduce(RULE_48, 3);
    case 110:
      return reduce(RULE_48, 3);
    case 149:
      return reduce(RULE_48, 3);
    case 200:
      return reduce(RULE_48, 3);
    case 192:
      return reduce(RULE_48, 3);
    case 108:
      return reduce(RULE_48, 3);
    case 106:
      return reduce(RULE_48, 3);
    case 165:
      return reduce(RULE_48, 3);
    case 197:
      return reduce(RULE_48, 3);
    case 150:
      return reduce(RULE_48, 3);
    case 111:
      return reduce(RULE_48, 3);
    case 183:
      return reduce(RULE_48, 3);
    case 198:
      return reduce(RULE_48, 3);
    case 100:
      return reduce(RULE_48, 3);
    case 171:
      return reduce(RULE_48, 3);
    case 169:
      return reduce(RULE_48, 3);
    case 190:
      return reduce(RULE_48, 3);
    case 176:
      return reduce(RULE_48, 3);
    case 147:
      return reduce(RULE_48, 3);
    case 99:
      return reduce(RULE_48, 3);
    case 182:
      return reduce(RULE_48, 3);
    case 109:
      return reduce(RULE_48, 3);
    case 191:
      return reduce(RULE_48, 3);
    case 118:
      return reduce(RULE_48, 3);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action640(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_21, 3);
    case 101:
      return reduce(RULE_21, 3);
    case 154:
      return reduce(RULE_21, 3);
    case 145:
      return reduce(RULE_21, 3);
    case 132:
      return reduce(RULE_21, 3);
    case 167:
      return reduce(RULE_21, 3);
    case 103:
      return reduce(RULE_21, 3);
    case 120:
      return reduce(RULE_21, 3);
    case 194:
      return reduce(RULE_21, 3);
    case 112:
      return reduce(RULE_21, 3);
    case 148:
      return reduce(RULE_21, 3);
    case 149:
      return reduce(RULE_21, 3);
    case 110:
      return reduce(RULE_21, 3);
    case 106:
      return reduce(RULE_21, 3);
    case 108:
      return reduce(RULE_21, 3);
    case 125:
      return reduce(RULE_21, 3);
    case 98:
      return reduce(RULE_21, 3);
    case 105:
      return reduce(RULE_21, 3);
    case 138:
      return reduce(RULE_21, 3);
    case 142:
      return reduce(RULE_21, 3);
    case 155:
      return reduce(RULE_21, 3);
    case 150:
      return reduce(RULE_21, 3);
    case 197:
      return reduce(RULE_21, 3);
    case 111:
      return reduce(RULE_21, 3);
    case 183:
      return reduce(RULE_21, 3);
    case 175:
      return reduce(RULE_21, 3);
    case 128:
      return reduce(RULE_21, 3);
    case 169:
      return reduce(RULE_21, 3);
    case 190:
      return reduce(RULE_21, 3);
    case 143:
      return reduce(RULE_21, 3);
    case 164:
      return reduce(RULE_21, 3);
    case 203:
      return reduce(RULE_21, 3);
    case 147:
      return reduce(RULE_21, 3);
    case 193:
      return reduce(RULE_21, 3);
    case 182:
      return reduce(RULE_21, 3);
    case 109:
      return reduce(RULE_21, 3);
    case 191:
      return reduce(RULE_21, 3);
    case 131:
      return reduce(RULE_21, 3);
    case 118:
      return reduce(RULE_21, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action641(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 3);
    case 154:
      return reduce(RULE_22, 3);
    case 181:
      return reduce(RULE_22, 3);
    case 184:
      return reduce(RULE_22, 3);
    case 134:
      return reduce(RULE_22, 3);
    case 185:
      return reduce(RULE_22, 3);
    case 153:
      return reduce(RULE_22, 3);
    case 205:
      return reduce(RULE_22, 3);
    case 148:
      return reduce(RULE_22, 3);
    case 125:
      return reduce(RULE_22, 3);
    case 105:
      return reduce(RULE_22, 3);
    case 98:
      return reduce(RULE_22, 3);
    case 155:
      return reduce(RULE_22, 3);
    case 138:
      return reduce(RULE_22, 3);
    case 124:
      return reduce(RULE_22, 3);
    case 142:
      return reduce(RULE_22, 3);
    case 186:
      return reduce(RULE_22, 3);
    case 175:
      return reduce(RULE_22, 3);
    case 128:
      return reduce(RULE_22, 3);
    case 143:
      return reduce(RULE_22, 3);
    case 179:
      return reduce(RULE_22, 3);
    case 164:
      return reduce(RULE_22, 3);
    case 203:
      return reduce(RULE_22, 3);
    case 195:
      return reduce(RULE_22, 3);
    case 193:
      return reduce(RULE_22, 3);
    case 158:
      return reduce(RULE_22, 3);
    case 131:
      return reduce(RULE_22, 3);
    case 156:
      return reduce(RULE_22, 3);
    case 173:
      return reduce(RULE_22, 3);
    case 101:
      return reduce(RULE_22, 3);
    case 102:
      return reduce(RULE_22, 3);
    case 145:
      return reduce(RULE_22, 3);
    case 201:
      return reduce(RULE_22, 3);
    case 132:
      return reduce(RULE_22, 3);
    case 202:
      return reduce(RULE_22, 3);
    case 167:
      return reduce(RULE_22, 3);
    case 103:
      return reduce(RULE_22, 3);
    case 133:
      return reduce(RULE_22, 3);
    case 120:
      return reduce(RULE_22, 3);
    case 168:
      return reduce(RULE_22, 3);
    case 194:
      return reduce(RULE_22, 3);
    case 112:
      return reduce(RULE_22, 3);
    case 110:
      return reduce(RULE_22, 3);
    case 149:
      return reduce(RULE_22, 3);
    case 200:
      return reduce(RULE_22, 3);
    case 192:
      return reduce(RULE_22, 3);
    case 108:
      return reduce(RULE_22, 3);
    case 106:
      return reduce(RULE_22, 3);
    case 165:
      return reduce(RULE_22, 3);
    case 197:
      return reduce(RULE_22, 3);
    case 150:
      return reduce(RULE_22, 3);
    case 111:
      return reduce(RULE_22, 3);
    case 183:
      return reduce(RULE_22, 3);
    case 198:
      return reduce(RULE_22, 3);
    case 100:
      return reduce(RULE_22, 3);
    case 171:
      return reduce(RULE_22, 3);
    case 169:
      return reduce(RULE_22, 3);
    case 190:
      return reduce(RULE_22, 3);
    case 176:
      return reduce(RULE_22, 3);
    case 147:
      return reduce(RULE_22, 3);
    case 99:
      return reduce(RULE_22, 3);
    case 182:
      return reduce(RULE_22, 3);
    case 109:
      return reduce(RULE_22, 3);
    case 191:
      return reduce(RULE_22, 3);
    case 118:
      return reduce(RULE_22, 3);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, UBYTE_KEYWORD, SHORT_KEYWORD, COLON, CARET, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, SELFISH_KEYWORD, FINAL_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action642(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(830);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action643(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto643(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 831;
    default: return -1;
    }
  }

  private final boolean action644(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto644(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 832;
    default: return -1;
    }
  }

  private final boolean action645(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 206:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto645(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 277;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    case 47: return 833;
    default: return -1;
    }
  }

  private final boolean action646(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 30);
    case 101:
      return reduce(RULE_15, 30);
    case 154:
      return reduce(RULE_15, 30);
    case 145:
      return reduce(RULE_15, 30);
    case 132:
      return reduce(RULE_15, 30);
    case 167:
      return reduce(RULE_15, 30);
    case 103:
      return reduce(RULE_15, 30);
    case 120:
      return reduce(RULE_15, 30);
    case 194:
      return reduce(RULE_15, 30);
    case 112:
      return reduce(RULE_15, 30);
    case 148:
      return reduce(RULE_15, 30);
    case 149:
      return reduce(RULE_15, 30);
    case 110:
      return reduce(RULE_15, 30);
    case 108:
      return reduce(RULE_15, 30);
    case 106:
      return reduce(RULE_15, 30);
    case 125:
      return reduce(RULE_15, 30);
    case 98:
      return reduce(RULE_15, 30);
    case 105:
      return reduce(RULE_15, 30);
    case 155:
      return reduce(RULE_15, 30);
    case 138:
      return reduce(RULE_15, 30);
    case 142:
      return reduce(RULE_15, 30);
    case 150:
      return reduce(RULE_15, 30);
    case 197:
      return reduce(RULE_15, 30);
    case 111:
      return reduce(RULE_15, 30);
    case 183:
      return reduce(RULE_15, 30);
    case 175:
      return reduce(RULE_15, 30);
    case 128:
      return reduce(RULE_15, 30);
    case 169:
      return reduce(RULE_15, 30);
    case 190:
      return reduce(RULE_15, 30);
    case 143:
      return reduce(RULE_15, 30);
    case 164:
      return reduce(RULE_15, 30);
    case 203:
      return reduce(RULE_15, 30);
    case 147:
      return reduce(RULE_15, 30);
    case 193:
      return reduce(RULE_15, 30);
    case 182:
      return reduce(RULE_15, 30);
    case 109:
      return reduce(RULE_15, 30);
    case 191:
      return reduce(RULE_15, 30);
    case 131:
      return reduce(RULE_15, 30);
    case 118:
      return reduce(RULE_15, 30);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action647(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(834);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action648(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(835);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action649(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto649(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 836;
    default: return -1;
    }
  }

  private final boolean action650(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(459);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_16, 2);
    case 103:
      return reduce(RULE_16, 2);
    case 194:
      return reduce(RULE_16, 2);
    case 109:
      return reduce(RULE_16, 2);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, RANGLE, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action651(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(461);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_16, 1);
    case 103:
      return reduce(RULE_16, 1);
    case 194:
      return reduce(RULE_16, 1);
    case 109:
      return reduce(RULE_16, 1);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, RANGLE, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action652(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_72, 1);
    case 154:
      return reduce(RULE_72, 1);
    case 181:
      return reduce(RULE_72, 1);
    case 184:
      return reduce(RULE_72, 1);
    case 134:
      return reduce(RULE_72, 1);
    case 153:
      return reduce(RULE_72, 1);
    case 185:
      return reduce(RULE_72, 1);
    case 205:
      return reduce(RULE_72, 1);
    case 148:
      return reduce(RULE_72, 1);
    case 125:
      return reduce(RULE_72, 1);
    case 105:
      return reduce(RULE_72, 1);
    case 98:
      return reduce(RULE_72, 1);
    case 155:
      return reduce(RULE_72, 1);
    case 138:
      return reduce(RULE_72, 1);
    case 142:
      return reduce(RULE_72, 1);
    case 124:
      return reduce(RULE_72, 1);
    case 186:
      return reduce(RULE_72, 1);
    case 175:
      return reduce(RULE_72, 1);
    case 128:
      return reduce(RULE_72, 1);
    case 143:
      return reduce(RULE_72, 1);
    case 179:
      return reduce(RULE_72, 1);
    case 164:
      return reduce(RULE_72, 1);
    case 203:
      return reduce(RULE_72, 1);
    case 195:
      return reduce(RULE_72, 1);
    case 193:
      return reduce(RULE_72, 1);
    case 158:
      return reduce(RULE_72, 1);
    case 131:
      return reduce(RULE_72, 1);
    case 156:
      return reduce(RULE_72, 1);
    case 173:
      return reduce(RULE_72, 1);
    case 101:
      return reduce(RULE_72, 1);
    case 102:
      return reduce(RULE_72, 1);
    case 145:
      return reduce(RULE_72, 1);
    case 201:
      return reduce(RULE_72, 1);
    case 132:
      return reduce(RULE_72, 1);
    case 202:
      return reduce(RULE_72, 1);
    case 167:
      return reduce(RULE_72, 1);
    case 103:
      return reduce(RULE_72, 1);
    case 133:
      return reduce(RULE_72, 1);
    case 120:
      return reduce(RULE_72, 1);
    case 168:
      return reduce(RULE_72, 1);
    case 194:
      return reduce(RULE_72, 1);
    case 112:
      return reduce(RULE_72, 1);
    case 149:
      return reduce(RULE_72, 1);
    case 110:
      return reduce(RULE_72, 1);
    case 192:
      return reduce(RULE_72, 1);
    case 200:
      return reduce(RULE_72, 1);
    case 106:
      return reduce(RULE_72, 1);
    case 108:
      return reduce(RULE_72, 1);
    case 165:
      return reduce(RULE_72, 1);
    case 197:
      return reduce(RULE_72, 1);
    case 150:
      return reduce(RULE_72, 1);
    case 111:
      return reduce(RULE_72, 1);
    case 183:
      return reduce(RULE_72, 1);
    case 198:
      return reduce(RULE_72, 1);
    case 100:
      return reduce(RULE_72, 1);
    case 171:
      return reduce(RULE_72, 1);
    case 190:
      return reduce(RULE_72, 1);
    case 169:
      return reduce(RULE_72, 1);
    case 176:
      return reduce(RULE_72, 1);
    case 147:
      return reduce(RULE_72, 1);
    case 99:
      return reduce(RULE_72, 1);
    case 182:
      return reduce(RULE_72, 1);
    case 109:
      return reduce(RULE_72, 1);
    case 191:
      return reduce(RULE_72, 1);
    case 118:
      return reduce(RULE_72, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action653(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(837);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(838);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 1);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, SUPER_KEYWORD, COMMA});
    }
  }

  private final boolean action654(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(463);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 167:
      return reduce(RULE_16, 0);
    case 103:
      return reduce(RULE_16, 0);
    case 194:
      return reduce(RULE_16, 0);
    case 109:
      return reduce(RULE_16, 0);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, RANGLE, LANGLE, SUPER_KEYWORD, DOT, COMMA});
    }
  }

  private final boolean action655(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_88, 0);
    case 154:
      return reduce(RULE_88, 0);
    case 181:
      return reduce(RULE_88, 0);
    case 184:
      return reduce(RULE_88, 0);
    case 134:
      return reduce(RULE_88, 0);
    case 153:
      return reduce(RULE_88, 0);
    case 185:
      return reduce(RULE_88, 0);
    case 205:
      return reduce(RULE_88, 0);
    case 148:
      return reduce(RULE_88, 0);
    case 125:
      return reduce(RULE_88, 0);
    case 105:
      return reduce(RULE_88, 0);
    case 98:
      return reduce(RULE_88, 0);
    case 124:
      return reduce(RULE_88, 0);
    case 142:
      return reduce(RULE_88, 0);
    case 138:
      return reduce(RULE_88, 0);
    case 155:
      return reduce(RULE_88, 0);
    case 186:
      return reduce(RULE_88, 0);
    case 175:
      return reduce(RULE_88, 0);
    case 128:
      return reduce(RULE_88, 0);
    case 143:
      return reduce(RULE_88, 0);
    case 179:
      return reduce(RULE_88, 0);
    case 164:
      return reduce(RULE_88, 0);
    case 203:
      return reduce(RULE_88, 0);
    case 195:
      return reduce(RULE_88, 0);
    case 193:
      return reduce(RULE_88, 0);
    case 158:
      return reduce(RULE_88, 0);
    case 131:
      return reduce(RULE_88, 0);
    case 156:
      return reduce(RULE_88, 0);
    case 173:
      return reduce(RULE_88, 0);
    case 101:
      return reduce(RULE_88, 0);
    case 102:
      return reduce(RULE_88, 0);
    case 145:
      return reduce(RULE_88, 0);
    case 201:
      return reduce(RULE_88, 0);
    case 132:
      return reduce(RULE_88, 0);
    case 202:
      return reduce(RULE_88, 0);
    case 167:
      return reduce(RULE_88, 0);
    case 103:
      return reduce(RULE_88, 0);
    case 133:
      return reduce(RULE_88, 0);
    case 120:
      return reduce(RULE_88, 0);
    case 168:
      return reduce(RULE_88, 0);
    case 194:
      return reduce(RULE_88, 0);
    case 112:
      return reduce(RULE_88, 0);
    case 149:
      return reduce(RULE_88, 0);
    case 110:
      return reduce(RULE_88, 0);
    case 192:
      return reduce(RULE_88, 0);
    case 200:
      return reduce(RULE_88, 0);
    case 106:
      return reduce(RULE_88, 0);
    case 108:
      return reduce(RULE_88, 0);
    case 165:
      return reduce(RULE_88, 0);
    case 197:
      return reduce(RULE_88, 0);
    case 150:
      return reduce(RULE_88, 0);
    case 111:
      return reduce(RULE_88, 0);
    case 183:
      return reduce(RULE_88, 0);
    case 198:
      return reduce(RULE_88, 0);
    case 100:
      return reduce(RULE_88, 0);
    case 169:
      return reduce(RULE_88, 0);
    case 190:
      return reduce(RULE_88, 0);
    case 171:
      return reduce(RULE_88, 0);
    case 176:
      return reduce(RULE_88, 0);
    case 147:
      return reduce(RULE_88, 0);
    case 99:
      return reduce(RULE_88, 0);
    case 182:
      return reduce(RULE_88, 0);
    case 109:
      return reduce(RULE_88, 0);
    case 191:
      return reduce(RULE_88, 0);
    case 118:
      return reduce(RULE_88, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action656(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_72, 2);
    case 154:
      return reduce(RULE_72, 2);
    case 181:
      return reduce(RULE_72, 2);
    case 184:
      return reduce(RULE_72, 2);
    case 134:
      return reduce(RULE_72, 2);
    case 153:
      return reduce(RULE_72, 2);
    case 185:
      return reduce(RULE_72, 2);
    case 205:
      return reduce(RULE_72, 2);
    case 148:
      return reduce(RULE_72, 2);
    case 125:
      return reduce(RULE_72, 2);
    case 105:
      return reduce(RULE_72, 2);
    case 98:
      return reduce(RULE_72, 2);
    case 155:
      return reduce(RULE_72, 2);
    case 138:
      return reduce(RULE_72, 2);
    case 142:
      return reduce(RULE_72, 2);
    case 124:
      return reduce(RULE_72, 2);
    case 186:
      return reduce(RULE_72, 2);
    case 175:
      return reduce(RULE_72, 2);
    case 128:
      return reduce(RULE_72, 2);
    case 143:
      return reduce(RULE_72, 2);
    case 179:
      return reduce(RULE_72, 2);
    case 164:
      return reduce(RULE_72, 2);
    case 203:
      return reduce(RULE_72, 2);
    case 195:
      return reduce(RULE_72, 2);
    case 193:
      return reduce(RULE_72, 2);
    case 158:
      return reduce(RULE_72, 2);
    case 131:
      return reduce(RULE_72, 2);
    case 156:
      return reduce(RULE_72, 2);
    case 173:
      return reduce(RULE_72, 2);
    case 101:
      return reduce(RULE_72, 2);
    case 102:
      return reduce(RULE_72, 2);
    case 145:
      return reduce(RULE_72, 2);
    case 201:
      return reduce(RULE_72, 2);
    case 132:
      return reduce(RULE_72, 2);
    case 202:
      return reduce(RULE_72, 2);
    case 167:
      return reduce(RULE_72, 2);
    case 103:
      return reduce(RULE_72, 2);
    case 133:
      return reduce(RULE_72, 2);
    case 120:
      return reduce(RULE_72, 2);
    case 168:
      return reduce(RULE_72, 2);
    case 194:
      return reduce(RULE_72, 2);
    case 112:
      return reduce(RULE_72, 2);
    case 149:
      return reduce(RULE_72, 2);
    case 110:
      return reduce(RULE_72, 2);
    case 192:
      return reduce(RULE_72, 2);
    case 200:
      return reduce(RULE_72, 2);
    case 106:
      return reduce(RULE_72, 2);
    case 108:
      return reduce(RULE_72, 2);
    case 165:
      return reduce(RULE_72, 2);
    case 197:
      return reduce(RULE_72, 2);
    case 150:
      return reduce(RULE_72, 2);
    case 111:
      return reduce(RULE_72, 2);
    case 183:
      return reduce(RULE_72, 2);
    case 198:
      return reduce(RULE_72, 2);
    case 100:
      return reduce(RULE_72, 2);
    case 171:
      return reduce(RULE_72, 2);
    case 190:
      return reduce(RULE_72, 2);
    case 169:
      return reduce(RULE_72, 2);
    case 176:
      return reduce(RULE_72, 2);
    case 147:
      return reduce(RULE_72, 2);
    case 99:
      return reduce(RULE_72, 2);
    case 182:
      return reduce(RULE_72, 2);
    case 109:
      return reduce(RULE_72, 2);
    case 191:
      return reduce(RULE_72, 2);
    case 118:
      return reduce(RULE_72, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action657(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 167:
      stateStack.addFirst(839);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(837);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 2);
    default: throw new BadTokenException(token, new Object[] {EXTENDS_KEYWORD, AMPERSAND, COMMA});
    }
  }

  private final boolean action658(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_51, 1);
    case 154:
      return reduce(RULE_51, 1);
    case 181:
      return reduce(RULE_51, 1);
    case 184:
      return reduce(RULE_51, 1);
    case 134:
      return reduce(RULE_51, 1);
    case 153:
      return reduce(RULE_51, 1);
    case 185:
      return reduce(RULE_51, 1);
    case 205:
      return reduce(RULE_51, 1);
    case 148:
      return reduce(RULE_51, 1);
    case 125:
      return reduce(RULE_51, 1);
    case 105:
      return reduce(RULE_51, 1);
    case 98:
      return reduce(RULE_51, 1);
    case 155:
      return reduce(RULE_51, 1);
    case 138:
      return reduce(RULE_51, 1);
    case 142:
      return reduce(RULE_51, 1);
    case 124:
      return reduce(RULE_51, 1);
    case 186:
      return reduce(RULE_51, 1);
    case 175:
      return reduce(RULE_51, 1);
    case 128:
      return reduce(RULE_51, 1);
    case 143:
      return reduce(RULE_51, 1);
    case 179:
      return reduce(RULE_51, 1);
    case 164:
      return reduce(RULE_51, 1);
    case 203:
      return reduce(RULE_51, 1);
    case 195:
      return reduce(RULE_51, 1);
    case 193:
      return reduce(RULE_51, 1);
    case 158:
      return reduce(RULE_51, 1);
    case 131:
      return reduce(RULE_51, 1);
    case 156:
      return reduce(RULE_51, 1);
    case 173:
      return reduce(RULE_51, 1);
    case 101:
      return reduce(RULE_51, 1);
    case 102:
      return reduce(RULE_51, 1);
    case 145:
      return reduce(RULE_51, 1);
    case 201:
      return reduce(RULE_51, 1);
    case 132:
      return reduce(RULE_51, 1);
    case 202:
      return reduce(RULE_51, 1);
    case 167:
      return reduce(RULE_51, 1);
    case 103:
      return reduce(RULE_51, 1);
    case 133:
      return reduce(RULE_51, 1);
    case 120:
      return reduce(RULE_51, 1);
    case 168:
      return reduce(RULE_51, 1);
    case 194:
      return reduce(RULE_51, 1);
    case 112:
      return reduce(RULE_51, 1);
    case 149:
      return reduce(RULE_51, 1);
    case 110:
      return reduce(RULE_51, 1);
    case 192:
      return reduce(RULE_51, 1);
    case 200:
      return reduce(RULE_51, 1);
    case 106:
      return reduce(RULE_51, 1);
    case 108:
      return reduce(RULE_51, 1);
    case 165:
      return reduce(RULE_51, 1);
    case 197:
      return reduce(RULE_51, 1);
    case 150:
      return reduce(RULE_51, 1);
    case 111:
      return reduce(RULE_51, 1);
    case 183:
      return reduce(RULE_51, 1);
    case 198:
      return reduce(RULE_51, 1);
    case 100:
      return reduce(RULE_51, 1);
    case 171:
      return reduce(RULE_51, 1);
    case 190:
      return reduce(RULE_51, 1);
    case 169:
      return reduce(RULE_51, 1);
    case 176:
      return reduce(RULE_51, 1);
    case 147:
      return reduce(RULE_51, 1);
    case 99:
      return reduce(RULE_51, 1);
    case 182:
      return reduce(RULE_51, 1);
    case 109:
      return reduce(RULE_51, 1);
    case 191:
      return reduce(RULE_51, 1);
    case 118:
      return reduce(RULE_51, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action659(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_51, 3);
    case 154:
      return reduce(RULE_51, 3);
    case 181:
      return reduce(RULE_51, 3);
    case 184:
      return reduce(RULE_51, 3);
    case 134:
      return reduce(RULE_51, 3);
    case 153:
      return reduce(RULE_51, 3);
    case 185:
      return reduce(RULE_51, 3);
    case 205:
      return reduce(RULE_51, 3);
    case 148:
      return reduce(RULE_51, 3);
    case 125:
      return reduce(RULE_51, 3);
    case 105:
      return reduce(RULE_51, 3);
    case 98:
      return reduce(RULE_51, 3);
    case 155:
      return reduce(RULE_51, 3);
    case 138:
      return reduce(RULE_51, 3);
    case 142:
      return reduce(RULE_51, 3);
    case 124:
      return reduce(RULE_51, 3);
    case 186:
      return reduce(RULE_51, 3);
    case 175:
      return reduce(RULE_51, 3);
    case 128:
      return reduce(RULE_51, 3);
    case 143:
      return reduce(RULE_51, 3);
    case 179:
      return reduce(RULE_51, 3);
    case 164:
      return reduce(RULE_51, 3);
    case 203:
      return reduce(RULE_51, 3);
    case 195:
      return reduce(RULE_51, 3);
    case 193:
      return reduce(RULE_51, 3);
    case 158:
      return reduce(RULE_51, 3);
    case 131:
      return reduce(RULE_51, 3);
    case 156:
      return reduce(RULE_51, 3);
    case 173:
      return reduce(RULE_51, 3);
    case 101:
      return reduce(RULE_51, 3);
    case 102:
      return reduce(RULE_51, 3);
    case 145:
      return reduce(RULE_51, 3);
    case 201:
      return reduce(RULE_51, 3);
    case 132:
      return reduce(RULE_51, 3);
    case 202:
      return reduce(RULE_51, 3);
    case 167:
      return reduce(RULE_51, 3);
    case 103:
      return reduce(RULE_51, 3);
    case 133:
      return reduce(RULE_51, 3);
    case 120:
      return reduce(RULE_51, 3);
    case 168:
      return reduce(RULE_51, 3);
    case 194:
      return reduce(RULE_51, 3);
    case 112:
      return reduce(RULE_51, 3);
    case 149:
      return reduce(RULE_51, 3);
    case 110:
      return reduce(RULE_51, 3);
    case 192:
      return reduce(RULE_51, 3);
    case 200:
      return reduce(RULE_51, 3);
    case 106:
      return reduce(RULE_51, 3);
    case 108:
      return reduce(RULE_51, 3);
    case 165:
      return reduce(RULE_51, 3);
    case 197:
      return reduce(RULE_51, 3);
    case 150:
      return reduce(RULE_51, 3);
    case 111:
      return reduce(RULE_51, 3);
    case 183:
      return reduce(RULE_51, 3);
    case 198:
      return reduce(RULE_51, 3);
    case 100:
      return reduce(RULE_51, 3);
    case 171:
      return reduce(RULE_51, 3);
    case 190:
      return reduce(RULE_51, 3);
    case 169:
      return reduce(RULE_51, 3);
    case 176:
      return reduce(RULE_51, 3);
    case 147:
      return reduce(RULE_51, 3);
    case 99:
      return reduce(RULE_51, 3);
    case 182:
      return reduce(RULE_51, 3);
    case 109:
      return reduce(RULE_51, 3);
    case 191:
      return reduce(RULE_51, 3);
    case 118:
      return reduce(RULE_51, 3);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action660(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_51, 2);
    case 154:
      return reduce(RULE_51, 2);
    case 181:
      return reduce(RULE_51, 2);
    case 184:
      return reduce(RULE_51, 2);
    case 134:
      return reduce(RULE_51, 2);
    case 153:
      return reduce(RULE_51, 2);
    case 185:
      return reduce(RULE_51, 2);
    case 205:
      return reduce(RULE_51, 2);
    case 148:
      return reduce(RULE_51, 2);
    case 125:
      return reduce(RULE_51, 2);
    case 105:
      return reduce(RULE_51, 2);
    case 98:
      return reduce(RULE_51, 2);
    case 155:
      return reduce(RULE_51, 2);
    case 138:
      return reduce(RULE_51, 2);
    case 142:
      return reduce(RULE_51, 2);
    case 124:
      return reduce(RULE_51, 2);
    case 186:
      return reduce(RULE_51, 2);
    case 175:
      return reduce(RULE_51, 2);
    case 128:
      return reduce(RULE_51, 2);
    case 143:
      return reduce(RULE_51, 2);
    case 179:
      return reduce(RULE_51, 2);
    case 164:
      return reduce(RULE_51, 2);
    case 203:
      return reduce(RULE_51, 2);
    case 195:
      return reduce(RULE_51, 2);
    case 193:
      return reduce(RULE_51, 2);
    case 158:
      return reduce(RULE_51, 2);
    case 131:
      return reduce(RULE_51, 2);
    case 156:
      return reduce(RULE_51, 2);
    case 173:
      return reduce(RULE_51, 2);
    case 101:
      return reduce(RULE_51, 2);
    case 102:
      return reduce(RULE_51, 2);
    case 145:
      return reduce(RULE_51, 2);
    case 201:
      return reduce(RULE_51, 2);
    case 132:
      return reduce(RULE_51, 2);
    case 202:
      return reduce(RULE_51, 2);
    case 167:
      return reduce(RULE_51, 2);
    case 103:
      return reduce(RULE_51, 2);
    case 133:
      return reduce(RULE_51, 2);
    case 120:
      return reduce(RULE_51, 2);
    case 168:
      return reduce(RULE_51, 2);
    case 194:
      return reduce(RULE_51, 2);
    case 112:
      return reduce(RULE_51, 2);
    case 149:
      return reduce(RULE_51, 2);
    case 110:
      return reduce(RULE_51, 2);
    case 192:
      return reduce(RULE_51, 2);
    case 200:
      return reduce(RULE_51, 2);
    case 106:
      return reduce(RULE_51, 2);
    case 108:
      return reduce(RULE_51, 2);
    case 165:
      return reduce(RULE_51, 2);
    case 197:
      return reduce(RULE_51, 2);
    case 150:
      return reduce(RULE_51, 2);
    case 111:
      return reduce(RULE_51, 2);
    case 183:
      return reduce(RULE_51, 2);
    case 198:
      return reduce(RULE_51, 2);
    case 100:
      return reduce(RULE_51, 2);
    case 171:
      return reduce(RULE_51, 2);
    case 190:
      return reduce(RULE_51, 2);
    case 169:
      return reduce(RULE_51, 2);
    case 176:
      return reduce(RULE_51, 2);
    case 147:
      return reduce(RULE_51, 2);
    case 99:
      return reduce(RULE_51, 2);
    case 182:
      return reduce(RULE_51, 2);
    case 109:
      return reduce(RULE_51, 2);
    case 191:
      return reduce(RULE_51, 2);
    case 118:
      return reduce(RULE_51, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action661(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto661(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 91;
    case 48: return 92;
    case 49: return 93;
    case 54: return 94;
    case 58: return 95;
    case 28: return 96;
    case 30: return 97;
    case 59: return 98;
    case 60: return 99;
    case 71: return 840;
    case 70: return 841;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action662(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto662(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 91;
    case 48: return 92;
    case 49: return 93;
    case 54: return 94;
    case 58: return 95;
    case 28: return 96;
    case 30: return 97;
    case 59: return 98;
    case 60: return 99;
    case 71: return 842;
    case 70: return 843;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action663(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_89, 5);
    case 101:
      return reduce(RULE_89, 5);
    case 188:
      return reduce(RULE_89, 5);
    case 181:
      return reduce(RULE_89, 5);
    case 201:
      return reduce(RULE_89, 5);
    case 132:
      return reduce(RULE_89, 5);
    case 202:
      return reduce(RULE_89, 5);
    case 133:
      return reduce(RULE_89, 5);
    case 205:
      return reduce(RULE_89, 5);
    case 206:
      return reduce(RULE_89, 5);
    case 192:
      return reduce(RULE_89, 5);
    case 200:
      return reduce(RULE_89, 5);
    case 165:
      return reduce(RULE_89, 5);
    case 98:
      return reduce(RULE_89, 5);
    case 155:
      return reduce(RULE_89, 5);
    case 142:
      return reduce(RULE_89, 5);
    case 183:
      return reduce(RULE_89, 5);
    case 186:
      return reduce(RULE_89, 5);
    case 175:
      return reduce(RULE_89, 5);
    case 128:
      return reduce(RULE_89, 5);
    case 171:
      return reduce(RULE_89, 5);
    case 190:
      return reduce(RULE_89, 5);
    case 169:
      return reduce(RULE_89, 5);
    case 179:
      return reduce(RULE_89, 5);
    case 164:
      return reduce(RULE_89, 5);
    case 203:
      return reduce(RULE_89, 5);
    case 147:
      return reduce(RULE_89, 5);
    case 193:
      return reduce(RULE_89, 5);
    case 182:
      return reduce(RULE_89, 5);
    case 158:
      return reduce(RULE_89, 5);
    case 131:
      return reduce(RULE_89, 5);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action664(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_89, 1);
    case 101:
      return reduce(RULE_89, 1);
    case 188:
      return reduce(RULE_89, 1);
    case 181:
      return reduce(RULE_89, 1);
    case 201:
      return reduce(RULE_89, 1);
    case 132:
      return reduce(RULE_89, 1);
    case 202:
      return reduce(RULE_89, 1);
    case 133:
      return reduce(RULE_89, 1);
    case 205:
      return reduce(RULE_89, 1);
    case 206:
      return reduce(RULE_89, 1);
    case 192:
      return reduce(RULE_89, 1);
    case 200:
      return reduce(RULE_89, 1);
    case 165:
      return reduce(RULE_89, 1);
    case 98:
      return reduce(RULE_89, 1);
    case 155:
      return reduce(RULE_89, 1);
    case 142:
      return reduce(RULE_89, 1);
    case 183:
      return reduce(RULE_89, 1);
    case 186:
      return reduce(RULE_89, 1);
    case 175:
      return reduce(RULE_89, 1);
    case 128:
      return reduce(RULE_89, 1);
    case 171:
      return reduce(RULE_89, 1);
    case 190:
      return reduce(RULE_89, 1);
    case 169:
      return reduce(RULE_89, 1);
    case 179:
      return reduce(RULE_89, 1);
    case 164:
      return reduce(RULE_89, 1);
    case 203:
      return reduce(RULE_89, 1);
    case 147:
      return reduce(RULE_89, 1);
    case 193:
      return reduce(RULE_89, 1);
    case 182:
      return reduce(RULE_89, 1);
    case 158:
      return reduce(RULE_89, 1);
    case 131:
      return reduce(RULE_89, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action665(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      return reduce(RULE_90, 0);
    case 109:
      return reduce(RULE_90, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN, COMMA});
    }
  }

  private final boolean action666(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto666(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 844;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action667(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_74, 1);
    case 150:
      return reduce(RULE_74, 1);
    case 109:
      return reduce(RULE_74, 1);
    case 131:
      return reduce(RULE_74, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE});
    }
  }

  private final boolean action668(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 204:
      stateStack.addFirst(845);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNCHECKED_KEYWORD, NAME});
    }
  }

  private final int goto668(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 846;
    default: return -1;
    }
  }

  private final boolean action669(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto669(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 94: return 847;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 848;
    case 28: return 486;
    case 30: return 487;
    case 97: return 235;
    case 60: return 340;
    default: return -1;
    }
  }

  private final boolean action670(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(164);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE});
    }
  }

  private final boolean action671(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, TILDE, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto671(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 849;
    case 60: return 340;
    case 90: return 850;
    default: return -1;
    }
  }

  private final boolean action672(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE, LANGLE, DOT});
    }
  }

  private final boolean action673(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 145:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE});
    }
  }

  private final boolean action674(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(788);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 21);
    case 101:
      return reduce(RULE_58, 21);
    case 103:
      return reduce(RULE_58, 21);
    case 148:
      return reduce(RULE_58, 21);
    case 112:
      return reduce(RULE_58, 21);
    case 149:
      return reduce(RULE_58, 21);
    case 110:
      return reduce(RULE_58, 21);
    case 108:
      return reduce(RULE_58, 21);
    case 106:
      return reduce(RULE_58, 21);
    case 125:
      return reduce(RULE_58, 21);
    case 138:
      return reduce(RULE_58, 21);
    case 142:
      return reduce(RULE_58, 21);
    case 155:
      return reduce(RULE_58, 21);
    case 150:
      return reduce(RULE_58, 21);
    case 183:
      return reduce(RULE_58, 21);
    case 175:
      return reduce(RULE_58, 21);
    case 169:
      return reduce(RULE_58, 21);
    case 190:
      return reduce(RULE_58, 21);
    case 143:
      return reduce(RULE_58, 21);
    case 164:
      return reduce(RULE_58, 21);
    case 203:
      return reduce(RULE_58, 21);
    case 147:
      return reduce(RULE_58, 21);
    case 193:
      return reduce(RULE_58, 21);
    case 182:
      return reduce(RULE_58, 21);
    case 109:
      return reduce(RULE_58, 21);
    case 191:
      return reduce(RULE_58, 21);
    case 131:
      return reduce(RULE_58, 21);
    case 118:
      return reduce(RULE_58, 21);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, LPAREN, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action675(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 111:
      return reduce(RULE_15, 43);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, DOT});
    }
  }

  private final boolean action676(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_65, 1);
    case 173:
      return reduce(RULE_65, 1);
    case 101:
      return reduce(RULE_65, 1);
    case 145:
      return reduce(RULE_65, 1);
    case 116:
      return reduce(RULE_65, 1);
    case 151:
      return reduce(RULE_65, 1);
    case 134:
      return reduce(RULE_65, 1);
    case 103:
      return reduce(RULE_65, 1);
    case 120:
      return reduce(RULE_65, 1);
    case 112:
      return reduce(RULE_65, 1);
    case 148:
      return reduce(RULE_65, 1);
    case 110:
      return reduce(RULE_65, 1);
    case 149:
      return reduce(RULE_65, 1);
    case 108:
      return reduce(RULE_65, 1);
    case 106:
      return reduce(RULE_65, 1);
    case 125:
      return reduce(RULE_65, 1);
    case 178:
      return reduce(RULE_65, 1);
    case 155:
      return reduce(RULE_65, 1);
    case 124:
      return reduce(RULE_65, 1);
    case 142:
      return reduce(RULE_65, 1);
    case 146:
      return reduce(RULE_65, 1);
    case 138:
      return reduce(RULE_65, 1);
    case 150:
      return reduce(RULE_65, 1);
    case 183:
      return reduce(RULE_65, 1);
    case 175:
      return reduce(RULE_65, 1);
    case 113:
      return reduce(RULE_65, 1);
    case 169:
      return reduce(RULE_65, 1);
    case 190:
      return reduce(RULE_65, 1);
    case 143:
      return reduce(RULE_65, 1);
    case 164:
      return reduce(RULE_65, 1);
    case 203:
      return reduce(RULE_65, 1);
    case 147:
      return reduce(RULE_65, 1);
    case 130:
      return reduce(RULE_65, 1);
    case 193:
      return reduce(RULE_65, 1);
    case 129:
      return reduce(RULE_65, 1);
    case 136:
      return reduce(RULE_65, 1);
    case 182:
      return reduce(RULE_65, 1);
    case 140:
      return reduce(RULE_65, 1);
    case 109:
      return reduce(RULE_65, 1);
    case 191:
      return reduce(RULE_65, 1);
    case 131:
      return reduce(RULE_65, 1);
    case 118:
      return reduce(RULE_65, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action677(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 16);
    case 173:
      return reduce(RULE_36, 16);
    case 101:
      return reduce(RULE_36, 16);
    case 145:
      return reduce(RULE_36, 16);
    case 116:
      return reduce(RULE_36, 16);
    case 151:
      return reduce(RULE_36, 16);
    case 132:
      return reduce(RULE_36, 16);
    case 134:
      return reduce(RULE_36, 16);
    case 103:
      return reduce(RULE_36, 16);
    case 133:
      return reduce(RULE_36, 16);
    case 120:
      return reduce(RULE_36, 16);
    case 148:
      return reduce(RULE_36, 16);
    case 112:
      return reduce(RULE_36, 16);
    case 149:
      return reduce(RULE_36, 16);
    case 110:
      return reduce(RULE_36, 16);
    case 108:
      return reduce(RULE_36, 16);
    case 106:
      return reduce(RULE_36, 16);
    case 125:
      return reduce(RULE_36, 16);
    case 178:
      return reduce(RULE_36, 16);
    case 155:
      return reduce(RULE_36, 16);
    case 124:
      return reduce(RULE_36, 16);
    case 142:
      return reduce(RULE_36, 16);
    case 146:
      return reduce(RULE_36, 16);
    case 138:
      return reduce(RULE_36, 16);
    case 150:
      return reduce(RULE_36, 16);
    case 183:
      return reduce(RULE_36, 16);
    case 175:
      return reduce(RULE_36, 16);
    case 113:
      return reduce(RULE_36, 16);
    case 169:
      return reduce(RULE_36, 16);
    case 190:
      return reduce(RULE_36, 16);
    case 143:
      return reduce(RULE_36, 16);
    case 164:
      return reduce(RULE_36, 16);
    case 203:
      return reduce(RULE_36, 16);
    case 147:
      return reduce(RULE_36, 16);
    case 130:
      return reduce(RULE_36, 16);
    case 193:
      return reduce(RULE_36, 16);
    case 136:
      return reduce(RULE_36, 16);
    case 129:
      return reduce(RULE_36, 16);
    case 144:
      return reduce(RULE_36, 16);
    case 182:
      return reduce(RULE_36, 16);
    case 122:
      return reduce(RULE_36, 16);
    case 140:
      return reduce(RULE_36, 16);
    case 109:
      return reduce(RULE_36, 16);
    case 191:
      return reduce(RULE_36, 16);
    case 131:
      return reduce(RULE_36, 16);
    case 118:
      return reduce(RULE_36, 16);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action678(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 1);
    case 173:
      return reduce(RULE_44, 1);
    case 101:
      return reduce(RULE_44, 1);
    case 145:
      return reduce(RULE_44, 1);
    case 116:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_44, 1);
    case 148:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_44, 1);
    case 149:
      return reduce(RULE_44, 1);
    case 108:
      return reduce(RULE_44, 1);
    case 106:
      return reduce(RULE_44, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 178:
      return reduce(RULE_44, 1);
    case 155:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 146:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_44, 1);
    case 150:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 183:
      return reduce(RULE_44, 1);
    case 175:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 169:
      return reduce(RULE_44, 1);
    case 190:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 164:
      return reduce(RULE_44, 1);
    case 203:
      return reduce(RULE_44, 1);
    case 147:
      return reduce(RULE_44, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 193:
      return reduce(RULE_44, 1);
    case 129:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 182:
      return reduce(RULE_44, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 109:
      return reduce(RULE_44, 1);
    case 191:
      return reduce(RULE_44, 1);
    case 131:
      return reduce(RULE_44, 1);
    case 118:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, PIPE, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action679(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_59, 6);
    case 101:
      return reduce(RULE_59, 6);
    case 145:
      return reduce(RULE_59, 6);
    case 134:
      return reduce(RULE_59, 6);
    case 103:
      return reduce(RULE_59, 6);
    case 148:
      return reduce(RULE_59, 6);
    case 112:
      return reduce(RULE_59, 6);
    case 110:
      return reduce(RULE_59, 6);
    case 149:
      return reduce(RULE_59, 6);
    case 108:
      return reduce(RULE_59, 6);
    case 106:
      return reduce(RULE_59, 6);
    case 125:
      return reduce(RULE_59, 6);
    case 178:
      return reduce(RULE_59, 6);
    case 155:
      return reduce(RULE_59, 6);
    case 142:
      return reduce(RULE_59, 6);
    case 146:
      return reduce(RULE_59, 6);
    case 138:
      return reduce(RULE_59, 6);
    case 150:
      return reduce(RULE_59, 6);
    case 183:
      return reduce(RULE_59, 6);
    case 175:
      return reduce(RULE_59, 6);
    case 169:
      return reduce(RULE_59, 6);
    case 190:
      return reduce(RULE_59, 6);
    case 143:
      return reduce(RULE_59, 6);
    case 164:
      return reduce(RULE_59, 6);
    case 203:
      return reduce(RULE_59, 6);
    case 147:
      return reduce(RULE_59, 6);
    case 130:
      return reduce(RULE_59, 6);
    case 193:
      return reduce(RULE_59, 6);
    case 129:
      return reduce(RULE_59, 6);
    case 182:
      return reduce(RULE_59, 6);
    case 140:
      return reduce(RULE_59, 6);
    case 109:
      return reduce(RULE_59, 6);
    case 191:
      return reduce(RULE_59, 6);
    case 131:
      return reduce(RULE_59, 6);
    case 118:
      return reduce(RULE_59, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, PIPE, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto679(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action680(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(522);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(524);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_59, 5);
    case 101:
      return reduce(RULE_59, 5);
    case 145:
      return reduce(RULE_59, 5);
    case 134:
      return reduce(RULE_59, 5);
    case 103:
      return reduce(RULE_59, 5);
    case 148:
      return reduce(RULE_59, 5);
    case 112:
      return reduce(RULE_59, 5);
    case 110:
      return reduce(RULE_59, 5);
    case 149:
      return reduce(RULE_59, 5);
    case 108:
      return reduce(RULE_59, 5);
    case 106:
      return reduce(RULE_59, 5);
    case 125:
      return reduce(RULE_59, 5);
    case 178:
      return reduce(RULE_59, 5);
    case 155:
      return reduce(RULE_59, 5);
    case 142:
      return reduce(RULE_59, 5);
    case 146:
      return reduce(RULE_59, 5);
    case 138:
      return reduce(RULE_59, 5);
    case 150:
      return reduce(RULE_59, 5);
    case 183:
      return reduce(RULE_59, 5);
    case 175:
      return reduce(RULE_59, 5);
    case 169:
      return reduce(RULE_59, 5);
    case 190:
      return reduce(RULE_59, 5);
    case 143:
      return reduce(RULE_59, 5);
    case 164:
      return reduce(RULE_59, 5);
    case 203:
      return reduce(RULE_59, 5);
    case 147:
      return reduce(RULE_59, 5);
    case 130:
      return reduce(RULE_59, 5);
    case 193:
      return reduce(RULE_59, 5);
    case 129:
      return reduce(RULE_59, 5);
    case 182:
      return reduce(RULE_59, 5);
    case 140:
      return reduce(RULE_59, 5);
    case 109:
      return reduce(RULE_59, 5);
    case 191:
      return reduce(RULE_59, 5);
    case 131:
      return reduce(RULE_59, 5);
    case 118:
      return reduce(RULE_59, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action681(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 0);
    case 173:
      return reduce(RULE_44, 0);
    case 101:
      return reduce(RULE_44, 0);
    case 145:
      return reduce(RULE_44, 0);
    case 116:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_44, 0);
    case 148:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_44, 0);
    case 149:
      return reduce(RULE_44, 0);
    case 108:
      return reduce(RULE_44, 0);
    case 106:
      return reduce(RULE_44, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 178:
      return reduce(RULE_44, 0);
    case 155:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 146:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_44, 0);
    case 150:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 183:
      return reduce(RULE_44, 0);
    case 175:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 169:
      return reduce(RULE_44, 0);
    case 190:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 164:
      return reduce(RULE_44, 0);
    case 203:
      return reduce(RULE_44, 0);
    case 147:
      return reduce(RULE_44, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 193:
      return reduce(RULE_44, 0);
    case 129:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 182:
      return reduce(RULE_44, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 109:
      return reduce(RULE_44, 0);
    case 191:
      return reduce(RULE_44, 0);
    case 131:
      return reduce(RULE_44, 0);
    case 118:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, PIPE, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action682(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_58, 19);
    case 101:
      return reduce(RULE_58, 19);
    case 103:
      return reduce(RULE_58, 19);
    case 148:
      return reduce(RULE_58, 19);
    case 112:
      return reduce(RULE_58, 19);
    case 149:
      return reduce(RULE_58, 19);
    case 110:
      return reduce(RULE_58, 19);
    case 108:
      return reduce(RULE_58, 19);
    case 106:
      return reduce(RULE_58, 19);
    case 125:
      return reduce(RULE_58, 19);
    case 138:
      return reduce(RULE_58, 19);
    case 142:
      return reduce(RULE_58, 19);
    case 155:
      return reduce(RULE_58, 19);
    case 150:
      return reduce(RULE_58, 19);
    case 183:
      return reduce(RULE_58, 19);
    case 175:
      return reduce(RULE_58, 19);
    case 169:
      return reduce(RULE_58, 19);
    case 190:
      return reduce(RULE_58, 19);
    case 143:
      return reduce(RULE_58, 19);
    case 164:
      return reduce(RULE_58, 19);
    case 203:
      return reduce(RULE_58, 19);
    case 147:
      return reduce(RULE_58, 19);
    case 193:
      return reduce(RULE_58, 19);
    case 182:
      return reduce(RULE_58, 19);
    case 109:
      return reduce(RULE_58, 19);
    case 191:
      return reduce(RULE_58, 19);
    case 131:
      return reduce(RULE_58, 19);
    case 118:
      return reduce(RULE_58, 19);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action683(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 15);
    case 101:
      return reduce(RULE_58, 15);
    case 103:
      return reduce(RULE_58, 15);
    case 148:
      return reduce(RULE_58, 15);
    case 112:
      return reduce(RULE_58, 15);
    case 149:
      return reduce(RULE_58, 15);
    case 110:
      return reduce(RULE_58, 15);
    case 108:
      return reduce(RULE_58, 15);
    case 106:
      return reduce(RULE_58, 15);
    case 125:
      return reduce(RULE_58, 15);
    case 138:
      return reduce(RULE_58, 15);
    case 142:
      return reduce(RULE_58, 15);
    case 155:
      return reduce(RULE_58, 15);
    case 150:
      return reduce(RULE_58, 15);
    case 183:
      return reduce(RULE_58, 15);
    case 175:
      return reduce(RULE_58, 15);
    case 169:
      return reduce(RULE_58, 15);
    case 190:
      return reduce(RULE_58, 15);
    case 143:
      return reduce(RULE_58, 15);
    case 164:
      return reduce(RULE_58, 15);
    case 203:
      return reduce(RULE_58, 15);
    case 147:
      return reduce(RULE_58, 15);
    case 193:
      return reduce(RULE_58, 15);
    case 182:
      return reduce(RULE_58, 15);
    case 109:
      return reduce(RULE_58, 15);
    case 191:
      return reduce(RULE_58, 15);
    case 131:
      return reduce(RULE_58, 15);
    case 118:
      return reduce(RULE_58, 15);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action684(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 16);
    case 101:
      return reduce(RULE_58, 16);
    case 103:
      return reduce(RULE_58, 16);
    case 148:
      return reduce(RULE_58, 16);
    case 112:
      return reduce(RULE_58, 16);
    case 149:
      return reduce(RULE_58, 16);
    case 110:
      return reduce(RULE_58, 16);
    case 108:
      return reduce(RULE_58, 16);
    case 106:
      return reduce(RULE_58, 16);
    case 125:
      return reduce(RULE_58, 16);
    case 138:
      return reduce(RULE_58, 16);
    case 142:
      return reduce(RULE_58, 16);
    case 155:
      return reduce(RULE_58, 16);
    case 150:
      return reduce(RULE_58, 16);
    case 183:
      return reduce(RULE_58, 16);
    case 175:
      return reduce(RULE_58, 16);
    case 169:
      return reduce(RULE_58, 16);
    case 190:
      return reduce(RULE_58, 16);
    case 143:
      return reduce(RULE_58, 16);
    case 164:
      return reduce(RULE_58, 16);
    case 203:
      return reduce(RULE_58, 16);
    case 147:
      return reduce(RULE_58, 16);
    case 193:
      return reduce(RULE_58, 16);
    case 182:
      return reduce(RULE_58, 16);
    case 109:
      return reduce(RULE_58, 16);
    case 191:
      return reduce(RULE_58, 16);
    case 131:
      return reduce(RULE_58, 16);
    case 118:
      return reduce(RULE_58, 16);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto684(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action685(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 5);
    case 101:
      return reduce(RULE_58, 5);
    case 103:
      return reduce(RULE_58, 5);
    case 148:
      return reduce(RULE_58, 5);
    case 112:
      return reduce(RULE_58, 5);
    case 149:
      return reduce(RULE_58, 5);
    case 110:
      return reduce(RULE_58, 5);
    case 108:
      return reduce(RULE_58, 5);
    case 106:
      return reduce(RULE_58, 5);
    case 125:
      return reduce(RULE_58, 5);
    case 138:
      return reduce(RULE_58, 5);
    case 142:
      return reduce(RULE_58, 5);
    case 155:
      return reduce(RULE_58, 5);
    case 150:
      return reduce(RULE_58, 5);
    case 183:
      return reduce(RULE_58, 5);
    case 175:
      return reduce(RULE_58, 5);
    case 169:
      return reduce(RULE_58, 5);
    case 190:
      return reduce(RULE_58, 5);
    case 143:
      return reduce(RULE_58, 5);
    case 164:
      return reduce(RULE_58, 5);
    case 203:
      return reduce(RULE_58, 5);
    case 147:
      return reduce(RULE_58, 5);
    case 193:
      return reduce(RULE_58, 5);
    case 182:
      return reduce(RULE_58, 5);
    case 109:
      return reduce(RULE_58, 5);
    case 191:
      return reduce(RULE_58, 5);
    case 131:
      return reduce(RULE_58, 5);
    case 118:
      return reduce(RULE_58, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action686(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 6);
    case 101:
      return reduce(RULE_58, 6);
    case 103:
      return reduce(RULE_58, 6);
    case 148:
      return reduce(RULE_58, 6);
    case 112:
      return reduce(RULE_58, 6);
    case 149:
      return reduce(RULE_58, 6);
    case 110:
      return reduce(RULE_58, 6);
    case 108:
      return reduce(RULE_58, 6);
    case 106:
      return reduce(RULE_58, 6);
    case 125:
      return reduce(RULE_58, 6);
    case 138:
      return reduce(RULE_58, 6);
    case 142:
      return reduce(RULE_58, 6);
    case 155:
      return reduce(RULE_58, 6);
    case 150:
      return reduce(RULE_58, 6);
    case 183:
      return reduce(RULE_58, 6);
    case 175:
      return reduce(RULE_58, 6);
    case 169:
      return reduce(RULE_58, 6);
    case 190:
      return reduce(RULE_58, 6);
    case 143:
      return reduce(RULE_58, 6);
    case 164:
      return reduce(RULE_58, 6);
    case 203:
      return reduce(RULE_58, 6);
    case 147:
      return reduce(RULE_58, 6);
    case 193:
      return reduce(RULE_58, 6);
    case 182:
      return reduce(RULE_58, 6);
    case 109:
      return reduce(RULE_58, 6);
    case 191:
      return reduce(RULE_58, 6);
    case 131:
      return reduce(RULE_58, 6);
    case 118:
      return reduce(RULE_58, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto686(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action687(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 9);
    case 101:
      return reduce(RULE_58, 9);
    case 103:
      return reduce(RULE_58, 9);
    case 148:
      return reduce(RULE_58, 9);
    case 112:
      return reduce(RULE_58, 9);
    case 149:
      return reduce(RULE_58, 9);
    case 110:
      return reduce(RULE_58, 9);
    case 108:
      return reduce(RULE_58, 9);
    case 106:
      return reduce(RULE_58, 9);
    case 125:
      return reduce(RULE_58, 9);
    case 138:
      return reduce(RULE_58, 9);
    case 142:
      return reduce(RULE_58, 9);
    case 155:
      return reduce(RULE_58, 9);
    case 150:
      return reduce(RULE_58, 9);
    case 183:
      return reduce(RULE_58, 9);
    case 175:
      return reduce(RULE_58, 9);
    case 169:
      return reduce(RULE_58, 9);
    case 190:
      return reduce(RULE_58, 9);
    case 143:
      return reduce(RULE_58, 9);
    case 164:
      return reduce(RULE_58, 9);
    case 203:
      return reduce(RULE_58, 9);
    case 147:
      return reduce(RULE_58, 9);
    case 193:
      return reduce(RULE_58, 9);
    case 182:
      return reduce(RULE_58, 9);
    case 109:
      return reduce(RULE_58, 9);
    case 191:
      return reduce(RULE_58, 9);
    case 131:
      return reduce(RULE_58, 9);
    case 118:
      return reduce(RULE_58, 9);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action688(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 10);
    case 101:
      return reduce(RULE_58, 10);
    case 103:
      return reduce(RULE_58, 10);
    case 148:
      return reduce(RULE_58, 10);
    case 112:
      return reduce(RULE_58, 10);
    case 149:
      return reduce(RULE_58, 10);
    case 110:
      return reduce(RULE_58, 10);
    case 108:
      return reduce(RULE_58, 10);
    case 106:
      return reduce(RULE_58, 10);
    case 125:
      return reduce(RULE_58, 10);
    case 138:
      return reduce(RULE_58, 10);
    case 142:
      return reduce(RULE_58, 10);
    case 155:
      return reduce(RULE_58, 10);
    case 150:
      return reduce(RULE_58, 10);
    case 183:
      return reduce(RULE_58, 10);
    case 175:
      return reduce(RULE_58, 10);
    case 169:
      return reduce(RULE_58, 10);
    case 190:
      return reduce(RULE_58, 10);
    case 143:
      return reduce(RULE_58, 10);
    case 164:
      return reduce(RULE_58, 10);
    case 203:
      return reduce(RULE_58, 10);
    case 147:
      return reduce(RULE_58, 10);
    case 193:
      return reduce(RULE_58, 10);
    case 182:
      return reduce(RULE_58, 10);
    case 109:
      return reduce(RULE_58, 10);
    case 191:
      return reduce(RULE_58, 10);
    case 131:
      return reduce(RULE_58, 10);
    case 118:
      return reduce(RULE_58, 10);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto688(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action689(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 1);
    case 101:
      return reduce(RULE_58, 1);
    case 103:
      return reduce(RULE_58, 1);
    case 148:
      return reduce(RULE_58, 1);
    case 112:
      return reduce(RULE_58, 1);
    case 149:
      return reduce(RULE_58, 1);
    case 110:
      return reduce(RULE_58, 1);
    case 108:
      return reduce(RULE_58, 1);
    case 106:
      return reduce(RULE_58, 1);
    case 125:
      return reduce(RULE_58, 1);
    case 138:
      return reduce(RULE_58, 1);
    case 142:
      return reduce(RULE_58, 1);
    case 155:
      return reduce(RULE_58, 1);
    case 150:
      return reduce(RULE_58, 1);
    case 183:
      return reduce(RULE_58, 1);
    case 175:
      return reduce(RULE_58, 1);
    case 169:
      return reduce(RULE_58, 1);
    case 190:
      return reduce(RULE_58, 1);
    case 143:
      return reduce(RULE_58, 1);
    case 164:
      return reduce(RULE_58, 1);
    case 203:
      return reduce(RULE_58, 1);
    case 147:
      return reduce(RULE_58, 1);
    case 193:
      return reduce(RULE_58, 1);
    case 182:
      return reduce(RULE_58, 1);
    case 109:
      return reduce(RULE_58, 1);
    case 191:
      return reduce(RULE_58, 1);
    case 131:
      return reduce(RULE_58, 1);
    case 118:
      return reduce(RULE_58, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action690(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 2);
    case 101:
      return reduce(RULE_58, 2);
    case 103:
      return reduce(RULE_58, 2);
    case 148:
      return reduce(RULE_58, 2);
    case 112:
      return reduce(RULE_58, 2);
    case 149:
      return reduce(RULE_58, 2);
    case 110:
      return reduce(RULE_58, 2);
    case 108:
      return reduce(RULE_58, 2);
    case 106:
      return reduce(RULE_58, 2);
    case 125:
      return reduce(RULE_58, 2);
    case 138:
      return reduce(RULE_58, 2);
    case 142:
      return reduce(RULE_58, 2);
    case 155:
      return reduce(RULE_58, 2);
    case 150:
      return reduce(RULE_58, 2);
    case 183:
      return reduce(RULE_58, 2);
    case 175:
      return reduce(RULE_58, 2);
    case 169:
      return reduce(RULE_58, 2);
    case 190:
      return reduce(RULE_58, 2);
    case 143:
      return reduce(RULE_58, 2);
    case 164:
      return reduce(RULE_58, 2);
    case 203:
      return reduce(RULE_58, 2);
    case 147:
      return reduce(RULE_58, 2);
    case 193:
      return reduce(RULE_58, 2);
    case 182:
      return reduce(RULE_58, 2);
    case 109:
      return reduce(RULE_58, 2);
    case 191:
      return reduce(RULE_58, 2);
    case 131:
      return reduce(RULE_58, 2);
    case 118:
      return reduce(RULE_58, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto690(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action691(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_59, 2);
    case 101:
      return reduce(RULE_59, 2);
    case 145:
      return reduce(RULE_59, 2);
    case 134:
      return reduce(RULE_59, 2);
    case 103:
      return reduce(RULE_59, 2);
    case 148:
      return reduce(RULE_59, 2);
    case 112:
      return reduce(RULE_59, 2);
    case 110:
      return reduce(RULE_59, 2);
    case 149:
      return reduce(RULE_59, 2);
    case 108:
      return reduce(RULE_59, 2);
    case 106:
      return reduce(RULE_59, 2);
    case 125:
      return reduce(RULE_59, 2);
    case 178:
      return reduce(RULE_59, 2);
    case 155:
      return reduce(RULE_59, 2);
    case 142:
      return reduce(RULE_59, 2);
    case 146:
      return reduce(RULE_59, 2);
    case 138:
      return reduce(RULE_59, 2);
    case 150:
      return reduce(RULE_59, 2);
    case 183:
      return reduce(RULE_59, 2);
    case 175:
      return reduce(RULE_59, 2);
    case 169:
      return reduce(RULE_59, 2);
    case 190:
      return reduce(RULE_59, 2);
    case 143:
      return reduce(RULE_59, 2);
    case 164:
      return reduce(RULE_59, 2);
    case 203:
      return reduce(RULE_59, 2);
    case 147:
      return reduce(RULE_59, 2);
    case 130:
      return reduce(RULE_59, 2);
    case 193:
      return reduce(RULE_59, 2);
    case 129:
      return reduce(RULE_59, 2);
    case 182:
      return reduce(RULE_59, 2);
    case 140:
      return reduce(RULE_59, 2);
    case 109:
      return reduce(RULE_59, 2);
    case 191:
      return reduce(RULE_59, 2);
    case 131:
      return reduce(RULE_59, 2);
    case 118:
      return reduce(RULE_59, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, PIPE, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto691(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action692(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(522);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(524);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_59, 1);
    case 101:
      return reduce(RULE_59, 1);
    case 145:
      return reduce(RULE_59, 1);
    case 134:
      return reduce(RULE_59, 1);
    case 103:
      return reduce(RULE_59, 1);
    case 148:
      return reduce(RULE_59, 1);
    case 112:
      return reduce(RULE_59, 1);
    case 110:
      return reduce(RULE_59, 1);
    case 149:
      return reduce(RULE_59, 1);
    case 108:
      return reduce(RULE_59, 1);
    case 106:
      return reduce(RULE_59, 1);
    case 125:
      return reduce(RULE_59, 1);
    case 178:
      return reduce(RULE_59, 1);
    case 155:
      return reduce(RULE_59, 1);
    case 142:
      return reduce(RULE_59, 1);
    case 146:
      return reduce(RULE_59, 1);
    case 138:
      return reduce(RULE_59, 1);
    case 150:
      return reduce(RULE_59, 1);
    case 183:
      return reduce(RULE_59, 1);
    case 175:
      return reduce(RULE_59, 1);
    case 169:
      return reduce(RULE_59, 1);
    case 190:
      return reduce(RULE_59, 1);
    case 143:
      return reduce(RULE_59, 1);
    case 164:
      return reduce(RULE_59, 1);
    case 203:
      return reduce(RULE_59, 1);
    case 147:
      return reduce(RULE_59, 1);
    case 130:
      return reduce(RULE_59, 1);
    case 193:
      return reduce(RULE_59, 1);
    case 129:
      return reduce(RULE_59, 1);
    case 182:
      return reduce(RULE_59, 1);
    case 140:
      return reduce(RULE_59, 1);
    case 109:
      return reduce(RULE_59, 1);
    case 191:
      return reduce(RULE_59, 1);
    case 131:
      return reduce(RULE_59, 1);
    case 118:
      return reduce(RULE_59, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action693(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(851);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action694(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(497);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 8);
    case 173:
      return reduce(RULE_56, 8);
    case 101:
      return reduce(RULE_56, 8);
    case 145:
      return reduce(RULE_56, 8);
    case 116:
      return reduce(RULE_56, 8);
    case 151:
      return reduce(RULE_56, 8);
    case 134:
      return reduce(RULE_56, 8);
    case 103:
      return reduce(RULE_56, 8);
    case 120:
      return reduce(RULE_56, 8);
    case 148:
      return reduce(RULE_56, 8);
    case 112:
      return reduce(RULE_56, 8);
    case 110:
      return reduce(RULE_56, 8);
    case 149:
      return reduce(RULE_56, 8);
    case 108:
      return reduce(RULE_56, 8);
    case 106:
      return reduce(RULE_56, 8);
    case 125:
      return reduce(RULE_56, 8);
    case 178:
      return reduce(RULE_56, 8);
    case 155:
      return reduce(RULE_56, 8);
    case 142:
      return reduce(RULE_56, 8);
    case 146:
      return reduce(RULE_56, 8);
    case 138:
      return reduce(RULE_56, 8);
    case 150:
      return reduce(RULE_56, 8);
    case 183:
      return reduce(RULE_56, 8);
    case 175:
      return reduce(RULE_56, 8);
    case 113:
      return reduce(RULE_56, 8);
    case 190:
      return reduce(RULE_56, 8);
    case 169:
      return reduce(RULE_56, 8);
    case 143:
      return reduce(RULE_56, 8);
    case 164:
      return reduce(RULE_56, 8);
    case 203:
      return reduce(RULE_56, 8);
    case 147:
      return reduce(RULE_56, 8);
    case 130:
      return reduce(RULE_56, 8);
    case 193:
      return reduce(RULE_56, 8);
    case 136:
      return reduce(RULE_56, 8);
    case 129:
      return reduce(RULE_56, 8);
    case 182:
      return reduce(RULE_56, 8);
    case 140:
      return reduce(RULE_56, 8);
    case 109:
      return reduce(RULE_56, 8);
    case 191:
      return reduce(RULE_56, 8);
    case 131:
      return reduce(RULE_56, 8);
    case 118:
      return reduce(RULE_56, 8);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action695(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 10);
    case 173:
      return reduce(RULE_56, 10);
    case 101:
      return reduce(RULE_56, 10);
    case 145:
      return reduce(RULE_56, 10);
    case 116:
      return reduce(RULE_56, 10);
    case 151:
      return reduce(RULE_56, 10);
    case 134:
      return reduce(RULE_56, 10);
    case 103:
      return reduce(RULE_56, 10);
    case 120:
      return reduce(RULE_56, 10);
    case 148:
      return reduce(RULE_56, 10);
    case 112:
      return reduce(RULE_56, 10);
    case 110:
      return reduce(RULE_56, 10);
    case 149:
      return reduce(RULE_56, 10);
    case 108:
      return reduce(RULE_56, 10);
    case 106:
      return reduce(RULE_56, 10);
    case 125:
      return reduce(RULE_56, 10);
    case 178:
      return reduce(RULE_56, 10);
    case 155:
      return reduce(RULE_56, 10);
    case 142:
      return reduce(RULE_56, 10);
    case 146:
      return reduce(RULE_56, 10);
    case 138:
      return reduce(RULE_56, 10);
    case 150:
      return reduce(RULE_56, 10);
    case 183:
      return reduce(RULE_56, 10);
    case 175:
      return reduce(RULE_56, 10);
    case 113:
      return reduce(RULE_56, 10);
    case 190:
      return reduce(RULE_56, 10);
    case 169:
      return reduce(RULE_56, 10);
    case 143:
      return reduce(RULE_56, 10);
    case 164:
      return reduce(RULE_56, 10);
    case 203:
      return reduce(RULE_56, 10);
    case 147:
      return reduce(RULE_56, 10);
    case 130:
      return reduce(RULE_56, 10);
    case 193:
      return reduce(RULE_56, 10);
    case 136:
      return reduce(RULE_56, 10);
    case 129:
      return reduce(RULE_56, 10);
    case 182:
      return reduce(RULE_56, 10);
    case 140:
      return reduce(RULE_56, 10);
    case 109:
      return reduce(RULE_56, 10);
    case 191:
      return reduce(RULE_56, 10);
    case 131:
      return reduce(RULE_56, 10);
    case 118:
      return reduce(RULE_56, 10);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto695(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action696(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 12);
    case 101:
      return reduce(RULE_58, 12);
    case 103:
      return reduce(RULE_58, 12);
    case 148:
      return reduce(RULE_58, 12);
    case 112:
      return reduce(RULE_58, 12);
    case 110:
      return reduce(RULE_58, 12);
    case 149:
      return reduce(RULE_58, 12);
    case 108:
      return reduce(RULE_58, 12);
    case 106:
      return reduce(RULE_58, 12);
    case 125:
      return reduce(RULE_58, 12);
    case 142:
      return reduce(RULE_58, 12);
    case 138:
      return reduce(RULE_58, 12);
    case 155:
      return reduce(RULE_58, 12);
    case 150:
      return reduce(RULE_58, 12);
    case 183:
      return reduce(RULE_58, 12);
    case 175:
      return reduce(RULE_58, 12);
    case 169:
      return reduce(RULE_58, 12);
    case 190:
      return reduce(RULE_58, 12);
    case 143:
      return reduce(RULE_58, 12);
    case 164:
      return reduce(RULE_58, 12);
    case 203:
      return reduce(RULE_58, 12);
    case 147:
      return reduce(RULE_58, 12);
    case 193:
      return reduce(RULE_58, 12);
    case 182:
      return reduce(RULE_58, 12);
    case 109:
      return reduce(RULE_58, 12);
    case 191:
      return reduce(RULE_58, 12);
    case 131:
      return reduce(RULE_58, 12);
    case 118:
      return reduce(RULE_58, 12);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action697(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 14);
    case 101:
      return reduce(RULE_58, 14);
    case 103:
      return reduce(RULE_58, 14);
    case 148:
      return reduce(RULE_58, 14);
    case 112:
      return reduce(RULE_58, 14);
    case 110:
      return reduce(RULE_58, 14);
    case 149:
      return reduce(RULE_58, 14);
    case 108:
      return reduce(RULE_58, 14);
    case 106:
      return reduce(RULE_58, 14);
    case 125:
      return reduce(RULE_58, 14);
    case 142:
      return reduce(RULE_58, 14);
    case 138:
      return reduce(RULE_58, 14);
    case 155:
      return reduce(RULE_58, 14);
    case 150:
      return reduce(RULE_58, 14);
    case 183:
      return reduce(RULE_58, 14);
    case 175:
      return reduce(RULE_58, 14);
    case 169:
      return reduce(RULE_58, 14);
    case 190:
      return reduce(RULE_58, 14);
    case 143:
      return reduce(RULE_58, 14);
    case 164:
      return reduce(RULE_58, 14);
    case 203:
      return reduce(RULE_58, 14);
    case 147:
      return reduce(RULE_58, 14);
    case 193:
      return reduce(RULE_58, 14);
    case 182:
      return reduce(RULE_58, 14);
    case 109:
      return reduce(RULE_58, 14);
    case 191:
      return reduce(RULE_58, 14);
    case 131:
      return reduce(RULE_58, 14);
    case 118:
      return reduce(RULE_58, 14);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto697(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action698(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 4);
    case 101:
      return reduce(RULE_58, 4);
    case 103:
      return reduce(RULE_58, 4);
    case 148:
      return reduce(RULE_58, 4);
    case 112:
      return reduce(RULE_58, 4);
    case 110:
      return reduce(RULE_58, 4);
    case 149:
      return reduce(RULE_58, 4);
    case 108:
      return reduce(RULE_58, 4);
    case 106:
      return reduce(RULE_58, 4);
    case 125:
      return reduce(RULE_58, 4);
    case 142:
      return reduce(RULE_58, 4);
    case 138:
      return reduce(RULE_58, 4);
    case 155:
      return reduce(RULE_58, 4);
    case 150:
      return reduce(RULE_58, 4);
    case 183:
      return reduce(RULE_58, 4);
    case 175:
      return reduce(RULE_58, 4);
    case 169:
      return reduce(RULE_58, 4);
    case 190:
      return reduce(RULE_58, 4);
    case 143:
      return reduce(RULE_58, 4);
    case 164:
      return reduce(RULE_58, 4);
    case 203:
      return reduce(RULE_58, 4);
    case 147:
      return reduce(RULE_58, 4);
    case 193:
      return reduce(RULE_58, 4);
    case 182:
      return reduce(RULE_58, 4);
    case 109:
      return reduce(RULE_58, 4);
    case 191:
      return reduce(RULE_58, 4);
    case 131:
      return reduce(RULE_58, 4);
    case 118:
      return reduce(RULE_58, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action699(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(852);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 1);
    case 173:
      return reduce(RULE_91, 3);
    case 101:
      return reduce(RULE_91, 3);
    case 116:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_91, 3);
    case 112:
      return reduce(RULE_91, 3);
    case 148:
      return reduce(RULE_91, 3);
    case 149:
      return reduce(RULE_91, 3);
    case 110:
      return reduce(RULE_91, 3);
    case 106:
      return reduce(RULE_91, 3);
    case 108:
      return reduce(RULE_91, 3);
    case 125:
      return reduce(RULE_91, 3);
    case 124:
      return reduce(RULE_44, 1);
    case 155:
      return reduce(RULE_91, 3);
    case 142:
      return reduce(RULE_91, 3);
    case 138:
      return reduce(RULE_91, 3);
    case 150:
      return reduce(RULE_91, 3);
    case 111:
      return reduce(RULE_42, 2);
    case 183:
      return reduce(RULE_91, 3);
    case 175:
      return reduce(RULE_91, 3);
    case 113:
      return reduce(RULE_44, 1);
    case 169:
      return reduce(RULE_91, 3);
    case 190:
      return reduce(RULE_91, 3);
    case 143:
      return reduce(RULE_91, 3);
    case 164:
      return reduce(RULE_91, 3);
    case 203:
      return reduce(RULE_91, 3);
    case 193:
      return reduce(RULE_91, 3);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 182:
      return reduce(RULE_91, 3);
    case 140:
      return reduce(RULE_44, 1);
    case 191:
      return reduce(RULE_91, 3);
    case 131:
      return reduce(RULE_91, 3);
    case 118:
      return reduce(RULE_91, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action700(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {MINUS, LPAREN, FORWARD_SLASH, EXCLAIMATION_MARK, DOUBLE_PERCENT, PERCENT, QUESTION_MARK_DOT, PLUS, DOUBLE_LANGLE, STAR});
    }
  }

  private final int goto700(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action701(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(853);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 0);
    case 173:
      return reduce(RULE_91, 2);
    case 101:
      return reduce(RULE_91, 2);
    case 116:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_91, 2);
    case 112:
      return reduce(RULE_91, 2);
    case 148:
      return reduce(RULE_91, 2);
    case 149:
      return reduce(RULE_91, 2);
    case 110:
      return reduce(RULE_91, 2);
    case 106:
      return reduce(RULE_91, 2);
    case 108:
      return reduce(RULE_91, 2);
    case 125:
      return reduce(RULE_91, 2);
    case 124:
      return reduce(RULE_44, 0);
    case 155:
      return reduce(RULE_91, 2);
    case 142:
      return reduce(RULE_91, 2);
    case 138:
      return reduce(RULE_91, 2);
    case 150:
      return reduce(RULE_91, 2);
    case 111:
      return reduce(RULE_42, 1);
    case 183:
      return reduce(RULE_91, 2);
    case 175:
      return reduce(RULE_91, 2);
    case 113:
      return reduce(RULE_44, 0);
    case 169:
      return reduce(RULE_91, 2);
    case 190:
      return reduce(RULE_91, 2);
    case 143:
      return reduce(RULE_91, 2);
    case 164:
      return reduce(RULE_91, 2);
    case 203:
      return reduce(RULE_91, 2);
    case 193:
      return reduce(RULE_91, 2);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 182:
      return reduce(RULE_91, 2);
    case 140:
      return reduce(RULE_44, 0);
    case 191:
      return reduce(RULE_91, 2);
    case 131:
      return reduce(RULE_91, 2);
    case 118:
      return reduce(RULE_91, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action702(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_54, 1);
    case 173:
      return reduce(RULE_54, 1);
    case 101:
      return reduce(RULE_54, 1);
    case 155:
      return reduce(RULE_54, 1);
    case 150:
      return reduce(RULE_54, 1);
    case 183:
      return reduce(RULE_54, 1);
    case 175:
      return reduce(RULE_54, 1);
    case 190:
      return reduce(RULE_54, 1);
    case 169:
      return reduce(RULE_54, 1);
    case 164:
      return reduce(RULE_54, 1);
    case 203:
      return reduce(RULE_54, 1);
    case 193:
      return reduce(RULE_54, 1);
    case 182:
      return reduce(RULE_54, 1);
    case 148:
      return reduce(RULE_54, 1);
    case 191:
      return reduce(RULE_54, 1);
    case 131:
      return reduce(RULE_54, 1);
    case 149:
      return reduce(RULE_54, 1);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action703(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_59, 8);
    case 101:
      return reduce(RULE_59, 8);
    case 145:
      return reduce(RULE_59, 8);
    case 134:
      return reduce(RULE_59, 8);
    case 103:
      return reduce(RULE_59, 8);
    case 148:
      return reduce(RULE_59, 8);
    case 112:
      return reduce(RULE_59, 8);
    case 110:
      return reduce(RULE_59, 8);
    case 149:
      return reduce(RULE_59, 8);
    case 108:
      return reduce(RULE_59, 8);
    case 106:
      return reduce(RULE_59, 8);
    case 125:
      return reduce(RULE_59, 8);
    case 178:
      return reduce(RULE_59, 8);
    case 155:
      return reduce(RULE_59, 8);
    case 142:
      return reduce(RULE_59, 8);
    case 146:
      return reduce(RULE_59, 8);
    case 138:
      return reduce(RULE_59, 8);
    case 150:
      return reduce(RULE_59, 8);
    case 183:
      return reduce(RULE_59, 8);
    case 175:
      return reduce(RULE_59, 8);
    case 169:
      return reduce(RULE_59, 8);
    case 190:
      return reduce(RULE_59, 8);
    case 143:
      return reduce(RULE_59, 8);
    case 164:
      return reduce(RULE_59, 8);
    case 203:
      return reduce(RULE_59, 8);
    case 147:
      return reduce(RULE_59, 8);
    case 130:
      return reduce(RULE_59, 8);
    case 193:
      return reduce(RULE_59, 8);
    case 129:
      return reduce(RULE_59, 8);
    case 182:
      return reduce(RULE_59, 8);
    case 140:
      return reduce(RULE_59, 8);
    case 109:
      return reduce(RULE_59, 8);
    case 191:
      return reduce(RULE_59, 8);
    case 131:
      return reduce(RULE_59, 8);
    case 118:
      return reduce(RULE_59, 8);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, PIPE, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto703(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action704(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(522);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(524);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_59, 7);
    case 101:
      return reduce(RULE_59, 7);
    case 145:
      return reduce(RULE_59, 7);
    case 134:
      return reduce(RULE_59, 7);
    case 103:
      return reduce(RULE_59, 7);
    case 148:
      return reduce(RULE_59, 7);
    case 112:
      return reduce(RULE_59, 7);
    case 110:
      return reduce(RULE_59, 7);
    case 149:
      return reduce(RULE_59, 7);
    case 108:
      return reduce(RULE_59, 7);
    case 106:
      return reduce(RULE_59, 7);
    case 125:
      return reduce(RULE_59, 7);
    case 178:
      return reduce(RULE_59, 7);
    case 155:
      return reduce(RULE_59, 7);
    case 142:
      return reduce(RULE_59, 7);
    case 146:
      return reduce(RULE_59, 7);
    case 138:
      return reduce(RULE_59, 7);
    case 150:
      return reduce(RULE_59, 7);
    case 183:
      return reduce(RULE_59, 7);
    case 175:
      return reduce(RULE_59, 7);
    case 169:
      return reduce(RULE_59, 7);
    case 190:
      return reduce(RULE_59, 7);
    case 143:
      return reduce(RULE_59, 7);
    case 164:
      return reduce(RULE_59, 7);
    case 203:
      return reduce(RULE_59, 7);
    case 147:
      return reduce(RULE_59, 7);
    case 130:
      return reduce(RULE_59, 7);
    case 193:
      return reduce(RULE_59, 7);
    case 129:
      return reduce(RULE_59, 7);
    case 182:
      return reduce(RULE_59, 7);
    case 140:
      return reduce(RULE_59, 7);
    case 109:
      return reduce(RULE_59, 7);
    case 191:
      return reduce(RULE_59, 7);
    case 131:
      return reduce(RULE_59, 7);
    case 118:
      return reduce(RULE_59, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action705(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 8);
    case 173:
      return reduce(RULE_62, 8);
    case 101:
      return reduce(RULE_62, 8);
    case 145:
      return reduce(RULE_62, 8);
    case 116:
      return reduce(RULE_62, 8);
    case 151:
      return reduce(RULE_62, 8);
    case 134:
      return reduce(RULE_62, 8);
    case 103:
      return reduce(RULE_62, 8);
    case 148:
      return reduce(RULE_62, 8);
    case 112:
      return reduce(RULE_62, 8);
    case 149:
      return reduce(RULE_62, 8);
    case 110:
      return reduce(RULE_62, 8);
    case 108:
      return reduce(RULE_62, 8);
    case 106:
      return reduce(RULE_62, 8);
    case 125:
      return reduce(RULE_62, 8);
    case 178:
      return reduce(RULE_62, 8);
    case 155:
      return reduce(RULE_62, 8);
    case 142:
      return reduce(RULE_62, 8);
    case 146:
      return reduce(RULE_62, 8);
    case 138:
      return reduce(RULE_62, 8);
    case 150:
      return reduce(RULE_62, 8);
    case 183:
      return reduce(RULE_62, 8);
    case 175:
      return reduce(RULE_62, 8);
    case 190:
      return reduce(RULE_62, 8);
    case 169:
      return reduce(RULE_62, 8);
    case 143:
      return reduce(RULE_62, 8);
    case 164:
      return reduce(RULE_62, 8);
    case 203:
      return reduce(RULE_62, 8);
    case 147:
      return reduce(RULE_62, 8);
    case 130:
      return reduce(RULE_62, 8);
    case 193:
      return reduce(RULE_62, 8);
    case 136:
      return reduce(RULE_62, 8);
    case 129:
      return reduce(RULE_62, 8);
    case 182:
      return reduce(RULE_62, 8);
    case 140:
      return reduce(RULE_62, 8);
    case 109:
      return reduce(RULE_62, 8);
    case 191:
      return reduce(RULE_62, 8);
    case 131:
      return reduce(RULE_62, 8);
    case 118:
      return reduce(RULE_62, 8);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto705(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action706(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 7);
    case 173:
      return reduce(RULE_62, 7);
    case 101:
      return reduce(RULE_62, 7);
    case 145:
      return reduce(RULE_62, 7);
    case 116:
      return reduce(RULE_62, 7);
    case 151:
      return reduce(RULE_62, 7);
    case 134:
      return reduce(RULE_62, 7);
    case 103:
      return reduce(RULE_62, 7);
    case 148:
      return reduce(RULE_62, 7);
    case 112:
      return reduce(RULE_62, 7);
    case 149:
      return reduce(RULE_62, 7);
    case 110:
      return reduce(RULE_62, 7);
    case 108:
      return reduce(RULE_62, 7);
    case 106:
      return reduce(RULE_62, 7);
    case 125:
      return reduce(RULE_62, 7);
    case 178:
      return reduce(RULE_62, 7);
    case 155:
      return reduce(RULE_62, 7);
    case 142:
      return reduce(RULE_62, 7);
    case 146:
      return reduce(RULE_62, 7);
    case 138:
      return reduce(RULE_62, 7);
    case 150:
      return reduce(RULE_62, 7);
    case 183:
      return reduce(RULE_62, 7);
    case 175:
      return reduce(RULE_62, 7);
    case 190:
      return reduce(RULE_62, 7);
    case 169:
      return reduce(RULE_62, 7);
    case 143:
      return reduce(RULE_62, 7);
    case 164:
      return reduce(RULE_62, 7);
    case 203:
      return reduce(RULE_62, 7);
    case 147:
      return reduce(RULE_62, 7);
    case 130:
      return reduce(RULE_62, 7);
    case 193:
      return reduce(RULE_62, 7);
    case 136:
      return reduce(RULE_62, 7);
    case 129:
      return reduce(RULE_62, 7);
    case 182:
      return reduce(RULE_62, 7);
    case 140:
      return reduce(RULE_62, 7);
    case 109:
      return reduce(RULE_62, 7);
    case 191:
      return reduce(RULE_62, 7);
    case 131:
      return reduce(RULE_62, 7);
    case 118:
      return reduce(RULE_62, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action707(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_58, 20);
    case 101:
      return reduce(RULE_58, 20);
    case 103:
      return reduce(RULE_58, 20);
    case 148:
      return reduce(RULE_58, 20);
    case 112:
      return reduce(RULE_58, 20);
    case 149:
      return reduce(RULE_58, 20);
    case 110:
      return reduce(RULE_58, 20);
    case 108:
      return reduce(RULE_58, 20);
    case 106:
      return reduce(RULE_58, 20);
    case 125:
      return reduce(RULE_58, 20);
    case 138:
      return reduce(RULE_58, 20);
    case 142:
      return reduce(RULE_58, 20);
    case 155:
      return reduce(RULE_58, 20);
    case 150:
      return reduce(RULE_58, 20);
    case 183:
      return reduce(RULE_58, 20);
    case 175:
      return reduce(RULE_58, 20);
    case 169:
      return reduce(RULE_58, 20);
    case 190:
      return reduce(RULE_58, 20);
    case 143:
      return reduce(RULE_58, 20);
    case 164:
      return reduce(RULE_58, 20);
    case 203:
      return reduce(RULE_58, 20);
    case 147:
      return reduce(RULE_58, 20);
    case 193:
      return reduce(RULE_58, 20);
    case 182:
      return reduce(RULE_58, 20);
    case 109:
      return reduce(RULE_58, 20);
    case 191:
      return reduce(RULE_58, 20);
    case 131:
      return reduce(RULE_58, 20);
    case 118:
      return reduce(RULE_58, 20);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action708(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 17);
    case 101:
      return reduce(RULE_58, 17);
    case 103:
      return reduce(RULE_58, 17);
    case 148:
      return reduce(RULE_58, 17);
    case 112:
      return reduce(RULE_58, 17);
    case 149:
      return reduce(RULE_58, 17);
    case 110:
      return reduce(RULE_58, 17);
    case 108:
      return reduce(RULE_58, 17);
    case 106:
      return reduce(RULE_58, 17);
    case 125:
      return reduce(RULE_58, 17);
    case 138:
      return reduce(RULE_58, 17);
    case 142:
      return reduce(RULE_58, 17);
    case 155:
      return reduce(RULE_58, 17);
    case 150:
      return reduce(RULE_58, 17);
    case 183:
      return reduce(RULE_58, 17);
    case 175:
      return reduce(RULE_58, 17);
    case 169:
      return reduce(RULE_58, 17);
    case 190:
      return reduce(RULE_58, 17);
    case 143:
      return reduce(RULE_58, 17);
    case 164:
      return reduce(RULE_58, 17);
    case 203:
      return reduce(RULE_58, 17);
    case 147:
      return reduce(RULE_58, 17);
    case 193:
      return reduce(RULE_58, 17);
    case 182:
      return reduce(RULE_58, 17);
    case 109:
      return reduce(RULE_58, 17);
    case 191:
      return reduce(RULE_58, 17);
    case 131:
      return reduce(RULE_58, 17);
    case 118:
      return reduce(RULE_58, 17);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action709(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 18);
    case 101:
      return reduce(RULE_58, 18);
    case 103:
      return reduce(RULE_58, 18);
    case 148:
      return reduce(RULE_58, 18);
    case 112:
      return reduce(RULE_58, 18);
    case 149:
      return reduce(RULE_58, 18);
    case 110:
      return reduce(RULE_58, 18);
    case 108:
      return reduce(RULE_58, 18);
    case 106:
      return reduce(RULE_58, 18);
    case 125:
      return reduce(RULE_58, 18);
    case 138:
      return reduce(RULE_58, 18);
    case 142:
      return reduce(RULE_58, 18);
    case 155:
      return reduce(RULE_58, 18);
    case 150:
      return reduce(RULE_58, 18);
    case 183:
      return reduce(RULE_58, 18);
    case 175:
      return reduce(RULE_58, 18);
    case 169:
      return reduce(RULE_58, 18);
    case 190:
      return reduce(RULE_58, 18);
    case 143:
      return reduce(RULE_58, 18);
    case 164:
      return reduce(RULE_58, 18);
    case 203:
      return reduce(RULE_58, 18);
    case 147:
      return reduce(RULE_58, 18);
    case 193:
      return reduce(RULE_58, 18);
    case 182:
      return reduce(RULE_58, 18);
    case 109:
      return reduce(RULE_58, 18);
    case 191:
      return reduce(RULE_58, 18);
    case 131:
      return reduce(RULE_58, 18);
    case 118:
      return reduce(RULE_58, 18);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto709(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action710(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_65, 2);
    case 173:
      return reduce(RULE_65, 2);
    case 101:
      return reduce(RULE_65, 2);
    case 145:
      return reduce(RULE_65, 2);
    case 116:
      return reduce(RULE_65, 2);
    case 151:
      return reduce(RULE_65, 2);
    case 134:
      return reduce(RULE_65, 2);
    case 103:
      return reduce(RULE_65, 2);
    case 120:
      return reduce(RULE_65, 2);
    case 112:
      return reduce(RULE_65, 2);
    case 148:
      return reduce(RULE_65, 2);
    case 110:
      return reduce(RULE_65, 2);
    case 149:
      return reduce(RULE_65, 2);
    case 108:
      return reduce(RULE_65, 2);
    case 106:
      return reduce(RULE_65, 2);
    case 125:
      return reduce(RULE_65, 2);
    case 178:
      return reduce(RULE_65, 2);
    case 155:
      return reduce(RULE_65, 2);
    case 124:
      return reduce(RULE_65, 2);
    case 142:
      return reduce(RULE_65, 2);
    case 146:
      return reduce(RULE_65, 2);
    case 138:
      return reduce(RULE_65, 2);
    case 150:
      return reduce(RULE_65, 2);
    case 183:
      return reduce(RULE_65, 2);
    case 175:
      return reduce(RULE_65, 2);
    case 113:
      return reduce(RULE_65, 2);
    case 169:
      return reduce(RULE_65, 2);
    case 190:
      return reduce(RULE_65, 2);
    case 143:
      return reduce(RULE_65, 2);
    case 164:
      return reduce(RULE_65, 2);
    case 203:
      return reduce(RULE_65, 2);
    case 147:
      return reduce(RULE_65, 2);
    case 130:
      return reduce(RULE_65, 2);
    case 193:
      return reduce(RULE_65, 2);
    case 129:
      return reduce(RULE_65, 2);
    case 136:
      return reduce(RULE_65, 2);
    case 182:
      return reduce(RULE_65, 2);
    case 140:
      return reduce(RULE_65, 2);
    case 109:
      return reduce(RULE_65, 2);
    case 191:
      return reduce(RULE_65, 2);
    case 131:
      return reduce(RULE_65, 2);
    case 118:
      return reduce(RULE_65, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action711(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 7);
    case 101:
      return reduce(RULE_58, 7);
    case 103:
      return reduce(RULE_58, 7);
    case 148:
      return reduce(RULE_58, 7);
    case 112:
      return reduce(RULE_58, 7);
    case 149:
      return reduce(RULE_58, 7);
    case 110:
      return reduce(RULE_58, 7);
    case 108:
      return reduce(RULE_58, 7);
    case 106:
      return reduce(RULE_58, 7);
    case 125:
      return reduce(RULE_58, 7);
    case 138:
      return reduce(RULE_58, 7);
    case 142:
      return reduce(RULE_58, 7);
    case 155:
      return reduce(RULE_58, 7);
    case 150:
      return reduce(RULE_58, 7);
    case 183:
      return reduce(RULE_58, 7);
    case 175:
      return reduce(RULE_58, 7);
    case 169:
      return reduce(RULE_58, 7);
    case 190:
      return reduce(RULE_58, 7);
    case 143:
      return reduce(RULE_58, 7);
    case 164:
      return reduce(RULE_58, 7);
    case 203:
      return reduce(RULE_58, 7);
    case 147:
      return reduce(RULE_58, 7);
    case 193:
      return reduce(RULE_58, 7);
    case 182:
      return reduce(RULE_58, 7);
    case 109:
      return reduce(RULE_58, 7);
    case 191:
      return reduce(RULE_58, 7);
    case 131:
      return reduce(RULE_58, 7);
    case 118:
      return reduce(RULE_58, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action712(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 8);
    case 101:
      return reduce(RULE_58, 8);
    case 103:
      return reduce(RULE_58, 8);
    case 148:
      return reduce(RULE_58, 8);
    case 112:
      return reduce(RULE_58, 8);
    case 149:
      return reduce(RULE_58, 8);
    case 110:
      return reduce(RULE_58, 8);
    case 108:
      return reduce(RULE_58, 8);
    case 106:
      return reduce(RULE_58, 8);
    case 125:
      return reduce(RULE_58, 8);
    case 138:
      return reduce(RULE_58, 8);
    case 142:
      return reduce(RULE_58, 8);
    case 155:
      return reduce(RULE_58, 8);
    case 150:
      return reduce(RULE_58, 8);
    case 183:
      return reduce(RULE_58, 8);
    case 175:
      return reduce(RULE_58, 8);
    case 169:
      return reduce(RULE_58, 8);
    case 190:
      return reduce(RULE_58, 8);
    case 143:
      return reduce(RULE_58, 8);
    case 164:
      return reduce(RULE_58, 8);
    case 203:
      return reduce(RULE_58, 8);
    case 147:
      return reduce(RULE_58, 8);
    case 193:
      return reduce(RULE_58, 8);
    case 182:
      return reduce(RULE_58, 8);
    case 109:
      return reduce(RULE_58, 8);
    case 191:
      return reduce(RULE_58, 8);
    case 131:
      return reduce(RULE_58, 8);
    case 118:
      return reduce(RULE_58, 8);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto712(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action713(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 16);
    case 173:
      return reduce(RULE_62, 16);
    case 101:
      return reduce(RULE_62, 16);
    case 145:
      return reduce(RULE_62, 16);
    case 116:
      return reduce(RULE_62, 16);
    case 151:
      return reduce(RULE_62, 16);
    case 134:
      return reduce(RULE_62, 16);
    case 103:
      return reduce(RULE_62, 16);
    case 148:
      return reduce(RULE_62, 16);
    case 112:
      return reduce(RULE_62, 16);
    case 149:
      return reduce(RULE_62, 16);
    case 110:
      return reduce(RULE_62, 16);
    case 108:
      return reduce(RULE_62, 16);
    case 106:
      return reduce(RULE_62, 16);
    case 125:
      return reduce(RULE_62, 16);
    case 178:
      return reduce(RULE_62, 16);
    case 155:
      return reduce(RULE_62, 16);
    case 142:
      return reduce(RULE_62, 16);
    case 146:
      return reduce(RULE_62, 16);
    case 138:
      return reduce(RULE_62, 16);
    case 150:
      return reduce(RULE_62, 16);
    case 183:
      return reduce(RULE_62, 16);
    case 175:
      return reduce(RULE_62, 16);
    case 190:
      return reduce(RULE_62, 16);
    case 169:
      return reduce(RULE_62, 16);
    case 143:
      return reduce(RULE_62, 16);
    case 164:
      return reduce(RULE_62, 16);
    case 203:
      return reduce(RULE_62, 16);
    case 147:
      return reduce(RULE_62, 16);
    case 130:
      return reduce(RULE_62, 16);
    case 193:
      return reduce(RULE_62, 16);
    case 136:
      return reduce(RULE_62, 16);
    case 129:
      return reduce(RULE_62, 16);
    case 182:
      return reduce(RULE_62, 16);
    case 140:
      return reduce(RULE_62, 16);
    case 109:
      return reduce(RULE_62, 16);
    case 191:
      return reduce(RULE_62, 16);
    case 131:
      return reduce(RULE_62, 16);
    case 118:
      return reduce(RULE_62, 16);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto713(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action714(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 15);
    case 173:
      return reduce(RULE_62, 15);
    case 101:
      return reduce(RULE_62, 15);
    case 145:
      return reduce(RULE_62, 15);
    case 116:
      return reduce(RULE_62, 15);
    case 151:
      return reduce(RULE_62, 15);
    case 134:
      return reduce(RULE_62, 15);
    case 103:
      return reduce(RULE_62, 15);
    case 148:
      return reduce(RULE_62, 15);
    case 112:
      return reduce(RULE_62, 15);
    case 149:
      return reduce(RULE_62, 15);
    case 110:
      return reduce(RULE_62, 15);
    case 108:
      return reduce(RULE_62, 15);
    case 106:
      return reduce(RULE_62, 15);
    case 125:
      return reduce(RULE_62, 15);
    case 178:
      return reduce(RULE_62, 15);
    case 155:
      return reduce(RULE_62, 15);
    case 142:
      return reduce(RULE_62, 15);
    case 146:
      return reduce(RULE_62, 15);
    case 138:
      return reduce(RULE_62, 15);
    case 150:
      return reduce(RULE_62, 15);
    case 183:
      return reduce(RULE_62, 15);
    case 175:
      return reduce(RULE_62, 15);
    case 190:
      return reduce(RULE_62, 15);
    case 169:
      return reduce(RULE_62, 15);
    case 143:
      return reduce(RULE_62, 15);
    case 164:
      return reduce(RULE_62, 15);
    case 203:
      return reduce(RULE_62, 15);
    case 147:
      return reduce(RULE_62, 15);
    case 130:
      return reduce(RULE_62, 15);
    case 193:
      return reduce(RULE_62, 15);
    case 136:
      return reduce(RULE_62, 15);
    case 129:
      return reduce(RULE_62, 15);
    case 182:
      return reduce(RULE_62, 15);
    case 140:
      return reduce(RULE_62, 15);
    case 109:
      return reduce(RULE_62, 15);
    case 191:
      return reduce(RULE_62, 15);
    case 131:
      return reduce(RULE_62, 15);
    case 118:
      return reduce(RULE_62, 15);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action715(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 12);
    case 173:
      return reduce(RULE_62, 12);
    case 101:
      return reduce(RULE_62, 12);
    case 145:
      return reduce(RULE_62, 12);
    case 116:
      return reduce(RULE_62, 12);
    case 151:
      return reduce(RULE_62, 12);
    case 134:
      return reduce(RULE_62, 12);
    case 103:
      return reduce(RULE_62, 12);
    case 148:
      return reduce(RULE_62, 12);
    case 112:
      return reduce(RULE_62, 12);
    case 149:
      return reduce(RULE_62, 12);
    case 110:
      return reduce(RULE_62, 12);
    case 108:
      return reduce(RULE_62, 12);
    case 106:
      return reduce(RULE_62, 12);
    case 125:
      return reduce(RULE_62, 12);
    case 178:
      return reduce(RULE_62, 12);
    case 155:
      return reduce(RULE_62, 12);
    case 142:
      return reduce(RULE_62, 12);
    case 146:
      return reduce(RULE_62, 12);
    case 138:
      return reduce(RULE_62, 12);
    case 150:
      return reduce(RULE_62, 12);
    case 183:
      return reduce(RULE_62, 12);
    case 175:
      return reduce(RULE_62, 12);
    case 190:
      return reduce(RULE_62, 12);
    case 169:
      return reduce(RULE_62, 12);
    case 143:
      return reduce(RULE_62, 12);
    case 164:
      return reduce(RULE_62, 12);
    case 203:
      return reduce(RULE_62, 12);
    case 147:
      return reduce(RULE_62, 12);
    case 130:
      return reduce(RULE_62, 12);
    case 193:
      return reduce(RULE_62, 12);
    case 136:
      return reduce(RULE_62, 12);
    case 129:
      return reduce(RULE_62, 12);
    case 182:
      return reduce(RULE_62, 12);
    case 140:
      return reduce(RULE_62, 12);
    case 109:
      return reduce(RULE_62, 12);
    case 191:
      return reduce(RULE_62, 12);
    case 131:
      return reduce(RULE_62, 12);
    case 118:
      return reduce(RULE_62, 12);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto715(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action716(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 11);
    case 173:
      return reduce(RULE_62, 11);
    case 101:
      return reduce(RULE_62, 11);
    case 145:
      return reduce(RULE_62, 11);
    case 116:
      return reduce(RULE_62, 11);
    case 151:
      return reduce(RULE_62, 11);
    case 134:
      return reduce(RULE_62, 11);
    case 103:
      return reduce(RULE_62, 11);
    case 148:
      return reduce(RULE_62, 11);
    case 112:
      return reduce(RULE_62, 11);
    case 149:
      return reduce(RULE_62, 11);
    case 110:
      return reduce(RULE_62, 11);
    case 108:
      return reduce(RULE_62, 11);
    case 106:
      return reduce(RULE_62, 11);
    case 125:
      return reduce(RULE_62, 11);
    case 178:
      return reduce(RULE_62, 11);
    case 155:
      return reduce(RULE_62, 11);
    case 142:
      return reduce(RULE_62, 11);
    case 146:
      return reduce(RULE_62, 11);
    case 138:
      return reduce(RULE_62, 11);
    case 150:
      return reduce(RULE_62, 11);
    case 183:
      return reduce(RULE_62, 11);
    case 175:
      return reduce(RULE_62, 11);
    case 190:
      return reduce(RULE_62, 11);
    case 169:
      return reduce(RULE_62, 11);
    case 143:
      return reduce(RULE_62, 11);
    case 164:
      return reduce(RULE_62, 11);
    case 203:
      return reduce(RULE_62, 11);
    case 147:
      return reduce(RULE_62, 11);
    case 130:
      return reduce(RULE_62, 11);
    case 193:
      return reduce(RULE_62, 11);
    case 136:
      return reduce(RULE_62, 11);
    case 129:
      return reduce(RULE_62, 11);
    case 182:
      return reduce(RULE_62, 11);
    case 140:
      return reduce(RULE_62, 11);
    case 109:
      return reduce(RULE_62, 11);
    case 191:
      return reduce(RULE_62, 11);
    case 131:
      return reduce(RULE_62, 11);
    case 118:
      return reduce(RULE_62, 11);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action717(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_59, 4);
    case 101:
      return reduce(RULE_59, 4);
    case 145:
      return reduce(RULE_59, 4);
    case 134:
      return reduce(RULE_59, 4);
    case 103:
      return reduce(RULE_59, 4);
    case 148:
      return reduce(RULE_59, 4);
    case 112:
      return reduce(RULE_59, 4);
    case 110:
      return reduce(RULE_59, 4);
    case 149:
      return reduce(RULE_59, 4);
    case 108:
      return reduce(RULE_59, 4);
    case 106:
      return reduce(RULE_59, 4);
    case 125:
      return reduce(RULE_59, 4);
    case 178:
      return reduce(RULE_59, 4);
    case 155:
      return reduce(RULE_59, 4);
    case 142:
      return reduce(RULE_59, 4);
    case 146:
      return reduce(RULE_59, 4);
    case 138:
      return reduce(RULE_59, 4);
    case 150:
      return reduce(RULE_59, 4);
    case 183:
      return reduce(RULE_59, 4);
    case 175:
      return reduce(RULE_59, 4);
    case 169:
      return reduce(RULE_59, 4);
    case 190:
      return reduce(RULE_59, 4);
    case 143:
      return reduce(RULE_59, 4);
    case 164:
      return reduce(RULE_59, 4);
    case 203:
      return reduce(RULE_59, 4);
    case 147:
      return reduce(RULE_59, 4);
    case 130:
      return reduce(RULE_59, 4);
    case 193:
      return reduce(RULE_59, 4);
    case 129:
      return reduce(RULE_59, 4);
    case 182:
      return reduce(RULE_59, 4);
    case 140:
      return reduce(RULE_59, 4);
    case 109:
      return reduce(RULE_59, 4);
    case 191:
      return reduce(RULE_59, 4);
    case 131:
      return reduce(RULE_59, 4);
    case 118:
      return reduce(RULE_59, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, PIPE, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto717(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action718(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      stateStack.addFirst(522);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(523);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(524);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(525);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_59, 3);
    case 101:
      return reduce(RULE_59, 3);
    case 145:
      return reduce(RULE_59, 3);
    case 134:
      return reduce(RULE_59, 3);
    case 103:
      return reduce(RULE_59, 3);
    case 148:
      return reduce(RULE_59, 3);
    case 112:
      return reduce(RULE_59, 3);
    case 110:
      return reduce(RULE_59, 3);
    case 149:
      return reduce(RULE_59, 3);
    case 108:
      return reduce(RULE_59, 3);
    case 106:
      return reduce(RULE_59, 3);
    case 125:
      return reduce(RULE_59, 3);
    case 178:
      return reduce(RULE_59, 3);
    case 155:
      return reduce(RULE_59, 3);
    case 142:
      return reduce(RULE_59, 3);
    case 146:
      return reduce(RULE_59, 3);
    case 138:
      return reduce(RULE_59, 3);
    case 150:
      return reduce(RULE_59, 3);
    case 183:
      return reduce(RULE_59, 3);
    case 175:
      return reduce(RULE_59, 3);
    case 169:
      return reduce(RULE_59, 3);
    case 190:
      return reduce(RULE_59, 3);
    case 143:
      return reduce(RULE_59, 3);
    case 164:
      return reduce(RULE_59, 3);
    case 203:
      return reduce(RULE_59, 3);
    case 147:
      return reduce(RULE_59, 3);
    case 130:
      return reduce(RULE_59, 3);
    case 193:
      return reduce(RULE_59, 3);
    case 129:
      return reduce(RULE_59, 3);
    case 182:
      return reduce(RULE_59, 3);
    case 140:
      return reduce(RULE_59, 3);
    case 109:
      return reduce(RULE_59, 3);
    case 191:
      return reduce(RULE_59, 3);
    case 131:
      return reduce(RULE_59, 3);
    case 118:
      return reduce(RULE_59, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action719(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(497);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 3);
    case 173:
      return reduce(RULE_56, 3);
    case 101:
      return reduce(RULE_56, 3);
    case 145:
      return reduce(RULE_56, 3);
    case 116:
      return reduce(RULE_56, 3);
    case 151:
      return reduce(RULE_56, 3);
    case 134:
      return reduce(RULE_56, 3);
    case 103:
      return reduce(RULE_56, 3);
    case 120:
      return reduce(RULE_56, 3);
    case 112:
      return reduce(RULE_56, 3);
    case 148:
      return reduce(RULE_56, 3);
    case 110:
      return reduce(RULE_56, 3);
    case 149:
      return reduce(RULE_56, 3);
    case 108:
      return reduce(RULE_56, 3);
    case 106:
      return reduce(RULE_56, 3);
    case 125:
      return reduce(RULE_56, 3);
    case 178:
      return reduce(RULE_56, 3);
    case 155:
      return reduce(RULE_56, 3);
    case 142:
      return reduce(RULE_56, 3);
    case 146:
      return reduce(RULE_56, 3);
    case 138:
      return reduce(RULE_56, 3);
    case 150:
      return reduce(RULE_56, 3);
    case 183:
      return reduce(RULE_56, 3);
    case 175:
      return reduce(RULE_56, 3);
    case 113:
      return reduce(RULE_56, 3);
    case 190:
      return reduce(RULE_56, 3);
    case 169:
      return reduce(RULE_56, 3);
    case 143:
      return reduce(RULE_56, 3);
    case 164:
      return reduce(RULE_56, 3);
    case 203:
      return reduce(RULE_56, 3);
    case 147:
      return reduce(RULE_56, 3);
    case 130:
      return reduce(RULE_56, 3);
    case 193:
      return reduce(RULE_56, 3);
    case 129:
      return reduce(RULE_56, 3);
    case 136:
      return reduce(RULE_56, 3);
    case 182:
      return reduce(RULE_56, 3);
    case 140:
      return reduce(RULE_56, 3);
    case 109:
      return reduce(RULE_56, 3);
    case 191:
      return reduce(RULE_56, 3);
    case 131:
      return reduce(RULE_56, 3);
    case 118:
      return reduce(RULE_56, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action720(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 4);
    case 173:
      return reduce(RULE_56, 4);
    case 101:
      return reduce(RULE_56, 4);
    case 145:
      return reduce(RULE_56, 4);
    case 116:
      return reduce(RULE_56, 4);
    case 151:
      return reduce(RULE_56, 4);
    case 134:
      return reduce(RULE_56, 4);
    case 103:
      return reduce(RULE_56, 4);
    case 120:
      return reduce(RULE_56, 4);
    case 112:
      return reduce(RULE_56, 4);
    case 148:
      return reduce(RULE_56, 4);
    case 110:
      return reduce(RULE_56, 4);
    case 149:
      return reduce(RULE_56, 4);
    case 108:
      return reduce(RULE_56, 4);
    case 106:
      return reduce(RULE_56, 4);
    case 125:
      return reduce(RULE_56, 4);
    case 178:
      return reduce(RULE_56, 4);
    case 155:
      return reduce(RULE_56, 4);
    case 142:
      return reduce(RULE_56, 4);
    case 146:
      return reduce(RULE_56, 4);
    case 138:
      return reduce(RULE_56, 4);
    case 150:
      return reduce(RULE_56, 4);
    case 183:
      return reduce(RULE_56, 4);
    case 175:
      return reduce(RULE_56, 4);
    case 113:
      return reduce(RULE_56, 4);
    case 190:
      return reduce(RULE_56, 4);
    case 169:
      return reduce(RULE_56, 4);
    case 143:
      return reduce(RULE_56, 4);
    case 164:
      return reduce(RULE_56, 4);
    case 203:
      return reduce(RULE_56, 4);
    case 147:
      return reduce(RULE_56, 4);
    case 130:
      return reduce(RULE_56, 4);
    case 193:
      return reduce(RULE_56, 4);
    case 129:
      return reduce(RULE_56, 4);
    case 136:
      return reduce(RULE_56, 4);
    case 182:
      return reduce(RULE_56, 4);
    case 140:
      return reduce(RULE_56, 4);
    case 109:
      return reduce(RULE_56, 4);
    case 191:
      return reduce(RULE_56, 4);
    case 131:
      return reduce(RULE_56, 4);
    case 118:
      return reduce(RULE_56, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto720(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action721(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 4);
    case 173:
      return reduce(RULE_62, 4);
    case 101:
      return reduce(RULE_62, 4);
    case 145:
      return reduce(RULE_62, 4);
    case 116:
      return reduce(RULE_62, 4);
    case 151:
      return reduce(RULE_62, 4);
    case 134:
      return reduce(RULE_62, 4);
    case 103:
      return reduce(RULE_62, 4);
    case 148:
      return reduce(RULE_62, 4);
    case 112:
      return reduce(RULE_62, 4);
    case 149:
      return reduce(RULE_62, 4);
    case 110:
      return reduce(RULE_62, 4);
    case 108:
      return reduce(RULE_62, 4);
    case 106:
      return reduce(RULE_62, 4);
    case 125:
      return reduce(RULE_62, 4);
    case 178:
      return reduce(RULE_62, 4);
    case 155:
      return reduce(RULE_62, 4);
    case 142:
      return reduce(RULE_62, 4);
    case 146:
      return reduce(RULE_62, 4);
    case 138:
      return reduce(RULE_62, 4);
    case 150:
      return reduce(RULE_62, 4);
    case 183:
      return reduce(RULE_62, 4);
    case 175:
      return reduce(RULE_62, 4);
    case 190:
      return reduce(RULE_62, 4);
    case 169:
      return reduce(RULE_62, 4);
    case 143:
      return reduce(RULE_62, 4);
    case 164:
      return reduce(RULE_62, 4);
    case 203:
      return reduce(RULE_62, 4);
    case 147:
      return reduce(RULE_62, 4);
    case 130:
      return reduce(RULE_62, 4);
    case 193:
      return reduce(RULE_62, 4);
    case 136:
      return reduce(RULE_62, 4);
    case 129:
      return reduce(RULE_62, 4);
    case 182:
      return reduce(RULE_62, 4);
    case 140:
      return reduce(RULE_62, 4);
    case 109:
      return reduce(RULE_62, 4);
    case 191:
      return reduce(RULE_62, 4);
    case 131:
      return reduce(RULE_62, 4);
    case 118:
      return reduce(RULE_62, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto721(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action722(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 3);
    case 173:
      return reduce(RULE_62, 3);
    case 101:
      return reduce(RULE_62, 3);
    case 145:
      return reduce(RULE_62, 3);
    case 116:
      return reduce(RULE_62, 3);
    case 151:
      return reduce(RULE_62, 3);
    case 134:
      return reduce(RULE_62, 3);
    case 103:
      return reduce(RULE_62, 3);
    case 148:
      return reduce(RULE_62, 3);
    case 112:
      return reduce(RULE_62, 3);
    case 149:
      return reduce(RULE_62, 3);
    case 110:
      return reduce(RULE_62, 3);
    case 108:
      return reduce(RULE_62, 3);
    case 106:
      return reduce(RULE_62, 3);
    case 125:
      return reduce(RULE_62, 3);
    case 178:
      return reduce(RULE_62, 3);
    case 155:
      return reduce(RULE_62, 3);
    case 142:
      return reduce(RULE_62, 3);
    case 146:
      return reduce(RULE_62, 3);
    case 138:
      return reduce(RULE_62, 3);
    case 150:
      return reduce(RULE_62, 3);
    case 183:
      return reduce(RULE_62, 3);
    case 175:
      return reduce(RULE_62, 3);
    case 190:
      return reduce(RULE_62, 3);
    case 169:
      return reduce(RULE_62, 3);
    case 143:
      return reduce(RULE_62, 3);
    case 164:
      return reduce(RULE_62, 3);
    case 203:
      return reduce(RULE_62, 3);
    case 147:
      return reduce(RULE_62, 3);
    case 130:
      return reduce(RULE_62, 3);
    case 193:
      return reduce(RULE_62, 3);
    case 136:
      return reduce(RULE_62, 3);
    case 129:
      return reduce(RULE_62, 3);
    case 182:
      return reduce(RULE_62, 3);
    case 140:
      return reduce(RULE_62, 3);
    case 109:
      return reduce(RULE_62, 3);
    case 191:
      return reduce(RULE_62, 3);
    case 131:
      return reduce(RULE_62, 3);
    case 118:
      return reduce(RULE_62, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action723(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 6);
    case 173:
      return reduce(RULE_62, 6);
    case 101:
      return reduce(RULE_62, 6);
    case 145:
      return reduce(RULE_62, 6);
    case 116:
      return reduce(RULE_62, 6);
    case 151:
      return reduce(RULE_62, 6);
    case 134:
      return reduce(RULE_62, 6);
    case 103:
      return reduce(RULE_62, 6);
    case 148:
      return reduce(RULE_62, 6);
    case 112:
      return reduce(RULE_62, 6);
    case 149:
      return reduce(RULE_62, 6);
    case 110:
      return reduce(RULE_62, 6);
    case 108:
      return reduce(RULE_62, 6);
    case 106:
      return reduce(RULE_62, 6);
    case 125:
      return reduce(RULE_62, 6);
    case 178:
      return reduce(RULE_62, 6);
    case 155:
      return reduce(RULE_62, 6);
    case 142:
      return reduce(RULE_62, 6);
    case 146:
      return reduce(RULE_62, 6);
    case 138:
      return reduce(RULE_62, 6);
    case 150:
      return reduce(RULE_62, 6);
    case 183:
      return reduce(RULE_62, 6);
    case 175:
      return reduce(RULE_62, 6);
    case 190:
      return reduce(RULE_62, 6);
    case 169:
      return reduce(RULE_62, 6);
    case 143:
      return reduce(RULE_62, 6);
    case 164:
      return reduce(RULE_62, 6);
    case 203:
      return reduce(RULE_62, 6);
    case 147:
      return reduce(RULE_62, 6);
    case 130:
      return reduce(RULE_62, 6);
    case 193:
      return reduce(RULE_62, 6);
    case 136:
      return reduce(RULE_62, 6);
    case 129:
      return reduce(RULE_62, 6);
    case 182:
      return reduce(RULE_62, 6);
    case 140:
      return reduce(RULE_62, 6);
    case 109:
      return reduce(RULE_62, 6);
    case 191:
      return reduce(RULE_62, 6);
    case 131:
      return reduce(RULE_62, 6);
    case 118:
      return reduce(RULE_62, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto723(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action724(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 5);
    case 173:
      return reduce(RULE_62, 5);
    case 101:
      return reduce(RULE_62, 5);
    case 145:
      return reduce(RULE_62, 5);
    case 116:
      return reduce(RULE_62, 5);
    case 151:
      return reduce(RULE_62, 5);
    case 134:
      return reduce(RULE_62, 5);
    case 103:
      return reduce(RULE_62, 5);
    case 148:
      return reduce(RULE_62, 5);
    case 112:
      return reduce(RULE_62, 5);
    case 149:
      return reduce(RULE_62, 5);
    case 110:
      return reduce(RULE_62, 5);
    case 108:
      return reduce(RULE_62, 5);
    case 106:
      return reduce(RULE_62, 5);
    case 125:
      return reduce(RULE_62, 5);
    case 178:
      return reduce(RULE_62, 5);
    case 155:
      return reduce(RULE_62, 5);
    case 142:
      return reduce(RULE_62, 5);
    case 146:
      return reduce(RULE_62, 5);
    case 138:
      return reduce(RULE_62, 5);
    case 150:
      return reduce(RULE_62, 5);
    case 183:
      return reduce(RULE_62, 5);
    case 175:
      return reduce(RULE_62, 5);
    case 190:
      return reduce(RULE_62, 5);
    case 169:
      return reduce(RULE_62, 5);
    case 143:
      return reduce(RULE_62, 5);
    case 164:
      return reduce(RULE_62, 5);
    case 203:
      return reduce(RULE_62, 5);
    case 147:
      return reduce(RULE_62, 5);
    case 130:
      return reduce(RULE_62, 5);
    case 193:
      return reduce(RULE_62, 5);
    case 136:
      return reduce(RULE_62, 5);
    case 129:
      return reduce(RULE_62, 5);
    case 182:
      return reduce(RULE_62, 5);
    case 140:
      return reduce(RULE_62, 5);
    case 109:
      return reduce(RULE_62, 5);
    case 191:
      return reduce(RULE_62, 5);
    case 131:
      return reduce(RULE_62, 5);
    case 118:
      return reduce(RULE_62, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action725(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 14);
    case 173:
      return reduce(RULE_62, 14);
    case 101:
      return reduce(RULE_62, 14);
    case 145:
      return reduce(RULE_62, 14);
    case 116:
      return reduce(RULE_62, 14);
    case 151:
      return reduce(RULE_62, 14);
    case 134:
      return reduce(RULE_62, 14);
    case 103:
      return reduce(RULE_62, 14);
    case 148:
      return reduce(RULE_62, 14);
    case 112:
      return reduce(RULE_62, 14);
    case 149:
      return reduce(RULE_62, 14);
    case 110:
      return reduce(RULE_62, 14);
    case 108:
      return reduce(RULE_62, 14);
    case 106:
      return reduce(RULE_62, 14);
    case 125:
      return reduce(RULE_62, 14);
    case 178:
      return reduce(RULE_62, 14);
    case 155:
      return reduce(RULE_62, 14);
    case 142:
      return reduce(RULE_62, 14);
    case 146:
      return reduce(RULE_62, 14);
    case 138:
      return reduce(RULE_62, 14);
    case 150:
      return reduce(RULE_62, 14);
    case 183:
      return reduce(RULE_62, 14);
    case 175:
      return reduce(RULE_62, 14);
    case 190:
      return reduce(RULE_62, 14);
    case 169:
      return reduce(RULE_62, 14);
    case 143:
      return reduce(RULE_62, 14);
    case 164:
      return reduce(RULE_62, 14);
    case 203:
      return reduce(RULE_62, 14);
    case 147:
      return reduce(RULE_62, 14);
    case 130:
      return reduce(RULE_62, 14);
    case 193:
      return reduce(RULE_62, 14);
    case 136:
      return reduce(RULE_62, 14);
    case 129:
      return reduce(RULE_62, 14);
    case 182:
      return reduce(RULE_62, 14);
    case 140:
      return reduce(RULE_62, 14);
    case 109:
      return reduce(RULE_62, 14);
    case 191:
      return reduce(RULE_62, 14);
    case 131:
      return reduce(RULE_62, 14);
    case 118:
      return reduce(RULE_62, 14);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto725(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action726(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 13);
    case 173:
      return reduce(RULE_62, 13);
    case 101:
      return reduce(RULE_62, 13);
    case 145:
      return reduce(RULE_62, 13);
    case 116:
      return reduce(RULE_62, 13);
    case 151:
      return reduce(RULE_62, 13);
    case 134:
      return reduce(RULE_62, 13);
    case 103:
      return reduce(RULE_62, 13);
    case 148:
      return reduce(RULE_62, 13);
    case 112:
      return reduce(RULE_62, 13);
    case 149:
      return reduce(RULE_62, 13);
    case 110:
      return reduce(RULE_62, 13);
    case 108:
      return reduce(RULE_62, 13);
    case 106:
      return reduce(RULE_62, 13);
    case 125:
      return reduce(RULE_62, 13);
    case 178:
      return reduce(RULE_62, 13);
    case 155:
      return reduce(RULE_62, 13);
    case 142:
      return reduce(RULE_62, 13);
    case 146:
      return reduce(RULE_62, 13);
    case 138:
      return reduce(RULE_62, 13);
    case 150:
      return reduce(RULE_62, 13);
    case 183:
      return reduce(RULE_62, 13);
    case 175:
      return reduce(RULE_62, 13);
    case 190:
      return reduce(RULE_62, 13);
    case 169:
      return reduce(RULE_62, 13);
    case 143:
      return reduce(RULE_62, 13);
    case 164:
      return reduce(RULE_62, 13);
    case 203:
      return reduce(RULE_62, 13);
    case 147:
      return reduce(RULE_62, 13);
    case 130:
      return reduce(RULE_62, 13);
    case 193:
      return reduce(RULE_62, 13);
    case 136:
      return reduce(RULE_62, 13);
    case 129:
      return reduce(RULE_62, 13);
    case 182:
      return reduce(RULE_62, 13);
    case 140:
      return reduce(RULE_62, 13);
    case 109:
      return reduce(RULE_62, 13);
    case 191:
      return reduce(RULE_62, 13);
    case 131:
      return reduce(RULE_62, 13);
    case 118:
      return reduce(RULE_62, 13);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action727(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 10);
    case 173:
      return reduce(RULE_62, 10);
    case 101:
      return reduce(RULE_62, 10);
    case 145:
      return reduce(RULE_62, 10);
    case 116:
      return reduce(RULE_62, 10);
    case 151:
      return reduce(RULE_62, 10);
    case 134:
      return reduce(RULE_62, 10);
    case 103:
      return reduce(RULE_62, 10);
    case 148:
      return reduce(RULE_62, 10);
    case 112:
      return reduce(RULE_62, 10);
    case 149:
      return reduce(RULE_62, 10);
    case 110:
      return reduce(RULE_62, 10);
    case 108:
      return reduce(RULE_62, 10);
    case 106:
      return reduce(RULE_62, 10);
    case 125:
      return reduce(RULE_62, 10);
    case 178:
      return reduce(RULE_62, 10);
    case 155:
      return reduce(RULE_62, 10);
    case 142:
      return reduce(RULE_62, 10);
    case 146:
      return reduce(RULE_62, 10);
    case 138:
      return reduce(RULE_62, 10);
    case 150:
      return reduce(RULE_62, 10);
    case 183:
      return reduce(RULE_62, 10);
    case 175:
      return reduce(RULE_62, 10);
    case 190:
      return reduce(RULE_62, 10);
    case 169:
      return reduce(RULE_62, 10);
    case 143:
      return reduce(RULE_62, 10);
    case 164:
      return reduce(RULE_62, 10);
    case 203:
      return reduce(RULE_62, 10);
    case 147:
      return reduce(RULE_62, 10);
    case 130:
      return reduce(RULE_62, 10);
    case 193:
      return reduce(RULE_62, 10);
    case 136:
      return reduce(RULE_62, 10);
    case 129:
      return reduce(RULE_62, 10);
    case 182:
      return reduce(RULE_62, 10);
    case 140:
      return reduce(RULE_62, 10);
    case 109:
      return reduce(RULE_62, 10);
    case 191:
      return reduce(RULE_62, 10);
    case 131:
      return reduce(RULE_62, 10);
    case 118:
      return reduce(RULE_62, 10);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto727(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action728(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 9);
    case 173:
      return reduce(RULE_62, 9);
    case 101:
      return reduce(RULE_62, 9);
    case 145:
      return reduce(RULE_62, 9);
    case 116:
      return reduce(RULE_62, 9);
    case 151:
      return reduce(RULE_62, 9);
    case 134:
      return reduce(RULE_62, 9);
    case 103:
      return reduce(RULE_62, 9);
    case 148:
      return reduce(RULE_62, 9);
    case 112:
      return reduce(RULE_62, 9);
    case 149:
      return reduce(RULE_62, 9);
    case 110:
      return reduce(RULE_62, 9);
    case 108:
      return reduce(RULE_62, 9);
    case 106:
      return reduce(RULE_62, 9);
    case 125:
      return reduce(RULE_62, 9);
    case 178:
      return reduce(RULE_62, 9);
    case 155:
      return reduce(RULE_62, 9);
    case 142:
      return reduce(RULE_62, 9);
    case 146:
      return reduce(RULE_62, 9);
    case 138:
      return reduce(RULE_62, 9);
    case 150:
      return reduce(RULE_62, 9);
    case 183:
      return reduce(RULE_62, 9);
    case 175:
      return reduce(RULE_62, 9);
    case 190:
      return reduce(RULE_62, 9);
    case 169:
      return reduce(RULE_62, 9);
    case 143:
      return reduce(RULE_62, 9);
    case 164:
      return reduce(RULE_62, 9);
    case 203:
      return reduce(RULE_62, 9);
    case 147:
      return reduce(RULE_62, 9);
    case 130:
      return reduce(RULE_62, 9);
    case 193:
      return reduce(RULE_62, 9);
    case 136:
      return reduce(RULE_62, 9);
    case 129:
      return reduce(RULE_62, 9);
    case 182:
      return reduce(RULE_62, 9);
    case 140:
      return reduce(RULE_62, 9);
    case 109:
      return reduce(RULE_62, 9);
    case 191:
      return reduce(RULE_62, 9);
    case 131:
      return reduce(RULE_62, 9);
    case 118:
      return reduce(RULE_62, 9);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action729(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 2);
    case 173:
      return reduce(RULE_62, 2);
    case 101:
      return reduce(RULE_62, 2);
    case 145:
      return reduce(RULE_62, 2);
    case 116:
      return reduce(RULE_62, 2);
    case 151:
      return reduce(RULE_62, 2);
    case 134:
      return reduce(RULE_62, 2);
    case 103:
      return reduce(RULE_62, 2);
    case 148:
      return reduce(RULE_62, 2);
    case 112:
      return reduce(RULE_62, 2);
    case 149:
      return reduce(RULE_62, 2);
    case 110:
      return reduce(RULE_62, 2);
    case 108:
      return reduce(RULE_62, 2);
    case 106:
      return reduce(RULE_62, 2);
    case 125:
      return reduce(RULE_62, 2);
    case 178:
      return reduce(RULE_62, 2);
    case 155:
      return reduce(RULE_62, 2);
    case 142:
      return reduce(RULE_62, 2);
    case 146:
      return reduce(RULE_62, 2);
    case 138:
      return reduce(RULE_62, 2);
    case 150:
      return reduce(RULE_62, 2);
    case 183:
      return reduce(RULE_62, 2);
    case 175:
      return reduce(RULE_62, 2);
    case 190:
      return reduce(RULE_62, 2);
    case 169:
      return reduce(RULE_62, 2);
    case 143:
      return reduce(RULE_62, 2);
    case 164:
      return reduce(RULE_62, 2);
    case 203:
      return reduce(RULE_62, 2);
    case 147:
      return reduce(RULE_62, 2);
    case 130:
      return reduce(RULE_62, 2);
    case 193:
      return reduce(RULE_62, 2);
    case 136:
      return reduce(RULE_62, 2);
    case 129:
      return reduce(RULE_62, 2);
    case 182:
      return reduce(RULE_62, 2);
    case 140:
      return reduce(RULE_62, 2);
    case 109:
      return reduce(RULE_62, 2);
    case 191:
      return reduce(RULE_62, 2);
    case 131:
      return reduce(RULE_62, 2);
    case 118:
      return reduce(RULE_62, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto729(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action730(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(542);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(543);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_62, 1);
    case 173:
      return reduce(RULE_62, 1);
    case 101:
      return reduce(RULE_62, 1);
    case 145:
      return reduce(RULE_62, 1);
    case 116:
      return reduce(RULE_62, 1);
    case 151:
      return reduce(RULE_62, 1);
    case 134:
      return reduce(RULE_62, 1);
    case 103:
      return reduce(RULE_62, 1);
    case 148:
      return reduce(RULE_62, 1);
    case 112:
      return reduce(RULE_62, 1);
    case 149:
      return reduce(RULE_62, 1);
    case 110:
      return reduce(RULE_62, 1);
    case 108:
      return reduce(RULE_62, 1);
    case 106:
      return reduce(RULE_62, 1);
    case 125:
      return reduce(RULE_62, 1);
    case 178:
      return reduce(RULE_62, 1);
    case 155:
      return reduce(RULE_62, 1);
    case 142:
      return reduce(RULE_62, 1);
    case 146:
      return reduce(RULE_62, 1);
    case 138:
      return reduce(RULE_62, 1);
    case 150:
      return reduce(RULE_62, 1);
    case 183:
      return reduce(RULE_62, 1);
    case 175:
      return reduce(RULE_62, 1);
    case 190:
      return reduce(RULE_62, 1);
    case 169:
      return reduce(RULE_62, 1);
    case 143:
      return reduce(RULE_62, 1);
    case 164:
      return reduce(RULE_62, 1);
    case 203:
      return reduce(RULE_62, 1);
    case 147:
      return reduce(RULE_62, 1);
    case 130:
      return reduce(RULE_62, 1);
    case 193:
      return reduce(RULE_62, 1);
    case 136:
      return reduce(RULE_62, 1);
    case 129:
      return reduce(RULE_62, 1);
    case 182:
      return reduce(RULE_62, 1);
    case 140:
      return reduce(RULE_62, 1);
    case 109:
      return reduce(RULE_62, 1);
    case 191:
      return reduce(RULE_62, 1);
    case 131:
      return reduce(RULE_62, 1);
    case 118:
      return reduce(RULE_62, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action731(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_54, 6);
    case 173:
      return reduce(RULE_54, 6);
    case 101:
      return reduce(RULE_54, 6);
    case 155:
      return reduce(RULE_54, 6);
    case 150:
      return reduce(RULE_54, 6);
    case 183:
      return reduce(RULE_54, 6);
    case 175:
      return reduce(RULE_54, 6);
    case 190:
      return reduce(RULE_54, 6);
    case 169:
      return reduce(RULE_54, 6);
    case 164:
      return reduce(RULE_54, 6);
    case 203:
      return reduce(RULE_54, 6);
    case 193:
      return reduce(RULE_54, 6);
    case 182:
      return reduce(RULE_54, 6);
    case 148:
      return reduce(RULE_54, 6);
    case 191:
      return reduce(RULE_54, 6);
    case 131:
      return reduce(RULE_54, 6);
    case 149:
      return reduce(RULE_54, 6);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action732(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_54, 7);
    case 173:
      return reduce(RULE_54, 7);
    case 101:
      return reduce(RULE_54, 7);
    case 155:
      return reduce(RULE_54, 7);
    case 150:
      return reduce(RULE_54, 7);
    case 183:
      return reduce(RULE_54, 7);
    case 175:
      return reduce(RULE_54, 7);
    case 190:
      return reduce(RULE_54, 7);
    case 169:
      return reduce(RULE_54, 7);
    case 164:
      return reduce(RULE_54, 7);
    case 203:
      return reduce(RULE_54, 7);
    case 193:
      return reduce(RULE_54, 7);
    case 182:
      return reduce(RULE_54, 7);
    case 148:
      return reduce(RULE_54, 7);
    case 191:
      return reduce(RULE_54, 7);
    case 131:
      return reduce(RULE_54, 7);
    case 149:
      return reduce(RULE_54, 7);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action733(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 174:
      stateStack.addFirst(196);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IF_KEYWORD, LBRACE});
    }
  }

  private final int goto733(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 854;
    case 40: return 855;
    default: return -1;
    }
  }

  private final boolean action734(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(508);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(856);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 1);
    case 173:
      return reduce(RULE_44, 1);
    case 101:
      return reduce(RULE_44, 1);
    case 116:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_44, 1);
    case 148:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_44, 1);
    case 149:
      return reduce(RULE_44, 1);
    case 108:
      return reduce(RULE_44, 1);
    case 106:
      return reduce(RULE_44, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 178:
      return reduce(RULE_44, 1);
    case 155:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_44, 1);
    case 146:
      return reduce(RULE_44, 1);
    case 150:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 183:
      return reduce(RULE_44, 1);
    case 175:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 190:
      return reduce(RULE_44, 1);
    case 169:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 164:
      return reduce(RULE_44, 1);
    case 203:
      return reduce(RULE_44, 1);
    case 147:
      return reduce(RULE_44, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 193:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 182:
      return reduce(RULE_44, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 109:
      return reduce(RULE_44, 1);
    case 191:
      return reduce(RULE_44, 1);
    case 131:
      return reduce(RULE_44, 1);
    case 118:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, RANGLE_EQUALS, PIPE, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action735(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(857);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 0);
    case 173:
      return reduce(RULE_44, 0);
    case 101:
      return reduce(RULE_44, 0);
    case 116:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_44, 0);
    case 148:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_44, 0);
    case 149:
      return reduce(RULE_44, 0);
    case 108:
      return reduce(RULE_44, 0);
    case 106:
      return reduce(RULE_44, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 178:
      return reduce(RULE_44, 0);
    case 155:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_44, 0);
    case 146:
      return reduce(RULE_44, 0);
    case 150:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 183:
      return reduce(RULE_44, 0);
    case 175:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 190:
      return reduce(RULE_44, 0);
    case 169:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 164:
      return reduce(RULE_44, 0);
    case 203:
      return reduce(RULE_44, 0);
    case 147:
      return reduce(RULE_44, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 193:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 182:
      return reduce(RULE_44, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 109:
      return reduce(RULE_44, 0);
    case 191:
      return reduce(RULE_44, 0);
    case 131:
      return reduce(RULE_44, 0);
    case 118:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, RANGLE_EQUALS, PIPE, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action736(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 9);
    case 101:
      return reduce(RULE_63, 9);
    case 103:
      return reduce(RULE_63, 9);
    case 148:
      return reduce(RULE_63, 9);
    case 149:
      return reduce(RULE_63, 9);
    case 110:
      return reduce(RULE_63, 9);
    case 108:
      return reduce(RULE_63, 9);
    case 106:
      return reduce(RULE_63, 9);
    case 155:
      return reduce(RULE_63, 9);
    case 138:
      return reduce(RULE_63, 9);
    case 142:
      return reduce(RULE_63, 9);
    case 150:
      return reduce(RULE_63, 9);
    case 183:
      return reduce(RULE_63, 9);
    case 175:
      return reduce(RULE_63, 9);
    case 190:
      return reduce(RULE_63, 9);
    case 169:
      return reduce(RULE_63, 9);
    case 143:
      return reduce(RULE_63, 9);
    case 164:
      return reduce(RULE_63, 9);
    case 203:
      return reduce(RULE_63, 9);
    case 147:
      return reduce(RULE_63, 9);
    case 193:
      return reduce(RULE_63, 9);
    case 182:
      return reduce(RULE_63, 9);
    case 191:
      return reduce(RULE_63, 9);
    case 109:
      return reduce(RULE_63, 9);
    case 131:
      return reduce(RULE_63, 9);
    case 118:
      return reduce(RULE_63, 9);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action737(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 10);
    case 101:
      return reduce(RULE_63, 10);
    case 103:
      return reduce(RULE_63, 10);
    case 148:
      return reduce(RULE_63, 10);
    case 149:
      return reduce(RULE_63, 10);
    case 110:
      return reduce(RULE_63, 10);
    case 108:
      return reduce(RULE_63, 10);
    case 106:
      return reduce(RULE_63, 10);
    case 155:
      return reduce(RULE_63, 10);
    case 138:
      return reduce(RULE_63, 10);
    case 142:
      return reduce(RULE_63, 10);
    case 150:
      return reduce(RULE_63, 10);
    case 183:
      return reduce(RULE_63, 10);
    case 175:
      return reduce(RULE_63, 10);
    case 190:
      return reduce(RULE_63, 10);
    case 169:
      return reduce(RULE_63, 10);
    case 143:
      return reduce(RULE_63, 10);
    case 164:
      return reduce(RULE_63, 10);
    case 203:
      return reduce(RULE_63, 10);
    case 147:
      return reduce(RULE_63, 10);
    case 193:
      return reduce(RULE_63, 10);
    case 182:
      return reduce(RULE_63, 10);
    case 191:
      return reduce(RULE_63, 10);
    case 109:
      return reduce(RULE_63, 10);
    case 131:
      return reduce(RULE_63, 10);
    case 118:
      return reduce(RULE_63, 10);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action738(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 1);
    case 101:
      return reduce(RULE_63, 1);
    case 103:
      return reduce(RULE_63, 1);
    case 148:
      return reduce(RULE_63, 1);
    case 149:
      return reduce(RULE_63, 1);
    case 110:
      return reduce(RULE_63, 1);
    case 108:
      return reduce(RULE_63, 1);
    case 106:
      return reduce(RULE_63, 1);
    case 155:
      return reduce(RULE_63, 1);
    case 138:
      return reduce(RULE_63, 1);
    case 142:
      return reduce(RULE_63, 1);
    case 150:
      return reduce(RULE_63, 1);
    case 183:
      return reduce(RULE_63, 1);
    case 175:
      return reduce(RULE_63, 1);
    case 190:
      return reduce(RULE_63, 1);
    case 169:
      return reduce(RULE_63, 1);
    case 143:
      return reduce(RULE_63, 1);
    case 164:
      return reduce(RULE_63, 1);
    case 203:
      return reduce(RULE_63, 1);
    case 147:
      return reduce(RULE_63, 1);
    case 193:
      return reduce(RULE_63, 1);
    case 182:
      return reduce(RULE_63, 1);
    case 191:
      return reduce(RULE_63, 1);
    case 109:
      return reduce(RULE_63, 1);
    case 131:
      return reduce(RULE_63, 1);
    case 118:
      return reduce(RULE_63, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action739(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 2);
    case 101:
      return reduce(RULE_63, 2);
    case 103:
      return reduce(RULE_63, 2);
    case 148:
      return reduce(RULE_63, 2);
    case 149:
      return reduce(RULE_63, 2);
    case 110:
      return reduce(RULE_63, 2);
    case 108:
      return reduce(RULE_63, 2);
    case 106:
      return reduce(RULE_63, 2);
    case 155:
      return reduce(RULE_63, 2);
    case 138:
      return reduce(RULE_63, 2);
    case 142:
      return reduce(RULE_63, 2);
    case 150:
      return reduce(RULE_63, 2);
    case 183:
      return reduce(RULE_63, 2);
    case 175:
      return reduce(RULE_63, 2);
    case 190:
      return reduce(RULE_63, 2);
    case 169:
      return reduce(RULE_63, 2);
    case 143:
      return reduce(RULE_63, 2);
    case 164:
      return reduce(RULE_63, 2);
    case 203:
      return reduce(RULE_63, 2);
    case 147:
      return reduce(RULE_63, 2);
    case 193:
      return reduce(RULE_63, 2);
    case 182:
      return reduce(RULE_63, 2);
    case 191:
      return reduce(RULE_63, 2);
    case 109:
      return reduce(RULE_63, 2);
    case 131:
      return reduce(RULE_63, 2);
    case 118:
      return reduce(RULE_63, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action740(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(858);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COLON});
    }
  }

  private final boolean action741(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 5);
    case 101:
      return reduce(RULE_63, 5);
    case 103:
      return reduce(RULE_63, 5);
    case 148:
      return reduce(RULE_63, 5);
    case 149:
      return reduce(RULE_63, 5);
    case 110:
      return reduce(RULE_63, 5);
    case 108:
      return reduce(RULE_63, 5);
    case 106:
      return reduce(RULE_63, 5);
    case 155:
      return reduce(RULE_63, 5);
    case 138:
      return reduce(RULE_63, 5);
    case 142:
      return reduce(RULE_63, 5);
    case 150:
      return reduce(RULE_63, 5);
    case 183:
      return reduce(RULE_63, 5);
    case 175:
      return reduce(RULE_63, 5);
    case 190:
      return reduce(RULE_63, 5);
    case 169:
      return reduce(RULE_63, 5);
    case 143:
      return reduce(RULE_63, 5);
    case 164:
      return reduce(RULE_63, 5);
    case 203:
      return reduce(RULE_63, 5);
    case 147:
      return reduce(RULE_63, 5);
    case 193:
      return reduce(RULE_63, 5);
    case 182:
      return reduce(RULE_63, 5);
    case 191:
      return reduce(RULE_63, 5);
    case 109:
      return reduce(RULE_63, 5);
    case 131:
      return reduce(RULE_63, 5);
    case 118:
      return reduce(RULE_63, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action742(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 6);
    case 101:
      return reduce(RULE_63, 6);
    case 103:
      return reduce(RULE_63, 6);
    case 148:
      return reduce(RULE_63, 6);
    case 149:
      return reduce(RULE_63, 6);
    case 110:
      return reduce(RULE_63, 6);
    case 108:
      return reduce(RULE_63, 6);
    case 106:
      return reduce(RULE_63, 6);
    case 155:
      return reduce(RULE_63, 6);
    case 138:
      return reduce(RULE_63, 6);
    case 142:
      return reduce(RULE_63, 6);
    case 150:
      return reduce(RULE_63, 6);
    case 183:
      return reduce(RULE_63, 6);
    case 175:
      return reduce(RULE_63, 6);
    case 190:
      return reduce(RULE_63, 6);
    case 169:
      return reduce(RULE_63, 6);
    case 143:
      return reduce(RULE_63, 6);
    case 164:
      return reduce(RULE_63, 6);
    case 203:
      return reduce(RULE_63, 6);
    case 147:
      return reduce(RULE_63, 6);
    case 193:
      return reduce(RULE_63, 6);
    case 182:
      return reduce(RULE_63, 6);
    case 191:
      return reduce(RULE_63, 6);
    case 109:
      return reduce(RULE_63, 6);
    case 131:
      return reduce(RULE_63, 6);
    case 118:
      return reduce(RULE_63, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action743(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_60, 5);
    case 173:
      return reduce(RULE_60, 5);
    case 101:
      return reduce(RULE_60, 5);
    case 155:
      return reduce(RULE_60, 5);
    case 150:
      return reduce(RULE_60, 5);
    case 183:
      return reduce(RULE_60, 5);
    case 175:
      return reduce(RULE_60, 5);
    case 169:
      return reduce(RULE_60, 5);
    case 190:
      return reduce(RULE_60, 5);
    case 164:
      return reduce(RULE_60, 5);
    case 203:
      return reduce(RULE_60, 5);
    case 147:
      return reduce(RULE_60, 5);
    case 193:
      return reduce(RULE_60, 5);
    case 182:
      return reduce(RULE_60, 5);
    case 148:
      return reduce(RULE_60, 5);
    case 109:
      return reduce(RULE_60, 5);
    case 191:
      return reduce(RULE_60, 5);
    case 131:
      return reduce(RULE_60, 5);
    case 149:
      return reduce(RULE_60, 5);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, COMMA, RSQUARE, LBRACE});
    }
  }

  private final boolean action744(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 108:
      return reduce(RULE_60, 6);
    case 173:
      return reduce(RULE_60, 6);
    case 101:
      return reduce(RULE_60, 6);
    case 155:
      return reduce(RULE_60, 6);
    case 150:
      return reduce(RULE_60, 6);
    case 183:
      return reduce(RULE_60, 6);
    case 175:
      return reduce(RULE_60, 6);
    case 169:
      return reduce(RULE_60, 6);
    case 190:
      return reduce(RULE_60, 6);
    case 164:
      return reduce(RULE_60, 6);
    case 203:
      return reduce(RULE_60, 6);
    case 147:
      return reduce(RULE_60, 6);
    case 193:
      return reduce(RULE_60, 6);
    case 182:
      return reduce(RULE_60, 6);
    case 148:
      return reduce(RULE_60, 6);
    case 109:
      return reduce(RULE_60, 6);
    case 191:
      return reduce(RULE_60, 6);
    case 131:
      return reduce(RULE_60, 6);
    case 149:
      return reduce(RULE_60, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action745(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 13);
    case 101:
      return reduce(RULE_63, 13);
    case 103:
      return reduce(RULE_63, 13);
    case 148:
      return reduce(RULE_63, 13);
    case 149:
      return reduce(RULE_63, 13);
    case 110:
      return reduce(RULE_63, 13);
    case 108:
      return reduce(RULE_63, 13);
    case 106:
      return reduce(RULE_63, 13);
    case 155:
      return reduce(RULE_63, 13);
    case 138:
      return reduce(RULE_63, 13);
    case 142:
      return reduce(RULE_63, 13);
    case 150:
      return reduce(RULE_63, 13);
    case 183:
      return reduce(RULE_63, 13);
    case 175:
      return reduce(RULE_63, 13);
    case 190:
      return reduce(RULE_63, 13);
    case 169:
      return reduce(RULE_63, 13);
    case 143:
      return reduce(RULE_63, 13);
    case 164:
      return reduce(RULE_63, 13);
    case 203:
      return reduce(RULE_63, 13);
    case 147:
      return reduce(RULE_63, 13);
    case 193:
      return reduce(RULE_63, 13);
    case 182:
      return reduce(RULE_63, 13);
    case 191:
      return reduce(RULE_63, 13);
    case 109:
      return reduce(RULE_63, 13);
    case 131:
      return reduce(RULE_63, 13);
    case 118:
      return reduce(RULE_63, 13);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action746(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 14);
    case 101:
      return reduce(RULE_63, 14);
    case 103:
      return reduce(RULE_63, 14);
    case 148:
      return reduce(RULE_63, 14);
    case 149:
      return reduce(RULE_63, 14);
    case 110:
      return reduce(RULE_63, 14);
    case 108:
      return reduce(RULE_63, 14);
    case 106:
      return reduce(RULE_63, 14);
    case 155:
      return reduce(RULE_63, 14);
    case 138:
      return reduce(RULE_63, 14);
    case 142:
      return reduce(RULE_63, 14);
    case 150:
      return reduce(RULE_63, 14);
    case 183:
      return reduce(RULE_63, 14);
    case 175:
      return reduce(RULE_63, 14);
    case 190:
      return reduce(RULE_63, 14);
    case 169:
      return reduce(RULE_63, 14);
    case 143:
      return reduce(RULE_63, 14);
    case 164:
      return reduce(RULE_63, 14);
    case 203:
      return reduce(RULE_63, 14);
    case 147:
      return reduce(RULE_63, 14);
    case 193:
      return reduce(RULE_63, 14);
    case 182:
      return reduce(RULE_63, 14);
    case 191:
      return reduce(RULE_63, 14);
    case 109:
      return reduce(RULE_63, 14);
    case 131:
      return reduce(RULE_63, 14);
    case 118:
      return reduce(RULE_63, 14);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action747(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 17);
    case 101:
      return reduce(RULE_63, 17);
    case 103:
      return reduce(RULE_63, 17);
    case 148:
      return reduce(RULE_63, 17);
    case 149:
      return reduce(RULE_63, 17);
    case 110:
      return reduce(RULE_63, 17);
    case 108:
      return reduce(RULE_63, 17);
    case 106:
      return reduce(RULE_63, 17);
    case 155:
      return reduce(RULE_63, 17);
    case 138:
      return reduce(RULE_63, 17);
    case 142:
      return reduce(RULE_63, 17);
    case 150:
      return reduce(RULE_63, 17);
    case 183:
      return reduce(RULE_63, 17);
    case 175:
      return reduce(RULE_63, 17);
    case 190:
      return reduce(RULE_63, 17);
    case 169:
      return reduce(RULE_63, 17);
    case 143:
      return reduce(RULE_63, 17);
    case 164:
      return reduce(RULE_63, 17);
    case 203:
      return reduce(RULE_63, 17);
    case 147:
      return reduce(RULE_63, 17);
    case 193:
      return reduce(RULE_63, 17);
    case 182:
      return reduce(RULE_63, 17);
    case 191:
      return reduce(RULE_63, 17);
    case 109:
      return reduce(RULE_63, 17);
    case 131:
      return reduce(RULE_63, 17);
    case 118:
      return reduce(RULE_63, 17);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action748(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 18);
    case 101:
      return reduce(RULE_63, 18);
    case 103:
      return reduce(RULE_63, 18);
    case 148:
      return reduce(RULE_63, 18);
    case 149:
      return reduce(RULE_63, 18);
    case 110:
      return reduce(RULE_63, 18);
    case 108:
      return reduce(RULE_63, 18);
    case 106:
      return reduce(RULE_63, 18);
    case 155:
      return reduce(RULE_63, 18);
    case 138:
      return reduce(RULE_63, 18);
    case 142:
      return reduce(RULE_63, 18);
    case 150:
      return reduce(RULE_63, 18);
    case 183:
      return reduce(RULE_63, 18);
    case 175:
      return reduce(RULE_63, 18);
    case 190:
      return reduce(RULE_63, 18);
    case 169:
      return reduce(RULE_63, 18);
    case 143:
      return reduce(RULE_63, 18);
    case 164:
      return reduce(RULE_63, 18);
    case 203:
      return reduce(RULE_63, 18);
    case 147:
      return reduce(RULE_63, 18);
    case 193:
      return reduce(RULE_63, 18);
    case 182:
      return reduce(RULE_63, 18);
    case 191:
      return reduce(RULE_63, 18);
    case 109:
      return reduce(RULE_63, 18);
    case 131:
      return reduce(RULE_63, 18);
    case 118:
      return reduce(RULE_63, 18);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action749(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(859);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action750(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(497);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 7);
    case 173:
      return reduce(RULE_56, 7);
    case 101:
      return reduce(RULE_56, 7);
    case 145:
      return reduce(RULE_56, 7);
    case 116:
      return reduce(RULE_56, 7);
    case 151:
      return reduce(RULE_56, 7);
    case 134:
      return reduce(RULE_56, 7);
    case 103:
      return reduce(RULE_56, 7);
    case 120:
      return reduce(RULE_56, 7);
    case 148:
      return reduce(RULE_56, 7);
    case 112:
      return reduce(RULE_56, 7);
    case 110:
      return reduce(RULE_56, 7);
    case 149:
      return reduce(RULE_56, 7);
    case 108:
      return reduce(RULE_56, 7);
    case 106:
      return reduce(RULE_56, 7);
    case 125:
      return reduce(RULE_56, 7);
    case 178:
      return reduce(RULE_56, 7);
    case 155:
      return reduce(RULE_56, 7);
    case 142:
      return reduce(RULE_56, 7);
    case 146:
      return reduce(RULE_56, 7);
    case 138:
      return reduce(RULE_56, 7);
    case 150:
      return reduce(RULE_56, 7);
    case 183:
      return reduce(RULE_56, 7);
    case 175:
      return reduce(RULE_56, 7);
    case 113:
      return reduce(RULE_56, 7);
    case 190:
      return reduce(RULE_56, 7);
    case 169:
      return reduce(RULE_56, 7);
    case 143:
      return reduce(RULE_56, 7);
    case 164:
      return reduce(RULE_56, 7);
    case 203:
      return reduce(RULE_56, 7);
    case 147:
      return reduce(RULE_56, 7);
    case 130:
      return reduce(RULE_56, 7);
    case 193:
      return reduce(RULE_56, 7);
    case 136:
      return reduce(RULE_56, 7);
    case 129:
      return reduce(RULE_56, 7);
    case 182:
      return reduce(RULE_56, 7);
    case 140:
      return reduce(RULE_56, 7);
    case 109:
      return reduce(RULE_56, 7);
    case 191:
      return reduce(RULE_56, 7);
    case 131:
      return reduce(RULE_56, 7);
    case 118:
      return reduce(RULE_56, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action751(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 9);
    case 173:
      return reduce(RULE_56, 9);
    case 101:
      return reduce(RULE_56, 9);
    case 145:
      return reduce(RULE_56, 9);
    case 116:
      return reduce(RULE_56, 9);
    case 151:
      return reduce(RULE_56, 9);
    case 134:
      return reduce(RULE_56, 9);
    case 103:
      return reduce(RULE_56, 9);
    case 120:
      return reduce(RULE_56, 9);
    case 148:
      return reduce(RULE_56, 9);
    case 112:
      return reduce(RULE_56, 9);
    case 110:
      return reduce(RULE_56, 9);
    case 149:
      return reduce(RULE_56, 9);
    case 108:
      return reduce(RULE_56, 9);
    case 106:
      return reduce(RULE_56, 9);
    case 125:
      return reduce(RULE_56, 9);
    case 178:
      return reduce(RULE_56, 9);
    case 155:
      return reduce(RULE_56, 9);
    case 142:
      return reduce(RULE_56, 9);
    case 146:
      return reduce(RULE_56, 9);
    case 138:
      return reduce(RULE_56, 9);
    case 150:
      return reduce(RULE_56, 9);
    case 183:
      return reduce(RULE_56, 9);
    case 175:
      return reduce(RULE_56, 9);
    case 113:
      return reduce(RULE_56, 9);
    case 190:
      return reduce(RULE_56, 9);
    case 169:
      return reduce(RULE_56, 9);
    case 143:
      return reduce(RULE_56, 9);
    case 164:
      return reduce(RULE_56, 9);
    case 203:
      return reduce(RULE_56, 9);
    case 147:
      return reduce(RULE_56, 9);
    case 130:
      return reduce(RULE_56, 9);
    case 193:
      return reduce(RULE_56, 9);
    case 136:
      return reduce(RULE_56, 9);
    case 129:
      return reduce(RULE_56, 9);
    case 182:
      return reduce(RULE_56, 9);
    case 140:
      return reduce(RULE_56, 9);
    case 109:
      return reduce(RULE_56, 9);
    case 191:
      return reduce(RULE_56, 9);
    case 131:
      return reduce(RULE_56, 9);
    case 118:
      return reduce(RULE_56, 9);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto751(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action752(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 11);
    case 101:
      return reduce(RULE_58, 11);
    case 103:
      return reduce(RULE_58, 11);
    case 148:
      return reduce(RULE_58, 11);
    case 112:
      return reduce(RULE_58, 11);
    case 110:
      return reduce(RULE_58, 11);
    case 149:
      return reduce(RULE_58, 11);
    case 108:
      return reduce(RULE_58, 11);
    case 106:
      return reduce(RULE_58, 11);
    case 125:
      return reduce(RULE_58, 11);
    case 142:
      return reduce(RULE_58, 11);
    case 138:
      return reduce(RULE_58, 11);
    case 155:
      return reduce(RULE_58, 11);
    case 150:
      return reduce(RULE_58, 11);
    case 183:
      return reduce(RULE_58, 11);
    case 175:
      return reduce(RULE_58, 11);
    case 169:
      return reduce(RULE_58, 11);
    case 190:
      return reduce(RULE_58, 11);
    case 143:
      return reduce(RULE_58, 11);
    case 164:
      return reduce(RULE_58, 11);
    case 203:
      return reduce(RULE_58, 11);
    case 147:
      return reduce(RULE_58, 11);
    case 193:
      return reduce(RULE_58, 11);
    case 182:
      return reduce(RULE_58, 11);
    case 109:
      return reduce(RULE_58, 11);
    case 191:
      return reduce(RULE_58, 11);
    case 131:
      return reduce(RULE_58, 11);
    case 118:
      return reduce(RULE_58, 11);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, CARET, COLON, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action753(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(511);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(512);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(517);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 136:
      stateStack.addFirst(518);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(519);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(520);
      tokenStack.addFirst(token);
      return true;
    case 151:
      stateStack.addFirst(521);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 13);
    case 101:
      return reduce(RULE_58, 13);
    case 103:
      return reduce(RULE_58, 13);
    case 148:
      return reduce(RULE_58, 13);
    case 112:
      return reduce(RULE_58, 13);
    case 110:
      return reduce(RULE_58, 13);
    case 149:
      return reduce(RULE_58, 13);
    case 108:
      return reduce(RULE_58, 13);
    case 106:
      return reduce(RULE_58, 13);
    case 125:
      return reduce(RULE_58, 13);
    case 142:
      return reduce(RULE_58, 13);
    case 138:
      return reduce(RULE_58, 13);
    case 155:
      return reduce(RULE_58, 13);
    case 150:
      return reduce(RULE_58, 13);
    case 183:
      return reduce(RULE_58, 13);
    case 175:
      return reduce(RULE_58, 13);
    case 169:
      return reduce(RULE_58, 13);
    case 190:
      return reduce(RULE_58, 13);
    case 143:
      return reduce(RULE_58, 13);
    case 164:
      return reduce(RULE_58, 13);
    case 203:
      return reduce(RULE_58, 13);
    case 147:
      return reduce(RULE_58, 13);
    case 193:
      return reduce(RULE_58, 13);
    case 182:
      return reduce(RULE_58, 13);
    case 109:
      return reduce(RULE_58, 13);
    case 191:
      return reduce(RULE_58, 13);
    case 131:
      return reduce(RULE_58, 13);
    case 118:
      return reduce(RULE_58, 13);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto753(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action754(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 134:
      stateStack.addFirst(499);
      tokenStack.addFirst(token);
      return true;
    case 140:
      stateStack.addFirst(505);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_58, 3);
    case 101:
      return reduce(RULE_58, 3);
    case 103:
      return reduce(RULE_58, 3);
    case 148:
      return reduce(RULE_58, 3);
    case 112:
      return reduce(RULE_58, 3);
    case 149:
      return reduce(RULE_58, 3);
    case 110:
      return reduce(RULE_58, 3);
    case 108:
      return reduce(RULE_58, 3);
    case 106:
      return reduce(RULE_58, 3);
    case 125:
      return reduce(RULE_58, 3);
    case 142:
      return reduce(RULE_58, 3);
    case 138:
      return reduce(RULE_58, 3);
    case 155:
      return reduce(RULE_58, 3);
    case 150:
      return reduce(RULE_58, 3);
    case 183:
      return reduce(RULE_58, 3);
    case 175:
      return reduce(RULE_58, 3);
    case 169:
      return reduce(RULE_58, 3);
    case 190:
      return reduce(RULE_58, 3);
    case 143:
      return reduce(RULE_58, 3);
    case 164:
      return reduce(RULE_58, 3);
    case 203:
      return reduce(RULE_58, 3);
    case 147:
      return reduce(RULE_58, 3);
    case 193:
      return reduce(RULE_58, 3);
    case 182:
      return reduce(RULE_58, 3);
    case 109:
      return reduce(RULE_58, 3);
    case 191:
      return reduce(RULE_58, 3);
    case 131:
      return reduce(RULE_58, 3);
    case 118:
      return reduce(RULE_58, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, MINUS, AMPERSAND, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action755(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(860);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 1);
    case 173:
      return reduce(RULE_91, 1);
    case 101:
      return reduce(RULE_91, 1);
    case 116:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_91, 1);
    case 112:
      return reduce(RULE_91, 1);
    case 148:
      return reduce(RULE_91, 1);
    case 110:
      return reduce(RULE_91, 1);
    case 149:
      return reduce(RULE_91, 1);
    case 108:
      return reduce(RULE_91, 1);
    case 106:
      return reduce(RULE_91, 1);
    case 125:
      return reduce(RULE_91, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 155:
      return reduce(RULE_91, 1);
    case 138:
      return reduce(RULE_91, 1);
    case 142:
      return reduce(RULE_91, 1);
    case 150:
      return reduce(RULE_91, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 183:
      return reduce(RULE_91, 1);
    case 175:
      return reduce(RULE_91, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 169:
      return reduce(RULE_91, 1);
    case 190:
      return reduce(RULE_91, 1);
    case 143:
      return reduce(RULE_91, 1);
    case 164:
      return reduce(RULE_91, 1);
    case 203:
      return reduce(RULE_91, 1);
    case 193:
      return reduce(RULE_91, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 182:
      return reduce(RULE_91, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 191:
      return reduce(RULE_91, 1);
    case 131:
      return reduce(RULE_91, 1);
    case 118:
      return reduce(RULE_91, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action756(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(861);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_44, 0);
    case 173:
      return reduce(RULE_91, 0);
    case 101:
      return reduce(RULE_91, 0);
    case 116:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_91, 0);
    case 112:
      return reduce(RULE_91, 0);
    case 148:
      return reduce(RULE_91, 0);
    case 110:
      return reduce(RULE_91, 0);
    case 149:
      return reduce(RULE_91, 0);
    case 106:
      return reduce(RULE_91, 0);
    case 108:
      return reduce(RULE_91, 0);
    case 125:
      return reduce(RULE_91, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 155:
      return reduce(RULE_91, 0);
    case 138:
      return reduce(RULE_91, 0);
    case 142:
      return reduce(RULE_91, 0);
    case 150:
      return reduce(RULE_91, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 183:
      return reduce(RULE_91, 0);
    case 175:
      return reduce(RULE_91, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 169:
      return reduce(RULE_91, 0);
    case 190:
      return reduce(RULE_91, 0);
    case 143:
      return reduce(RULE_91, 0);
    case 164:
      return reduce(RULE_91, 0);
    case 203:
      return reduce(RULE_91, 0);
    case 193:
      return reduce(RULE_91, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 182:
      return reduce(RULE_91, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 191:
      return reduce(RULE_91, 0);
    case 131:
      return reduce(RULE_91, 0);
    case 118:
      return reduce(RULE_91, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action757(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_54, 0);
    case 173:
      return reduce(RULE_54, 0);
    case 101:
      return reduce(RULE_54, 0);
    case 155:
      return reduce(RULE_54, 0);
    case 150:
      return reduce(RULE_54, 0);
    case 183:
      return reduce(RULE_54, 0);
    case 175:
      return reduce(RULE_54, 0);
    case 190:
      return reduce(RULE_54, 0);
    case 169:
      return reduce(RULE_54, 0);
    case 164:
      return reduce(RULE_54, 0);
    case 203:
      return reduce(RULE_54, 0);
    case 193:
      return reduce(RULE_54, 0);
    case 182:
      return reduce(RULE_54, 0);
    case 148:
      return reduce(RULE_54, 0);
    case 191:
      return reduce(RULE_54, 0);
    case 131:
      return reduce(RULE_54, 0);
    case 149:
      return reduce(RULE_54, 0);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action758(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(862);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action759(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 12);
    case 173:
      return reduce(RULE_36, 12);
    case 101:
      return reduce(RULE_36, 12);
    case 145:
      return reduce(RULE_36, 12);
    case 116:
      return reduce(RULE_36, 12);
    case 151:
      return reduce(RULE_36, 12);
    case 132:
      return reduce(RULE_36, 12);
    case 134:
      return reduce(RULE_36, 12);
    case 103:
      return reduce(RULE_36, 12);
    case 133:
      return reduce(RULE_36, 12);
    case 120:
      return reduce(RULE_36, 12);
    case 148:
      return reduce(RULE_36, 12);
    case 112:
      return reduce(RULE_36, 12);
    case 149:
      return reduce(RULE_36, 12);
    case 110:
      return reduce(RULE_36, 12);
    case 108:
      return reduce(RULE_36, 12);
    case 106:
      return reduce(RULE_36, 12);
    case 125:
      return reduce(RULE_36, 12);
    case 178:
      return reduce(RULE_36, 12);
    case 155:
      return reduce(RULE_36, 12);
    case 124:
      return reduce(RULE_36, 12);
    case 142:
      return reduce(RULE_36, 12);
    case 146:
      return reduce(RULE_36, 12);
    case 138:
      return reduce(RULE_36, 12);
    case 150:
      return reduce(RULE_36, 12);
    case 183:
      return reduce(RULE_36, 12);
    case 175:
      return reduce(RULE_36, 12);
    case 113:
      return reduce(RULE_36, 12);
    case 169:
      return reduce(RULE_36, 12);
    case 190:
      return reduce(RULE_36, 12);
    case 143:
      return reduce(RULE_36, 12);
    case 164:
      return reduce(RULE_36, 12);
    case 203:
      return reduce(RULE_36, 12);
    case 147:
      return reduce(RULE_36, 12);
    case 130:
      return reduce(RULE_36, 12);
    case 193:
      return reduce(RULE_36, 12);
    case 136:
      return reduce(RULE_36, 12);
    case 129:
      return reduce(RULE_36, 12);
    case 144:
      return reduce(RULE_36, 12);
    case 182:
      return reduce(RULE_36, 12);
    case 122:
      return reduce(RULE_36, 12);
    case 140:
      return reduce(RULE_36, 12);
    case 109:
      return reduce(RULE_36, 12);
    case 191:
      return reduce(RULE_36, 12);
    case 131:
      return reduce(RULE_36, 12);
    case 118:
      return reduce(RULE_36, 12);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action760(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(497);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 5);
    case 173:
      return reduce(RULE_56, 5);
    case 101:
      return reduce(RULE_56, 5);
    case 145:
      return reduce(RULE_56, 5);
    case 116:
      return reduce(RULE_56, 5);
    case 151:
      return reduce(RULE_56, 5);
    case 134:
      return reduce(RULE_56, 5);
    case 103:
      return reduce(RULE_56, 5);
    case 120:
      return reduce(RULE_56, 5);
    case 112:
      return reduce(RULE_56, 5);
    case 148:
      return reduce(RULE_56, 5);
    case 110:
      return reduce(RULE_56, 5);
    case 149:
      return reduce(RULE_56, 5);
    case 108:
      return reduce(RULE_56, 5);
    case 106:
      return reduce(RULE_56, 5);
    case 125:
      return reduce(RULE_56, 5);
    case 178:
      return reduce(RULE_56, 5);
    case 155:
      return reduce(RULE_56, 5);
    case 142:
      return reduce(RULE_56, 5);
    case 146:
      return reduce(RULE_56, 5);
    case 138:
      return reduce(RULE_56, 5);
    case 150:
      return reduce(RULE_56, 5);
    case 183:
      return reduce(RULE_56, 5);
    case 175:
      return reduce(RULE_56, 5);
    case 113:
      return reduce(RULE_56, 5);
    case 190:
      return reduce(RULE_56, 5);
    case 169:
      return reduce(RULE_56, 5);
    case 143:
      return reduce(RULE_56, 5);
    case 164:
      return reduce(RULE_56, 5);
    case 203:
      return reduce(RULE_56, 5);
    case 147:
      return reduce(RULE_56, 5);
    case 130:
      return reduce(RULE_56, 5);
    case 193:
      return reduce(RULE_56, 5);
    case 129:
      return reduce(RULE_56, 5);
    case 136:
      return reduce(RULE_56, 5);
    case 182:
      return reduce(RULE_56, 5);
    case 140:
      return reduce(RULE_56, 5);
    case 109:
      return reduce(RULE_56, 5);
    case 191:
      return reduce(RULE_56, 5);
    case 131:
      return reduce(RULE_56, 5);
    case 118:
      return reduce(RULE_56, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action761(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 6);
    case 173:
      return reduce(RULE_56, 6);
    case 101:
      return reduce(RULE_56, 6);
    case 145:
      return reduce(RULE_56, 6);
    case 116:
      return reduce(RULE_56, 6);
    case 151:
      return reduce(RULE_56, 6);
    case 134:
      return reduce(RULE_56, 6);
    case 103:
      return reduce(RULE_56, 6);
    case 120:
      return reduce(RULE_56, 6);
    case 112:
      return reduce(RULE_56, 6);
    case 148:
      return reduce(RULE_56, 6);
    case 110:
      return reduce(RULE_56, 6);
    case 149:
      return reduce(RULE_56, 6);
    case 108:
      return reduce(RULE_56, 6);
    case 106:
      return reduce(RULE_56, 6);
    case 125:
      return reduce(RULE_56, 6);
    case 178:
      return reduce(RULE_56, 6);
    case 155:
      return reduce(RULE_56, 6);
    case 142:
      return reduce(RULE_56, 6);
    case 146:
      return reduce(RULE_56, 6);
    case 138:
      return reduce(RULE_56, 6);
    case 150:
      return reduce(RULE_56, 6);
    case 183:
      return reduce(RULE_56, 6);
    case 175:
      return reduce(RULE_56, 6);
    case 113:
      return reduce(RULE_56, 6);
    case 190:
      return reduce(RULE_56, 6);
    case 169:
      return reduce(RULE_56, 6);
    case 143:
      return reduce(RULE_56, 6);
    case 164:
      return reduce(RULE_56, 6);
    case 203:
      return reduce(RULE_56, 6);
    case 147:
      return reduce(RULE_56, 6);
    case 130:
      return reduce(RULE_56, 6);
    case 193:
      return reduce(RULE_56, 6);
    case 129:
      return reduce(RULE_56, 6);
    case 136:
      return reduce(RULE_56, 6);
    case 182:
      return reduce(RULE_56, 6);
    case 140:
      return reduce(RULE_56, 6);
    case 109:
      return reduce(RULE_56, 6);
    case 191:
      return reduce(RULE_56, 6);
    case 131:
      return reduce(RULE_56, 6);
    case 118:
      return reduce(RULE_56, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto761(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action762(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(497);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 1);
    case 173:
      return reduce(RULE_56, 1);
    case 101:
      return reduce(RULE_56, 1);
    case 145:
      return reduce(RULE_56, 1);
    case 116:
      return reduce(RULE_56, 1);
    case 151:
      return reduce(RULE_56, 1);
    case 134:
      return reduce(RULE_56, 1);
    case 103:
      return reduce(RULE_56, 1);
    case 120:
      return reduce(RULE_56, 1);
    case 112:
      return reduce(RULE_56, 1);
    case 148:
      return reduce(RULE_56, 1);
    case 110:
      return reduce(RULE_56, 1);
    case 149:
      return reduce(RULE_56, 1);
    case 108:
      return reduce(RULE_56, 1);
    case 106:
      return reduce(RULE_56, 1);
    case 125:
      return reduce(RULE_56, 1);
    case 178:
      return reduce(RULE_56, 1);
    case 155:
      return reduce(RULE_56, 1);
    case 142:
      return reduce(RULE_56, 1);
    case 146:
      return reduce(RULE_56, 1);
    case 138:
      return reduce(RULE_56, 1);
    case 150:
      return reduce(RULE_56, 1);
    case 183:
      return reduce(RULE_56, 1);
    case 175:
      return reduce(RULE_56, 1);
    case 113:
      return reduce(RULE_56, 1);
    case 190:
      return reduce(RULE_56, 1);
    case 169:
      return reduce(RULE_56, 1);
    case 143:
      return reduce(RULE_56, 1);
    case 164:
      return reduce(RULE_56, 1);
    case 203:
      return reduce(RULE_56, 1);
    case 147:
      return reduce(RULE_56, 1);
    case 130:
      return reduce(RULE_56, 1);
    case 193:
      return reduce(RULE_56, 1);
    case 129:
      return reduce(RULE_56, 1);
    case 136:
      return reduce(RULE_56, 1);
    case 182:
      return reduce(RULE_56, 1);
    case 140:
      return reduce(RULE_56, 1);
    case 109:
      return reduce(RULE_56, 1);
    case 191:
      return reduce(RULE_56, 1);
    case 131:
      return reduce(RULE_56, 1);
    case 118:
      return reduce(RULE_56, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action763(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(515);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_56, 2);
    case 173:
      return reduce(RULE_56, 2);
    case 101:
      return reduce(RULE_56, 2);
    case 145:
      return reduce(RULE_56, 2);
    case 116:
      return reduce(RULE_56, 2);
    case 151:
      return reduce(RULE_56, 2);
    case 134:
      return reduce(RULE_56, 2);
    case 103:
      return reduce(RULE_56, 2);
    case 120:
      return reduce(RULE_56, 2);
    case 112:
      return reduce(RULE_56, 2);
    case 148:
      return reduce(RULE_56, 2);
    case 110:
      return reduce(RULE_56, 2);
    case 149:
      return reduce(RULE_56, 2);
    case 108:
      return reduce(RULE_56, 2);
    case 106:
      return reduce(RULE_56, 2);
    case 125:
      return reduce(RULE_56, 2);
    case 178:
      return reduce(RULE_56, 2);
    case 155:
      return reduce(RULE_56, 2);
    case 142:
      return reduce(RULE_56, 2);
    case 146:
      return reduce(RULE_56, 2);
    case 138:
      return reduce(RULE_56, 2);
    case 150:
      return reduce(RULE_56, 2);
    case 183:
      return reduce(RULE_56, 2);
    case 175:
      return reduce(RULE_56, 2);
    case 113:
      return reduce(RULE_56, 2);
    case 190:
      return reduce(RULE_56, 2);
    case 169:
      return reduce(RULE_56, 2);
    case 143:
      return reduce(RULE_56, 2);
    case 164:
      return reduce(RULE_56, 2);
    case 203:
      return reduce(RULE_56, 2);
    case 147:
      return reduce(RULE_56, 2);
    case 130:
      return reduce(RULE_56, 2);
    case 193:
      return reduce(RULE_56, 2);
    case 129:
      return reduce(RULE_56, 2);
    case 136:
      return reduce(RULE_56, 2);
    case 182:
      return reduce(RULE_56, 2);
    case 140:
      return reduce(RULE_56, 2);
    case 109:
      return reduce(RULE_56, 2);
    case 191:
      return reduce(RULE_56, 2);
    case 131:
      return reduce(RULE_56, 2);
    case 118:
      return reduce(RULE_56, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, EXCLAIMATION_MARK, ABSTRACT_KEYWORD, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto763(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action764(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_64, 5);
    case 101:
      return reduce(RULE_64, 5);
    case 103:
      return reduce(RULE_64, 5);
    case 148:
      return reduce(RULE_64, 5);
    case 149:
      return reduce(RULE_64, 5);
    case 110:
      return reduce(RULE_64, 5);
    case 108:
      return reduce(RULE_64, 5);
    case 106:
      return reduce(RULE_64, 5);
    case 155:
      return reduce(RULE_64, 5);
    case 138:
      return reduce(RULE_64, 5);
    case 142:
      return reduce(RULE_64, 5);
    case 150:
      return reduce(RULE_64, 5);
    case 183:
      return reduce(RULE_64, 5);
    case 175:
      return reduce(RULE_64, 5);
    case 190:
      return reduce(RULE_64, 5);
    case 169:
      return reduce(RULE_64, 5);
    case 143:
      return reduce(RULE_64, 5);
    case 164:
      return reduce(RULE_64, 5);
    case 203:
      return reduce(RULE_64, 5);
    case 147:
      return reduce(RULE_64, 5);
    case 193:
      return reduce(RULE_64, 5);
    case 182:
      return reduce(RULE_64, 5);
    case 191:
      return reduce(RULE_64, 5);
    case 109:
      return reduce(RULE_64, 5);
    case 131:
      return reduce(RULE_64, 5);
    case 118:
      return reduce(RULE_64, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action765(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_64, 6);
    case 101:
      return reduce(RULE_64, 6);
    case 103:
      return reduce(RULE_64, 6);
    case 148:
      return reduce(RULE_64, 6);
    case 149:
      return reduce(RULE_64, 6);
    case 110:
      return reduce(RULE_64, 6);
    case 108:
      return reduce(RULE_64, 6);
    case 106:
      return reduce(RULE_64, 6);
    case 155:
      return reduce(RULE_64, 6);
    case 138:
      return reduce(RULE_64, 6);
    case 142:
      return reduce(RULE_64, 6);
    case 150:
      return reduce(RULE_64, 6);
    case 183:
      return reduce(RULE_64, 6);
    case 175:
      return reduce(RULE_64, 6);
    case 190:
      return reduce(RULE_64, 6);
    case 169:
      return reduce(RULE_64, 6);
    case 143:
      return reduce(RULE_64, 6);
    case 164:
      return reduce(RULE_64, 6);
    case 203:
      return reduce(RULE_64, 6);
    case 147:
      return reduce(RULE_64, 6);
    case 193:
      return reduce(RULE_64, 6);
    case 182:
      return reduce(RULE_64, 6);
    case 191:
      return reduce(RULE_64, 6);
    case 109:
      return reduce(RULE_64, 6);
    case 131:
      return reduce(RULE_64, 6);
    case 118:
      return reduce(RULE_64, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action766(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_64, 1);
    case 101:
      return reduce(RULE_64, 1);
    case 103:
      return reduce(RULE_64, 1);
    case 148:
      return reduce(RULE_64, 1);
    case 149:
      return reduce(RULE_64, 1);
    case 110:
      return reduce(RULE_64, 1);
    case 108:
      return reduce(RULE_64, 1);
    case 106:
      return reduce(RULE_64, 1);
    case 155:
      return reduce(RULE_64, 1);
    case 138:
      return reduce(RULE_64, 1);
    case 142:
      return reduce(RULE_64, 1);
    case 150:
      return reduce(RULE_64, 1);
    case 183:
      return reduce(RULE_64, 1);
    case 175:
      return reduce(RULE_64, 1);
    case 190:
      return reduce(RULE_64, 1);
    case 169:
      return reduce(RULE_64, 1);
    case 143:
      return reduce(RULE_64, 1);
    case 164:
      return reduce(RULE_64, 1);
    case 203:
      return reduce(RULE_64, 1);
    case 147:
      return reduce(RULE_64, 1);
    case 193:
      return reduce(RULE_64, 1);
    case 182:
      return reduce(RULE_64, 1);
    case 191:
      return reduce(RULE_64, 1);
    case 109:
      return reduce(RULE_64, 1);
    case 131:
      return reduce(RULE_64, 1);
    case 118:
      return reduce(RULE_64, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action767(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_64, 2);
    case 101:
      return reduce(RULE_64, 2);
    case 103:
      return reduce(RULE_64, 2);
    case 148:
      return reduce(RULE_64, 2);
    case 149:
      return reduce(RULE_64, 2);
    case 110:
      return reduce(RULE_64, 2);
    case 108:
      return reduce(RULE_64, 2);
    case 106:
      return reduce(RULE_64, 2);
    case 155:
      return reduce(RULE_64, 2);
    case 138:
      return reduce(RULE_64, 2);
    case 142:
      return reduce(RULE_64, 2);
    case 150:
      return reduce(RULE_64, 2);
    case 183:
      return reduce(RULE_64, 2);
    case 175:
      return reduce(RULE_64, 2);
    case 190:
      return reduce(RULE_64, 2);
    case 169:
      return reduce(RULE_64, 2);
    case 143:
      return reduce(RULE_64, 2);
    case 164:
      return reduce(RULE_64, 2);
    case 203:
      return reduce(RULE_64, 2);
    case 147:
      return reduce(RULE_64, 2);
    case 193:
      return reduce(RULE_64, 2);
    case 182:
      return reduce(RULE_64, 2);
    case 191:
      return reduce(RULE_64, 2);
    case 109:
      return reduce(RULE_64, 2);
    case 131:
      return reduce(RULE_64, 2);
    case 118:
      return reduce(RULE_64, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action768(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 11);
    case 101:
      return reduce(RULE_63, 11);
    case 103:
      return reduce(RULE_63, 11);
    case 148:
      return reduce(RULE_63, 11);
    case 149:
      return reduce(RULE_63, 11);
    case 110:
      return reduce(RULE_63, 11);
    case 108:
      return reduce(RULE_63, 11);
    case 106:
      return reduce(RULE_63, 11);
    case 155:
      return reduce(RULE_63, 11);
    case 138:
      return reduce(RULE_63, 11);
    case 142:
      return reduce(RULE_63, 11);
    case 150:
      return reduce(RULE_63, 11);
    case 183:
      return reduce(RULE_63, 11);
    case 175:
      return reduce(RULE_63, 11);
    case 190:
      return reduce(RULE_63, 11);
    case 169:
      return reduce(RULE_63, 11);
    case 143:
      return reduce(RULE_63, 11);
    case 164:
      return reduce(RULE_63, 11);
    case 203:
      return reduce(RULE_63, 11);
    case 147:
      return reduce(RULE_63, 11);
    case 193:
      return reduce(RULE_63, 11);
    case 182:
      return reduce(RULE_63, 11);
    case 191:
      return reduce(RULE_63, 11);
    case 109:
      return reduce(RULE_63, 11);
    case 131:
      return reduce(RULE_63, 11);
    case 118:
      return reduce(RULE_63, 11);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action769(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 12);
    case 101:
      return reduce(RULE_63, 12);
    case 103:
      return reduce(RULE_63, 12);
    case 148:
      return reduce(RULE_63, 12);
    case 149:
      return reduce(RULE_63, 12);
    case 110:
      return reduce(RULE_63, 12);
    case 108:
      return reduce(RULE_63, 12);
    case 106:
      return reduce(RULE_63, 12);
    case 155:
      return reduce(RULE_63, 12);
    case 138:
      return reduce(RULE_63, 12);
    case 142:
      return reduce(RULE_63, 12);
    case 150:
      return reduce(RULE_63, 12);
    case 183:
      return reduce(RULE_63, 12);
    case 175:
      return reduce(RULE_63, 12);
    case 190:
      return reduce(RULE_63, 12);
    case 169:
      return reduce(RULE_63, 12);
    case 143:
      return reduce(RULE_63, 12);
    case 164:
      return reduce(RULE_63, 12);
    case 203:
      return reduce(RULE_63, 12);
    case 147:
      return reduce(RULE_63, 12);
    case 193:
      return reduce(RULE_63, 12);
    case 182:
      return reduce(RULE_63, 12);
    case 191:
      return reduce(RULE_63, 12);
    case 109:
      return reduce(RULE_63, 12);
    case 131:
      return reduce(RULE_63, 12);
    case 118:
      return reduce(RULE_63, 12);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action770(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_64, 7);
    case 101:
      return reduce(RULE_64, 7);
    case 103:
      return reduce(RULE_64, 7);
    case 148:
      return reduce(RULE_64, 7);
    case 149:
      return reduce(RULE_64, 7);
    case 110:
      return reduce(RULE_64, 7);
    case 108:
      return reduce(RULE_64, 7);
    case 106:
      return reduce(RULE_64, 7);
    case 155:
      return reduce(RULE_64, 7);
    case 138:
      return reduce(RULE_64, 7);
    case 142:
      return reduce(RULE_64, 7);
    case 150:
      return reduce(RULE_64, 7);
    case 183:
      return reduce(RULE_64, 7);
    case 175:
      return reduce(RULE_64, 7);
    case 190:
      return reduce(RULE_64, 7);
    case 169:
      return reduce(RULE_64, 7);
    case 143:
      return reduce(RULE_64, 7);
    case 164:
      return reduce(RULE_64, 7);
    case 203:
      return reduce(RULE_64, 7);
    case 147:
      return reduce(RULE_64, 7);
    case 193:
      return reduce(RULE_64, 7);
    case 182:
      return reduce(RULE_64, 7);
    case 191:
      return reduce(RULE_64, 7);
    case 109:
      return reduce(RULE_64, 7);
    case 131:
      return reduce(RULE_64, 7);
    case 118:
      return reduce(RULE_64, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action771(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_64, 8);
    case 101:
      return reduce(RULE_64, 8);
    case 103:
      return reduce(RULE_64, 8);
    case 148:
      return reduce(RULE_64, 8);
    case 149:
      return reduce(RULE_64, 8);
    case 110:
      return reduce(RULE_64, 8);
    case 108:
      return reduce(RULE_64, 8);
    case 106:
      return reduce(RULE_64, 8);
    case 155:
      return reduce(RULE_64, 8);
    case 138:
      return reduce(RULE_64, 8);
    case 142:
      return reduce(RULE_64, 8);
    case 150:
      return reduce(RULE_64, 8);
    case 183:
      return reduce(RULE_64, 8);
    case 175:
      return reduce(RULE_64, 8);
    case 190:
      return reduce(RULE_64, 8);
    case 169:
      return reduce(RULE_64, 8);
    case 143:
      return reduce(RULE_64, 8);
    case 164:
      return reduce(RULE_64, 8);
    case 203:
      return reduce(RULE_64, 8);
    case 147:
      return reduce(RULE_64, 8);
    case 193:
      return reduce(RULE_64, 8);
    case 182:
      return reduce(RULE_64, 8);
    case 191:
      return reduce(RULE_64, 8);
    case 109:
      return reduce(RULE_64, 8);
    case 131:
      return reduce(RULE_64, 8);
    case 118:
      return reduce(RULE_64, 8);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action772(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 3);
    case 101:
      return reduce(RULE_63, 3);
    case 103:
      return reduce(RULE_63, 3);
    case 148:
      return reduce(RULE_63, 3);
    case 149:
      return reduce(RULE_63, 3);
    case 110:
      return reduce(RULE_63, 3);
    case 108:
      return reduce(RULE_63, 3);
    case 106:
      return reduce(RULE_63, 3);
    case 155:
      return reduce(RULE_63, 3);
    case 138:
      return reduce(RULE_63, 3);
    case 142:
      return reduce(RULE_63, 3);
    case 150:
      return reduce(RULE_63, 3);
    case 183:
      return reduce(RULE_63, 3);
    case 175:
      return reduce(RULE_63, 3);
    case 190:
      return reduce(RULE_63, 3);
    case 169:
      return reduce(RULE_63, 3);
    case 143:
      return reduce(RULE_63, 3);
    case 164:
      return reduce(RULE_63, 3);
    case 203:
      return reduce(RULE_63, 3);
    case 147:
      return reduce(RULE_63, 3);
    case 193:
      return reduce(RULE_63, 3);
    case 182:
      return reduce(RULE_63, 3);
    case 191:
      return reduce(RULE_63, 3);
    case 109:
      return reduce(RULE_63, 3);
    case 131:
      return reduce(RULE_63, 3);
    case 118:
      return reduce(RULE_63, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action773(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 4);
    case 101:
      return reduce(RULE_63, 4);
    case 103:
      return reduce(RULE_63, 4);
    case 148:
      return reduce(RULE_63, 4);
    case 149:
      return reduce(RULE_63, 4);
    case 110:
      return reduce(RULE_63, 4);
    case 108:
      return reduce(RULE_63, 4);
    case 106:
      return reduce(RULE_63, 4);
    case 155:
      return reduce(RULE_63, 4);
    case 138:
      return reduce(RULE_63, 4);
    case 142:
      return reduce(RULE_63, 4);
    case 150:
      return reduce(RULE_63, 4);
    case 183:
      return reduce(RULE_63, 4);
    case 175:
      return reduce(RULE_63, 4);
    case 190:
      return reduce(RULE_63, 4);
    case 169:
      return reduce(RULE_63, 4);
    case 143:
      return reduce(RULE_63, 4);
    case 164:
      return reduce(RULE_63, 4);
    case 203:
      return reduce(RULE_63, 4);
    case 147:
      return reduce(RULE_63, 4);
    case 193:
      return reduce(RULE_63, 4);
    case 182:
      return reduce(RULE_63, 4);
    case 191:
      return reduce(RULE_63, 4);
    case 109:
      return reduce(RULE_63, 4);
    case 131:
      return reduce(RULE_63, 4);
    case 118:
      return reduce(RULE_63, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action774(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 7);
    case 101:
      return reduce(RULE_63, 7);
    case 103:
      return reduce(RULE_63, 7);
    case 148:
      return reduce(RULE_63, 7);
    case 149:
      return reduce(RULE_63, 7);
    case 110:
      return reduce(RULE_63, 7);
    case 108:
      return reduce(RULE_63, 7);
    case 106:
      return reduce(RULE_63, 7);
    case 155:
      return reduce(RULE_63, 7);
    case 138:
      return reduce(RULE_63, 7);
    case 142:
      return reduce(RULE_63, 7);
    case 150:
      return reduce(RULE_63, 7);
    case 183:
      return reduce(RULE_63, 7);
    case 175:
      return reduce(RULE_63, 7);
    case 190:
      return reduce(RULE_63, 7);
    case 169:
      return reduce(RULE_63, 7);
    case 143:
      return reduce(RULE_63, 7);
    case 164:
      return reduce(RULE_63, 7);
    case 203:
      return reduce(RULE_63, 7);
    case 147:
      return reduce(RULE_63, 7);
    case 193:
      return reduce(RULE_63, 7);
    case 182:
      return reduce(RULE_63, 7);
    case 191:
      return reduce(RULE_63, 7);
    case 109:
      return reduce(RULE_63, 7);
    case 131:
      return reduce(RULE_63, 7);
    case 118:
      return reduce(RULE_63, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action775(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 8);
    case 101:
      return reduce(RULE_63, 8);
    case 103:
      return reduce(RULE_63, 8);
    case 148:
      return reduce(RULE_63, 8);
    case 149:
      return reduce(RULE_63, 8);
    case 110:
      return reduce(RULE_63, 8);
    case 108:
      return reduce(RULE_63, 8);
    case 106:
      return reduce(RULE_63, 8);
    case 155:
      return reduce(RULE_63, 8);
    case 138:
      return reduce(RULE_63, 8);
    case 142:
      return reduce(RULE_63, 8);
    case 150:
      return reduce(RULE_63, 8);
    case 183:
      return reduce(RULE_63, 8);
    case 175:
      return reduce(RULE_63, 8);
    case 190:
      return reduce(RULE_63, 8);
    case 169:
      return reduce(RULE_63, 8);
    case 143:
      return reduce(RULE_63, 8);
    case 164:
      return reduce(RULE_63, 8);
    case 203:
      return reduce(RULE_63, 8);
    case 147:
      return reduce(RULE_63, 8);
    case 193:
      return reduce(RULE_63, 8);
    case 182:
      return reduce(RULE_63, 8);
    case 191:
      return reduce(RULE_63, 8);
    case 109:
      return reduce(RULE_63, 8);
    case 131:
      return reduce(RULE_63, 8);
    case 118:
      return reduce(RULE_63, 8);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action776(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      stateStack.addFirst(863);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COLON});
    }
  }

  private final boolean action777(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_64, 3);
    case 101:
      return reduce(RULE_64, 3);
    case 103:
      return reduce(RULE_64, 3);
    case 148:
      return reduce(RULE_64, 3);
    case 149:
      return reduce(RULE_64, 3);
    case 110:
      return reduce(RULE_64, 3);
    case 108:
      return reduce(RULE_64, 3);
    case 106:
      return reduce(RULE_64, 3);
    case 155:
      return reduce(RULE_64, 3);
    case 138:
      return reduce(RULE_64, 3);
    case 142:
      return reduce(RULE_64, 3);
    case 150:
      return reduce(RULE_64, 3);
    case 183:
      return reduce(RULE_64, 3);
    case 175:
      return reduce(RULE_64, 3);
    case 190:
      return reduce(RULE_64, 3);
    case 169:
      return reduce(RULE_64, 3);
    case 143:
      return reduce(RULE_64, 3);
    case 164:
      return reduce(RULE_64, 3);
    case 203:
      return reduce(RULE_64, 3);
    case 147:
      return reduce(RULE_64, 3);
    case 193:
      return reduce(RULE_64, 3);
    case 182:
      return reduce(RULE_64, 3);
    case 191:
      return reduce(RULE_64, 3);
    case 109:
      return reduce(RULE_64, 3);
    case 131:
      return reduce(RULE_64, 3);
    case 118:
      return reduce(RULE_64, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action778(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_64, 4);
    case 101:
      return reduce(RULE_64, 4);
    case 103:
      return reduce(RULE_64, 4);
    case 148:
      return reduce(RULE_64, 4);
    case 149:
      return reduce(RULE_64, 4);
    case 110:
      return reduce(RULE_64, 4);
    case 108:
      return reduce(RULE_64, 4);
    case 106:
      return reduce(RULE_64, 4);
    case 155:
      return reduce(RULE_64, 4);
    case 138:
      return reduce(RULE_64, 4);
    case 142:
      return reduce(RULE_64, 4);
    case 150:
      return reduce(RULE_64, 4);
    case 183:
      return reduce(RULE_64, 4);
    case 175:
      return reduce(RULE_64, 4);
    case 190:
      return reduce(RULE_64, 4);
    case 169:
      return reduce(RULE_64, 4);
    case 143:
      return reduce(RULE_64, 4);
    case 164:
      return reduce(RULE_64, 4);
    case 203:
      return reduce(RULE_64, 4);
    case 147:
      return reduce(RULE_64, 4);
    case 193:
      return reduce(RULE_64, 4);
    case 182:
      return reduce(RULE_64, 4);
    case 191:
      return reduce(RULE_64, 4);
    case 109:
      return reduce(RULE_64, 4);
    case 131:
      return reduce(RULE_64, 4);
    case 118:
      return reduce(RULE_64, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action779(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 15);
    case 101:
      return reduce(RULE_63, 15);
    case 103:
      return reduce(RULE_63, 15);
    case 148:
      return reduce(RULE_63, 15);
    case 149:
      return reduce(RULE_63, 15);
    case 110:
      return reduce(RULE_63, 15);
    case 108:
      return reduce(RULE_63, 15);
    case 106:
      return reduce(RULE_63, 15);
    case 155:
      return reduce(RULE_63, 15);
    case 138:
      return reduce(RULE_63, 15);
    case 142:
      return reduce(RULE_63, 15);
    case 150:
      return reduce(RULE_63, 15);
    case 183:
      return reduce(RULE_63, 15);
    case 175:
      return reduce(RULE_63, 15);
    case 190:
      return reduce(RULE_63, 15);
    case 169:
      return reduce(RULE_63, 15);
    case 143:
      return reduce(RULE_63, 15);
    case 164:
      return reduce(RULE_63, 15);
    case 203:
      return reduce(RULE_63, 15);
    case 147:
      return reduce(RULE_63, 15);
    case 193:
      return reduce(RULE_63, 15);
    case 182:
      return reduce(RULE_63, 15);
    case 191:
      return reduce(RULE_63, 15);
    case 109:
      return reduce(RULE_63, 15);
    case 131:
      return reduce(RULE_63, 15);
    case 118:
      return reduce(RULE_63, 15);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action780(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 16);
    case 101:
      return reduce(RULE_63, 16);
    case 103:
      return reduce(RULE_63, 16);
    case 148:
      return reduce(RULE_63, 16);
    case 149:
      return reduce(RULE_63, 16);
    case 110:
      return reduce(RULE_63, 16);
    case 108:
      return reduce(RULE_63, 16);
    case 106:
      return reduce(RULE_63, 16);
    case 155:
      return reduce(RULE_63, 16);
    case 138:
      return reduce(RULE_63, 16);
    case 142:
      return reduce(RULE_63, 16);
    case 150:
      return reduce(RULE_63, 16);
    case 183:
      return reduce(RULE_63, 16);
    case 175:
      return reduce(RULE_63, 16);
    case 190:
      return reduce(RULE_63, 16);
    case 169:
      return reduce(RULE_63, 16);
    case 143:
      return reduce(RULE_63, 16);
    case 164:
      return reduce(RULE_63, 16);
    case 203:
      return reduce(RULE_63, 16);
    case 147:
      return reduce(RULE_63, 16);
    case 193:
      return reduce(RULE_63, 16);
    case 182:
      return reduce(RULE_63, 16);
    case 191:
      return reduce(RULE_63, 16);
    case 109:
      return reduce(RULE_63, 16);
    case 131:
      return reduce(RULE_63, 16);
    case 118:
      return reduce(RULE_63, 16);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action781(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_60, 7);
    case 173:
      return reduce(RULE_60, 7);
    case 101:
      return reduce(RULE_60, 7);
    case 155:
      return reduce(RULE_60, 7);
    case 150:
      return reduce(RULE_60, 7);
    case 183:
      return reduce(RULE_60, 7);
    case 175:
      return reduce(RULE_60, 7);
    case 169:
      return reduce(RULE_60, 7);
    case 190:
      return reduce(RULE_60, 7);
    case 164:
      return reduce(RULE_60, 7);
    case 203:
      return reduce(RULE_60, 7);
    case 147:
      return reduce(RULE_60, 7);
    case 193:
      return reduce(RULE_60, 7);
    case 182:
      return reduce(RULE_60, 7);
    case 148:
      return reduce(RULE_60, 7);
    case 109:
      return reduce(RULE_60, 7);
    case 191:
      return reduce(RULE_60, 7);
    case 131:
      return reduce(RULE_60, 7);
    case 149:
      return reduce(RULE_60, 7);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, COMMA, RSQUARE, LBRACE});
    }
  }

  private final boolean action782(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 108:
      return reduce(RULE_60, 8);
    case 173:
      return reduce(RULE_60, 8);
    case 101:
      return reduce(RULE_60, 8);
    case 155:
      return reduce(RULE_60, 8);
    case 150:
      return reduce(RULE_60, 8);
    case 183:
      return reduce(RULE_60, 8);
    case 175:
      return reduce(RULE_60, 8);
    case 169:
      return reduce(RULE_60, 8);
    case 190:
      return reduce(RULE_60, 8);
    case 164:
      return reduce(RULE_60, 8);
    case 203:
      return reduce(RULE_60, 8);
    case 147:
      return reduce(RULE_60, 8);
    case 193:
      return reduce(RULE_60, 8);
    case 182:
      return reduce(RULE_60, 8);
    case 148:
      return reduce(RULE_60, 8);
    case 109:
      return reduce(RULE_60, 8);
    case 191:
      return reduce(RULE_60, 8);
    case 131:
      return reduce(RULE_60, 8);
    case 149:
      return reduce(RULE_60, 8);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action783(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_63, 19);
    case 101:
      return reduce(RULE_63, 19);
    case 103:
      return reduce(RULE_63, 19);
    case 148:
      return reduce(RULE_63, 19);
    case 149:
      return reduce(RULE_63, 19);
    case 110:
      return reduce(RULE_63, 19);
    case 108:
      return reduce(RULE_63, 19);
    case 106:
      return reduce(RULE_63, 19);
    case 155:
      return reduce(RULE_63, 19);
    case 138:
      return reduce(RULE_63, 19);
    case 142:
      return reduce(RULE_63, 19);
    case 150:
      return reduce(RULE_63, 19);
    case 183:
      return reduce(RULE_63, 19);
    case 175:
      return reduce(RULE_63, 19);
    case 190:
      return reduce(RULE_63, 19);
    case 169:
      return reduce(RULE_63, 19);
    case 143:
      return reduce(RULE_63, 19);
    case 164:
      return reduce(RULE_63, 19);
    case 203:
      return reduce(RULE_63, 19);
    case 147:
      return reduce(RULE_63, 19);
    case 193:
      return reduce(RULE_63, 19);
    case 182:
      return reduce(RULE_63, 19);
    case 191:
      return reduce(RULE_63, 19);
    case 109:
      return reduce(RULE_63, 19);
    case 131:
      return reduce(RULE_63, 19);
    case 118:
      return reduce(RULE_63, 19);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action784(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_63, 20);
    case 101:
      return reduce(RULE_63, 20);
    case 103:
      return reduce(RULE_63, 20);
    case 148:
      return reduce(RULE_63, 20);
    case 149:
      return reduce(RULE_63, 20);
    case 110:
      return reduce(RULE_63, 20);
    case 108:
      return reduce(RULE_63, 20);
    case 106:
      return reduce(RULE_63, 20);
    case 155:
      return reduce(RULE_63, 20);
    case 138:
      return reduce(RULE_63, 20);
    case 142:
      return reduce(RULE_63, 20);
    case 150:
      return reduce(RULE_63, 20);
    case 183:
      return reduce(RULE_63, 20);
    case 175:
      return reduce(RULE_63, 20);
    case 190:
      return reduce(RULE_63, 20);
    case 169:
      return reduce(RULE_63, 20);
    case 143:
      return reduce(RULE_63, 20);
    case 164:
      return reduce(RULE_63, 20);
    case 203:
      return reduce(RULE_63, 20);
    case 147:
      return reduce(RULE_63, 20);
    case 193:
      return reduce(RULE_63, 20);
    case 182:
      return reduce(RULE_63, 20);
    case 191:
      return reduce(RULE_63, 20);
    case 109:
      return reduce(RULE_63, 20);
    case 131:
      return reduce(RULE_63, 20);
    case 118:
      return reduce(RULE_63, 20);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, CARET, COLON, EXCLAIMATION_MARK_EQUALS, PIPE, ABSTRACT_KEYWORD, QUESTION_MARK, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action785(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(864);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action786(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_92, 0);
    case 165:
      return reduce(RULE_92, 0);
    case 98:
      return reduce(RULE_92, 0);
    case 142:
      return reduce(RULE_92, 0);
    case 181:
      return reduce(RULE_92, 0);
    case 186:
      return reduce(RULE_92, 0);
    case 201:
      return reduce(RULE_92, 0);
    case 128:
      return reduce(RULE_92, 0);
    case 171:
      return reduce(RULE_92, 0);
    case 179:
      return reduce(RULE_92, 0);
    case 202:
      return reduce(RULE_92, 0);
    case 132:
      return reduce(RULE_92, 0);
    case 205:
      return reduce(RULE_92, 0);
    case 133:
      return reduce(RULE_92, 0);
    case 158:
      return reduce(RULE_92, 0);
    case 131:
      return reduce(RULE_92, 0);
    case 192:
      return reduce(RULE_92, 0);
    case 200:
      return reduce(RULE_92, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final boolean action787(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(865);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action788(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto788(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 866;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action789(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(867);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(868);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 148:
      return reduce(RULE_93, 5);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, DOUBLE_PLUS, DOUBLE_MINUS, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto789(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 13: return 219;
    case 14: return 220;
    case 94: return 869;
    case 93: return 332;
    case 52: return 224;
    case 30: return 378;
    case 97: return 235;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 241;
    case 28: return 589;
    case 15: return 870;
    case 43: return 871;
    case 23: return 872;
    default: return -1;
    }
  }

  private final boolean action790(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(873);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action791(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_78, 1);
    case 156:
      return reduce(RULE_78, 1);
    case 102:
      return reduce(RULE_78, 1);
    case 181:
      return reduce(RULE_78, 1);
    case 184:
      return reduce(RULE_78, 1);
    case 201:
      return reduce(RULE_78, 1);
    case 134:
      return reduce(RULE_78, 1);
    case 132:
      return reduce(RULE_78, 1);
    case 202:
      return reduce(RULE_78, 1);
    case 185:
      return reduce(RULE_78, 1);
    case 153:
      return reduce(RULE_78, 1);
    case 133:
      return reduce(RULE_78, 1);
    case 205:
      return reduce(RULE_78, 1);
    case 168:
      return reduce(RULE_78, 1);
    case 194:
      return reduce(RULE_78, 1);
    case 200:
      return reduce(RULE_78, 1);
    case 192:
      return reduce(RULE_78, 1);
    case 165:
      return reduce(RULE_78, 1);
    case 98:
      return reduce(RULE_78, 1);
    case 142:
      return reduce(RULE_78, 1);
    case 124:
      return reduce(RULE_78, 1);
    case 150:
      return reduce(RULE_78, 1);
    case 186:
      return reduce(RULE_78, 1);
    case 198:
      return reduce(RULE_78, 1);
    case 100:
      return reduce(RULE_78, 1);
    case 128:
      return reduce(RULE_78, 1);
    case 171:
      return reduce(RULE_78, 1);
    case 179:
      return reduce(RULE_78, 1);
    case 164:
      return reduce(RULE_78, 1);
    case 195:
      return reduce(RULE_78, 1);
    case 99:
      return reduce(RULE_78, 1);
    case 158:
      return reduce(RULE_78, 1);
    case 131:
      return reduce(RULE_78, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, MINUS, TILDE, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, EXCLAIMATION_MARK, SEMICOLON, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action792(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto792(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 698;
    case 30: return 874;
    case 97: return 700;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 875;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action793(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto793(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 569;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 570;
    case 95: return 876;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 572;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 573;
    default: return -1;
    }
  }

  private final boolean action794(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto794(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 569;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 570;
    case 95: return 877;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 572;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 573;
    default: return -1;
    }
  }

  private final boolean action795(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_79, 0);
    case 173:
      return reduce(RULE_79, 0);
    case 101:
      return reduce(RULE_79, 0);
    case 145:
      return reduce(RULE_79, 0);
    case 116:
      return reduce(RULE_79, 0);
    case 151:
      return reduce(RULE_79, 0);
    case 132:
      return reduce(RULE_79, 0);
    case 134:
      return reduce(RULE_79, 0);
    case 103:
      return reduce(RULE_79, 0);
    case 133:
      return reduce(RULE_79, 0);
    case 120:
      return reduce(RULE_79, 0);
    case 148:
      return reduce(RULE_79, 0);
    case 112:
      return reduce(RULE_79, 0);
    case 149:
      return reduce(RULE_79, 0);
    case 110:
      return reduce(RULE_79, 0);
    case 108:
      return reduce(RULE_79, 0);
    case 106:
      return reduce(RULE_79, 0);
    case 125:
      return reduce(RULE_79, 0);
    case 178:
      return reduce(RULE_79, 0);
    case 155:
      return reduce(RULE_79, 0);
    case 124:
      return reduce(RULE_79, 0);
    case 142:
      return reduce(RULE_79, 0);
    case 146:
      return reduce(RULE_79, 0);
    case 138:
      return reduce(RULE_79, 0);
    case 150:
      return reduce(RULE_79, 0);
    case 183:
      return reduce(RULE_79, 0);
    case 175:
      return reduce(RULE_79, 0);
    case 113:
      return reduce(RULE_79, 0);
    case 190:
      return reduce(RULE_79, 0);
    case 169:
      return reduce(RULE_79, 0);
    case 143:
      return reduce(RULE_79, 0);
    case 164:
      return reduce(RULE_79, 0);
    case 203:
      return reduce(RULE_79, 0);
    case 147:
      return reduce(RULE_79, 0);
    case 130:
      return reduce(RULE_79, 0);
    case 193:
      return reduce(RULE_79, 0);
    case 144:
      return reduce(RULE_79, 0);
    case 136:
      return reduce(RULE_79, 0);
    case 129:
      return reduce(RULE_79, 0);
    case 182:
      return reduce(RULE_79, 0);
    case 122:
      return reduce(RULE_79, 0);
    case 140:
      return reduce(RULE_79, 0);
    case 109:
      return reduce(RULE_79, 0);
    case 191:
      return reduce(RULE_79, 0);
    case 131:
      return reduce(RULE_79, 0);
    case 118:
      return reduce(RULE_79, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, FINAL_KEYWORD, SELFISH_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action796(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto796(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 754;
    case 30: return 878;
    case 97: return 700;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 879;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action797(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto797(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 569;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 570;
    case 95: return 880;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 572;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 573;
    default: return -1;
    }
  }

  private final boolean action798(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(881);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_91, 1);
    case 125:
      return reduce(RULE_91, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_91, 1);
    case 142:
      return reduce(RULE_91, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 116:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_91, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_91, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_91, 1);
    case 148:
      return reduce(RULE_91, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_91, 1);
    case 118:
      return reduce(RULE_91, 1);
    default: throw new BadTokenException(token, new Object[] {CARET, EXCLAIMATION_MARK_EQUALS, FORWARD_SLASH, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, RANGLE, DOUBLE_COLON, DOUBLE_PERCENT, DOUBLE_LANGLE, STAR, QUESTION_MARK_COLON, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, QUESTION_MARK_DOT, PERCENT, PLUS, RPAREN, DOUBLE_EQUALS, DOT, COMMA, DOUBLE_AMPERSAND, DOUBLE_PIPE});
    }
  }

  private final boolean action799(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(882);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_91, 0);
    case 125:
      return reduce(RULE_91, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_91, 0);
    case 142:
      return reduce(RULE_91, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 116:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_91, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_91, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_91, 0);
    case 148:
      return reduce(RULE_91, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_91, 0);
    case 118:
      return reduce(RULE_91, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE, PERCENT, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action800(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 203:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FLOAT_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto800(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 614;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 17: return 883;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action801(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(884);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(819);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action802(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_84, 0);
    case 156:
      return reduce(RULE_84, 0);
    case 102:
      return reduce(RULE_84, 0);
    case 101:
      return reduce(RULE_84, 0);
    case 154:
      return reduce(RULE_84, 0);
    case 181:
      return reduce(RULE_84, 0);
    case 174:
      return reduce(RULE_84, 0);
    case 184:
      return reduce(RULE_84, 0);
    case 201:
      return reduce(RULE_84, 0);
    case 202:
      return reduce(RULE_84, 0);
    case 132:
      return reduce(RULE_84, 0);
    case 185:
      return reduce(RULE_84, 0);
    case 133:
      return reduce(RULE_84, 0);
    case 205:
      return reduce(RULE_84, 0);
    case 168:
      return reduce(RULE_84, 0);
    case 196:
      return reduce(RULE_84, 0);
    case 194:
      return reduce(RULE_84, 0);
    case 199:
      return reduce(RULE_84, 0);
    case 200:
      return reduce(RULE_84, 0);
    case 192:
      return reduce(RULE_84, 0);
    case 165:
      return reduce(RULE_84, 0);
    case 98:
      return reduce(RULE_84, 0);
    case 155:
      return reduce(RULE_84, 0);
    case 142:
      return reduce(RULE_84, 0);
    case 189:
      return reduce(RULE_84, 0);
    case 183:
      return reduce(RULE_84, 0);
    case 186:
      return reduce(RULE_84, 0);
    case 163:
      return reduce(RULE_84, 0);
    case 198:
      return reduce(RULE_84, 0);
    case 175:
      return reduce(RULE_84, 0);
    case 100:
      return reduce(RULE_84, 0);
    case 128:
      return reduce(RULE_84, 0);
    case 171:
      return reduce(RULE_84, 0);
    case 190:
      return reduce(RULE_84, 0);
    case 169:
      return reduce(RULE_84, 0);
    case 179:
      return reduce(RULE_84, 0);
    case 164:
      return reduce(RULE_84, 0);
    case 203:
      return reduce(RULE_84, 0);
    case 172:
      return reduce(RULE_84, 0);
    case 147:
      return reduce(RULE_84, 0);
    case 157:
      return reduce(RULE_84, 0);
    case 195:
      return reduce(RULE_84, 0);
    case 207:
      return reduce(RULE_84, 0);
    case 193:
      return reduce(RULE_84, 0);
    case 99:
      return reduce(RULE_84, 0);
    case 115:
      return reduce(RULE_84, 0);
    case 119:
      return reduce(RULE_84, 0);
    case 182:
      return reduce(RULE_84, 0);
    case 158:
      return reduce(RULE_84, 0);
    case 131:
      return reduce(RULE_84, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action803(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto803(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 885;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action804(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 2);
    case 154:
      return reduce(RULE_83, 2);
    case 181:
      return reduce(RULE_83, 2);
    case 174:
      return reduce(RULE_83, 2);
    case 184:
      return reduce(RULE_83, 2);
    case 134:
      return reduce(RULE_83, 2);
    case 153:
      return reduce(RULE_83, 2);
    case 185:
      return reduce(RULE_83, 2);
    case 205:
      return reduce(RULE_83, 2);
    case 196:
      return reduce(RULE_83, 2);
    case 98:
      return reduce(RULE_83, 2);
    case 155:
      return reduce(RULE_83, 2);
    case 142:
      return reduce(RULE_83, 2);
    case 124:
      return reduce(RULE_83, 2);
    case 186:
      return reduce(RULE_83, 2);
    case 175:
      return reduce(RULE_83, 2);
    case 128:
      return reduce(RULE_83, 2);
    case 179:
      return reduce(RULE_83, 2);
    case 164:
      return reduce(RULE_83, 2);
    case 203:
      return reduce(RULE_83, 2);
    case 172:
      return reduce(RULE_83, 2);
    case 195:
      return reduce(RULE_83, 2);
    case 157:
      return reduce(RULE_83, 2);
    case 193:
      return reduce(RULE_83, 2);
    case 158:
      return reduce(RULE_83, 2);
    case 131:
      return reduce(RULE_83, 2);
    case 156:
      return reduce(RULE_83, 2);
    case 102:
      return reduce(RULE_83, 2);
    case 101:
      return reduce(RULE_83, 2);
    case 201:
      return reduce(RULE_83, 2);
    case 202:
      return reduce(RULE_83, 2);
    case 132:
      return reduce(RULE_83, 2);
    case 133:
      return reduce(RULE_83, 2);
    case 168:
      return reduce(RULE_83, 2);
    case 194:
      return reduce(RULE_83, 2);
    case 199:
      return reduce(RULE_83, 2);
    case 192:
      return reduce(RULE_83, 2);
    case 200:
      return reduce(RULE_83, 2);
    case 165:
      return reduce(RULE_83, 2);
    case 150:
      return reduce(RULE_83, 2);
    case 189:
      return reduce(RULE_83, 2);
    case 183:
      return reduce(RULE_83, 2);
    case 163:
      return reduce(RULE_83, 2);
    case 198:
      return reduce(RULE_83, 2);
    case 100:
      return reduce(RULE_83, 2);
    case 171:
      return reduce(RULE_83, 2);
    case 190:
      return reduce(RULE_83, 2);
    case 169:
      return reduce(RULE_83, 2);
    case 147:
      return reduce(RULE_83, 2);
    case 207:
      return reduce(RULE_83, 2);
    case 119:
      return reduce(RULE_83, 2);
    case 115:
      return reduce(RULE_83, 2);
    case 99:
      return reduce(RULE_83, 2);
    case 182:
      return reduce(RULE_83, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, RBRACE, WHILE_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action805(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto805(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 886;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action806(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 7);
    case 154:
      return reduce(RULE_83, 7);
    case 181:
      return reduce(RULE_83, 7);
    case 174:
      return reduce(RULE_83, 7);
    case 184:
      return reduce(RULE_83, 7);
    case 134:
      return reduce(RULE_83, 7);
    case 153:
      return reduce(RULE_83, 7);
    case 185:
      return reduce(RULE_83, 7);
    case 205:
      return reduce(RULE_83, 7);
    case 196:
      return reduce(RULE_83, 7);
    case 98:
      return reduce(RULE_83, 7);
    case 155:
      return reduce(RULE_83, 7);
    case 142:
      return reduce(RULE_83, 7);
    case 124:
      return reduce(RULE_83, 7);
    case 186:
      return reduce(RULE_83, 7);
    case 175:
      return reduce(RULE_83, 7);
    case 128:
      return reduce(RULE_83, 7);
    case 179:
      return reduce(RULE_83, 7);
    case 164:
      return reduce(RULE_83, 7);
    case 203:
      return reduce(RULE_83, 7);
    case 172:
      return reduce(RULE_83, 7);
    case 195:
      return reduce(RULE_83, 7);
    case 157:
      return reduce(RULE_83, 7);
    case 193:
      return reduce(RULE_83, 7);
    case 158:
      return reduce(RULE_83, 7);
    case 131:
      return reduce(RULE_83, 7);
    case 156:
      return reduce(RULE_83, 7);
    case 102:
      return reduce(RULE_83, 7);
    case 101:
      return reduce(RULE_83, 7);
    case 201:
      return reduce(RULE_83, 7);
    case 202:
      return reduce(RULE_83, 7);
    case 132:
      return reduce(RULE_83, 7);
    case 133:
      return reduce(RULE_83, 7);
    case 168:
      return reduce(RULE_83, 7);
    case 194:
      return reduce(RULE_83, 7);
    case 199:
      return reduce(RULE_83, 7);
    case 192:
      return reduce(RULE_83, 7);
    case 200:
      return reduce(RULE_83, 7);
    case 165:
      return reduce(RULE_83, 7);
    case 150:
      return reduce(RULE_83, 7);
    case 189:
      return reduce(RULE_83, 7);
    case 183:
      return reduce(RULE_83, 7);
    case 163:
      return reduce(RULE_83, 7);
    case 198:
      return reduce(RULE_83, 7);
    case 100:
      return reduce(RULE_83, 7);
    case 171:
      return reduce(RULE_83, 7);
    case 190:
      return reduce(RULE_83, 7);
    case 169:
      return reduce(RULE_83, 7);
    case 147:
      return reduce(RULE_83, 7);
    case 207:
      return reduce(RULE_83, 7);
    case 119:
      return reduce(RULE_83, 7);
    case 115:
      return reduce(RULE_83, 7);
    case 99:
      return reduce(RULE_83, 7);
    case 182:
      return reduce(RULE_83, 7);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, RBRACE, WHILE_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action807(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto807(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 887;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action808(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 11);
    case 154:
      return reduce(RULE_83, 11);
    case 181:
      return reduce(RULE_83, 11);
    case 174:
      return reduce(RULE_83, 11);
    case 184:
      return reduce(RULE_83, 11);
    case 134:
      return reduce(RULE_83, 11);
    case 153:
      return reduce(RULE_83, 11);
    case 185:
      return reduce(RULE_83, 11);
    case 205:
      return reduce(RULE_83, 11);
    case 196:
      return reduce(RULE_83, 11);
    case 98:
      return reduce(RULE_83, 11);
    case 155:
      return reduce(RULE_83, 11);
    case 142:
      return reduce(RULE_83, 11);
    case 124:
      return reduce(RULE_83, 11);
    case 186:
      return reduce(RULE_83, 11);
    case 175:
      return reduce(RULE_83, 11);
    case 128:
      return reduce(RULE_83, 11);
    case 179:
      return reduce(RULE_83, 11);
    case 164:
      return reduce(RULE_83, 11);
    case 203:
      return reduce(RULE_83, 11);
    case 172:
      return reduce(RULE_83, 11);
    case 195:
      return reduce(RULE_83, 11);
    case 157:
      return reduce(RULE_83, 11);
    case 193:
      return reduce(RULE_83, 11);
    case 158:
      return reduce(RULE_83, 11);
    case 131:
      return reduce(RULE_83, 11);
    case 156:
      return reduce(RULE_83, 11);
    case 102:
      return reduce(RULE_83, 11);
    case 101:
      return reduce(RULE_83, 11);
    case 201:
      return reduce(RULE_83, 11);
    case 202:
      return reduce(RULE_83, 11);
    case 132:
      return reduce(RULE_83, 11);
    case 133:
      return reduce(RULE_83, 11);
    case 168:
      return reduce(RULE_83, 11);
    case 194:
      return reduce(RULE_83, 11);
    case 199:
      return reduce(RULE_83, 11);
    case 192:
      return reduce(RULE_83, 11);
    case 200:
      return reduce(RULE_83, 11);
    case 165:
      return reduce(RULE_83, 11);
    case 150:
      return reduce(RULE_83, 11);
    case 189:
      return reduce(RULE_83, 11);
    case 183:
      return reduce(RULE_83, 11);
    case 163:
      return reduce(RULE_83, 11);
    case 198:
      return reduce(RULE_83, 11);
    case 100:
      return reduce(RULE_83, 11);
    case 171:
      return reduce(RULE_83, 11);
    case 190:
      return reduce(RULE_83, 11);
    case 169:
      return reduce(RULE_83, 11);
    case 147:
      return reduce(RULE_83, 11);
    case 207:
      return reduce(RULE_83, 11);
    case 119:
      return reduce(RULE_83, 11);
    case 115:
      return reduce(RULE_83, 11);
    case 99:
      return reduce(RULE_83, 11);
    case 182:
      return reduce(RULE_83, 11);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, RBRACE, WHILE_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action809(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(888);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action810(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      return reduce(RULE_70, 2);
    case 150:
      return reduce(RULE_70, 2);
    case 109:
      return reduce(RULE_70, 2);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action811(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      return reduce(RULE_70, 3);
    case 150:
      return reduce(RULE_70, 3);
    case 109:
      return reduce(RULE_70, 3);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action812(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      return reduce(RULE_35, 2);
    case 117:
      return reduce(RULE_35, 2);
    case 107:
      return reduce(RULE_35, 2);
    case 150:
      return reduce(RULE_35, 2);
    case 127:
      return reduce(RULE_35, 2);
    case 104:
      return reduce(RULE_35, 2);
    case 121:
      return reduce(RULE_35, 2);
    case 114:
      return reduce(RULE_35, 2);
    case 132:
      return reduce(RULE_36, 7);
    case 135:
      return reduce(RULE_35, 2);
    case 133:
      return reduce(RULE_36, 7);
    case 152:
      return reduce(RULE_35, 2);
    case 141:
      return reduce(RULE_35, 2);
    case 137:
      return reduce(RULE_35, 2);
    case 139:
      return reduce(RULE_35, 2);
    case 144:
      return reduce(RULE_36, 7);
    case 148:
      return reduce(RULE_35, 2);
    case 122:
      return reduce(RULE_36, 7);
    case 109:
      return reduce(RULE_35, 2);
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, CARET_EQUALS, SEMICOLON, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS, LPAREN, MINUS_EQUALS, LSQUARE, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, QUESTION_MARK_DOT, DOT, RPAREN, COMMA});
    }
  }

  private final boolean action813(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(889);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action814(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      return reduce(RULE_35, 1);
    case 117:
      return reduce(RULE_35, 1);
    case 107:
      return reduce(RULE_35, 1);
    case 150:
      return reduce(RULE_35, 1);
    case 127:
      return reduce(RULE_35, 1);
    case 104:
      return reduce(RULE_35, 1);
    case 121:
      return reduce(RULE_35, 1);
    case 114:
      return reduce(RULE_35, 1);
    case 132:
      return reduce(RULE_36, 6);
    case 135:
      return reduce(RULE_35, 1);
    case 133:
      return reduce(RULE_36, 6);
    case 152:
      return reduce(RULE_35, 1);
    case 141:
      return reduce(RULE_35, 1);
    case 137:
      return reduce(RULE_35, 1);
    case 139:
      return reduce(RULE_35, 1);
    case 144:
      return reduce(RULE_36, 6);
    case 148:
      return reduce(RULE_35, 1);
    case 122:
      return reduce(RULE_36, 6);
    case 109:
      return reduce(RULE_35, 1);
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, CARET_EQUALS, SEMICOLON, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS, LPAREN, MINUS_EQUALS, LSQUARE, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, QUESTION_MARK_DOT, DOT, RPAREN, COMMA});
    }
  }

  private final boolean action815(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(890);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action816(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      return reduce(RULE_35, 0);
    case 117:
      return reduce(RULE_35, 0);
    case 107:
      return reduce(RULE_35, 0);
    case 150:
      return reduce(RULE_35, 0);
    case 127:
      return reduce(RULE_35, 0);
    case 104:
      return reduce(RULE_35, 0);
    case 121:
      return reduce(RULE_35, 0);
    case 114:
      return reduce(RULE_35, 0);
    case 132:
      return reduce(RULE_36, 5);
    case 135:
      return reduce(RULE_35, 0);
    case 133:
      return reduce(RULE_36, 5);
    case 152:
      return reduce(RULE_35, 0);
    case 141:
      return reduce(RULE_35, 0);
    case 137:
      return reduce(RULE_35, 0);
    case 139:
      return reduce(RULE_35, 0);
    case 144:
      return reduce(RULE_36, 5);
    case 148:
      return reduce(RULE_35, 0);
    case 122:
      return reduce(RULE_36, 5);
    case 109:
      return reduce(RULE_35, 0);
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, CARET_EQUALS, SEMICOLON, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS, LPAREN, MINUS_EQUALS, LSQUARE, PLUS_EQUALS, STAR_EQUALS, PERCENT_EQUALS, PIPE_EQUALS, QUESTION_MARK_DOT, DOT, RPAREN, COMMA});
    }
  }

  private final boolean action817(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(891);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(819);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action818(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto818(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 892;
    default: return -1;
    }
  }

  private final boolean action819(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto819(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 893;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action820(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 0);
    case 154:
      return reduce(RULE_83, 0);
    case 181:
      return reduce(RULE_83, 0);
    case 174:
      return reduce(RULE_83, 0);
    case 184:
      return reduce(RULE_83, 0);
    case 134:
      return reduce(RULE_83, 0);
    case 153:
      return reduce(RULE_83, 0);
    case 185:
      return reduce(RULE_83, 0);
    case 205:
      return reduce(RULE_83, 0);
    case 196:
      return reduce(RULE_83, 0);
    case 98:
      return reduce(RULE_83, 0);
    case 155:
      return reduce(RULE_83, 0);
    case 142:
      return reduce(RULE_83, 0);
    case 124:
      return reduce(RULE_83, 0);
    case 186:
      return reduce(RULE_83, 0);
    case 175:
      return reduce(RULE_83, 0);
    case 128:
      return reduce(RULE_83, 0);
    case 179:
      return reduce(RULE_83, 0);
    case 164:
      return reduce(RULE_83, 0);
    case 203:
      return reduce(RULE_83, 0);
    case 172:
      return reduce(RULE_83, 0);
    case 195:
      return reduce(RULE_83, 0);
    case 157:
      return reduce(RULE_83, 0);
    case 193:
      return reduce(RULE_83, 0);
    case 158:
      return reduce(RULE_83, 0);
    case 131:
      return reduce(RULE_83, 0);
    case 156:
      return reduce(RULE_83, 0);
    case 102:
      return reduce(RULE_83, 0);
    case 101:
      return reduce(RULE_83, 0);
    case 201:
      return reduce(RULE_83, 0);
    case 202:
      return reduce(RULE_83, 0);
    case 132:
      return reduce(RULE_83, 0);
    case 133:
      return reduce(RULE_83, 0);
    case 168:
      return reduce(RULE_83, 0);
    case 194:
      return reduce(RULE_83, 0);
    case 199:
      return reduce(RULE_83, 0);
    case 192:
      return reduce(RULE_83, 0);
    case 200:
      return reduce(RULE_83, 0);
    case 165:
      return reduce(RULE_83, 0);
    case 150:
      return reduce(RULE_83, 0);
    case 189:
      return reduce(RULE_83, 0);
    case 183:
      return reduce(RULE_83, 0);
    case 163:
      return reduce(RULE_83, 0);
    case 198:
      return reduce(RULE_83, 0);
    case 100:
      return reduce(RULE_83, 0);
    case 171:
      return reduce(RULE_83, 0);
    case 190:
      return reduce(RULE_83, 0);
    case 169:
      return reduce(RULE_83, 0);
    case 147:
      return reduce(RULE_83, 0);
    case 207:
      return reduce(RULE_83, 0);
    case 119:
      return reduce(RULE_83, 0);
    case 115:
      return reduce(RULE_83, 0);
    case 99:
      return reduce(RULE_83, 0);
    case 182:
      return reduce(RULE_83, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, RBRACE, WHILE_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action821(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto821(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 894;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action822(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(895);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 164:
      return reduce(RULE_2, 0);
    case 173:
      return reduce(RULE_2, 0);
    case 191:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final int goto822(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 19: return 896;
    case 26: return 16;
    case 27: return 897;
    default: return -1;
    }
  }

  private final boolean action823(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_71, 1);
    case 101:
      return reduce(RULE_71, 1);
    case 188:
      return reduce(RULE_71, 1);
    case 181:
      return reduce(RULE_71, 1);
    case 201:
      return reduce(RULE_71, 1);
    case 132:
      return reduce(RULE_71, 1);
    case 202:
      return reduce(RULE_71, 1);
    case 133:
      return reduce(RULE_71, 1);
    case 205:
      return reduce(RULE_71, 1);
    case 206:
      return reduce(RULE_71, 1);
    case 192:
      return reduce(RULE_71, 1);
    case 200:
      return reduce(RULE_71, 1);
    case 165:
      return reduce(RULE_71, 1);
    case 98:
      return reduce(RULE_71, 1);
    case 155:
      return reduce(RULE_71, 1);
    case 142:
      return reduce(RULE_71, 1);
    case 183:
      return reduce(RULE_71, 1);
    case 186:
      return reduce(RULE_71, 1);
    case 175:
      return reduce(RULE_71, 1);
    case 128:
      return reduce(RULE_71, 1);
    case 171:
      return reduce(RULE_71, 1);
    case 190:
      return reduce(RULE_71, 1);
    case 169:
      return reduce(RULE_71, 1);
    case 179:
      return reduce(RULE_71, 1);
    case 164:
      return reduce(RULE_71, 1);
    case 203:
      return reduce(RULE_71, 1);
    case 147:
      return reduce(RULE_71, 1);
    case 193:
      return reduce(RULE_71, 1);
    case 182:
      return reduce(RULE_71, 1);
    case 158:
      return reduce(RULE_71, 1);
    case 131:
      return reduce(RULE_71, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action824(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_89, 4);
    case 101:
      return reduce(RULE_89, 4);
    case 188:
      return reduce(RULE_89, 4);
    case 181:
      return reduce(RULE_89, 4);
    case 201:
      return reduce(RULE_89, 4);
    case 132:
      return reduce(RULE_89, 4);
    case 202:
      return reduce(RULE_89, 4);
    case 133:
      return reduce(RULE_89, 4);
    case 205:
      return reduce(RULE_89, 4);
    case 206:
      return reduce(RULE_89, 4);
    case 192:
      return reduce(RULE_89, 4);
    case 200:
      return reduce(RULE_89, 4);
    case 165:
      return reduce(RULE_89, 4);
    case 98:
      return reduce(RULE_89, 4);
    case 155:
      return reduce(RULE_89, 4);
    case 142:
      return reduce(RULE_89, 4);
    case 183:
      return reduce(RULE_89, 4);
    case 186:
      return reduce(RULE_89, 4);
    case 175:
      return reduce(RULE_89, 4);
    case 128:
      return reduce(RULE_89, 4);
    case 171:
      return reduce(RULE_89, 4);
    case 190:
      return reduce(RULE_89, 4);
    case 169:
      return reduce(RULE_89, 4);
    case 179:
      return reduce(RULE_89, 4);
    case 164:
      return reduce(RULE_89, 4);
    case 203:
      return reduce(RULE_89, 4);
    case 147:
      return reduce(RULE_89, 4);
    case 193:
      return reduce(RULE_89, 4);
    case 182:
      return reduce(RULE_89, 4);
    case 158:
      return reduce(RULE_89, 4);
    case 131:
      return reduce(RULE_89, 4);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action825(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_89, 0);
    case 101:
      return reduce(RULE_89, 0);
    case 188:
      return reduce(RULE_89, 0);
    case 181:
      return reduce(RULE_89, 0);
    case 201:
      return reduce(RULE_89, 0);
    case 132:
      return reduce(RULE_89, 0);
    case 202:
      return reduce(RULE_89, 0);
    case 133:
      return reduce(RULE_89, 0);
    case 205:
      return reduce(RULE_89, 0);
    case 206:
      return reduce(RULE_89, 0);
    case 192:
      return reduce(RULE_89, 0);
    case 200:
      return reduce(RULE_89, 0);
    case 165:
      return reduce(RULE_89, 0);
    case 98:
      return reduce(RULE_89, 0);
    case 155:
      return reduce(RULE_89, 0);
    case 142:
      return reduce(RULE_89, 0);
    case 183:
      return reduce(RULE_89, 0);
    case 186:
      return reduce(RULE_89, 0);
    case 175:
      return reduce(RULE_89, 0);
    case 128:
      return reduce(RULE_89, 0);
    case 171:
      return reduce(RULE_89, 0);
    case 190:
      return reduce(RULE_89, 0);
    case 169:
      return reduce(RULE_89, 0);
    case 179:
      return reduce(RULE_89, 0);
    case 164:
      return reduce(RULE_89, 0);
    case 203:
      return reduce(RULE_89, 0);
    case 147:
      return reduce(RULE_89, 0);
    case 193:
      return reduce(RULE_89, 0);
    case 182:
      return reduce(RULE_89, 0);
    case 158:
      return reduce(RULE_89, 0);
    case 131:
      return reduce(RULE_89, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action826(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_75, 0);
    case 101:
      return reduce(RULE_75, 0);
    case 188:
      return reduce(RULE_75, 0);
    case 181:
      return reduce(RULE_75, 0);
    case 201:
      return reduce(RULE_75, 0);
    case 132:
      return reduce(RULE_75, 0);
    case 202:
      return reduce(RULE_75, 0);
    case 133:
      return reduce(RULE_75, 0);
    case 205:
      return reduce(RULE_75, 0);
    case 206:
      return reduce(RULE_75, 0);
    case 192:
      return reduce(RULE_75, 0);
    case 200:
      return reduce(RULE_75, 0);
    case 165:
      return reduce(RULE_75, 0);
    case 98:
      return reduce(RULE_75, 0);
    case 155:
      return reduce(RULE_75, 0);
    case 142:
      return reduce(RULE_75, 0);
    case 183:
      return reduce(RULE_75, 0);
    case 186:
      return reduce(RULE_75, 0);
    case 175:
      return reduce(RULE_75, 0);
    case 128:
      return reduce(RULE_75, 0);
    case 171:
      return reduce(RULE_75, 0);
    case 190:
      return reduce(RULE_75, 0);
    case 169:
      return reduce(RULE_75, 0);
    case 179:
      return reduce(RULE_75, 0);
    case 164:
      return reduce(RULE_75, 0);
    case 203:
      return reduce(RULE_75, 0);
    case 147:
      return reduce(RULE_75, 0);
    case 193:
      return reduce(RULE_75, 0);
    case 182:
      return reduce(RULE_75, 0);
    case 158:
      return reduce(RULE_75, 0);
    case 131:
      return reduce(RULE_75, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, PROPERTY_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, VOID_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action827(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(898);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto827(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 899;
    default: return -1;
    }
  }

  private final boolean action828(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(900);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action829(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(901);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto829(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 902;
    default: return -1;
    }
  }

  private final boolean action830(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 31);
    case 101:
      return reduce(RULE_15, 31);
    case 154:
      return reduce(RULE_15, 31);
    case 145:
      return reduce(RULE_15, 31);
    case 132:
      return reduce(RULE_15, 31);
    case 167:
      return reduce(RULE_15, 31);
    case 103:
      return reduce(RULE_15, 31);
    case 120:
      return reduce(RULE_15, 31);
    case 194:
      return reduce(RULE_15, 31);
    case 112:
      return reduce(RULE_15, 31);
    case 148:
      return reduce(RULE_15, 31);
    case 110:
      return reduce(RULE_15, 31);
    case 149:
      return reduce(RULE_15, 31);
    case 108:
      return reduce(RULE_15, 31);
    case 106:
      return reduce(RULE_15, 31);
    case 125:
      return reduce(RULE_15, 31);
    case 105:
      return reduce(RULE_15, 31);
    case 98:
      return reduce(RULE_15, 31);
    case 142:
      return reduce(RULE_15, 31);
    case 138:
      return reduce(RULE_15, 31);
    case 155:
      return reduce(RULE_15, 31);
    case 150:
      return reduce(RULE_15, 31);
    case 197:
      return reduce(RULE_15, 31);
    case 111:
      return reduce(RULE_15, 31);
    case 183:
      return reduce(RULE_15, 31);
    case 175:
      return reduce(RULE_15, 31);
    case 128:
      return reduce(RULE_15, 31);
    case 169:
      return reduce(RULE_15, 31);
    case 190:
      return reduce(RULE_15, 31);
    case 143:
      return reduce(RULE_15, 31);
    case 164:
      return reduce(RULE_15, 31);
    case 203:
      return reduce(RULE_15, 31);
    case 147:
      return reduce(RULE_15, 31);
    case 193:
      return reduce(RULE_15, 31);
    case 182:
      return reduce(RULE_15, 31);
    case 109:
      return reduce(RULE_15, 31);
    case 191:
      return reduce(RULE_15, 31);
    case 131:
      return reduce(RULE_15, 31);
    case 118:
      return reduce(RULE_15, 31);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action831(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(903);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action832(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(904);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action833(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 147:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto833(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 905;
    default: return -1;
    }
  }

  private final boolean action834(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 32);
    case 101:
      return reduce(RULE_15, 32);
    case 154:
      return reduce(RULE_15, 32);
    case 145:
      return reduce(RULE_15, 32);
    case 132:
      return reduce(RULE_15, 32);
    case 167:
      return reduce(RULE_15, 32);
    case 103:
      return reduce(RULE_15, 32);
    case 120:
      return reduce(RULE_15, 32);
    case 194:
      return reduce(RULE_15, 32);
    case 112:
      return reduce(RULE_15, 32);
    case 148:
      return reduce(RULE_15, 32);
    case 149:
      return reduce(RULE_15, 32);
    case 110:
      return reduce(RULE_15, 32);
    case 108:
      return reduce(RULE_15, 32);
    case 106:
      return reduce(RULE_15, 32);
    case 125:
      return reduce(RULE_15, 32);
    case 98:
      return reduce(RULE_15, 32);
    case 105:
      return reduce(RULE_15, 32);
    case 142:
      return reduce(RULE_15, 32);
    case 138:
      return reduce(RULE_15, 32);
    case 155:
      return reduce(RULE_15, 32);
    case 150:
      return reduce(RULE_15, 32);
    case 197:
      return reduce(RULE_15, 32);
    case 111:
      return reduce(RULE_15, 32);
    case 183:
      return reduce(RULE_15, 32);
    case 175:
      return reduce(RULE_15, 32);
    case 128:
      return reduce(RULE_15, 32);
    case 169:
      return reduce(RULE_15, 32);
    case 190:
      return reduce(RULE_15, 32);
    case 143:
      return reduce(RULE_15, 32);
    case 164:
      return reduce(RULE_15, 32);
    case 203:
      return reduce(RULE_15, 32);
    case 147:
      return reduce(RULE_15, 32);
    case 193:
      return reduce(RULE_15, 32);
    case 182:
      return reduce(RULE_15, 32);
    case 109:
      return reduce(RULE_15, 32);
    case 191:
      return reduce(RULE_15, 32);
    case 131:
      return reduce(RULE_15, 32);
    case 118:
      return reduce(RULE_15, 32);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action835(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 26);
    case 101:
      return reduce(RULE_15, 26);
    case 154:
      return reduce(RULE_15, 26);
    case 145:
      return reduce(RULE_15, 26);
    case 132:
      return reduce(RULE_15, 26);
    case 167:
      return reduce(RULE_15, 26);
    case 103:
      return reduce(RULE_15, 26);
    case 120:
      return reduce(RULE_15, 26);
    case 194:
      return reduce(RULE_15, 26);
    case 112:
      return reduce(RULE_15, 26);
    case 148:
      return reduce(RULE_15, 26);
    case 149:
      return reduce(RULE_15, 26);
    case 110:
      return reduce(RULE_15, 26);
    case 108:
      return reduce(RULE_15, 26);
    case 106:
      return reduce(RULE_15, 26);
    case 125:
      return reduce(RULE_15, 26);
    case 105:
      return reduce(RULE_15, 26);
    case 98:
      return reduce(RULE_15, 26);
    case 142:
      return reduce(RULE_15, 26);
    case 138:
      return reduce(RULE_15, 26);
    case 155:
      return reduce(RULE_15, 26);
    case 150:
      return reduce(RULE_15, 26);
    case 197:
      return reduce(RULE_15, 26);
    case 111:
      return reduce(RULE_15, 26);
    case 183:
      return reduce(RULE_15, 26);
    case 175:
      return reduce(RULE_15, 26);
    case 128:
      return reduce(RULE_15, 26);
    case 169:
      return reduce(RULE_15, 26);
    case 190:
      return reduce(RULE_15, 26);
    case 143:
      return reduce(RULE_15, 26);
    case 164:
      return reduce(RULE_15, 26);
    case 203:
      return reduce(RULE_15, 26);
    case 147:
      return reduce(RULE_15, 26);
    case 193:
      return reduce(RULE_15, 26);
    case 182:
      return reduce(RULE_15, 26);
    case 109:
      return reduce(RULE_15, 26);
    case 191:
      return reduce(RULE_15, 26);
    case 131:
      return reduce(RULE_15, 26);
    case 118:
      return reduce(RULE_15, 26);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action836(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(906);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action837(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto837(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 650;
    case 48: return 292;
    case 49: return 293;
    case 54: return 94;
    case 58: return 95;
    case 28: return 654;
    case 30: return 651;
    case 59: return 98;
    case 60: return 99;
    case 50: return 907;
    case 61: return 102;
    default: return -1;
    }
  }

  private final boolean action838(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto838(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 650;
    case 30: return 651;
    case 72: return 908;
    case 60: return 99;
    case 61: return 102;
    case 70: return 909;
    case 48: return 92;
    case 54: return 94;
    case 49: return 93;
    case 58: return 95;
    case 28: return 654;
    case 59: return 98;
    case 50: return 655;
    case 71: return 840;
    default: return -1;
    }
  }

  private final boolean action839(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, UBYTE_KEYWORD, SHORT_KEYWORD});
    }
  }

  private final int goto839(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 650;
    case 30: return 651;
    case 72: return 910;
    case 60: return 99;
    case 61: return 102;
    case 70: return 911;
    case 48: return 92;
    case 54: return 94;
    case 49: return 93;
    case 58: return 95;
    case 28: return 654;
    case 59: return 98;
    case 50: return 655;
    case 71: return 842;
    default: return -1;
    }
  }

  private final boolean action840(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_52, 3);
    case 101:
      return reduce(RULE_52, 3);
    case 154:
      return reduce(RULE_52, 3);
    case 145:
      return reduce(RULE_52, 3);
    case 132:
      return reduce(RULE_52, 3);
    case 167:
      return reduce(RULE_52, 3);
    case 103:
      return reduce(RULE_52, 3);
    case 120:
      return reduce(RULE_52, 3);
    case 194:
      return reduce(RULE_52, 3);
    case 112:
      return reduce(RULE_52, 3);
    case 148:
      return reduce(RULE_52, 3);
    case 149:
      return reduce(RULE_52, 3);
    case 110:
      return reduce(RULE_52, 3);
    case 108:
      return reduce(RULE_52, 3);
    case 106:
      return reduce(RULE_52, 3);
    case 125:
      return reduce(RULE_52, 3);
    case 98:
      return reduce(RULE_52, 3);
    case 105:
      return reduce(RULE_52, 3);
    case 155:
      return reduce(RULE_52, 3);
    case 142:
      return reduce(RULE_52, 3);
    case 138:
      return reduce(RULE_52, 3);
    case 150:
      return reduce(RULE_52, 3);
    case 197:
      return reduce(RULE_52, 3);
    case 111:
      return reduce(RULE_52, 3);
    case 183:
      return reduce(RULE_52, 3);
    case 175:
      return reduce(RULE_52, 3);
    case 128:
      return reduce(RULE_52, 3);
    case 169:
      return reduce(RULE_52, 3);
    case 190:
      return reduce(RULE_52, 3);
    case 143:
      return reduce(RULE_52, 3);
    case 176:
      return reduce(RULE_52, 3);
    case 164:
      return reduce(RULE_52, 3);
    case 203:
      return reduce(RULE_52, 3);
    case 147:
      return reduce(RULE_52, 3);
    case 193:
      return reduce(RULE_52, 3);
    case 182:
      return reduce(RULE_52, 3);
    case 109:
      return reduce(RULE_52, 3);
    case 191:
      return reduce(RULE_52, 3);
    case 131:
      return reduce(RULE_52, 3);
    case 118:
      return reduce(RULE_52, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action841(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 3);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, COMMA});
    }
  }

  private final boolean action842(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_52, 4);
    case 101:
      return reduce(RULE_52, 4);
    case 154:
      return reduce(RULE_52, 4);
    case 145:
      return reduce(RULE_52, 4);
    case 132:
      return reduce(RULE_52, 4);
    case 167:
      return reduce(RULE_52, 4);
    case 103:
      return reduce(RULE_52, 4);
    case 120:
      return reduce(RULE_52, 4);
    case 194:
      return reduce(RULE_52, 4);
    case 112:
      return reduce(RULE_52, 4);
    case 148:
      return reduce(RULE_52, 4);
    case 149:
      return reduce(RULE_52, 4);
    case 110:
      return reduce(RULE_52, 4);
    case 108:
      return reduce(RULE_52, 4);
    case 106:
      return reduce(RULE_52, 4);
    case 125:
      return reduce(RULE_52, 4);
    case 98:
      return reduce(RULE_52, 4);
    case 105:
      return reduce(RULE_52, 4);
    case 155:
      return reduce(RULE_52, 4);
    case 142:
      return reduce(RULE_52, 4);
    case 138:
      return reduce(RULE_52, 4);
    case 150:
      return reduce(RULE_52, 4);
    case 197:
      return reduce(RULE_52, 4);
    case 111:
      return reduce(RULE_52, 4);
    case 183:
      return reduce(RULE_52, 4);
    case 175:
      return reduce(RULE_52, 4);
    case 128:
      return reduce(RULE_52, 4);
    case 169:
      return reduce(RULE_52, 4);
    case 190:
      return reduce(RULE_52, 4);
    case 143:
      return reduce(RULE_52, 4);
    case 176:
      return reduce(RULE_52, 4);
    case 164:
      return reduce(RULE_52, 4);
    case 203:
      return reduce(RULE_52, 4);
    case 147:
      return reduce(RULE_52, 4);
    case 193:
      return reduce(RULE_52, 4);
    case 182:
      return reduce(RULE_52, 4);
    case 109:
      return reduce(RULE_52, 4);
    case 191:
      return reduce(RULE_52, 4);
    case 131:
      return reduce(RULE_52, 4);
    case 118:
      return reduce(RULE_52, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, NAME, ARROW, ABSTRACT_KEYWORD, QUESTION_MARK, PIPE, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, IMPLEMENTS_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action843(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 4);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, COMMA});
    }
  }

  private final boolean action844(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(912);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action845(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto845(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 66;
    case 57: return 913;
    default: return -1;
    }
  }

  private final boolean action846(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_74, 2);
    case 150:
      return reduce(RULE_74, 2);
    case 109:
      return reduce(RULE_74, 2);
    case 131:
      return reduce(RULE_74, 2);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE});
    }
  }

  private final boolean action847(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(914);
      tokenStack.addFirst(token);
      return true;
    case 132:
      return reduce(RULE_36, 17);
    case 133:
      return reduce(RULE_36, 17);
    case 144:
      return reduce(RULE_36, 17);
    case 122:
      return reduce(RULE_36, 17);
    default: throw new BadTokenException(token, new Object[] {LPAREN, LSQUARE, SEMICOLON, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action848(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(540);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(405);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(541);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LSQUARE, QUESTION_MARK_DOT, DOT});
    }
  }

  private final boolean action849(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 144:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 126:
      return reduce(RULE_61, 2);
    case 173:
      return reduce(RULE_61, 2);
    case 101:
      return reduce(RULE_61, 2);
    case 145:
      return reduce(RULE_61, 2);
    case 116:
      return reduce(RULE_61, 2);
    case 151:
      return reduce(RULE_61, 2);
    case 134:
      return reduce(RULE_61, 2);
    case 103:
      return reduce(RULE_61, 2);
    case 120:
      return reduce(RULE_61, 2);
    case 148:
      return reduce(RULE_61, 2);
    case 112:
      return reduce(RULE_61, 2);
    case 149:
      return reduce(RULE_61, 2);
    case 110:
      return reduce(RULE_61, 2);
    case 108:
      return reduce(RULE_61, 2);
    case 106:
      return reduce(RULE_61, 2);
    case 125:
      return reduce(RULE_61, 2);
    case 178:
      return reduce(RULE_61, 2);
    case 155:
      return reduce(RULE_61, 2);
    case 124:
      return reduce(RULE_61, 2);
    case 142:
      return reduce(RULE_61, 2);
    case 146:
      return reduce(RULE_61, 2);
    case 138:
      return reduce(RULE_61, 2);
    case 150:
      return reduce(RULE_61, 2);
    case 183:
      return reduce(RULE_61, 2);
    case 175:
      return reduce(RULE_61, 2);
    case 113:
      return reduce(RULE_61, 2);
    case 169:
      return reduce(RULE_61, 2);
    case 190:
      return reduce(RULE_61, 2);
    case 143:
      return reduce(RULE_61, 2);
    case 164:
      return reduce(RULE_61, 2);
    case 203:
      return reduce(RULE_61, 2);
    case 147:
      return reduce(RULE_61, 2);
    case 130:
      return reduce(RULE_61, 2);
    case 193:
      return reduce(RULE_61, 2);
    case 136:
      return reduce(RULE_61, 2);
    case 129:
      return reduce(RULE_61, 2);
    case 182:
      return reduce(RULE_61, 2);
    case 140:
      return reduce(RULE_61, 2);
    case 109:
      return reduce(RULE_61, 2);
    case 191:
      return reduce(RULE_61, 2);
    case 131:
      return reduce(RULE_61, 2);
    case 118:
      return reduce(RULE_61, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final int goto849(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 400;
    default: return -1;
    }
  }

  private final boolean action850(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_61, 1);
    case 173:
      return reduce(RULE_61, 1);
    case 101:
      return reduce(RULE_61, 1);
    case 145:
      return reduce(RULE_61, 1);
    case 116:
      return reduce(RULE_61, 1);
    case 151:
      return reduce(RULE_61, 1);
    case 134:
      return reduce(RULE_61, 1);
    case 103:
      return reduce(RULE_61, 1);
    case 120:
      return reduce(RULE_61, 1);
    case 148:
      return reduce(RULE_61, 1);
    case 112:
      return reduce(RULE_61, 1);
    case 149:
      return reduce(RULE_61, 1);
    case 110:
      return reduce(RULE_61, 1);
    case 108:
      return reduce(RULE_61, 1);
    case 106:
      return reduce(RULE_61, 1);
    case 125:
      return reduce(RULE_61, 1);
    case 178:
      return reduce(RULE_61, 1);
    case 155:
      return reduce(RULE_61, 1);
    case 124:
      return reduce(RULE_61, 1);
    case 142:
      return reduce(RULE_61, 1);
    case 146:
      return reduce(RULE_61, 1);
    case 138:
      return reduce(RULE_61, 1);
    case 150:
      return reduce(RULE_61, 1);
    case 183:
      return reduce(RULE_61, 1);
    case 175:
      return reduce(RULE_61, 1);
    case 113:
      return reduce(RULE_61, 1);
    case 169:
      return reduce(RULE_61, 1);
    case 190:
      return reduce(RULE_61, 1);
    case 143:
      return reduce(RULE_61, 1);
    case 164:
      return reduce(RULE_61, 1);
    case 203:
      return reduce(RULE_61, 1);
    case 147:
      return reduce(RULE_61, 1);
    case 130:
      return reduce(RULE_61, 1);
    case 193:
      return reduce(RULE_61, 1);
    case 136:
      return reduce(RULE_61, 1);
    case 129:
      return reduce(RULE_61, 1);
    case 182:
      return reduce(RULE_61, 1);
    case 140:
      return reduce(RULE_61, 1);
    case 109:
      return reduce(RULE_61, 1);
    case 191:
      return reduce(RULE_61, 1);
    case 131:
      return reduce(RULE_61, 1);
    case 118:
      return reduce(RULE_61, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, AMPERSAND, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, MUTABLE_KEYWORD, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action851(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 7);
    case 173:
      return reduce(RULE_36, 7);
    case 101:
      return reduce(RULE_36, 7);
    case 145:
      return reduce(RULE_36, 7);
    case 116:
      return reduce(RULE_36, 7);
    case 151:
      return reduce(RULE_36, 7);
    case 134:
      return reduce(RULE_36, 7);
    case 132:
      return reduce(RULE_36, 7);
    case 103:
      return reduce(RULE_36, 7);
    case 133:
      return reduce(RULE_36, 7);
    case 120:
      return reduce(RULE_36, 7);
    case 148:
      return reduce(RULE_36, 7);
    case 112:
      return reduce(RULE_36, 7);
    case 149:
      return reduce(RULE_36, 7);
    case 110:
      return reduce(RULE_36, 7);
    case 108:
      return reduce(RULE_36, 7);
    case 106:
      return reduce(RULE_36, 7);
    case 125:
      return reduce(RULE_36, 7);
    case 178:
      return reduce(RULE_36, 7);
    case 155:
      return reduce(RULE_36, 7);
    case 124:
      return reduce(RULE_36, 7);
    case 142:
      return reduce(RULE_36, 7);
    case 146:
      return reduce(RULE_36, 7);
    case 138:
      return reduce(RULE_36, 7);
    case 150:
      return reduce(RULE_36, 7);
    case 183:
      return reduce(RULE_36, 7);
    case 175:
      return reduce(RULE_36, 7);
    case 113:
      return reduce(RULE_36, 7);
    case 169:
      return reduce(RULE_36, 7);
    case 190:
      return reduce(RULE_36, 7);
    case 143:
      return reduce(RULE_36, 7);
    case 164:
      return reduce(RULE_36, 7);
    case 203:
      return reduce(RULE_36, 7);
    case 147:
      return reduce(RULE_36, 7);
    case 130:
      return reduce(RULE_36, 7);
    case 193:
      return reduce(RULE_36, 7);
    case 129:
      return reduce(RULE_36, 7);
    case 144:
      return reduce(RULE_36, 7);
    case 136:
      return reduce(RULE_36, 7);
    case 182:
      return reduce(RULE_36, 7);
    case 140:
      return reduce(RULE_36, 7);
    case 122:
      return reduce(RULE_36, 7);
    case 109:
      return reduce(RULE_36, 7);
    case 191:
      return reduce(RULE_36, 7);
    case 131:
      return reduce(RULE_36, 7);
    case 118:
      return reduce(RULE_36, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action852(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto852(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 79: return 915;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 916;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 917;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action853(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto853(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 79: return 918;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 916;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 917;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action854(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_76, 1);
    case 156:
      return reduce(RULE_76, 1);
    case 101:
      return reduce(RULE_76, 1);
    case 102:
      return reduce(RULE_76, 1);
    case 154:
      return reduce(RULE_76, 1);
    case 181:
      return reduce(RULE_76, 1);
    case 174:
      return reduce(RULE_76, 1);
    case 184:
      return reduce(RULE_76, 1);
    case 201:
      return reduce(RULE_76, 1);
    case 132:
      return reduce(RULE_76, 1);
    case 202:
      return reduce(RULE_76, 1);
    case 185:
      return reduce(RULE_76, 1);
    case 133:
      return reduce(RULE_76, 1);
    case 205:
      return reduce(RULE_76, 1);
    case 168:
      return reduce(RULE_76, 1);
    case 196:
      return reduce(RULE_76, 1);
    case 194:
      return reduce(RULE_76, 1);
    case 199:
      return reduce(RULE_76, 1);
    case 200:
      return reduce(RULE_76, 1);
    case 192:
      return reduce(RULE_76, 1);
    case 165:
      return reduce(RULE_76, 1);
    case 98:
      return reduce(RULE_76, 1);
    case 155:
      return reduce(RULE_76, 1);
    case 142:
      return reduce(RULE_76, 1);
    case 189:
      return reduce(RULE_76, 1);
    case 183:
      return reduce(RULE_76, 1);
    case 163:
      return reduce(RULE_76, 1);
    case 186:
      return reduce(RULE_76, 1);
    case 198:
      return reduce(RULE_76, 1);
    case 100:
      return reduce(RULE_76, 1);
    case 175:
      return reduce(RULE_76, 1);
    case 128:
      return reduce(RULE_76, 1);
    case 169:
      return reduce(RULE_76, 1);
    case 190:
      return reduce(RULE_76, 1);
    case 171:
      return reduce(RULE_76, 1);
    case 179:
      return reduce(RULE_76, 1);
    case 164:
      return reduce(RULE_76, 1);
    case 203:
      return reduce(RULE_76, 1);
    case 172:
      return reduce(RULE_76, 1);
    case 195:
      return reduce(RULE_76, 1);
    case 157:
      return reduce(RULE_76, 1);
    case 147:
      return reduce(RULE_76, 1);
    case 207:
      return reduce(RULE_76, 1);
    case 193:
      return reduce(RULE_76, 1);
    case 119:
      return reduce(RULE_76, 1);
    case 115:
      return reduce(RULE_76, 1);
    case 99:
      return reduce(RULE_76, 1);
    case 182:
      return reduce(RULE_76, 1);
    case 158:
      return reduce(RULE_76, 1);
    case 131:
      return reduce(RULE_76, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action855(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_76, 2);
    case 156:
      return reduce(RULE_76, 2);
    case 101:
      return reduce(RULE_76, 2);
    case 102:
      return reduce(RULE_76, 2);
    case 154:
      return reduce(RULE_76, 2);
    case 181:
      return reduce(RULE_76, 2);
    case 174:
      return reduce(RULE_76, 2);
    case 184:
      return reduce(RULE_76, 2);
    case 201:
      return reduce(RULE_76, 2);
    case 132:
      return reduce(RULE_76, 2);
    case 202:
      return reduce(RULE_76, 2);
    case 185:
      return reduce(RULE_76, 2);
    case 133:
      return reduce(RULE_76, 2);
    case 205:
      return reduce(RULE_76, 2);
    case 168:
      return reduce(RULE_76, 2);
    case 196:
      return reduce(RULE_76, 2);
    case 194:
      return reduce(RULE_76, 2);
    case 199:
      return reduce(RULE_76, 2);
    case 200:
      return reduce(RULE_76, 2);
    case 192:
      return reduce(RULE_76, 2);
    case 165:
      return reduce(RULE_76, 2);
    case 98:
      return reduce(RULE_76, 2);
    case 155:
      return reduce(RULE_76, 2);
    case 142:
      return reduce(RULE_76, 2);
    case 189:
      return reduce(RULE_76, 2);
    case 183:
      return reduce(RULE_76, 2);
    case 163:
      return reduce(RULE_76, 2);
    case 186:
      return reduce(RULE_76, 2);
    case 198:
      return reduce(RULE_76, 2);
    case 100:
      return reduce(RULE_76, 2);
    case 175:
      return reduce(RULE_76, 2);
    case 128:
      return reduce(RULE_76, 2);
    case 169:
      return reduce(RULE_76, 2);
    case 190:
      return reduce(RULE_76, 2);
    case 171:
      return reduce(RULE_76, 2);
    case 179:
      return reduce(RULE_76, 2);
    case 164:
      return reduce(RULE_76, 2);
    case 203:
      return reduce(RULE_76, 2);
    case 172:
      return reduce(RULE_76, 2);
    case 195:
      return reduce(RULE_76, 2);
    case 157:
      return reduce(RULE_76, 2);
    case 147:
      return reduce(RULE_76, 2);
    case 207:
      return reduce(RULE_76, 2);
    case 193:
      return reduce(RULE_76, 2);
    case 119:
      return reduce(RULE_76, 2);
    case 115:
      return reduce(RULE_76, 2);
    case 99:
      return reduce(RULE_76, 2);
    case 182:
      return reduce(RULE_76, 2);
    case 158:
      return reduce(RULE_76, 2);
    case 131:
      return reduce(RULE_76, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action856(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto856(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 698;
    case 30: return 919;
    case 97: return 700;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 920;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action857(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto857(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 754;
    case 30: return 921;
    case 97: return 700;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 922;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action858(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto858(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 923;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 924;
    default: return -1;
    }
  }

  private final boolean action859(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 6);
    case 173:
      return reduce(RULE_36, 6);
    case 101:
      return reduce(RULE_36, 6);
    case 145:
      return reduce(RULE_36, 6);
    case 116:
      return reduce(RULE_36, 6);
    case 151:
      return reduce(RULE_36, 6);
    case 134:
      return reduce(RULE_36, 6);
    case 132:
      return reduce(RULE_36, 6);
    case 103:
      return reduce(RULE_36, 6);
    case 133:
      return reduce(RULE_36, 6);
    case 120:
      return reduce(RULE_36, 6);
    case 148:
      return reduce(RULE_36, 6);
    case 112:
      return reduce(RULE_36, 6);
    case 149:
      return reduce(RULE_36, 6);
    case 110:
      return reduce(RULE_36, 6);
    case 108:
      return reduce(RULE_36, 6);
    case 106:
      return reduce(RULE_36, 6);
    case 125:
      return reduce(RULE_36, 6);
    case 178:
      return reduce(RULE_36, 6);
    case 155:
      return reduce(RULE_36, 6);
    case 124:
      return reduce(RULE_36, 6);
    case 142:
      return reduce(RULE_36, 6);
    case 146:
      return reduce(RULE_36, 6);
    case 138:
      return reduce(RULE_36, 6);
    case 150:
      return reduce(RULE_36, 6);
    case 183:
      return reduce(RULE_36, 6);
    case 175:
      return reduce(RULE_36, 6);
    case 113:
      return reduce(RULE_36, 6);
    case 169:
      return reduce(RULE_36, 6);
    case 190:
      return reduce(RULE_36, 6);
    case 143:
      return reduce(RULE_36, 6);
    case 164:
      return reduce(RULE_36, 6);
    case 203:
      return reduce(RULE_36, 6);
    case 147:
      return reduce(RULE_36, 6);
    case 130:
      return reduce(RULE_36, 6);
    case 193:
      return reduce(RULE_36, 6);
    case 129:
      return reduce(RULE_36, 6);
    case 144:
      return reduce(RULE_36, 6);
    case 136:
      return reduce(RULE_36, 6);
    case 182:
      return reduce(RULE_36, 6);
    case 140:
      return reduce(RULE_36, 6);
    case 122:
      return reduce(RULE_36, 6);
    case 109:
      return reduce(RULE_36, 6);
    case 191:
      return reduce(RULE_36, 6);
    case 131:
      return reduce(RULE_36, 6);
    case 118:
      return reduce(RULE_36, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action860(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto860(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 79: return 925;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 916;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 917;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action861(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto861(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 79: return 926;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 916;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 917;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action862(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 5);
    case 173:
      return reduce(RULE_36, 5);
    case 101:
      return reduce(RULE_36, 5);
    case 145:
      return reduce(RULE_36, 5);
    case 116:
      return reduce(RULE_36, 5);
    case 151:
      return reduce(RULE_36, 5);
    case 134:
      return reduce(RULE_36, 5);
    case 132:
      return reduce(RULE_36, 5);
    case 103:
      return reduce(RULE_36, 5);
    case 133:
      return reduce(RULE_36, 5);
    case 120:
      return reduce(RULE_36, 5);
    case 112:
      return reduce(RULE_36, 5);
    case 148:
      return reduce(RULE_36, 5);
    case 149:
      return reduce(RULE_36, 5);
    case 110:
      return reduce(RULE_36, 5);
    case 108:
      return reduce(RULE_36, 5);
    case 106:
      return reduce(RULE_36, 5);
    case 125:
      return reduce(RULE_36, 5);
    case 178:
      return reduce(RULE_36, 5);
    case 155:
      return reduce(RULE_36, 5);
    case 124:
      return reduce(RULE_36, 5);
    case 142:
      return reduce(RULE_36, 5);
    case 146:
      return reduce(RULE_36, 5);
    case 138:
      return reduce(RULE_36, 5);
    case 150:
      return reduce(RULE_36, 5);
    case 183:
      return reduce(RULE_36, 5);
    case 175:
      return reduce(RULE_36, 5);
    case 113:
      return reduce(RULE_36, 5);
    case 169:
      return reduce(RULE_36, 5);
    case 190:
      return reduce(RULE_36, 5);
    case 143:
      return reduce(RULE_36, 5);
    case 164:
      return reduce(RULE_36, 5);
    case 203:
      return reduce(RULE_36, 5);
    case 147:
      return reduce(RULE_36, 5);
    case 130:
      return reduce(RULE_36, 5);
    case 193:
      return reduce(RULE_36, 5);
    case 144:
      return reduce(RULE_36, 5);
    case 129:
      return reduce(RULE_36, 5);
    case 136:
      return reduce(RULE_36, 5);
    case 182:
      return reduce(RULE_36, 5);
    case 140:
      return reduce(RULE_36, 5);
    case 122:
      return reduce(RULE_36, 5);
    case 109:
      return reduce(RULE_36, 5);
    case 191:
      return reduce(RULE_36, 5);
    case 131:
      return reduce(RULE_36, 5);
    case 118:
      return reduce(RULE_36, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, PERCENT, LANGLE, QUESTION_MARK_DOT, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action863(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto863(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 86: return 335;
    case 52: return 334;
    case 30: return 734;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 927;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 735;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 928;
    default: return -1;
    }
  }

  private final boolean action864(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(929);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, RBRACE, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto864(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 569;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 570;
    case 95: return 930;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 572;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 573;
    default: return -1;
    }
  }

  private final boolean action865(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_92, 1);
    case 165:
      return reduce(RULE_92, 1);
    case 98:
      return reduce(RULE_92, 1);
    case 142:
      return reduce(RULE_92, 1);
    case 181:
      return reduce(RULE_92, 1);
    case 186:
      return reduce(RULE_92, 1);
    case 201:
      return reduce(RULE_92, 1);
    case 128:
      return reduce(RULE_92, 1);
    case 171:
      return reduce(RULE_92, 1);
    case 179:
      return reduce(RULE_92, 1);
    case 202:
      return reduce(RULE_92, 1);
    case 132:
      return reduce(RULE_92, 1);
    case 133:
      return reduce(RULE_92, 1);
    case 205:
      return reduce(RULE_92, 1);
    case 158:
      return reduce(RULE_92, 1);
    case 131:
      return reduce(RULE_92, 1);
    case 200:
      return reduce(RULE_92, 1);
    case 192:
      return reduce(RULE_92, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, USHORT_KEYWORD, LSQUARE, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final boolean action866(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(931);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action867(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto867(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 13: return 932;
    case 94: return 331;
    case 14: return 376;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 224;
    case 91: return 241;
    case 28: return 377;
    case 30: return 378;
    case 97: return 235;
    case 60: return 340;
    default: return -1;
    }
  }

  private final boolean action868(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto868(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 13: return 933;
    case 94: return 331;
    case 14: return 376;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 224;
    case 91: return 241;
    case 28: return 377;
    case 30: return 378;
    case 97: return 235;
    case 60: return 340;
    default: return -1;
    }
  }

  private final boolean action869(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      return reduce(RULE_36, 17);
    case 133:
      return reduce(RULE_36, 17);
    case 144:
      return reduce(RULE_36, 17);
    case 148:
      return reduce(RULE_93, 4);
    case 122:
      return reduce(RULE_36, 17);
    default: throw new BadTokenException(token, new Object[] {LPAREN, LSQUARE, QUESTION_MARK_DOT, DOT, RPAREN});
    }
  }

  private final boolean action870(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      stateStack.addFirst(409);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(934);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(411);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(412);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(413);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(414);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(415);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(416);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(417);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(418);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(419);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(420);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, DOUBLE_PERCENT_EQUALS, MINUS_EQUALS, CARET_EQUALS, STAR_EQUALS, PLUS_EQUALS, PERCENT_EQUALS, FORWARD_SLASH_EQUALS, AMPERSAND_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, DOUBLE_LANGLE_EQUALS});
    }
  }

  private final boolean action871(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      return reduce(RULE_93, 3);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action872(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(935);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action873(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(867);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(868);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 148:
      return reduce(RULE_93, 5);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, SUPER_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, DOUBLE_PLUS, DOUBLE_MINUS, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto873(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 13: return 219;
    case 14: return 220;
    case 94: return 869;
    case 93: return 332;
    case 52: return 224;
    case 30: return 378;
    case 97: return 235;
    case 60: return 340;
    case 54: return 344;
    case 92: return 228;
    case 91: return 241;
    case 28: return 589;
    case 15: return 870;
    case 43: return 871;
    case 23: return 936;
    default: return -1;
    }
  }

  private final boolean action874(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(937);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_91, 3);
    case 125:
      return reduce(RULE_91, 3);
    case 126:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_91, 3);
    case 142:
      return reduce(RULE_91, 3);
    case 124:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 116:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_91, 3);
    case 151:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_91, 3);
    case 147:
      return reduce(RULE_91, 3);
    case 136:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_91, 3);
    case 148:
      return reduce(RULE_91, 3);
    case 140:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_91, 3);
    case 118:
      return reduce(RULE_91, 3);
    default: throw new BadTokenException(token, new Object[] {CARET, EXCLAIMATION_MARK_EQUALS, FORWARD_SLASH, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_COLON, DOUBLE_PERCENT, DOUBLE_LANGLE, STAR, QUESTION_MARK_COLON, LPAREN, MINUS, AMPERSAND, RBRACE, LSQUARE, DOUBLE_RANGLE, QUESTION_MARK_DOT, PERCENT, PLUS, RPAREN, DOUBLE_EQUALS, DOT, COMMA, DOUBLE_AMPERSAND, DOUBLE_PIPE});
    }
  }

  private final boolean action875(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(938);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_91, 2);
    case 125:
      return reduce(RULE_91, 2);
    case 126:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_91, 2);
    case 142:
      return reduce(RULE_91, 2);
    case 124:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 116:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_91, 2);
    case 151:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_91, 2);
    case 147:
      return reduce(RULE_91, 2);
    case 136:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_91, 2);
    case 148:
      return reduce(RULE_91, 2);
    case 140:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_91, 2);
    case 118:
      return reduce(RULE_91, 2);
    default: throw new BadTokenException(token, new Object[] {CARET, EXCLAIMATION_MARK_EQUALS, FORWARD_SLASH, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_COLON, DOUBLE_PERCENT, DOUBLE_LANGLE, STAR, QUESTION_MARK_COLON, LPAREN, MINUS, AMPERSAND, RBRACE, LSQUARE, DOUBLE_RANGLE, QUESTION_MARK_DOT, PERCENT, PLUS, RPAREN, DOUBLE_EQUALS, DOT, COMMA, DOUBLE_AMPERSAND, DOUBLE_PIPE});
    }
  }

  private final boolean action876(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_80, 2);
    case 148:
      return reduce(RULE_80, 2);
    default: throw new BadTokenException(token, new Object[] {RBRACE, RPAREN});
    }
  }

  private final boolean action877(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_80, 0);
    case 148:
      return reduce(RULE_80, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, RPAREN});
    }
  }

  private final boolean action878(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(939);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_91, 1);
    case 125:
      return reduce(RULE_91, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_91, 1);
    case 142:
      return reduce(RULE_91, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 116:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_91, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_91, 1);
    case 147:
      return reduce(RULE_91, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_91, 1);
    case 148:
      return reduce(RULE_91, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_91, 1);
    case 118:
      return reduce(RULE_91, 1);
    default: throw new BadTokenException(token, new Object[] {CARET, EXCLAIMATION_MARK_EQUALS, FORWARD_SLASH, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_COLON, DOUBLE_PERCENT, DOUBLE_LANGLE, STAR, QUESTION_MARK_COLON, LPAREN, MINUS, AMPERSAND, RBRACE, LSQUARE, DOUBLE_RANGLE, QUESTION_MARK_DOT, PERCENT, PLUS, RPAREN, DOUBLE_EQUALS, DOT, COMMA, DOUBLE_AMPERSAND, DOUBLE_PIPE});
    }
  }

  private final boolean action879(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(940);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_91, 0);
    case 125:
      return reduce(RULE_91, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_91, 0);
    case 142:
      return reduce(RULE_91, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 116:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_91, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_91, 0);
    case 147:
      return reduce(RULE_91, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_91, 0);
    case 148:
      return reduce(RULE_91, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_91, 0);
    case 118:
      return reduce(RULE_91, 0);
    default: throw new BadTokenException(token, new Object[] {CARET, EXCLAIMATION_MARK_EQUALS, FORWARD_SLASH, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, DOUBLE_COLON, DOUBLE_PERCENT, DOUBLE_LANGLE, STAR, QUESTION_MARK_COLON, LPAREN, MINUS, AMPERSAND, RBRACE, LSQUARE, DOUBLE_RANGLE, QUESTION_MARK_DOT, PERCENT, PLUS, RPAREN, DOUBLE_EQUALS, DOT, COMMA, DOUBLE_AMPERSAND, DOUBLE_PIPE});
    }
  }

  private final boolean action880(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_80, 1);
    case 148:
      return reduce(RULE_80, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE, RPAREN});
    }
  }

  private final boolean action881(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto881(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 173;
    case 84: return 329;
    case 62: return 470;
    case 79: return 925;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 61: return 102;
    case 49: return 178;
    case 54: return 227;
    case 81: return 343;
    case 92: return 228;
    case 88: return 347;
    case 82: return 348;
    case 59: return 98;
    case 90: return 350;
    case 51: return 172;
    case 89: return 330;
    case 94: return 331;
    case 86: return 335;
    case 30: return 941;
    case 97: return 338;
    case 67: return 177;
    case 60: return 236;
    case 80: return 341;
    case 28: return 942;
    case 91: return 346;
    case 58: return 95;
    case 85: return 349;
    case 65: return 180;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action882(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto882(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 173;
    case 84: return 329;
    case 62: return 471;
    case 79: return 926;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 61: return 102;
    case 49: return 178;
    case 54: return 227;
    case 81: return 343;
    case 92: return 228;
    case 88: return 347;
    case 82: return 348;
    case 59: return 98;
    case 90: return 350;
    case 51: return 172;
    case 89: return 330;
    case 94: return 331;
    case 86: return 335;
    case 30: return 941;
    case 97: return 338;
    case 67: return 177;
    case 60: return 236;
    case 80: return 341;
    case 28: return 942;
    case 91: return 346;
    case 58: return 95;
    case 85: return 349;
    case 65: return 180;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action883(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(943);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(819);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action884(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto884(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 944;
    default: return -1;
    }
  }

  private final boolean action885(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(945);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action886(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(946);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action887(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(947);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action888(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 3);
    case 154:
      return reduce(RULE_83, 3);
    case 181:
      return reduce(RULE_83, 3);
    case 174:
      return reduce(RULE_83, 3);
    case 184:
      return reduce(RULE_83, 3);
    case 134:
      return reduce(RULE_83, 3);
    case 153:
      return reduce(RULE_83, 3);
    case 185:
      return reduce(RULE_83, 3);
    case 205:
      return reduce(RULE_83, 3);
    case 196:
      return reduce(RULE_83, 3);
    case 98:
      return reduce(RULE_83, 3);
    case 155:
      return reduce(RULE_83, 3);
    case 142:
      return reduce(RULE_83, 3);
    case 124:
      return reduce(RULE_83, 3);
    case 186:
      return reduce(RULE_83, 3);
    case 175:
      return reduce(RULE_83, 3);
    case 128:
      return reduce(RULE_83, 3);
    case 179:
      return reduce(RULE_83, 3);
    case 164:
      return reduce(RULE_83, 3);
    case 203:
      return reduce(RULE_83, 3);
    case 172:
      return reduce(RULE_83, 3);
    case 157:
      return reduce(RULE_83, 3);
    case 195:
      return reduce(RULE_83, 3);
    case 193:
      return reduce(RULE_83, 3);
    case 158:
      return reduce(RULE_83, 3);
    case 131:
      return reduce(RULE_83, 3);
    case 156:
      return reduce(RULE_83, 3);
    case 101:
      return reduce(RULE_83, 3);
    case 102:
      return reduce(RULE_83, 3);
    case 201:
      return reduce(RULE_83, 3);
    case 132:
      return reduce(RULE_83, 3);
    case 202:
      return reduce(RULE_83, 3);
    case 133:
      return reduce(RULE_83, 3);
    case 168:
      return reduce(RULE_83, 3);
    case 194:
      return reduce(RULE_83, 3);
    case 199:
      return reduce(RULE_83, 3);
    case 192:
      return reduce(RULE_83, 3);
    case 200:
      return reduce(RULE_83, 3);
    case 165:
      return reduce(RULE_83, 3);
    case 150:
      return reduce(RULE_83, 3);
    case 189:
      return reduce(RULE_83, 3);
    case 183:
      return reduce(RULE_83, 3);
    case 163:
      return reduce(RULE_83, 3);
    case 198:
      return reduce(RULE_83, 3);
    case 100:
      return reduce(RULE_83, 3);
    case 169:
      return reduce(RULE_83, 3);
    case 190:
      return reduce(RULE_83, 3);
    case 171:
      return reduce(RULE_83, 3);
    case 147:
      return reduce(RULE_83, 3);
    case 207:
      return reduce(RULE_83, 3);
    case 99:
      return reduce(RULE_83, 3);
    case 115:
      return reduce(RULE_83, 3);
    case 119:
      return reduce(RULE_83, 3);
    case 182:
      return reduce(RULE_83, 3);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD});
    }
  }

  private final boolean action889(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 10);
    case 154:
      return reduce(RULE_83, 10);
    case 181:
      return reduce(RULE_83, 10);
    case 174:
      return reduce(RULE_83, 10);
    case 184:
      return reduce(RULE_83, 10);
    case 134:
      return reduce(RULE_83, 10);
    case 153:
      return reduce(RULE_83, 10);
    case 185:
      return reduce(RULE_83, 10);
    case 205:
      return reduce(RULE_83, 10);
    case 196:
      return reduce(RULE_83, 10);
    case 98:
      return reduce(RULE_83, 10);
    case 155:
      return reduce(RULE_83, 10);
    case 142:
      return reduce(RULE_83, 10);
    case 124:
      return reduce(RULE_83, 10);
    case 186:
      return reduce(RULE_83, 10);
    case 175:
      return reduce(RULE_83, 10);
    case 128:
      return reduce(RULE_83, 10);
    case 179:
      return reduce(RULE_83, 10);
    case 164:
      return reduce(RULE_83, 10);
    case 203:
      return reduce(RULE_83, 10);
    case 172:
      return reduce(RULE_83, 10);
    case 157:
      return reduce(RULE_83, 10);
    case 195:
      return reduce(RULE_83, 10);
    case 193:
      return reduce(RULE_83, 10);
    case 158:
      return reduce(RULE_83, 10);
    case 131:
      return reduce(RULE_83, 10);
    case 156:
      return reduce(RULE_83, 10);
    case 101:
      return reduce(RULE_83, 10);
    case 102:
      return reduce(RULE_83, 10);
    case 201:
      return reduce(RULE_83, 10);
    case 132:
      return reduce(RULE_83, 10);
    case 202:
      return reduce(RULE_83, 10);
    case 133:
      return reduce(RULE_83, 10);
    case 168:
      return reduce(RULE_83, 10);
    case 194:
      return reduce(RULE_83, 10);
    case 199:
      return reduce(RULE_83, 10);
    case 192:
      return reduce(RULE_83, 10);
    case 200:
      return reduce(RULE_83, 10);
    case 165:
      return reduce(RULE_83, 10);
    case 150:
      return reduce(RULE_83, 10);
    case 189:
      return reduce(RULE_83, 10);
    case 183:
      return reduce(RULE_83, 10);
    case 163:
      return reduce(RULE_83, 10);
    case 198:
      return reduce(RULE_83, 10);
    case 100:
      return reduce(RULE_83, 10);
    case 169:
      return reduce(RULE_83, 10);
    case 190:
      return reduce(RULE_83, 10);
    case 171:
      return reduce(RULE_83, 10);
    case 147:
      return reduce(RULE_83, 10);
    case 207:
      return reduce(RULE_83, 10);
    case 99:
      return reduce(RULE_83, 10);
    case 115:
      return reduce(RULE_83, 10);
    case 119:
      return reduce(RULE_83, 10);
    case 182:
      return reduce(RULE_83, 10);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD});
    }
  }

  private final boolean action890(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 6);
    case 154:
      return reduce(RULE_83, 6);
    case 181:
      return reduce(RULE_83, 6);
    case 174:
      return reduce(RULE_83, 6);
    case 184:
      return reduce(RULE_83, 6);
    case 134:
      return reduce(RULE_83, 6);
    case 153:
      return reduce(RULE_83, 6);
    case 185:
      return reduce(RULE_83, 6);
    case 205:
      return reduce(RULE_83, 6);
    case 196:
      return reduce(RULE_83, 6);
    case 98:
      return reduce(RULE_83, 6);
    case 155:
      return reduce(RULE_83, 6);
    case 142:
      return reduce(RULE_83, 6);
    case 124:
      return reduce(RULE_83, 6);
    case 186:
      return reduce(RULE_83, 6);
    case 175:
      return reduce(RULE_83, 6);
    case 128:
      return reduce(RULE_83, 6);
    case 179:
      return reduce(RULE_83, 6);
    case 164:
      return reduce(RULE_83, 6);
    case 203:
      return reduce(RULE_83, 6);
    case 172:
      return reduce(RULE_83, 6);
    case 157:
      return reduce(RULE_83, 6);
    case 195:
      return reduce(RULE_83, 6);
    case 193:
      return reduce(RULE_83, 6);
    case 158:
      return reduce(RULE_83, 6);
    case 131:
      return reduce(RULE_83, 6);
    case 156:
      return reduce(RULE_83, 6);
    case 101:
      return reduce(RULE_83, 6);
    case 102:
      return reduce(RULE_83, 6);
    case 201:
      return reduce(RULE_83, 6);
    case 132:
      return reduce(RULE_83, 6);
    case 202:
      return reduce(RULE_83, 6);
    case 133:
      return reduce(RULE_83, 6);
    case 168:
      return reduce(RULE_83, 6);
    case 194:
      return reduce(RULE_83, 6);
    case 199:
      return reduce(RULE_83, 6);
    case 192:
      return reduce(RULE_83, 6);
    case 200:
      return reduce(RULE_83, 6);
    case 165:
      return reduce(RULE_83, 6);
    case 150:
      return reduce(RULE_83, 6);
    case 189:
      return reduce(RULE_83, 6);
    case 183:
      return reduce(RULE_83, 6);
    case 163:
      return reduce(RULE_83, 6);
    case 198:
      return reduce(RULE_83, 6);
    case 100:
      return reduce(RULE_83, 6);
    case 169:
      return reduce(RULE_83, 6);
    case 190:
      return reduce(RULE_83, 6);
    case 171:
      return reduce(RULE_83, 6);
    case 147:
      return reduce(RULE_83, 6);
    case 207:
      return reduce(RULE_83, 6);
    case 99:
      return reduce(RULE_83, 6);
    case 115:
      return reduce(RULE_83, 6);
    case 119:
      return reduce(RULE_83, 6);
    case 182:
      return reduce(RULE_83, 6);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD});
    }
  }

  private final boolean action891(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto891(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 948;
    default: return -1;
    }
  }

  private final boolean action892(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_94, 2);
    case 154:
      return reduce(RULE_94, 2);
    case 181:
      return reduce(RULE_94, 2);
    case 174:
      return reduce(RULE_94, 2);
    case 184:
      return reduce(RULE_94, 2);
    case 185:
      return reduce(RULE_94, 2);
    case 160:
      return reduce(RULE_94, 2);
    case 205:
      return reduce(RULE_94, 2);
    case 196:
      return reduce(RULE_94, 2);
    case 98:
      return reduce(RULE_94, 2);
    case 142:
      return reduce(RULE_94, 2);
    case 155:
      return reduce(RULE_94, 2);
    case 186:
      return reduce(RULE_94, 2);
    case 175:
      return reduce(RULE_94, 2);
    case 128:
      return reduce(RULE_94, 2);
    case 179:
      return reduce(RULE_94, 2);
    case 164:
      return reduce(RULE_94, 2);
    case 203:
      return reduce(RULE_94, 2);
    case 172:
      return reduce(RULE_94, 2);
    case 157:
      return reduce(RULE_94, 2);
    case 195:
      return reduce(RULE_94, 2);
    case 193:
      return reduce(RULE_94, 2);
    case 158:
      return reduce(RULE_94, 2);
    case 131:
      return reduce(RULE_94, 2);
    case 156:
      return reduce(RULE_94, 2);
    case 102:
      return reduce(RULE_94, 2);
    case 101:
      return reduce(RULE_94, 2);
    case 201:
      return reduce(RULE_94, 2);
    case 132:
      return reduce(RULE_94, 2);
    case 202:
      return reduce(RULE_94, 2);
    case 133:
      return reduce(RULE_94, 2);
    case 168:
      return reduce(RULE_94, 2);
    case 194:
      return reduce(RULE_94, 2);
    case 199:
      return reduce(RULE_94, 2);
    case 192:
      return reduce(RULE_94, 2);
    case 200:
      return reduce(RULE_94, 2);
    case 165:
      return reduce(RULE_94, 2);
    case 189:
      return reduce(RULE_94, 2);
    case 183:
      return reduce(RULE_94, 2);
    case 163:
      return reduce(RULE_94, 2);
    case 198:
      return reduce(RULE_94, 2);
    case 100:
      return reduce(RULE_94, 2);
    case 171:
      return reduce(RULE_94, 2);
    case 190:
      return reduce(RULE_94, 2);
    case 169:
      return reduce(RULE_94, 2);
    case 170:
      return reduce(RULE_94, 2);
    case 147:
      return reduce(RULE_94, 2);
    case 207:
      return reduce(RULE_94, 2);
    case 119:
      return reduce(RULE_94, 2);
    case 99:
      return reduce(RULE_94, 2);
    case 115:
      return reduce(RULE_94, 2);
    case 182:
      return reduce(RULE_94, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, NULL_KEYWORD, CATCH_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, FINALLY_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_MINUS, INTEGER_LITERAL, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action893(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      return reduce(RULE_85, 1);
    case 138:
      return reduce(RULE_85, 1);
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action894(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_87, 0);
    case 101:
      return reduce(RULE_87, 0);
    case 155:
      return reduce(RULE_87, 0);
    case 150:
      return reduce(RULE_87, 0);
    case 183:
      return reduce(RULE_87, 0);
    case 175:
      return reduce(RULE_87, 0);
    case 190:
      return reduce(RULE_87, 0);
    case 169:
      return reduce(RULE_87, 0);
    case 164:
      return reduce(RULE_87, 0);
    case 203:
      return reduce(RULE_87, 0);
    case 193:
      return reduce(RULE_87, 0);
    case 182:
      return reduce(RULE_87, 0);
    case 191:
      return reduce(RULE_87, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final int goto894(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 949;
    default: return -1;
    }
  }

  private final boolean action895(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_95, 0);
    case 101:
      return reduce(RULE_95, 0);
    case 181:
      return reduce(RULE_95, 0);
    case 188:
      return reduce(RULE_95, 0);
    case 201:
      return reduce(RULE_95, 0);
    case 202:
      return reduce(RULE_95, 0);
    case 132:
      return reduce(RULE_95, 0);
    case 205:
      return reduce(RULE_95, 0);
    case 133:
      return reduce(RULE_95, 0);
    case 206:
      return reduce(RULE_95, 0);
    case 200:
      return reduce(RULE_95, 0);
    case 192:
      return reduce(RULE_95, 0);
    case 165:
      return reduce(RULE_95, 0);
    case 98:
      return reduce(RULE_95, 0);
    case 155:
      return reduce(RULE_95, 0);
    case 142:
      return reduce(RULE_95, 0);
    case 183:
      return reduce(RULE_95, 0);
    case 186:
      return reduce(RULE_95, 0);
    case 175:
      return reduce(RULE_95, 0);
    case 128:
      return reduce(RULE_95, 0);
    case 171:
      return reduce(RULE_95, 0);
    case 190:
      return reduce(RULE_95, 0);
    case 169:
      return reduce(RULE_95, 0);
    case 179:
      return reduce(RULE_95, 0);
    case 164:
      return reduce(RULE_95, 0);
    case 203:
      return reduce(RULE_95, 0);
    case 147:
      return reduce(RULE_95, 0);
    case 193:
      return reduce(RULE_95, 0);
    case 182:
      return reduce(RULE_95, 0);
    case 158:
      return reduce(RULE_95, 0);
    case 131:
      return reduce(RULE_95, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action896(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_87, 1);
    case 101:
      return reduce(RULE_87, 1);
    case 155:
      return reduce(RULE_87, 1);
    case 150:
      return reduce(RULE_87, 1);
    case 183:
      return reduce(RULE_87, 1);
    case 175:
      return reduce(RULE_87, 1);
    case 190:
      return reduce(RULE_87, 1);
    case 169:
      return reduce(RULE_87, 1);
    case 164:
      return reduce(RULE_87, 1);
    case 203:
      return reduce(RULE_87, 1);
    case 193:
      return reduce(RULE_87, 1);
    case 182:
      return reduce(RULE_87, 1);
    case 191:
      return reduce(RULE_87, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final boolean action897(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 164:
      stateStack.addFirst(950);
      tokenStack.addFirst(token);
      return true;
    case 173:
      stateStack.addFirst(951);
      tokenStack.addFirst(token);
      return true;
    case 191:
      stateStack.addFirst(952);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CREATE_KEYWORD, GETTER_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final boolean action898(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_89, 7);
    case 101:
      return reduce(RULE_89, 7);
    case 181:
      return reduce(RULE_89, 7);
    case 188:
      return reduce(RULE_89, 7);
    case 201:
      return reduce(RULE_89, 7);
    case 202:
      return reduce(RULE_89, 7);
    case 132:
      return reduce(RULE_89, 7);
    case 205:
      return reduce(RULE_89, 7);
    case 133:
      return reduce(RULE_89, 7);
    case 206:
      return reduce(RULE_89, 7);
    case 200:
      return reduce(RULE_89, 7);
    case 192:
      return reduce(RULE_89, 7);
    case 165:
      return reduce(RULE_89, 7);
    case 98:
      return reduce(RULE_89, 7);
    case 155:
      return reduce(RULE_89, 7);
    case 142:
      return reduce(RULE_89, 7);
    case 183:
      return reduce(RULE_89, 7);
    case 186:
      return reduce(RULE_89, 7);
    case 175:
      return reduce(RULE_89, 7);
    case 128:
      return reduce(RULE_89, 7);
    case 171:
      return reduce(RULE_89, 7);
    case 190:
      return reduce(RULE_89, 7);
    case 169:
      return reduce(RULE_89, 7);
    case 179:
      return reduce(RULE_89, 7);
    case 164:
      return reduce(RULE_89, 7);
    case 203:
      return reduce(RULE_89, 7);
    case 147:
      return reduce(RULE_89, 7);
    case 193:
      return reduce(RULE_89, 7);
    case 182:
      return reduce(RULE_89, 7);
    case 158:
      return reduce(RULE_89, 7);
    case 131:
      return reduce(RULE_89, 7);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action899(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_89, 3);
    case 101:
      return reduce(RULE_89, 3);
    case 181:
      return reduce(RULE_89, 3);
    case 188:
      return reduce(RULE_89, 3);
    case 201:
      return reduce(RULE_89, 3);
    case 202:
      return reduce(RULE_89, 3);
    case 132:
      return reduce(RULE_89, 3);
    case 205:
      return reduce(RULE_89, 3);
    case 133:
      return reduce(RULE_89, 3);
    case 206:
      return reduce(RULE_89, 3);
    case 200:
      return reduce(RULE_89, 3);
    case 192:
      return reduce(RULE_89, 3);
    case 165:
      return reduce(RULE_89, 3);
    case 98:
      return reduce(RULE_89, 3);
    case 155:
      return reduce(RULE_89, 3);
    case 142:
      return reduce(RULE_89, 3);
    case 183:
      return reduce(RULE_89, 3);
    case 186:
      return reduce(RULE_89, 3);
    case 175:
      return reduce(RULE_89, 3);
    case 128:
      return reduce(RULE_89, 3);
    case 171:
      return reduce(RULE_89, 3);
    case 190:
      return reduce(RULE_89, 3);
    case 169:
      return reduce(RULE_89, 3);
    case 179:
      return reduce(RULE_89, 3);
    case 164:
      return reduce(RULE_89, 3);
    case 203:
      return reduce(RULE_89, 3);
    case 147:
      return reduce(RULE_89, 3);
    case 193:
      return reduce(RULE_89, 3);
    case 182:
      return reduce(RULE_89, 3);
    case 158:
      return reduce(RULE_89, 3);
    case 131:
      return reduce(RULE_89, 3);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action900(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_71, 3);
    case 101:
      return reduce(RULE_71, 3);
    case 181:
      return reduce(RULE_71, 3);
    case 188:
      return reduce(RULE_71, 3);
    case 201:
      return reduce(RULE_71, 3);
    case 202:
      return reduce(RULE_71, 3);
    case 132:
      return reduce(RULE_71, 3);
    case 205:
      return reduce(RULE_71, 3);
    case 133:
      return reduce(RULE_71, 3);
    case 206:
      return reduce(RULE_71, 3);
    case 200:
      return reduce(RULE_71, 3);
    case 192:
      return reduce(RULE_71, 3);
    case 165:
      return reduce(RULE_71, 3);
    case 98:
      return reduce(RULE_71, 3);
    case 155:
      return reduce(RULE_71, 3);
    case 142:
      return reduce(RULE_71, 3);
    case 183:
      return reduce(RULE_71, 3);
    case 186:
      return reduce(RULE_71, 3);
    case 175:
      return reduce(RULE_71, 3);
    case 128:
      return reduce(RULE_71, 3);
    case 171:
      return reduce(RULE_71, 3);
    case 190:
      return reduce(RULE_71, 3);
    case 169:
      return reduce(RULE_71, 3);
    case 179:
      return reduce(RULE_71, 3);
    case 164:
      return reduce(RULE_71, 3);
    case 203:
      return reduce(RULE_71, 3);
    case 147:
      return reduce(RULE_71, 3);
    case 193:
      return reduce(RULE_71, 3);
    case 182:
      return reduce(RULE_71, 3);
    case 158:
      return reduce(RULE_71, 3);
    case 131:
      return reduce(RULE_71, 3);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action901(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_89, 6);
    case 101:
      return reduce(RULE_89, 6);
    case 181:
      return reduce(RULE_89, 6);
    case 188:
      return reduce(RULE_89, 6);
    case 201:
      return reduce(RULE_89, 6);
    case 202:
      return reduce(RULE_89, 6);
    case 132:
      return reduce(RULE_89, 6);
    case 205:
      return reduce(RULE_89, 6);
    case 133:
      return reduce(RULE_89, 6);
    case 206:
      return reduce(RULE_89, 6);
    case 200:
      return reduce(RULE_89, 6);
    case 192:
      return reduce(RULE_89, 6);
    case 165:
      return reduce(RULE_89, 6);
    case 98:
      return reduce(RULE_89, 6);
    case 155:
      return reduce(RULE_89, 6);
    case 142:
      return reduce(RULE_89, 6);
    case 183:
      return reduce(RULE_89, 6);
    case 186:
      return reduce(RULE_89, 6);
    case 175:
      return reduce(RULE_89, 6);
    case 128:
      return reduce(RULE_89, 6);
    case 171:
      return reduce(RULE_89, 6);
    case 190:
      return reduce(RULE_89, 6);
    case 169:
      return reduce(RULE_89, 6);
    case 179:
      return reduce(RULE_89, 6);
    case 164:
      return reduce(RULE_89, 6);
    case 203:
      return reduce(RULE_89, 6);
    case 147:
      return reduce(RULE_89, 6);
    case 193:
      return reduce(RULE_89, 6);
    case 182:
      return reduce(RULE_89, 6);
    case 158:
      return reduce(RULE_89, 6);
    case 131:
      return reduce(RULE_89, 6);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action902(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_89, 2);
    case 101:
      return reduce(RULE_89, 2);
    case 181:
      return reduce(RULE_89, 2);
    case 188:
      return reduce(RULE_89, 2);
    case 201:
      return reduce(RULE_89, 2);
    case 202:
      return reduce(RULE_89, 2);
    case 132:
      return reduce(RULE_89, 2);
    case 205:
      return reduce(RULE_89, 2);
    case 133:
      return reduce(RULE_89, 2);
    case 206:
      return reduce(RULE_89, 2);
    case 200:
      return reduce(RULE_89, 2);
    case 192:
      return reduce(RULE_89, 2);
    case 165:
      return reduce(RULE_89, 2);
    case 98:
      return reduce(RULE_89, 2);
    case 155:
      return reduce(RULE_89, 2);
    case 142:
      return reduce(RULE_89, 2);
    case 183:
      return reduce(RULE_89, 2);
    case 186:
      return reduce(RULE_89, 2);
    case 175:
      return reduce(RULE_89, 2);
    case 128:
      return reduce(RULE_89, 2);
    case 171:
      return reduce(RULE_89, 2);
    case 190:
      return reduce(RULE_89, 2);
    case 169:
      return reduce(RULE_89, 2);
    case 179:
      return reduce(RULE_89, 2);
    case 164:
      return reduce(RULE_89, 2);
    case 203:
      return reduce(RULE_89, 2);
    case 147:
      return reduce(RULE_89, 2);
    case 193:
      return reduce(RULE_89, 2);
    case 182:
      return reduce(RULE_89, 2);
    case 158:
      return reduce(RULE_89, 2);
    case 131:
      return reduce(RULE_89, 2);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action903(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 33);
    case 101:
      return reduce(RULE_15, 33);
    case 154:
      return reduce(RULE_15, 33);
    case 145:
      return reduce(RULE_15, 33);
    case 132:
      return reduce(RULE_15, 33);
    case 167:
      return reduce(RULE_15, 33);
    case 103:
      return reduce(RULE_15, 33);
    case 120:
      return reduce(RULE_15, 33);
    case 194:
      return reduce(RULE_15, 33);
    case 112:
      return reduce(RULE_15, 33);
    case 148:
      return reduce(RULE_15, 33);
    case 110:
      return reduce(RULE_15, 33);
    case 149:
      return reduce(RULE_15, 33);
    case 108:
      return reduce(RULE_15, 33);
    case 106:
      return reduce(RULE_15, 33);
    case 125:
      return reduce(RULE_15, 33);
    case 105:
      return reduce(RULE_15, 33);
    case 98:
      return reduce(RULE_15, 33);
    case 155:
      return reduce(RULE_15, 33);
    case 138:
      return reduce(RULE_15, 33);
    case 142:
      return reduce(RULE_15, 33);
    case 150:
      return reduce(RULE_15, 33);
    case 197:
      return reduce(RULE_15, 33);
    case 111:
      return reduce(RULE_15, 33);
    case 183:
      return reduce(RULE_15, 33);
    case 175:
      return reduce(RULE_15, 33);
    case 128:
      return reduce(RULE_15, 33);
    case 169:
      return reduce(RULE_15, 33);
    case 190:
      return reduce(RULE_15, 33);
    case 143:
      return reduce(RULE_15, 33);
    case 164:
      return reduce(RULE_15, 33);
    case 203:
      return reduce(RULE_15, 33);
    case 147:
      return reduce(RULE_15, 33);
    case 193:
      return reduce(RULE_15, 33);
    case 182:
      return reduce(RULE_15, 33);
    case 109:
      return reduce(RULE_15, 33);
    case 191:
      return reduce(RULE_15, 33);
    case 131:
      return reduce(RULE_15, 33);
    case 118:
      return reduce(RULE_15, 33);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action904(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 27);
    case 101:
      return reduce(RULE_15, 27);
    case 154:
      return reduce(RULE_15, 27);
    case 145:
      return reduce(RULE_15, 27);
    case 132:
      return reduce(RULE_15, 27);
    case 167:
      return reduce(RULE_15, 27);
    case 103:
      return reduce(RULE_15, 27);
    case 120:
      return reduce(RULE_15, 27);
    case 194:
      return reduce(RULE_15, 27);
    case 112:
      return reduce(RULE_15, 27);
    case 148:
      return reduce(RULE_15, 27);
    case 110:
      return reduce(RULE_15, 27);
    case 149:
      return reduce(RULE_15, 27);
    case 108:
      return reduce(RULE_15, 27);
    case 106:
      return reduce(RULE_15, 27);
    case 125:
      return reduce(RULE_15, 27);
    case 105:
      return reduce(RULE_15, 27);
    case 98:
      return reduce(RULE_15, 27);
    case 155:
      return reduce(RULE_15, 27);
    case 138:
      return reduce(RULE_15, 27);
    case 142:
      return reduce(RULE_15, 27);
    case 150:
      return reduce(RULE_15, 27);
    case 197:
      return reduce(RULE_15, 27);
    case 111:
      return reduce(RULE_15, 27);
    case 183:
      return reduce(RULE_15, 27);
    case 175:
      return reduce(RULE_15, 27);
    case 128:
      return reduce(RULE_15, 27);
    case 169:
      return reduce(RULE_15, 27);
    case 190:
      return reduce(RULE_15, 27);
    case 143:
      return reduce(RULE_15, 27);
    case 164:
      return reduce(RULE_15, 27);
    case 203:
      return reduce(RULE_15, 27);
    case 147:
      return reduce(RULE_15, 27);
    case 193:
      return reduce(RULE_15, 27);
    case 182:
      return reduce(RULE_15, 27);
    case 109:
      return reduce(RULE_15, 27);
    case 191:
      return reduce(RULE_15, 27);
    case 131:
      return reduce(RULE_15, 27);
    case 118:
      return reduce(RULE_15, 27);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action905(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(953);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action906(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 28);
    case 101:
      return reduce(RULE_15, 28);
    case 154:
      return reduce(RULE_15, 28);
    case 145:
      return reduce(RULE_15, 28);
    case 132:
      return reduce(RULE_15, 28);
    case 167:
      return reduce(RULE_15, 28);
    case 103:
      return reduce(RULE_15, 28);
    case 120:
      return reduce(RULE_15, 28);
    case 194:
      return reduce(RULE_15, 28);
    case 112:
      return reduce(RULE_15, 28);
    case 148:
      return reduce(RULE_15, 28);
    case 149:
      return reduce(RULE_15, 28);
    case 110:
      return reduce(RULE_15, 28);
    case 108:
      return reduce(RULE_15, 28);
    case 106:
      return reduce(RULE_15, 28);
    case 125:
      return reduce(RULE_15, 28);
    case 105:
      return reduce(RULE_15, 28);
    case 98:
      return reduce(RULE_15, 28);
    case 155:
      return reduce(RULE_15, 28);
    case 138:
      return reduce(RULE_15, 28);
    case 142:
      return reduce(RULE_15, 28);
    case 150:
      return reduce(RULE_15, 28);
    case 197:
      return reduce(RULE_15, 28);
    case 111:
      return reduce(RULE_15, 28);
    case 183:
      return reduce(RULE_15, 28);
    case 175:
      return reduce(RULE_15, 28);
    case 128:
      return reduce(RULE_15, 28);
    case 169:
      return reduce(RULE_15, 28);
    case 190:
      return reduce(RULE_15, 28);
    case 143:
      return reduce(RULE_15, 28);
    case 164:
      return reduce(RULE_15, 28);
    case 203:
      return reduce(RULE_15, 28);
    case 147:
      return reduce(RULE_15, 28);
    case 193:
      return reduce(RULE_15, 28);
    case 182:
      return reduce(RULE_15, 28);
    case 109:
      return reduce(RULE_15, 28);
    case 191:
      return reduce(RULE_15, 28);
    case 131:
      return reduce(RULE_15, 28);
    case 118:
      return reduce(RULE_15, 28);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action907(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_88, 1);
    case 154:
      return reduce(RULE_88, 1);
    case 181:
      return reduce(RULE_88, 1);
    case 184:
      return reduce(RULE_88, 1);
    case 134:
      return reduce(RULE_88, 1);
    case 153:
      return reduce(RULE_88, 1);
    case 185:
      return reduce(RULE_88, 1);
    case 205:
      return reduce(RULE_88, 1);
    case 148:
      return reduce(RULE_88, 1);
    case 125:
      return reduce(RULE_88, 1);
    case 105:
      return reduce(RULE_88, 1);
    case 98:
      return reduce(RULE_88, 1);
    case 124:
      return reduce(RULE_88, 1);
    case 142:
      return reduce(RULE_88, 1);
    case 138:
      return reduce(RULE_88, 1);
    case 155:
      return reduce(RULE_88, 1);
    case 186:
      return reduce(RULE_88, 1);
    case 175:
      return reduce(RULE_88, 1);
    case 128:
      return reduce(RULE_88, 1);
    case 143:
      return reduce(RULE_88, 1);
    case 179:
      return reduce(RULE_88, 1);
    case 164:
      return reduce(RULE_88, 1);
    case 203:
      return reduce(RULE_88, 1);
    case 195:
      return reduce(RULE_88, 1);
    case 193:
      return reduce(RULE_88, 1);
    case 158:
      return reduce(RULE_88, 1);
    case 131:
      return reduce(RULE_88, 1);
    case 156:
      return reduce(RULE_88, 1);
    case 173:
      return reduce(RULE_88, 1);
    case 101:
      return reduce(RULE_88, 1);
    case 102:
      return reduce(RULE_88, 1);
    case 145:
      return reduce(RULE_88, 1);
    case 201:
      return reduce(RULE_88, 1);
    case 132:
      return reduce(RULE_88, 1);
    case 202:
      return reduce(RULE_88, 1);
    case 167:
      return reduce(RULE_88, 1);
    case 103:
      return reduce(RULE_88, 1);
    case 133:
      return reduce(RULE_88, 1);
    case 120:
      return reduce(RULE_88, 1);
    case 168:
      return reduce(RULE_88, 1);
    case 194:
      return reduce(RULE_88, 1);
    case 112:
      return reduce(RULE_88, 1);
    case 149:
      return reduce(RULE_88, 1);
    case 110:
      return reduce(RULE_88, 1);
    case 192:
      return reduce(RULE_88, 1);
    case 200:
      return reduce(RULE_88, 1);
    case 106:
      return reduce(RULE_88, 1);
    case 108:
      return reduce(RULE_88, 1);
    case 165:
      return reduce(RULE_88, 1);
    case 197:
      return reduce(RULE_88, 1);
    case 150:
      return reduce(RULE_88, 1);
    case 111:
      return reduce(RULE_88, 1);
    case 183:
      return reduce(RULE_88, 1);
    case 198:
      return reduce(RULE_88, 1);
    case 100:
      return reduce(RULE_88, 1);
    case 169:
      return reduce(RULE_88, 1);
    case 190:
      return reduce(RULE_88, 1);
    case 171:
      return reduce(RULE_88, 1);
    case 176:
      return reduce(RULE_88, 1);
    case 147:
      return reduce(RULE_88, 1);
    case 99:
      return reduce(RULE_88, 1);
    case 182:
      return reduce(RULE_88, 1);
    case 109:
      return reduce(RULE_88, 1);
    case 191:
      return reduce(RULE_88, 1);
    case 118:
      return reduce(RULE_88, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, ABSTRACT_KEYWORD, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action908(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_72, 3);
    case 154:
      return reduce(RULE_72, 3);
    case 181:
      return reduce(RULE_72, 3);
    case 184:
      return reduce(RULE_72, 3);
    case 134:
      return reduce(RULE_72, 3);
    case 153:
      return reduce(RULE_72, 3);
    case 185:
      return reduce(RULE_72, 3);
    case 205:
      return reduce(RULE_72, 3);
    case 148:
      return reduce(RULE_72, 3);
    case 125:
      return reduce(RULE_72, 3);
    case 105:
      return reduce(RULE_72, 3);
    case 98:
      return reduce(RULE_72, 3);
    case 155:
      return reduce(RULE_72, 3);
    case 138:
      return reduce(RULE_72, 3);
    case 142:
      return reduce(RULE_72, 3);
    case 124:
      return reduce(RULE_72, 3);
    case 186:
      return reduce(RULE_72, 3);
    case 175:
      return reduce(RULE_72, 3);
    case 128:
      return reduce(RULE_72, 3);
    case 143:
      return reduce(RULE_72, 3);
    case 179:
      return reduce(RULE_72, 3);
    case 164:
      return reduce(RULE_72, 3);
    case 203:
      return reduce(RULE_72, 3);
    case 195:
      return reduce(RULE_72, 3);
    case 193:
      return reduce(RULE_72, 3);
    case 158:
      return reduce(RULE_72, 3);
    case 131:
      return reduce(RULE_72, 3);
    case 156:
      return reduce(RULE_72, 3);
    case 173:
      return reduce(RULE_72, 3);
    case 101:
      return reduce(RULE_72, 3);
    case 102:
      return reduce(RULE_72, 3);
    case 145:
      return reduce(RULE_72, 3);
    case 201:
      return reduce(RULE_72, 3);
    case 132:
      return reduce(RULE_72, 3);
    case 202:
      return reduce(RULE_72, 3);
    case 167:
      return reduce(RULE_72, 3);
    case 103:
      return reduce(RULE_72, 3);
    case 133:
      return reduce(RULE_72, 3);
    case 120:
      return reduce(RULE_72, 3);
    case 168:
      return reduce(RULE_72, 3);
    case 194:
      return reduce(RULE_72, 3);
    case 112:
      return reduce(RULE_72, 3);
    case 149:
      return reduce(RULE_72, 3);
    case 110:
      return reduce(RULE_72, 3);
    case 192:
      return reduce(RULE_72, 3);
    case 200:
      return reduce(RULE_72, 3);
    case 106:
      return reduce(RULE_72, 3);
    case 108:
      return reduce(RULE_72, 3);
    case 165:
      return reduce(RULE_72, 3);
    case 197:
      return reduce(RULE_72, 3);
    case 150:
      return reduce(RULE_72, 3);
    case 111:
      return reduce(RULE_72, 3);
    case 183:
      return reduce(RULE_72, 3);
    case 198:
      return reduce(RULE_72, 3);
    case 100:
      return reduce(RULE_72, 3);
    case 171:
      return reduce(RULE_72, 3);
    case 190:
      return reduce(RULE_72, 3);
    case 169:
      return reduce(RULE_72, 3);
    case 176:
      return reduce(RULE_72, 3);
    case 147:
      return reduce(RULE_72, 3);
    case 99:
      return reduce(RULE_72, 3);
    case 182:
      return reduce(RULE_72, 3);
    case 109:
      return reduce(RULE_72, 3);
    case 191:
      return reduce(RULE_72, 3);
    case 118:
      return reduce(RULE_72, 3);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action909(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(837);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 3);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, COMMA});
    }
  }

  private final boolean action910(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_72, 4);
    case 154:
      return reduce(RULE_72, 4);
    case 181:
      return reduce(RULE_72, 4);
    case 184:
      return reduce(RULE_72, 4);
    case 134:
      return reduce(RULE_72, 4);
    case 153:
      return reduce(RULE_72, 4);
    case 185:
      return reduce(RULE_72, 4);
    case 205:
      return reduce(RULE_72, 4);
    case 148:
      return reduce(RULE_72, 4);
    case 125:
      return reduce(RULE_72, 4);
    case 105:
      return reduce(RULE_72, 4);
    case 98:
      return reduce(RULE_72, 4);
    case 155:
      return reduce(RULE_72, 4);
    case 138:
      return reduce(RULE_72, 4);
    case 142:
      return reduce(RULE_72, 4);
    case 124:
      return reduce(RULE_72, 4);
    case 186:
      return reduce(RULE_72, 4);
    case 175:
      return reduce(RULE_72, 4);
    case 128:
      return reduce(RULE_72, 4);
    case 143:
      return reduce(RULE_72, 4);
    case 179:
      return reduce(RULE_72, 4);
    case 164:
      return reduce(RULE_72, 4);
    case 203:
      return reduce(RULE_72, 4);
    case 195:
      return reduce(RULE_72, 4);
    case 193:
      return reduce(RULE_72, 4);
    case 158:
      return reduce(RULE_72, 4);
    case 131:
      return reduce(RULE_72, 4);
    case 156:
      return reduce(RULE_72, 4);
    case 173:
      return reduce(RULE_72, 4);
    case 101:
      return reduce(RULE_72, 4);
    case 102:
      return reduce(RULE_72, 4);
    case 145:
      return reduce(RULE_72, 4);
    case 201:
      return reduce(RULE_72, 4);
    case 132:
      return reduce(RULE_72, 4);
    case 202:
      return reduce(RULE_72, 4);
    case 167:
      return reduce(RULE_72, 4);
    case 103:
      return reduce(RULE_72, 4);
    case 133:
      return reduce(RULE_72, 4);
    case 120:
      return reduce(RULE_72, 4);
    case 168:
      return reduce(RULE_72, 4);
    case 194:
      return reduce(RULE_72, 4);
    case 112:
      return reduce(RULE_72, 4);
    case 149:
      return reduce(RULE_72, 4);
    case 110:
      return reduce(RULE_72, 4);
    case 192:
      return reduce(RULE_72, 4);
    case 200:
      return reduce(RULE_72, 4);
    case 106:
      return reduce(RULE_72, 4);
    case 108:
      return reduce(RULE_72, 4);
    case 165:
      return reduce(RULE_72, 4);
    case 197:
      return reduce(RULE_72, 4);
    case 150:
      return reduce(RULE_72, 4);
    case 111:
      return reduce(RULE_72, 4);
    case 183:
      return reduce(RULE_72, 4);
    case 198:
      return reduce(RULE_72, 4);
    case 100:
      return reduce(RULE_72, 4);
    case 171:
      return reduce(RULE_72, 4);
    case 190:
      return reduce(RULE_72, 4);
    case 169:
      return reduce(RULE_72, 4);
    case 176:
      return reduce(RULE_72, 4);
    case 147:
      return reduce(RULE_72, 4);
    case 99:
      return reduce(RULE_72, 4);
    case 182:
      return reduce(RULE_72, 4);
    case 109:
      return reduce(RULE_72, 4);
    case 191:
      return reduce(RULE_72, 4);
    case 118:
      return reduce(RULE_72, 4);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, RPAREN, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, QUESTION_MARK_COLON, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, GETTER_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, RANGLE, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, EXTENDS_KEYWORD, AMPERSAND, LSQUARE, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, SHORT_KEYWORD, UBYTE_KEYWORD, CARET, COLON, DOUBLE_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, TRUE_KEYWORD, FLOATING_LITERAL, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, IMPLEMENTS_KEYWORD, RBRACE, INTEGER_LITERAL, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action911(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(837);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_29, 4);
    default: throw new BadTokenException(token, new Object[] {AMPERSAND, COMMA});
    }
  }

  private final boolean action912(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      return reduce(RULE_90, 1);
    case 109:
      return reduce(RULE_90, 1);
    default: throw new BadTokenException(token, new Object[] {RPAREN, COMMA});
    }
  }

  private final boolean action913(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_74, 3);
    case 150:
      return reduce(RULE_74, 3);
    case 109:
      return reduce(RULE_74, 3);
    case 131:
      return reduce(RULE_74, 3);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE});
    }
  }

  private final boolean action914(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_39, 13);
    case 156:
      return reduce(RULE_39, 13);
    case 102:
      return reduce(RULE_39, 13);
    case 101:
      return reduce(RULE_39, 13);
    case 154:
      return reduce(RULE_39, 13);
    case 181:
      return reduce(RULE_39, 13);
    case 174:
      return reduce(RULE_39, 13);
    case 184:
      return reduce(RULE_39, 13);
    case 201:
      return reduce(RULE_39, 13);
    case 202:
      return reduce(RULE_39, 13);
    case 132:
      return reduce(RULE_39, 13);
    case 185:
      return reduce(RULE_39, 13);
    case 133:
      return reduce(RULE_39, 13);
    case 205:
      return reduce(RULE_39, 13);
    case 168:
      return reduce(RULE_39, 13);
    case 196:
      return reduce(RULE_39, 13);
    case 194:
      return reduce(RULE_39, 13);
    case 199:
      return reduce(RULE_39, 13);
    case 200:
      return reduce(RULE_39, 13);
    case 192:
      return reduce(RULE_39, 13);
    case 165:
      return reduce(RULE_39, 13);
    case 98:
      return reduce(RULE_39, 13);
    case 155:
      return reduce(RULE_39, 13);
    case 142:
      return reduce(RULE_39, 13);
    case 189:
      return reduce(RULE_39, 13);
    case 183:
      return reduce(RULE_39, 13);
    case 186:
      return reduce(RULE_39, 13);
    case 163:
      return reduce(RULE_39, 13);
    case 198:
      return reduce(RULE_39, 13);
    case 175:
      return reduce(RULE_39, 13);
    case 100:
      return reduce(RULE_39, 13);
    case 128:
      return reduce(RULE_39, 13);
    case 171:
      return reduce(RULE_39, 13);
    case 190:
      return reduce(RULE_39, 13);
    case 169:
      return reduce(RULE_39, 13);
    case 179:
      return reduce(RULE_39, 13);
    case 164:
      return reduce(RULE_39, 13);
    case 203:
      return reduce(RULE_39, 13);
    case 172:
      return reduce(RULE_39, 13);
    case 147:
      return reduce(RULE_39, 13);
    case 157:
      return reduce(RULE_39, 13);
    case 195:
      return reduce(RULE_39, 13);
    case 207:
      return reduce(RULE_39, 13);
    case 193:
      return reduce(RULE_39, 13);
    case 99:
      return reduce(RULE_39, 13);
    case 115:
      return reduce(RULE_39, 13);
    case 119:
      return reduce(RULE_39, 13);
    case 182:
      return reduce(RULE_39, 13);
    case 158:
      return reduce(RULE_39, 13);
    case 131:
      return reduce(RULE_39, 13);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action915(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_54, 5);
    case 173:
      return reduce(RULE_54, 5);
    case 101:
      return reduce(RULE_54, 5);
    case 155:
      return reduce(RULE_54, 5);
    case 150:
      return reduce(RULE_54, 5);
    case 183:
      return reduce(RULE_54, 5);
    case 175:
      return reduce(RULE_54, 5);
    case 190:
      return reduce(RULE_54, 5);
    case 169:
      return reduce(RULE_54, 5);
    case 164:
      return reduce(RULE_54, 5);
    case 203:
      return reduce(RULE_54, 5);
    case 193:
      return reduce(RULE_54, 5);
    case 182:
      return reduce(RULE_54, 5);
    case 148:
      return reduce(RULE_54, 5);
    case 191:
      return reduce(RULE_54, 5);
    case 131:
      return reduce(RULE_54, 5);
    case 149:
      return reduce(RULE_54, 5);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action916(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(508);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(509);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(954);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 178:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_44, 1);
    case 146:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 116:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_44, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_44, 1);
    case 118:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE_EQUALS, PERCENT, LANGLE, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action917(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(537);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(538);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(955);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 178:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_44, 0);
    case 146:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 116:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_44, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_44, 0);
    case 118:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE_EQUALS, PERCENT, LANGLE, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action918(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_54, 4);
    case 173:
      return reduce(RULE_54, 4);
    case 101:
      return reduce(RULE_54, 4);
    case 155:
      return reduce(RULE_54, 4);
    case 150:
      return reduce(RULE_54, 4);
    case 183:
      return reduce(RULE_54, 4);
    case 175:
      return reduce(RULE_54, 4);
    case 190:
      return reduce(RULE_54, 4);
    case 169:
      return reduce(RULE_54, 4);
    case 164:
      return reduce(RULE_54, 4);
    case 203:
      return reduce(RULE_54, 4);
    case 193:
      return reduce(RULE_54, 4);
    case 182:
      return reduce(RULE_54, 4);
    case 148:
      return reduce(RULE_54, 4);
    case 191:
      return reduce(RULE_54, 4);
    case 131:
      return reduce(RULE_54, 4);
    case 149:
      return reduce(RULE_54, 4);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action919(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_91, 3);
    case 126:
      return reduce(RULE_44, 1);
    case 101:
      return reduce(RULE_91, 3);
    case 116:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_91, 3);
    case 112:
      return reduce(RULE_91, 3);
    case 148:
      return reduce(RULE_91, 3);
    case 110:
      return reduce(RULE_91, 3);
    case 149:
      return reduce(RULE_91, 3);
    case 108:
      return reduce(RULE_91, 3);
    case 106:
      return reduce(RULE_91, 3);
    case 125:
      return reduce(RULE_91, 3);
    case 124:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_91, 3);
    case 142:
      return reduce(RULE_91, 3);
    case 155:
      return reduce(RULE_91, 3);
    case 150:
      return reduce(RULE_91, 3);
    case 111:
      return reduce(RULE_42, 2);
    case 183:
      return reduce(RULE_91, 3);
    case 175:
      return reduce(RULE_91, 3);
    case 190:
      return reduce(RULE_91, 3);
    case 169:
      return reduce(RULE_91, 3);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_91, 3);
    case 164:
      return reduce(RULE_91, 3);
    case 203:
      return reduce(RULE_91, 3);
    case 147:
      return reduce(RULE_91, 3);
    case 193:
      return reduce(RULE_91, 3);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 182:
      return reduce(RULE_91, 3);
    case 140:
      return reduce(RULE_44, 1);
    case 191:
      return reduce(RULE_91, 3);
    case 109:
      return reduce(RULE_91, 3);
    case 131:
      return reduce(RULE_91, 3);
    case 118:
      return reduce(RULE_91, 3);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, DOUBLE_LANGLE, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action920(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_91, 2);
    case 126:
      return reduce(RULE_44, 0);
    case 101:
      return reduce(RULE_91, 2);
    case 116:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_91, 2);
    case 112:
      return reduce(RULE_91, 2);
    case 148:
      return reduce(RULE_91, 2);
    case 110:
      return reduce(RULE_91, 2);
    case 149:
      return reduce(RULE_91, 2);
    case 108:
      return reduce(RULE_91, 2);
    case 106:
      return reduce(RULE_91, 2);
    case 125:
      return reduce(RULE_91, 2);
    case 124:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_91, 2);
    case 142:
      return reduce(RULE_91, 2);
    case 155:
      return reduce(RULE_91, 2);
    case 150:
      return reduce(RULE_91, 2);
    case 111:
      return reduce(RULE_42, 1);
    case 183:
      return reduce(RULE_91, 2);
    case 175:
      return reduce(RULE_91, 2);
    case 190:
      return reduce(RULE_91, 2);
    case 169:
      return reduce(RULE_91, 2);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_91, 2);
    case 164:
      return reduce(RULE_91, 2);
    case 203:
      return reduce(RULE_91, 2);
    case 147:
      return reduce(RULE_91, 2);
    case 193:
      return reduce(RULE_91, 2);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 182:
      return reduce(RULE_91, 2);
    case 140:
      return reduce(RULE_44, 0);
    case 191:
      return reduce(RULE_91, 2);
    case 109:
      return reduce(RULE_91, 2);
    case 131:
      return reduce(RULE_91, 2);
    case 118:
      return reduce(RULE_91, 2);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, DOUBLE_LANGLE, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action921(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_91, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 101:
      return reduce(RULE_91, 1);
    case 116:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_91, 1);
    case 112:
      return reduce(RULE_91, 1);
    case 148:
      return reduce(RULE_91, 1);
    case 110:
      return reduce(RULE_91, 1);
    case 149:
      return reduce(RULE_91, 1);
    case 108:
      return reduce(RULE_91, 1);
    case 106:
      return reduce(RULE_91, 1);
    case 125:
      return reduce(RULE_91, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_91, 1);
    case 142:
      return reduce(RULE_91, 1);
    case 155:
      return reduce(RULE_91, 1);
    case 150:
      return reduce(RULE_91, 1);
    case 183:
      return reduce(RULE_91, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 175:
      return reduce(RULE_91, 1);
    case 190:
      return reduce(RULE_91, 1);
    case 169:
      return reduce(RULE_91, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_91, 1);
    case 164:
      return reduce(RULE_91, 1);
    case 203:
      return reduce(RULE_91, 1);
    case 147:
      return reduce(RULE_91, 1);
    case 193:
      return reduce(RULE_91, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 182:
      return reduce(RULE_91, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 191:
      return reduce(RULE_91, 1);
    case 109:
      return reduce(RULE_91, 1);
    case 131:
      return reduce(RULE_91, 1);
    case 118:
      return reduce(RULE_91, 1);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, DOUBLE_COLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_LANGLE, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action922(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_91, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 101:
      return reduce(RULE_91, 0);
    case 116:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_91, 0);
    case 112:
      return reduce(RULE_91, 0);
    case 148:
      return reduce(RULE_91, 0);
    case 110:
      return reduce(RULE_91, 0);
    case 149:
      return reduce(RULE_91, 0);
    case 108:
      return reduce(RULE_91, 0);
    case 106:
      return reduce(RULE_91, 0);
    case 125:
      return reduce(RULE_91, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_91, 0);
    case 142:
      return reduce(RULE_91, 0);
    case 155:
      return reduce(RULE_91, 0);
    case 150:
      return reduce(RULE_91, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 183:
      return reduce(RULE_91, 0);
    case 175:
      return reduce(RULE_91, 0);
    case 190:
      return reduce(RULE_91, 0);
    case 169:
      return reduce(RULE_91, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_91, 0);
    case 164:
      return reduce(RULE_91, 0);
    case 203:
      return reduce(RULE_91, 0);
    case 147:
      return reduce(RULE_91, 0);
    case 193:
      return reduce(RULE_91, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 182:
      return reduce(RULE_91, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 191:
      return reduce(RULE_91, 0);
    case 109:
      return reduce(RULE_91, 0);
    case 131:
      return reduce(RULE_91, 0);
    case 118:
      return reduce(RULE_91, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, PIPE, QUESTION_MARK, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, DOUBLE_LANGLE, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action923(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_60, 1);
    case 173:
      return reduce(RULE_60, 1);
    case 101:
      return reduce(RULE_60, 1);
    case 155:
      return reduce(RULE_60, 1);
    case 150:
      return reduce(RULE_60, 1);
    case 183:
      return reduce(RULE_60, 1);
    case 175:
      return reduce(RULE_60, 1);
    case 190:
      return reduce(RULE_60, 1);
    case 169:
      return reduce(RULE_60, 1);
    case 164:
      return reduce(RULE_60, 1);
    case 203:
      return reduce(RULE_60, 1);
    case 147:
      return reduce(RULE_60, 1);
    case 193:
      return reduce(RULE_60, 1);
    case 182:
      return reduce(RULE_60, 1);
    case 148:
      return reduce(RULE_60, 1);
    case 191:
      return reduce(RULE_60, 1);
    case 109:
      return reduce(RULE_60, 1);
    case 131:
      return reduce(RULE_60, 1);
    case 149:
      return reduce(RULE_60, 1);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, COMMA, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action924(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 108:
      return reduce(RULE_60, 2);
    case 173:
      return reduce(RULE_60, 2);
    case 101:
      return reduce(RULE_60, 2);
    case 155:
      return reduce(RULE_60, 2);
    case 150:
      return reduce(RULE_60, 2);
    case 183:
      return reduce(RULE_60, 2);
    case 175:
      return reduce(RULE_60, 2);
    case 190:
      return reduce(RULE_60, 2);
    case 169:
      return reduce(RULE_60, 2);
    case 164:
      return reduce(RULE_60, 2);
    case 203:
      return reduce(RULE_60, 2);
    case 147:
      return reduce(RULE_60, 2);
    case 193:
      return reduce(RULE_60, 2);
    case 182:
      return reduce(RULE_60, 2);
    case 148:
      return reduce(RULE_60, 2);
    case 191:
      return reduce(RULE_60, 2);
    case 109:
      return reduce(RULE_60, 2);
    case 131:
      return reduce(RULE_60, 2);
    case 149:
      return reduce(RULE_60, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action925(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_54, 3);
    case 173:
      return reduce(RULE_54, 3);
    case 101:
      return reduce(RULE_54, 3);
    case 155:
      return reduce(RULE_54, 3);
    case 150:
      return reduce(RULE_54, 3);
    case 183:
      return reduce(RULE_54, 3);
    case 175:
      return reduce(RULE_54, 3);
    case 190:
      return reduce(RULE_54, 3);
    case 169:
      return reduce(RULE_54, 3);
    case 164:
      return reduce(RULE_54, 3);
    case 203:
      return reduce(RULE_54, 3);
    case 193:
      return reduce(RULE_54, 3);
    case 182:
      return reduce(RULE_54, 3);
    case 148:
      return reduce(RULE_54, 3);
    case 191:
      return reduce(RULE_54, 3);
    case 131:
      return reduce(RULE_54, 3);
    case 149:
      return reduce(RULE_54, 3);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action926(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_54, 2);
    case 173:
      return reduce(RULE_54, 2);
    case 101:
      return reduce(RULE_54, 2);
    case 155:
      return reduce(RULE_54, 2);
    case 150:
      return reduce(RULE_54, 2);
    case 183:
      return reduce(RULE_54, 2);
    case 175:
      return reduce(RULE_54, 2);
    case 190:
      return reduce(RULE_54, 2);
    case 169:
      return reduce(RULE_54, 2);
    case 164:
      return reduce(RULE_54, 2);
    case 203:
      return reduce(RULE_54, 2);
    case 193:
      return reduce(RULE_54, 2);
    case 182:
      return reduce(RULE_54, 2);
    case 148:
      return reduce(RULE_54, 2);
    case 191:
      return reduce(RULE_54, 2);
    case 131:
      return reduce(RULE_54, 2);
    case 149:
      return reduce(RULE_54, 2);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action927(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 108:
      return reduce(RULE_60, 3);
    case 173:
      return reduce(RULE_60, 3);
    case 101:
      return reduce(RULE_60, 3);
    case 155:
      return reduce(RULE_60, 3);
    case 150:
      return reduce(RULE_60, 3);
    case 183:
      return reduce(RULE_60, 3);
    case 175:
      return reduce(RULE_60, 3);
    case 190:
      return reduce(RULE_60, 3);
    case 169:
      return reduce(RULE_60, 3);
    case 164:
      return reduce(RULE_60, 3);
    case 203:
      return reduce(RULE_60, 3);
    case 147:
      return reduce(RULE_60, 3);
    case 193:
      return reduce(RULE_60, 3);
    case 182:
      return reduce(RULE_60, 3);
    case 148:
      return reduce(RULE_60, 3);
    case 191:
      return reduce(RULE_60, 3);
    case 109:
      return reduce(RULE_60, 3);
    case 131:
      return reduce(RULE_60, 3);
    case 149:
      return reduce(RULE_60, 3);
    default: throw new BadTokenException(token, new Object[] {COLON, GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, RPAREN, COMMA, SETTER_KEYWORD, RSQUARE, LBRACE});
    }
  }

  private final boolean action928(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(546);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(547);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(548);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(549);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(550);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(551);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(552);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(553);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(554);
      tokenStack.addFirst(token);
      return true;
    case 108:
      return reduce(RULE_60, 4);
    case 173:
      return reduce(RULE_60, 4);
    case 101:
      return reduce(RULE_60, 4);
    case 155:
      return reduce(RULE_60, 4);
    case 150:
      return reduce(RULE_60, 4);
    case 183:
      return reduce(RULE_60, 4);
    case 175:
      return reduce(RULE_60, 4);
    case 190:
      return reduce(RULE_60, 4);
    case 169:
      return reduce(RULE_60, 4);
    case 164:
      return reduce(RULE_60, 4);
    case 203:
      return reduce(RULE_60, 4);
    case 147:
      return reduce(RULE_60, 4);
    case 193:
      return reduce(RULE_60, 4);
    case 182:
      return reduce(RULE_60, 4);
    case 148:
      return reduce(RULE_60, 4);
    case 191:
      return reduce(RULE_60, 4);
    case 109:
      return reduce(RULE_60, 4);
    case 131:
      return reduce(RULE_60, 4);
    case 149:
      return reduce(RULE_60, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, AMPERSAND, DOUBLE_EQUALS, RPAREN, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action929(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_36, 8);
    case 126:
      return reduce(RULE_36, 8);
    case 101:
      return reduce(RULE_36, 8);
    case 145:
      return reduce(RULE_36, 8);
    case 116:
      return reduce(RULE_36, 8);
    case 151:
      return reduce(RULE_36, 8);
    case 132:
      return reduce(RULE_36, 8);
    case 134:
      return reduce(RULE_36, 8);
    case 103:
      return reduce(RULE_36, 8);
    case 133:
      return reduce(RULE_36, 8);
    case 120:
      return reduce(RULE_36, 8);
    case 148:
      return reduce(RULE_36, 8);
    case 112:
      return reduce(RULE_36, 8);
    case 149:
      return reduce(RULE_36, 8);
    case 110:
      return reduce(RULE_36, 8);
    case 108:
      return reduce(RULE_36, 8);
    case 106:
      return reduce(RULE_36, 8);
    case 125:
      return reduce(RULE_36, 8);
    case 178:
      return reduce(RULE_36, 8);
    case 155:
      return reduce(RULE_36, 8);
    case 124:
      return reduce(RULE_36, 8);
    case 142:
      return reduce(RULE_36, 8);
    case 146:
      return reduce(RULE_36, 8);
    case 138:
      return reduce(RULE_36, 8);
    case 150:
      return reduce(RULE_36, 8);
    case 183:
      return reduce(RULE_36, 8);
    case 175:
      return reduce(RULE_36, 8);
    case 190:
      return reduce(RULE_36, 8);
    case 169:
      return reduce(RULE_36, 8);
    case 113:
      return reduce(RULE_36, 8);
    case 143:
      return reduce(RULE_36, 8);
    case 164:
      return reduce(RULE_36, 8);
    case 203:
      return reduce(RULE_36, 8);
    case 147:
      return reduce(RULE_36, 8);
    case 130:
      return reduce(RULE_36, 8);
    case 193:
      return reduce(RULE_36, 8);
    case 144:
      return reduce(RULE_36, 8);
    case 136:
      return reduce(RULE_36, 8);
    case 129:
      return reduce(RULE_36, 8);
    case 182:
      return reduce(RULE_36, 8);
    case 122:
      return reduce(RULE_36, 8);
    case 140:
      return reduce(RULE_36, 8);
    case 191:
      return reduce(RULE_36, 8);
    case 109:
      return reduce(RULE_36, 8);
    case 131:
      return reduce(RULE_36, 8);
    case 118:
      return reduce(RULE_36, 8);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_LANGLE, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action930(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      stateStack.addFirst(956);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action931(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_36, 10);
    case 126:
      return reduce(RULE_36, 10);
    case 101:
      return reduce(RULE_36, 10);
    case 145:
      return reduce(RULE_36, 10);
    case 116:
      return reduce(RULE_36, 10);
    case 151:
      return reduce(RULE_36, 10);
    case 132:
      return reduce(RULE_36, 10);
    case 134:
      return reduce(RULE_36, 10);
    case 103:
      return reduce(RULE_36, 10);
    case 133:
      return reduce(RULE_36, 10);
    case 120:
      return reduce(RULE_36, 10);
    case 148:
      return reduce(RULE_36, 10);
    case 112:
      return reduce(RULE_36, 10);
    case 149:
      return reduce(RULE_36, 10);
    case 110:
      return reduce(RULE_36, 10);
    case 108:
      return reduce(RULE_36, 10);
    case 106:
      return reduce(RULE_36, 10);
    case 125:
      return reduce(RULE_36, 10);
    case 178:
      return reduce(RULE_36, 10);
    case 155:
      return reduce(RULE_36, 10);
    case 124:
      return reduce(RULE_36, 10);
    case 142:
      return reduce(RULE_36, 10);
    case 146:
      return reduce(RULE_36, 10);
    case 138:
      return reduce(RULE_36, 10);
    case 150:
      return reduce(RULE_36, 10);
    case 183:
      return reduce(RULE_36, 10);
    case 175:
      return reduce(RULE_36, 10);
    case 190:
      return reduce(RULE_36, 10);
    case 169:
      return reduce(RULE_36, 10);
    case 113:
      return reduce(RULE_36, 10);
    case 143:
      return reduce(RULE_36, 10);
    case 164:
      return reduce(RULE_36, 10);
    case 203:
      return reduce(RULE_36, 10);
    case 147:
      return reduce(RULE_36, 10);
    case 130:
      return reduce(RULE_36, 10);
    case 193:
      return reduce(RULE_36, 10);
    case 144:
      return reduce(RULE_36, 10);
    case 136:
      return reduce(RULE_36, 10);
    case 129:
      return reduce(RULE_36, 10);
    case 182:
      return reduce(RULE_36, 10);
    case 122:
      return reduce(RULE_36, 10);
    case 140:
      return reduce(RULE_36, 10);
    case 191:
      return reduce(RULE_36, 10);
    case 109:
      return reduce(RULE_36, 10);
    case 131:
      return reduce(RULE_36, 10);
    case 118:
      return reduce(RULE_36, 10);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, GETTER_KEYWORD, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_LANGLE, FINAL_KEYWORD, SELFISH_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, LANGLE, PERCENT, QUESTION_MARK_DOT, MUTABLE_KEYWORD, PLUS, DOT, COMMA, SETTER_KEYWORD, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action932(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      return reduce(RULE_93, 1);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action933(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      return reduce(RULE_93, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action934(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto934(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 79: return 333;
    case 52: return 334;
    case 86: return 335;
    case 29: return 336;
    case 30: return 337;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 78: return 957;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 345;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action935(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto935(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 958;
    default: return -1;
    }
  }

  private final boolean action936(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(959);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action937(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto937(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 569;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 570;
    case 95: return 960;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 572;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 573;
    default: return -1;
    }
  }

  private final boolean action938(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto938(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 569;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 570;
    case 95: return 961;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 572;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 573;
    default: return -1;
    }
  }

  private final boolean action939(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto939(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 569;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 570;
    case 95: return 962;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 572;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 573;
    default: return -1;
    }
  }

  private final boolean action940(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto940(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 568;
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 569;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 570;
    case 95: return 963;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 572;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 573;
    default: return -1;
    }
  }

  private final boolean action941(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(507);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(964);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(509);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(965);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 178:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_44, 1);
    case 146:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 116:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_44, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_44, 1);
    case 118:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE_EQUALS, PERCENT, LANGLE, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action942(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(536);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(966);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(967);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(968);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 178:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_44, 0);
    case 146:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 116:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_44, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_44, 0);
    case 118:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE_EQUALS, PERCENT, LANGLE, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action943(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto943(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 969;
    default: return -1;
    }
  }

  private final boolean action944(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_94, 0);
    case 154:
      return reduce(RULE_94, 0);
    case 181:
      return reduce(RULE_94, 0);
    case 174:
      return reduce(RULE_94, 0);
    case 184:
      return reduce(RULE_94, 0);
    case 185:
      return reduce(RULE_94, 0);
    case 160:
      return reduce(RULE_94, 0);
    case 205:
      return reduce(RULE_94, 0);
    case 196:
      return reduce(RULE_94, 0);
    case 98:
      return reduce(RULE_94, 0);
    case 142:
      return reduce(RULE_94, 0);
    case 155:
      return reduce(RULE_94, 0);
    case 186:
      return reduce(RULE_94, 0);
    case 175:
      return reduce(RULE_94, 0);
    case 128:
      return reduce(RULE_94, 0);
    case 179:
      return reduce(RULE_94, 0);
    case 164:
      return reduce(RULE_94, 0);
    case 203:
      return reduce(RULE_94, 0);
    case 172:
      return reduce(RULE_94, 0);
    case 195:
      return reduce(RULE_94, 0);
    case 157:
      return reduce(RULE_94, 0);
    case 193:
      return reduce(RULE_94, 0);
    case 158:
      return reduce(RULE_94, 0);
    case 131:
      return reduce(RULE_94, 0);
    case 156:
      return reduce(RULE_94, 0);
    case 102:
      return reduce(RULE_94, 0);
    case 101:
      return reduce(RULE_94, 0);
    case 201:
      return reduce(RULE_94, 0);
    case 132:
      return reduce(RULE_94, 0);
    case 202:
      return reduce(RULE_94, 0);
    case 133:
      return reduce(RULE_94, 0);
    case 168:
      return reduce(RULE_94, 0);
    case 194:
      return reduce(RULE_94, 0);
    case 199:
      return reduce(RULE_94, 0);
    case 192:
      return reduce(RULE_94, 0);
    case 200:
      return reduce(RULE_94, 0);
    case 165:
      return reduce(RULE_94, 0);
    case 189:
      return reduce(RULE_94, 0);
    case 183:
      return reduce(RULE_94, 0);
    case 163:
      return reduce(RULE_94, 0);
    case 198:
      return reduce(RULE_94, 0);
    case 100:
      return reduce(RULE_94, 0);
    case 171:
      return reduce(RULE_94, 0);
    case 190:
      return reduce(RULE_94, 0);
    case 169:
      return reduce(RULE_94, 0);
    case 170:
      return reduce(RULE_94, 0);
    case 147:
      return reduce(RULE_94, 0);
    case 207:
      return reduce(RULE_94, 0);
    case 115:
      return reduce(RULE_94, 0);
    case 99:
      return reduce(RULE_94, 0);
    case 119:
      return reduce(RULE_94, 0);
    case 182:
      return reduce(RULE_94, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, NULL_KEYWORD, CATCH_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, FINALLY_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, INTEGER_LITERAL, DOUBLE_MINUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action945(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 4);
    case 154:
      return reduce(RULE_83, 4);
    case 181:
      return reduce(RULE_83, 4);
    case 174:
      return reduce(RULE_83, 4);
    case 184:
      return reduce(RULE_83, 4);
    case 134:
      return reduce(RULE_83, 4);
    case 153:
      return reduce(RULE_83, 4);
    case 185:
      return reduce(RULE_83, 4);
    case 205:
      return reduce(RULE_83, 4);
    case 196:
      return reduce(RULE_83, 4);
    case 98:
      return reduce(RULE_83, 4);
    case 155:
      return reduce(RULE_83, 4);
    case 142:
      return reduce(RULE_83, 4);
    case 124:
      return reduce(RULE_83, 4);
    case 186:
      return reduce(RULE_83, 4);
    case 175:
      return reduce(RULE_83, 4);
    case 128:
      return reduce(RULE_83, 4);
    case 179:
      return reduce(RULE_83, 4);
    case 164:
      return reduce(RULE_83, 4);
    case 203:
      return reduce(RULE_83, 4);
    case 172:
      return reduce(RULE_83, 4);
    case 195:
      return reduce(RULE_83, 4);
    case 157:
      return reduce(RULE_83, 4);
    case 193:
      return reduce(RULE_83, 4);
    case 158:
      return reduce(RULE_83, 4);
    case 131:
      return reduce(RULE_83, 4);
    case 156:
      return reduce(RULE_83, 4);
    case 102:
      return reduce(RULE_83, 4);
    case 101:
      return reduce(RULE_83, 4);
    case 201:
      return reduce(RULE_83, 4);
    case 202:
      return reduce(RULE_83, 4);
    case 132:
      return reduce(RULE_83, 4);
    case 133:
      return reduce(RULE_83, 4);
    case 168:
      return reduce(RULE_83, 4);
    case 194:
      return reduce(RULE_83, 4);
    case 199:
      return reduce(RULE_83, 4);
    case 192:
      return reduce(RULE_83, 4);
    case 200:
      return reduce(RULE_83, 4);
    case 165:
      return reduce(RULE_83, 4);
    case 150:
      return reduce(RULE_83, 4);
    case 189:
      return reduce(RULE_83, 4);
    case 183:
      return reduce(RULE_83, 4);
    case 163:
      return reduce(RULE_83, 4);
    case 198:
      return reduce(RULE_83, 4);
    case 100:
      return reduce(RULE_83, 4);
    case 171:
      return reduce(RULE_83, 4);
    case 190:
      return reduce(RULE_83, 4);
    case 169:
      return reduce(RULE_83, 4);
    case 147:
      return reduce(RULE_83, 4);
    case 207:
      return reduce(RULE_83, 4);
    case 119:
      return reduce(RULE_83, 4);
    case 115:
      return reduce(RULE_83, 4);
    case 99:
      return reduce(RULE_83, 4);
    case 182:
      return reduce(RULE_83, 4);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, RBRACE, WHILE_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action946(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 8);
    case 154:
      return reduce(RULE_83, 8);
    case 181:
      return reduce(RULE_83, 8);
    case 174:
      return reduce(RULE_83, 8);
    case 184:
      return reduce(RULE_83, 8);
    case 134:
      return reduce(RULE_83, 8);
    case 153:
      return reduce(RULE_83, 8);
    case 185:
      return reduce(RULE_83, 8);
    case 205:
      return reduce(RULE_83, 8);
    case 196:
      return reduce(RULE_83, 8);
    case 98:
      return reduce(RULE_83, 8);
    case 155:
      return reduce(RULE_83, 8);
    case 142:
      return reduce(RULE_83, 8);
    case 124:
      return reduce(RULE_83, 8);
    case 186:
      return reduce(RULE_83, 8);
    case 175:
      return reduce(RULE_83, 8);
    case 128:
      return reduce(RULE_83, 8);
    case 179:
      return reduce(RULE_83, 8);
    case 164:
      return reduce(RULE_83, 8);
    case 203:
      return reduce(RULE_83, 8);
    case 172:
      return reduce(RULE_83, 8);
    case 195:
      return reduce(RULE_83, 8);
    case 157:
      return reduce(RULE_83, 8);
    case 193:
      return reduce(RULE_83, 8);
    case 158:
      return reduce(RULE_83, 8);
    case 131:
      return reduce(RULE_83, 8);
    case 156:
      return reduce(RULE_83, 8);
    case 102:
      return reduce(RULE_83, 8);
    case 101:
      return reduce(RULE_83, 8);
    case 201:
      return reduce(RULE_83, 8);
    case 202:
      return reduce(RULE_83, 8);
    case 132:
      return reduce(RULE_83, 8);
    case 133:
      return reduce(RULE_83, 8);
    case 168:
      return reduce(RULE_83, 8);
    case 194:
      return reduce(RULE_83, 8);
    case 199:
      return reduce(RULE_83, 8);
    case 192:
      return reduce(RULE_83, 8);
    case 200:
      return reduce(RULE_83, 8);
    case 165:
      return reduce(RULE_83, 8);
    case 150:
      return reduce(RULE_83, 8);
    case 189:
      return reduce(RULE_83, 8);
    case 183:
      return reduce(RULE_83, 8);
    case 163:
      return reduce(RULE_83, 8);
    case 198:
      return reduce(RULE_83, 8);
    case 100:
      return reduce(RULE_83, 8);
    case 171:
      return reduce(RULE_83, 8);
    case 190:
      return reduce(RULE_83, 8);
    case 169:
      return reduce(RULE_83, 8);
    case 147:
      return reduce(RULE_83, 8);
    case 207:
      return reduce(RULE_83, 8);
    case 119:
      return reduce(RULE_83, 8);
    case 115:
      return reduce(RULE_83, 8);
    case 99:
      return reduce(RULE_83, 8);
    case 182:
      return reduce(RULE_83, 8);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, RBRACE, WHILE_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action947(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_83, 12);
    case 154:
      return reduce(RULE_83, 12);
    case 181:
      return reduce(RULE_83, 12);
    case 174:
      return reduce(RULE_83, 12);
    case 184:
      return reduce(RULE_83, 12);
    case 134:
      return reduce(RULE_83, 12);
    case 153:
      return reduce(RULE_83, 12);
    case 185:
      return reduce(RULE_83, 12);
    case 205:
      return reduce(RULE_83, 12);
    case 196:
      return reduce(RULE_83, 12);
    case 98:
      return reduce(RULE_83, 12);
    case 155:
      return reduce(RULE_83, 12);
    case 142:
      return reduce(RULE_83, 12);
    case 124:
      return reduce(RULE_83, 12);
    case 186:
      return reduce(RULE_83, 12);
    case 175:
      return reduce(RULE_83, 12);
    case 128:
      return reduce(RULE_83, 12);
    case 179:
      return reduce(RULE_83, 12);
    case 164:
      return reduce(RULE_83, 12);
    case 203:
      return reduce(RULE_83, 12);
    case 172:
      return reduce(RULE_83, 12);
    case 195:
      return reduce(RULE_83, 12);
    case 157:
      return reduce(RULE_83, 12);
    case 193:
      return reduce(RULE_83, 12);
    case 158:
      return reduce(RULE_83, 12);
    case 131:
      return reduce(RULE_83, 12);
    case 156:
      return reduce(RULE_83, 12);
    case 102:
      return reduce(RULE_83, 12);
    case 101:
      return reduce(RULE_83, 12);
    case 201:
      return reduce(RULE_83, 12);
    case 202:
      return reduce(RULE_83, 12);
    case 132:
      return reduce(RULE_83, 12);
    case 133:
      return reduce(RULE_83, 12);
    case 168:
      return reduce(RULE_83, 12);
    case 194:
      return reduce(RULE_83, 12);
    case 199:
      return reduce(RULE_83, 12);
    case 192:
      return reduce(RULE_83, 12);
    case 200:
      return reduce(RULE_83, 12);
    case 165:
      return reduce(RULE_83, 12);
    case 150:
      return reduce(RULE_83, 12);
    case 189:
      return reduce(RULE_83, 12);
    case 183:
      return reduce(RULE_83, 12);
    case 163:
      return reduce(RULE_83, 12);
    case 198:
      return reduce(RULE_83, 12);
    case 100:
      return reduce(RULE_83, 12);
    case 171:
      return reduce(RULE_83, 12);
    case 190:
      return reduce(RULE_83, 12);
    case 169:
      return reduce(RULE_83, 12);
    case 147:
      return reduce(RULE_83, 12);
    case 207:
      return reduce(RULE_83, 12);
    case 119:
      return reduce(RULE_83, 12);
    case 115:
      return reduce(RULE_83, 12);
    case 99:
      return reduce(RULE_83, 12);
    case 182:
      return reduce(RULE_83, 12);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, SEMICOLON, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, RBRACE, WHILE_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action948(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_94, 3);
    case 154:
      return reduce(RULE_94, 3);
    case 181:
      return reduce(RULE_94, 3);
    case 174:
      return reduce(RULE_94, 3);
    case 184:
      return reduce(RULE_94, 3);
    case 185:
      return reduce(RULE_94, 3);
    case 160:
      return reduce(RULE_94, 3);
    case 205:
      return reduce(RULE_94, 3);
    case 196:
      return reduce(RULE_94, 3);
    case 98:
      return reduce(RULE_94, 3);
    case 142:
      return reduce(RULE_94, 3);
    case 155:
      return reduce(RULE_94, 3);
    case 186:
      return reduce(RULE_94, 3);
    case 175:
      return reduce(RULE_94, 3);
    case 128:
      return reduce(RULE_94, 3);
    case 179:
      return reduce(RULE_94, 3);
    case 164:
      return reduce(RULE_94, 3);
    case 203:
      return reduce(RULE_94, 3);
    case 172:
      return reduce(RULE_94, 3);
    case 195:
      return reduce(RULE_94, 3);
    case 157:
      return reduce(RULE_94, 3);
    case 193:
      return reduce(RULE_94, 3);
    case 158:
      return reduce(RULE_94, 3);
    case 131:
      return reduce(RULE_94, 3);
    case 156:
      return reduce(RULE_94, 3);
    case 102:
      return reduce(RULE_94, 3);
    case 101:
      return reduce(RULE_94, 3);
    case 201:
      return reduce(RULE_94, 3);
    case 132:
      return reduce(RULE_94, 3);
    case 202:
      return reduce(RULE_94, 3);
    case 133:
      return reduce(RULE_94, 3);
    case 168:
      return reduce(RULE_94, 3);
    case 194:
      return reduce(RULE_94, 3);
    case 199:
      return reduce(RULE_94, 3);
    case 192:
      return reduce(RULE_94, 3);
    case 200:
      return reduce(RULE_94, 3);
    case 165:
      return reduce(RULE_94, 3);
    case 189:
      return reduce(RULE_94, 3);
    case 183:
      return reduce(RULE_94, 3);
    case 163:
      return reduce(RULE_94, 3);
    case 198:
      return reduce(RULE_94, 3);
    case 100:
      return reduce(RULE_94, 3);
    case 171:
      return reduce(RULE_94, 3);
    case 190:
      return reduce(RULE_94, 3);
    case 169:
      return reduce(RULE_94, 3);
    case 170:
      return reduce(RULE_94, 3);
    case 147:
      return reduce(RULE_94, 3);
    case 207:
      return reduce(RULE_94, 3);
    case 115:
      return reduce(RULE_94, 3);
    case 99:
      return reduce(RULE_94, 3);
    case 119:
      return reduce(RULE_94, 3);
    case 182:
      return reduce(RULE_94, 3);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, NULL_KEYWORD, CATCH_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, BREAK_KEYWORD, THIS_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, FINALLY_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_PLUS, INTEGER_LITERAL, DOUBLE_MINUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action949(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 150:
      stateStack.addFirst(970);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 164:
      return reduce(RULE_2, 0);
    case 173:
      return reduce(RULE_2, 0);
    case 191:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final int goto949(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 19: return 896;
    case 26: return 16;
    case 27: return 897;
    default: return -1;
    }
  }

  private final boolean action950(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(971);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_96, 5);
    case 101:
      return reduce(RULE_96, 5);
    case 155:
      return reduce(RULE_96, 5);
    case 150:
      return reduce(RULE_96, 5);
    case 183:
      return reduce(RULE_96, 5);
    case 175:
      return reduce(RULE_96, 5);
    case 190:
      return reduce(RULE_96, 5);
    case 169:
      return reduce(RULE_96, 5);
    case 164:
      return reduce(RULE_96, 5);
    case 203:
      return reduce(RULE_96, 5);
    case 193:
      return reduce(RULE_96, 5);
    case 182:
      return reduce(RULE_96, 5);
    case 191:
      return reduce(RULE_96, 5);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, LPAREN, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final int goto950(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 972;
    default: return -1;
    }
  }

  private final boolean action951(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_96, 0);
    case 101:
      return reduce(RULE_96, 0);
    case 155:
      return reduce(RULE_96, 0);
    case 150:
      return reduce(RULE_96, 0);
    case 183:
      return reduce(RULE_96, 0);
    case 175:
      return reduce(RULE_96, 0);
    case 190:
      return reduce(RULE_96, 0);
    case 169:
      return reduce(RULE_96, 0);
    case 164:
      return reduce(RULE_96, 0);
    case 203:
      return reduce(RULE_96, 0);
    case 193:
      return reduce(RULE_96, 0);
    case 182:
      return reduce(RULE_96, 0);
    case 191:
      return reduce(RULE_96, 0);
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, THROWS_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, LBRACE});
    }
  }

  private final int goto951(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 973;
    default: return -1;
    }
  }

  private final boolean action952(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 132:
      stateStack.addFirst(974);
      tokenStack.addFirst(token);
      return true;
    case 173:
      return reduce(RULE_96, 2);
    case 101:
      return reduce(RULE_96, 2);
    case 155:
      return reduce(RULE_96, 2);
    case 150:
      return reduce(RULE_96, 2);
    case 183:
      return reduce(RULE_96, 2);
    case 175:
      return reduce(RULE_96, 2);
    case 190:
      return reduce(RULE_96, 2);
    case 169:
      return reduce(RULE_96, 2);
    case 164:
      return reduce(RULE_96, 2);
    case 203:
      return reduce(RULE_96, 2);
    case 193:
      return reduce(RULE_96, 2);
    case 182:
      return reduce(RULE_96, 2);
    case 191:
      return reduce(RULE_96, 2);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, LPAREN, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final int goto952(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 975;
    default: return -1;
    }
  }

  private final boolean action953(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_15, 29);
    case 101:
      return reduce(RULE_15, 29);
    case 154:
      return reduce(RULE_15, 29);
    case 145:
      return reduce(RULE_15, 29);
    case 132:
      return reduce(RULE_15, 29);
    case 167:
      return reduce(RULE_15, 29);
    case 103:
      return reduce(RULE_15, 29);
    case 120:
      return reduce(RULE_15, 29);
    case 194:
      return reduce(RULE_15, 29);
    case 112:
      return reduce(RULE_15, 29);
    case 148:
      return reduce(RULE_15, 29);
    case 110:
      return reduce(RULE_15, 29);
    case 149:
      return reduce(RULE_15, 29);
    case 108:
      return reduce(RULE_15, 29);
    case 106:
      return reduce(RULE_15, 29);
    case 125:
      return reduce(RULE_15, 29);
    case 105:
      return reduce(RULE_15, 29);
    case 98:
      return reduce(RULE_15, 29);
    case 142:
      return reduce(RULE_15, 29);
    case 138:
      return reduce(RULE_15, 29);
    case 155:
      return reduce(RULE_15, 29);
    case 150:
      return reduce(RULE_15, 29);
    case 197:
      return reduce(RULE_15, 29);
    case 111:
      return reduce(RULE_15, 29);
    case 183:
      return reduce(RULE_15, 29);
    case 175:
      return reduce(RULE_15, 29);
    case 128:
      return reduce(RULE_15, 29);
    case 169:
      return reduce(RULE_15, 29);
    case 190:
      return reduce(RULE_15, 29);
    case 143:
      return reduce(RULE_15, 29);
    case 164:
      return reduce(RULE_15, 29);
    case 203:
      return reduce(RULE_15, 29);
    case 147:
      return reduce(RULE_15, 29);
    case 193:
      return reduce(RULE_15, 29);
    case 182:
      return reduce(RULE_15, 29);
    case 109:
      return reduce(RULE_15, 29);
    case 191:
      return reduce(RULE_15, 29);
    case 131:
      return reduce(RULE_15, 29);
    case 118:
      return reduce(RULE_15, 29);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, UNDERSCORE, RANGLE, LPAREN, EXTENDS_KEYWORD, AMPERSAND, DOUBLE_RANGLE, SUPER_KEYWORD, RPAREN, DOUBLE_EQUALS, DOUBLE_AMPERSAND, RSQUARE, COLON, CARET, EXCLAIMATION_MARK_EQUALS, ARROW, NAME, QUESTION_MARK, PIPE, ABSTRACT_KEYWORD, SEMICOLON, THROWS_KEYWORD, NATIVE_KEYWORD, DOUBLE_COLON, IMMUTABLE_KEYWORD, HASH, SELFISH_KEYWORD, FINAL_KEYWORD, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action954(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto954(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 79: return 702;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 916;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 917;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action955(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto955(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 84: return 329;
    case 89: return 330;
    case 94: return 331;
    case 79: return 757;
    case 93: return 332;
    case 52: return 334;
    case 86: return 335;
    case 30: return 916;
    case 97: return 338;
    case 87: return 339;
    case 60: return 340;
    case 80: return 341;
    case 81: return 343;
    case 54: return 344;
    case 92: return 228;
    case 28: return 917;
    case 91: return 346;
    case 88: return 347;
    case 82: return 348;
    case 85: return 349;
    case 90: return 350;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action956(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_36, 9);
    case 173:
      return reduce(RULE_36, 9);
    case 101:
      return reduce(RULE_36, 9);
    case 145:
      return reduce(RULE_36, 9);
    case 116:
      return reduce(RULE_36, 9);
    case 151:
      return reduce(RULE_36, 9);
    case 134:
      return reduce(RULE_36, 9);
    case 132:
      return reduce(RULE_36, 9);
    case 103:
      return reduce(RULE_36, 9);
    case 133:
      return reduce(RULE_36, 9);
    case 120:
      return reduce(RULE_36, 9);
    case 148:
      return reduce(RULE_36, 9);
    case 112:
      return reduce(RULE_36, 9);
    case 149:
      return reduce(RULE_36, 9);
    case 110:
      return reduce(RULE_36, 9);
    case 108:
      return reduce(RULE_36, 9);
    case 106:
      return reduce(RULE_36, 9);
    case 125:
      return reduce(RULE_36, 9);
    case 178:
      return reduce(RULE_36, 9);
    case 155:
      return reduce(RULE_36, 9);
    case 124:
      return reduce(RULE_36, 9);
    case 142:
      return reduce(RULE_36, 9);
    case 146:
      return reduce(RULE_36, 9);
    case 138:
      return reduce(RULE_36, 9);
    case 150:
      return reduce(RULE_36, 9);
    case 183:
      return reduce(RULE_36, 9);
    case 175:
      return reduce(RULE_36, 9);
    case 113:
      return reduce(RULE_36, 9);
    case 169:
      return reduce(RULE_36, 9);
    case 190:
      return reduce(RULE_36, 9);
    case 143:
      return reduce(RULE_36, 9);
    case 164:
      return reduce(RULE_36, 9);
    case 203:
      return reduce(RULE_36, 9);
    case 147:
      return reduce(RULE_36, 9);
    case 130:
      return reduce(RULE_36, 9);
    case 193:
      return reduce(RULE_36, 9);
    case 129:
      return reduce(RULE_36, 9);
    case 136:
      return reduce(RULE_36, 9);
    case 144:
      return reduce(RULE_36, 9);
    case 182:
      return reduce(RULE_36, 9);
    case 140:
      return reduce(RULE_36, 9);
    case 122:
      return reduce(RULE_36, 9);
    case 109:
      return reduce(RULE_36, 9);
    case 191:
      return reduce(RULE_36, 9);
    case 131:
      return reduce(RULE_36, 9);
    case 118:
      return reduce(RULE_36, 9);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, FORWARD_SLASH, SINCE_SPECIFIER, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, RPAREN, DOUBLE_EQUALS, RSQUARE, DOUBLE_AMPERSAND, COLON, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, ABSTRACT_KEYWORD, EXCLAIMATION_MARK, QUESTION_MARK, RANGLE_EQUALS, PIPE, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, DOUBLE_LANGLE, QUESTION_MARK_COLON, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, LANGLE_EQUALS, STATIC_KEYWORD, QUESTION_MARK_DOT, PERCENT, LANGLE, MUTABLE_KEYWORD, DOT, PLUS, SETTER_KEYWORD, COMMA, LBRACE, DOUBLE_PIPE});
    }
  }

  private final boolean action957(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      return reduce(RULE_93, 2);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action958(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_97, 1);
    case 156:
      return reduce(RULE_97, 1);
    case 101:
      return reduce(RULE_97, 1);
    case 102:
      return reduce(RULE_97, 1);
    case 154:
      return reduce(RULE_97, 1);
    case 181:
      return reduce(RULE_97, 1);
    case 174:
      return reduce(RULE_97, 1);
    case 184:
      return reduce(RULE_97, 1);
    case 201:
      return reduce(RULE_97, 1);
    case 132:
      return reduce(RULE_97, 1);
    case 202:
      return reduce(RULE_97, 1);
    case 185:
      return reduce(RULE_97, 1);
    case 133:
      return reduce(RULE_97, 1);
    case 205:
      return reduce(RULE_97, 1);
    case 168:
      return reduce(RULE_97, 1);
    case 196:
      return reduce(RULE_97, 1);
    case 194:
      return reduce(RULE_97, 1);
    case 199:
      return reduce(RULE_97, 1);
    case 200:
      return reduce(RULE_97, 1);
    case 192:
      return reduce(RULE_97, 1);
    case 165:
      return reduce(RULE_97, 1);
    case 98:
      return reduce(RULE_97, 1);
    case 155:
      return reduce(RULE_97, 1);
    case 142:
      return reduce(RULE_97, 1);
    case 189:
      return reduce(RULE_97, 1);
    case 183:
      return reduce(RULE_97, 1);
    case 163:
      return reduce(RULE_97, 1);
    case 186:
      return reduce(RULE_97, 1);
    case 198:
      return reduce(RULE_97, 1);
    case 100:
      return reduce(RULE_97, 1);
    case 175:
      return reduce(RULE_97, 1);
    case 128:
      return reduce(RULE_97, 1);
    case 169:
      return reduce(RULE_97, 1);
    case 190:
      return reduce(RULE_97, 1);
    case 171:
      return reduce(RULE_97, 1);
    case 179:
      return reduce(RULE_97, 1);
    case 164:
      return reduce(RULE_97, 1);
    case 203:
      return reduce(RULE_97, 1);
    case 172:
      return reduce(RULE_97, 1);
    case 195:
      return reduce(RULE_97, 1);
    case 157:
      return reduce(RULE_97, 1);
    case 147:
      return reduce(RULE_97, 1);
    case 207:
      return reduce(RULE_97, 1);
    case 193:
      return reduce(RULE_97, 1);
    case 119:
      return reduce(RULE_97, 1);
    case 115:
      return reduce(RULE_97, 1);
    case 99:
      return reduce(RULE_97, 1);
    case 182:
      return reduce(RULE_97, 1);
    case 158:
      return reduce(RULE_97, 1);
    case 131:
      return reduce(RULE_97, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, OBJECT_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, IMMUTABLE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, RBRACE, BREAK_KEYWORD, THIS_KEYWORD, WHILE_KEYWORD, STATIC_KEYWORD, INTEGER_LITERAL, DOUBLE_MINUS, DOUBLE_PLUS, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action959(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto959(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 976;
    default: return -1;
    }
  }

  private final boolean action960(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_80, 6);
    case 148:
      return reduce(RULE_80, 6);
    default: throw new BadTokenException(token, new Object[] {RBRACE, RPAREN});
    }
  }

  private final boolean action961(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_80, 5);
    case 148:
      return reduce(RULE_80, 5);
    default: throw new BadTokenException(token, new Object[] {RBRACE, RPAREN});
    }
  }

  private final boolean action962(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_80, 4);
    case 148:
      return reduce(RULE_80, 4);
    default: throw new BadTokenException(token, new Object[] {RBRACE, RPAREN});
    }
  }

  private final boolean action963(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 147:
      return reduce(RULE_80, 3);
    case 148:
      return reduce(RULE_80, 3);
    default: throw new BadTokenException(token, new Object[] {RBRACE, RPAREN});
    }
  }

  private final boolean action964(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 120:
      return reduce(RULE_20, 2);
    case 145:
      return reduce(RULE_20, 2);
    case 148:
      return reduce(RULE_20, 2);
    case 109:
      return reduce(RULE_20, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, RANGLE, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, COMMA, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto964(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 696;
    case 30: return 678;
    case 97: return 697;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action965(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto965(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 173;
    case 84: return 329;
    case 62: return 470;
    case 79: return 702;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 61: return 102;
    case 49: return 178;
    case 54: return 227;
    case 81: return 343;
    case 92: return 228;
    case 88: return 347;
    case 82: return 348;
    case 59: return 98;
    case 90: return 350;
    case 51: return 172;
    case 89: return 330;
    case 94: return 331;
    case 86: return 335;
    case 30: return 941;
    case 97: return 338;
    case 67: return 177;
    case 60: return 236;
    case 80: return 341;
    case 28: return 942;
    case 91: return 346;
    case 58: return 95;
    case 85: return 349;
    case 65: return 180;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action966(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 120:
      return reduce(RULE_20, 1);
    case 145:
      return reduce(RULE_20, 1);
    case 148:
      return reduce(RULE_20, 1);
    case 109:
      return reduce(RULE_20, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, RANGLE, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, COMMA, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto966(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 330;
    case 94: return 331;
    case 93: return 332;
    case 52: return 334;
    case 86: return 752;
    case 30: return 678;
    case 97: return 753;
    case 60: return 340;
    case 87: return 339;
    case 54: return 344;
    case 92: return 228;
    case 28: return 681;
    case 91: return 346;
    case 88: return 347;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action967(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, QUESTION_MARK, EXCLAIMATION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto967(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 284;
    case 62: return 285;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 49: return 178;
    case 54: return 227;
    case 92: return 228;
    case 88: return 347;
    case 63: return 290;
    case 59: return 98;
    case 90: return 350;
    case 51: return 283;
    case 89: return 330;
    case 94: return 331;
    case 86: return 754;
    case 30: return 977;
    case 97: return 700;
    case 67: return 177;
    case 60: return 236;
    case 28: return 978;
    case 91: return 346;
    case 58: return 95;
    case 65: return 180;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action968(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, NULL_KEYWORD, TILDE, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto968(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 173;
    case 84: return 329;
    case 62: return 471;
    case 79: return 757;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 61: return 102;
    case 49: return 178;
    case 54: return 227;
    case 81: return 343;
    case 92: return 228;
    case 88: return 347;
    case 82: return 348;
    case 59: return 98;
    case 90: return 350;
    case 51: return 172;
    case 89: return 330;
    case 94: return 331;
    case 86: return 335;
    case 30: return 941;
    case 97: return 338;
    case 67: return 177;
    case 60: return 236;
    case 80: return 341;
    case 28: return 942;
    case 91: return 346;
    case 58: return 95;
    case 85: return 349;
    case 65: return 180;
    case 83: return 351;
    default: return -1;
    }
  }

  private final boolean action969(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_94, 1);
    case 154:
      return reduce(RULE_94, 1);
    case 181:
      return reduce(RULE_94, 1);
    case 174:
      return reduce(RULE_94, 1);
    case 184:
      return reduce(RULE_94, 1);
    case 185:
      return reduce(RULE_94, 1);
    case 160:
      return reduce(RULE_94, 1);
    case 205:
      return reduce(RULE_94, 1);
    case 196:
      return reduce(RULE_94, 1);
    case 98:
      return reduce(RULE_94, 1);
    case 142:
      return reduce(RULE_94, 1);
    case 155:
      return reduce(RULE_94, 1);
    case 186:
      return reduce(RULE_94, 1);
    case 175:
      return reduce(RULE_94, 1);
    case 128:
      return reduce(RULE_94, 1);
    case 179:
      return reduce(RULE_94, 1);
    case 164:
      return reduce(RULE_94, 1);
    case 203:
      return reduce(RULE_94, 1);
    case 172:
      return reduce(RULE_94, 1);
    case 157:
      return reduce(RULE_94, 1);
    case 195:
      return reduce(RULE_94, 1);
    case 193:
      return reduce(RULE_94, 1);
    case 158:
      return reduce(RULE_94, 1);
    case 131:
      return reduce(RULE_94, 1);
    case 156:
      return reduce(RULE_94, 1);
    case 102:
      return reduce(RULE_94, 1);
    case 101:
      return reduce(RULE_94, 1);
    case 201:
      return reduce(RULE_94, 1);
    case 132:
      return reduce(RULE_94, 1);
    case 202:
      return reduce(RULE_94, 1);
    case 133:
      return reduce(RULE_94, 1);
    case 168:
      return reduce(RULE_94, 1);
    case 194:
      return reduce(RULE_94, 1);
    case 199:
      return reduce(RULE_94, 1);
    case 192:
      return reduce(RULE_94, 1);
    case 200:
      return reduce(RULE_94, 1);
    case 165:
      return reduce(RULE_94, 1);
    case 189:
      return reduce(RULE_94, 1);
    case 183:
      return reduce(RULE_94, 1);
    case 163:
      return reduce(RULE_94, 1);
    case 198:
      return reduce(RULE_94, 1);
    case 100:
      return reduce(RULE_94, 1);
    case 171:
      return reduce(RULE_94, 1);
    case 190:
      return reduce(RULE_94, 1);
    case 169:
      return reduce(RULE_94, 1);
    case 170:
      return reduce(RULE_94, 1);
    case 147:
      return reduce(RULE_94, 1);
    case 207:
      return reduce(RULE_94, 1);
    case 119:
      return reduce(RULE_94, 1);
    case 99:
      return reduce(RULE_94, 1);
    case 115:
      return reduce(RULE_94, 1);
    case 182:
      return reduce(RULE_94, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, NULL_KEYWORD, CATCH_KEYWORD, USHORT_KEYWORD, THROW_KEYWORD, NAME, QUESTION_MARK, ABSTRACT_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, STATIC_KEYWORD, BYTE_KEYWORD, LBRACE, BOOLEAN_KEYWORD, STRING_LITERAL, SINCE_SPECIFIER, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, FINALLY_KEYWORD, RBRACE, WHILE_KEYWORD, DOUBLE_MINUS, INTEGER_LITERAL, DOUBLE_PLUS, MUTABLE_KEYWORD});
    }
  }

  private final boolean action970(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 156:
      return reduce(RULE_95, 1);
    case 101:
      return reduce(RULE_95, 1);
    case 181:
      return reduce(RULE_95, 1);
    case 188:
      return reduce(RULE_95, 1);
    case 201:
      return reduce(RULE_95, 1);
    case 202:
      return reduce(RULE_95, 1);
    case 132:
      return reduce(RULE_95, 1);
    case 205:
      return reduce(RULE_95, 1);
    case 133:
      return reduce(RULE_95, 1);
    case 206:
      return reduce(RULE_95, 1);
    case 200:
      return reduce(RULE_95, 1);
    case 192:
      return reduce(RULE_95, 1);
    case 165:
      return reduce(RULE_95, 1);
    case 98:
      return reduce(RULE_95, 1);
    case 155:
      return reduce(RULE_95, 1);
    case 142:
      return reduce(RULE_95, 1);
    case 183:
      return reduce(RULE_95, 1);
    case 186:
      return reduce(RULE_95, 1);
    case 175:
      return reduce(RULE_95, 1);
    case 128:
      return reduce(RULE_95, 1);
    case 171:
      return reduce(RULE_95, 1);
    case 190:
      return reduce(RULE_95, 1);
    case 169:
      return reduce(RULE_95, 1);
    case 179:
      return reduce(RULE_95, 1);
    case 164:
      return reduce(RULE_95, 1);
    case 203:
      return reduce(RULE_95, 1);
    case 147:
      return reduce(RULE_95, 1);
    case 193:
      return reduce(RULE_95, 1);
    case 182:
      return reduce(RULE_95, 1);
    case 158:
      return reduce(RULE_95, 1);
    case 131:
      return reduce(RULE_95, 1);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, PROPERTY_KEYWORD, LONG_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, LSQUARE, USHORT_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FLOAT_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, RBRACE, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action971(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 156:
      return reduce(RULE_2, 0);
    case 165:
      return reduce(RULE_2, 0);
    case 98:
      return reduce(RULE_2, 0);
    case 142:
      return reduce(RULE_2, 0);
    case 181:
      return reduce(RULE_2, 0);
    case 186:
      return reduce(RULE_2, 0);
    case 201:
      return reduce(RULE_2, 0);
    case 128:
      return reduce(RULE_2, 0);
    case 171:
      return reduce(RULE_2, 0);
    case 179:
      return reduce(RULE_2, 0);
    case 202:
      return reduce(RULE_2, 0);
    case 132:
      return reduce(RULE_2, 0);
    case 133:
      return reduce(RULE_2, 0);
    case 205:
      return reduce(RULE_2, 0);
    case 158:
      return reduce(RULE_2, 0);
    case 131:
      return reduce(RULE_2, 0);
    case 200:
      return reduce(RULE_2, 0);
    case 192:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto971(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 16;
    case 27: return 979;
    case 20: return 316;
    default: return -1;
    }
  }

  private final boolean action972(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto972(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 980;
    default: return -1;
    }
  }

  private final boolean action973(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto973(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 981;
    default: return -1;
    }
  }

  private final boolean action974(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 203:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 183:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 193:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 182:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 190:
      stateStack.addFirst(15);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 156:
      return reduce(RULE_2, 0);
    case 165:
      return reduce(RULE_2, 0);
    case 98:
      return reduce(RULE_2, 0);
    case 142:
      return reduce(RULE_2, 0);
    case 181:
      return reduce(RULE_2, 0);
    case 186:
      return reduce(RULE_2, 0);
    case 201:
      return reduce(RULE_2, 0);
    case 128:
      return reduce(RULE_2, 0);
    case 171:
      return reduce(RULE_2, 0);
    case 179:
      return reduce(RULE_2, 0);
    case 202:
      return reduce(RULE_2, 0);
    case 132:
      return reduce(RULE_2, 0);
    case 133:
      return reduce(RULE_2, 0);
    case 205:
      return reduce(RULE_2, 0);
    case 158:
      return reduce(RULE_2, 0);
    case 131:
      return reduce(RULE_2, 0);
    case 200:
      return reduce(RULE_2, 0);
    case 192:
      return reduce(RULE_2, 0);
    default: throw new BadTokenException(token, new Object[] {BOOLEAN_KEYWORD, SINCE_SPECIFIER, LONG_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, NATIVE_KEYWORD, OBJECT_KEYWORD, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto974(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 16;
    case 27: return 982;
    case 20: return 316;
    default: return -1;
    }
  }

  private final boolean action975(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto975(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 983;
    default: return -1;
    }
  }

  private final boolean action976(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_97, 0);
    case 156:
      return reduce(RULE_97, 0);
    case 102:
      return reduce(RULE_97, 0);
    case 101:
      return reduce(RULE_97, 0);
    case 154:
      return reduce(RULE_97, 0);
    case 181:
      return reduce(RULE_97, 0);
    case 174:
      return reduce(RULE_97, 0);
    case 184:
      return reduce(RULE_97, 0);
    case 201:
      return reduce(RULE_97, 0);
    case 202:
      return reduce(RULE_97, 0);
    case 132:
      return reduce(RULE_97, 0);
    case 185:
      return reduce(RULE_97, 0);
    case 133:
      return reduce(RULE_97, 0);
    case 205:
      return reduce(RULE_97, 0);
    case 168:
      return reduce(RULE_97, 0);
    case 196:
      return reduce(RULE_97, 0);
    case 194:
      return reduce(RULE_97, 0);
    case 199:
      return reduce(RULE_97, 0);
    case 200:
      return reduce(RULE_97, 0);
    case 192:
      return reduce(RULE_97, 0);
    case 165:
      return reduce(RULE_97, 0);
    case 98:
      return reduce(RULE_97, 0);
    case 155:
      return reduce(RULE_97, 0);
    case 142:
      return reduce(RULE_97, 0);
    case 189:
      return reduce(RULE_97, 0);
    case 183:
      return reduce(RULE_97, 0);
    case 186:
      return reduce(RULE_97, 0);
    case 163:
      return reduce(RULE_97, 0);
    case 198:
      return reduce(RULE_97, 0);
    case 175:
      return reduce(RULE_97, 0);
    case 100:
      return reduce(RULE_97, 0);
    case 128:
      return reduce(RULE_97, 0);
    case 171:
      return reduce(RULE_97, 0);
    case 190:
      return reduce(RULE_97, 0);
    case 169:
      return reduce(RULE_97, 0);
    case 179:
      return reduce(RULE_97, 0);
    case 164:
      return reduce(RULE_97, 0);
    case 203:
      return reduce(RULE_97, 0);
    case 172:
      return reduce(RULE_97, 0);
    case 147:
      return reduce(RULE_97, 0);
    case 157:
      return reduce(RULE_97, 0);
    case 195:
      return reduce(RULE_97, 0);
    case 207:
      return reduce(RULE_97, 0);
    case 193:
      return reduce(RULE_97, 0);
    case 99:
      return reduce(RULE_97, 0);
    case 115:
      return reduce(RULE_97, 0);
    case 119:
      return reduce(RULE_97, 0);
    case 182:
      return reduce(RULE_97, 0);
    case 158:
      return reduce(RULE_97, 0);
    case 131:
      return reduce(RULE_97, 0);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, SINCE_SPECIFIER, STRING_LITERAL, UNDERSCORE, LONG_KEYWORD, IF_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, NULL_KEYWORD, LSQUARE, USHORT_KEYWORD, FALSE_KEYWORD, THROW_KEYWORD, SUPER_KEYWORD, TRY_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, DOUBLE_KEYWORD, NAME, ABSTRACT_KEYWORD, QUESTION_MARK, RETURN_KEYWORD, NATIVE_KEYWORD, CONTINUE_KEYWORD, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, IMMUTABLE_KEYWORD, HASH, FINAL_KEYWORD, SELFISH_KEYWORD, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, THIS_KEYWORD, BREAK_KEYWORD, RBRACE, WHILE_KEYWORD, STATIC_KEYWORD, DOUBLE_PLUS, DOUBLE_MINUS, INTEGER_LITERAL, MUTABLE_KEYWORD, BYTE_KEYWORD, LBRACE});
    }
  }

  private final boolean action977(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(984);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(985);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_91, 1);
    case 125:
      return reduce(RULE_91, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_91, 1);
    case 142:
      return reduce(RULE_91, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 116:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_91, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_91, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_91, 1);
    case 148:
      return reduce(RULE_91, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_91, 1);
    case 118:
      return reduce(RULE_91, 1);
    default: throw new BadTokenException(token, new Object[] {CARET, EXCLAIMATION_MARK_EQUALS, FORWARD_SLASH, PIPE, QUESTION_MARK, EXCLAIMATION_MARK, RANGLE, DOUBLE_COLON, DOUBLE_PERCENT, DOUBLE_LANGLE, STAR, QUESTION_MARK_COLON, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, QUESTION_MARK_DOT, PERCENT, PLUS, RPAREN, DOUBLE_EQUALS, DOT, COMMA, DOUBLE_AMPERSAND, DOUBLE_PIPE});
    }
  }

  private final boolean action978(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(986);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(165);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(166);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(987);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_91, 0);
    case 125:
      return reduce(RULE_91, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_91, 0);
    case 142:
      return reduce(RULE_91, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 116:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_91, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_91, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_91, 0);
    case 148:
      return reduce(RULE_91, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_91, 0);
    case 118:
      return reduce(RULE_91, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, MINUS, LPAREN, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, RPAREN, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, EXCLAIMATION_MARK, QUESTION_MARK, PIPE, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE, PERCENT, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action979(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(988);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto979(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 476;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action980(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto980(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 989;
    default: return -1;
    }
  }

  private final boolean action981(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_96, 1);
    case 101:
      return reduce(RULE_96, 1);
    case 155:
      return reduce(RULE_96, 1);
    case 150:
      return reduce(RULE_96, 1);
    case 183:
      return reduce(RULE_96, 1);
    case 175:
      return reduce(RULE_96, 1);
    case 190:
      return reduce(RULE_96, 1);
    case 169:
      return reduce(RULE_96, 1);
    case 164:
      return reduce(RULE_96, 1);
    case 203:
      return reduce(RULE_96, 1);
    case 193:
      return reduce(RULE_96, 1);
    case 182:
      return reduce(RULE_96, 1);
    case 191:
      return reduce(RULE_96, 1);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final boolean action982(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(990);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(84);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_KEYWORD, BOOLEAN_KEYWORD, NAME, QUESTION_MARK, LONG_KEYWORD, OBJECT_KEYWORD, UINT_KEYWORD, HASH, FLOAT_KEYWORD, INT_KEYWORD, ULONG_KEYWORD, LPAREN, LSQUARE, USHORT_KEYWORD, BYTE_KEYWORD, LBRACE, SHORT_KEYWORD, UBYTE_KEYWORD});
    }
  }

  private final int goto982(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 51: return 120;
    case 48: return 476;
    case 54: return 94;
    case 58: return 95;
    case 28: return 130;
    case 30: return 125;
    case 60: return 99;
    default: return -1;
    }
  }

  private final boolean action983(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto983(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 991;
    default: return -1;
    }
  }

  private final boolean action984(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 120:
      return reduce(RULE_73, 2);
    case 145:
      return reduce(RULE_73, 2);
    case 148:
      return reduce(RULE_73, 2);
    case 109:
      return reduce(RULE_73, 2);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, RANGLE, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, COMMA, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto984(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 694;
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 695;
    case 60: return 340;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action985(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto985(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 284;
    case 84: return 329;
    case 62: return 470;
    case 79: return 925;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 81: return 343;
    case 49: return 178;
    case 54: return 227;
    case 92: return 228;
    case 88: return 347;
    case 63: return 659;
    case 82: return 348;
    case 59: return 98;
    case 90: return 350;
    case 51: return 283;
    case 89: return 330;
    case 94: return 331;
    case 86: return 335;
    case 30: return 992;
    case 97: return 338;
    case 67: return 177;
    case 60: return 236;
    case 80: return 341;
    case 28: return 993;
    case 91: return 346;
    case 58: return 95;
    case 85: return 349;
    case 65: return 180;
    case 83: return 351;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action986(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(197);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    case 120:
      return reduce(RULE_73, 1);
    case 145:
      return reduce(RULE_73, 1);
    case 148:
      return reduce(RULE_73, 1);
    case 109:
      return reduce(RULE_73, 1);
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, RANGLE, NEW_KEYWORD, UINT_KEYWORD, ULONG_KEYWORD, MINUS, LPAREN, NULL_KEYWORD, TILDE, LSQUARE, USHORT_KEYWORD, DOUBLE_RANGLE, FALSE_KEYWORD, SUPER_KEYWORD, RPAREN, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, COMMA, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto986(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 89: return 750;
    case 94: return 331;
    case 93: return 332;
    case 54: return 344;
    case 92: return 228;
    case 52: return 334;
    case 91: return 346;
    case 28: return 486;
    case 30: return 487;
    case 97: return 751;
    case 60: return 340;
    case 90: return 350;
    default: return -1;
    }
  }

  private final boolean action987(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto987(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 284;
    case 84: return 329;
    case 62: return 471;
    case 79: return 926;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 81: return 343;
    case 49: return 178;
    case 54: return 227;
    case 92: return 228;
    case 88: return 347;
    case 63: return 660;
    case 82: return 348;
    case 59: return 98;
    case 90: return 350;
    case 51: return 283;
    case 89: return 330;
    case 94: return 331;
    case 86: return 335;
    case 30: return 992;
    case 97: return 338;
    case 67: return 177;
    case 60: return 236;
    case 80: return 341;
    case 28: return 993;
    case 91: return 346;
    case 58: return 95;
    case 85: return 349;
    case 65: return 180;
    case 83: return 351;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action988(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(994);
      tokenStack.addFirst(token);
      return true;
    case 98:
      return reduce(RULE_4, 0);
    case 129:
      return reduce(RULE_4, 0);
    case 122:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {NAME, LANGLE, DOT, RPAREN});
    }
  }

  private final boolean action989(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_96, 7);
    case 101:
      return reduce(RULE_96, 7);
    case 155:
      return reduce(RULE_96, 7);
    case 150:
      return reduce(RULE_96, 7);
    case 183:
      return reduce(RULE_96, 7);
    case 175:
      return reduce(RULE_96, 7);
    case 190:
      return reduce(RULE_96, 7);
    case 169:
      return reduce(RULE_96, 7);
    case 164:
      return reduce(RULE_96, 7);
    case 203:
      return reduce(RULE_96, 7);
    case 193:
      return reduce(RULE_96, 7);
    case 182:
      return reduce(RULE_96, 7);
    case 191:
      return reduce(RULE_96, 7);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final boolean action990(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 148:
      stateStack.addFirst(995);
      tokenStack.addFirst(token);
      return true;
    case 98:
      return reduce(RULE_4, 0);
    case 129:
      return reduce(RULE_4, 0);
    case 122:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {NAME, LANGLE, DOT, RPAREN});
    }
  }

  private final boolean action991(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_96, 4);
    case 101:
      return reduce(RULE_96, 4);
    case 155:
      return reduce(RULE_96, 4);
    case 150:
      return reduce(RULE_96, 4);
    case 183:
      return reduce(RULE_96, 4);
    case 175:
      return reduce(RULE_96, 4);
    case 190:
      return reduce(RULE_96, 4);
    case 169:
      return reduce(RULE_96, 4);
    case 164:
      return reduce(RULE_96, 4);
    case 203:
      return reduce(RULE_96, 4);
    case 193:
      return reduce(RULE_96, 4);
    case 182:
      return reduce(RULE_96, 4);
    case 191:
      return reduce(RULE_96, 4);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final boolean action992(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(506);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(984);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(964);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(509);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(996);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 1);
    case 125:
      return reduce(RULE_44, 1);
    case 126:
      return reduce(RULE_44, 1);
    case 178:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 142:
      return reduce(RULE_44, 1);
    case 138:
      return reduce(RULE_44, 1);
    case 146:
      return reduce(RULE_44, 1);
    case 111:
      return reduce(RULE_42, 2);
    case 116:
      return reduce(RULE_44, 1);
    case 113:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    case 151:
      return reduce(RULE_44, 1);
    case 132:
      return reduce(RULE_44, 1);
    case 134:
      return reduce(RULE_44, 1);
    case 103:
      return reduce(RULE_44, 1);
    case 130:
      return reduce(RULE_44, 1);
    case 144:
      return reduce(RULE_44, 1);
    case 136:
      return reduce(RULE_44, 1);
    case 140:
      return reduce(RULE_44, 1);
    case 112:
      return reduce(RULE_44, 1);
    case 110:
      return reduce(RULE_44, 1);
    case 118:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE_EQUALS, PERCENT, LANGLE, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action993(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 133:
      stateStack.addFirst(535);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(986);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(966);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(967);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 109:
      stateStack.addFirst(997);
      tokenStack.addFirst(token);
      return true;
    case 106:
      return reduce(RULE_44, 0);
    case 125:
      return reduce(RULE_44, 0);
    case 126:
      return reduce(RULE_44, 0);
    case 178:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 142:
      return reduce(RULE_44, 0);
    case 138:
      return reduce(RULE_44, 0);
    case 146:
      return reduce(RULE_44, 0);
    case 111:
      return reduce(RULE_42, 1);
    case 116:
      return reduce(RULE_44, 0);
    case 113:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    case 151:
      return reduce(RULE_44, 0);
    case 132:
      return reduce(RULE_44, 0);
    case 134:
      return reduce(RULE_44, 0);
    case 103:
      return reduce(RULE_44, 0);
    case 130:
      return reduce(RULE_44, 0);
    case 144:
      return reduce(RULE_44, 0);
    case 136:
      return reduce(RULE_44, 0);
    case 140:
      return reduce(RULE_44, 0);
    case 112:
      return reduce(RULE_44, 0);
    case 110:
      return reduce(RULE_44, 0);
    case 118:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {FORWARD_SLASH, RANGLE, DOUBLE_PERCENT, STAR, LPAREN, MINUS, AMPERSAND, LSQUARE, DOUBLE_RANGLE, DOUBLE_EQUALS, DOUBLE_AMPERSAND, CARET, EXCLAIMATION_MARK_EQUALS, INSTANCEOF_KEYWORD, QUESTION_MARK, EXCLAIMATION_MARK, PIPE, RANGLE_EQUALS, DOUBLE_COLON, DOUBLE_LANGLE, QUESTION_MARK_COLON, LANGLE_EQUALS, PERCENT, LANGLE, QUESTION_MARK_DOT, PLUS, DOT, COMMA, DOUBLE_PIPE});
    }
  }

  private final boolean action994(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto994(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 998;
    default: return -1;
    }
  }

  private final boolean action995(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 197:
      stateStack.addFirst(317);
      tokenStack.addFirst(token);
      return true;
    case 131:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {THROWS_KEYWORD, LBRACE});
    }
  }

  private final int goto995(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 999;
    default: return -1;
    }
  }

  private final boolean action996(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto996(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 284;
    case 84: return 329;
    case 62: return 470;
    case 79: return 702;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 81: return 343;
    case 49: return 178;
    case 54: return 227;
    case 92: return 228;
    case 88: return 347;
    case 63: return 659;
    case 82: return 348;
    case 59: return 98;
    case 90: return 350;
    case 51: return 283;
    case 89: return 330;
    case 94: return 331;
    case 86: return 335;
    case 30: return 992;
    case 97: return 338;
    case 67: return 177;
    case 60: return 236;
    case 80: return 341;
    case 28: return 993;
    case 91: return 346;
    case 58: return 95;
    case 85: return 349;
    case 65: return 180;
    case 83: return 351;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action997(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(320);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 184:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 201:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 202:
      stateStack.addFirst(83);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    case 185:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(323);
      tokenStack.addFirst(token);
      return true;
    case 205:
      stateStack.addFirst(86);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(85);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(206);
      tokenStack.addFirst(token);
      return true;
    case 194:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 192:
      stateStack.addFirst(89);
      tokenStack.addFirst(token);
      return true;
    case 200:
      stateStack.addFirst(90);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(325);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(282);
      tokenStack.addFirst(token);
      return true;
    case 186:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 198:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(212);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(80);
      tokenStack.addFirst(token);
      return true;
    case 171:
      stateStack.addFirst(81);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(82);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 195:
      stateStack.addFirst(328);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(87);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(88);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CAST_KEYWORD, BOOLEAN_KEYWORD, STRING_LITERAL, LONG_KEYWORD, NEW_KEYWORD, UINT_KEYWORD, LPAREN, ULONG_KEYWORD, MINUS, TILDE, NULL_KEYWORD, USHORT_KEYWORD, LSQUARE, FALSE_KEYWORD, SUPER_KEYWORD, SHORT_KEYWORD, UBYTE_KEYWORD, DOUBLE_KEYWORD, NAME, EXCLAIMATION_MARK, QUESTION_MARK, OBJECT_KEYWORD, TRUE_KEYWORD, FLOATING_LITERAL, HASH, FLOAT_KEYWORD, INT_KEYWORD, CREATE_KEYWORD, THIS_KEYWORD, INTEGER_LITERAL, BYTE_KEYWORD, LBRACE});
    }
  }

  private final int goto997(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 64: return 284;
    case 84: return 329;
    case 62: return 471;
    case 79: return 757;
    case 93: return 332;
    case 52: return 334;
    case 68: return 175;
    case 87: return 339;
    case 69: return 287;
    case 61: return 102;
    case 66: return 288;
    case 81: return 343;
    case 49: return 178;
    case 54: return 227;
    case 92: return 228;
    case 88: return 347;
    case 63: return 660;
    case 82: return 348;
    case 59: return 98;
    case 90: return 350;
    case 51: return 283;
    case 89: return 330;
    case 94: return 331;
    case 86: return 335;
    case 30: return 992;
    case 97: return 338;
    case 67: return 177;
    case 60: return 236;
    case 80: return 341;
    case 28: return 993;
    case 91: return 346;
    case 58: return 95;
    case 85: return 349;
    case 65: return 180;
    case 83: return 351;
    case 50: return 291;
    default: return -1;
    }
  }

  private final boolean action998(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto998(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 1000;
    default: return -1;
    }
  }

  private final boolean action999(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 131:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto999(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 1001;
    default: return -1;
    }
  }

  private final boolean action1000(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_96, 6);
    case 101:
      return reduce(RULE_96, 6);
    case 155:
      return reduce(RULE_96, 6);
    case 150:
      return reduce(RULE_96, 6);
    case 183:
      return reduce(RULE_96, 6);
    case 175:
      return reduce(RULE_96, 6);
    case 190:
      return reduce(RULE_96, 6);
    case 169:
      return reduce(RULE_96, 6);
    case 164:
      return reduce(RULE_96, 6);
    case 203:
      return reduce(RULE_96, 6);
    case 193:
      return reduce(RULE_96, 6);
    case 182:
      return reduce(RULE_96, 6);
    case 191:
      return reduce(RULE_96, 6);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

  private final boolean action1001(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 173:
      return reduce(RULE_96, 3);
    case 101:
      return reduce(RULE_96, 3);
    case 155:
      return reduce(RULE_96, 3);
    case 150:
      return reduce(RULE_96, 3);
    case 183:
      return reduce(RULE_96, 3);
    case 175:
      return reduce(RULE_96, 3);
    case 190:
      return reduce(RULE_96, 3);
    case 169:
      return reduce(RULE_96, 3);
    case 164:
      return reduce(RULE_96, 3);
    case 203:
      return reduce(RULE_96, 3);
    case 193:
      return reduce(RULE_96, 3);
    case 182:
      return reduce(RULE_96, 3);
    case 191:
      return reduce(RULE_96, 3);
    default: throw new BadTokenException(token, new Object[] {GETTER_KEYWORD, SINCE_SPECIFIER, ABSTRACT_KEYWORD, SEMICOLON, NATIVE_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, FINAL_KEYWORD, CREATE_KEYWORD, UNBACKED_KEYWORD, STATIC_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD});
    }
  }

}

