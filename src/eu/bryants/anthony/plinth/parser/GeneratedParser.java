package eu.bryants.anthony.plinth.parser;

import static eu.bryants.anthony.plinth.parser.ParseType.*;

import java.util.Deque;
import java.util.LinkedList;

import parser.BadTokenException;
import parser.ParseException;
import parser.Production;
import parser.Rule;
import parser.Token;
import parser.Tokenizer;
import eu.bryants.anthony.plinth.parser.rules.ClassDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.CompilationUnitRule;
import eu.bryants.anthony.plinth.parser.rules.CompoundDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.InterfaceDefinitionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.AdditiveExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.BasicPrimaryRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ClassCreationExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ComparisonExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.DimensionsRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionListRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionNoTupleRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.FunctionCallExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.InstanceOfExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.LogicalExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.MultiplicativeExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryNoThisRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryNoTrailingTypeRule;
import eu.bryants.anthony.plinth.parser.rules.expression.PrimaryRule;
import eu.bryants.anthony.plinth.parser.rules.expression.QNameExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.ShiftExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.TupleExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.TupleIndexExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.expression.UnaryExpressionRule;
import eu.bryants.anthony.plinth.parser.rules.member.ConstructorRule;
import eu.bryants.anthony.plinth.parser.rules.member.FieldRule;
import eu.bryants.anthony.plinth.parser.rules.member.InitialiserRule;
import eu.bryants.anthony.plinth.parser.rules.member.MemberListRule;
import eu.bryants.anthony.plinth.parser.rules.member.MethodRule;
import eu.bryants.anthony.plinth.parser.rules.member.PropertyRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ArgumentsRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeNoQNameRule;
import eu.bryants.anthony.plinth.parser.rules.misc.AssigneeRule;
import eu.bryants.anthony.plinth.parser.rules.misc.CatchTypeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.DeclarationAssigneeListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ForInitRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ForUpdateRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ImplementsClauseRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ImportsRule;
import eu.bryants.anthony.plinth.parser.rules.misc.InterfaceListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.NestedQNameListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.OptionalModifiersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ParameterListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ParametersRule;
import eu.bryants.anthony.plinth.parser.rules.misc.PropertyMethodListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.PropertyMethodRule;
import eu.bryants.anthony.plinth.parser.rules.misc.QNameListRule;
import eu.bryants.anthony.plinth.parser.rules.misc.QNameRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ThrowsClauseRule;
import eu.bryants.anthony.plinth.parser.rules.misc.ThrowsListRule;
import eu.bryants.anthony.plinth.parser.rules.statement.AssignStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.BlockRule;
import eu.bryants.anthony.plinth.parser.rules.statement.BreakStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ContinueStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ForStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.IfStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.PrefixIncDecStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ReturnStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.ShorthandAssignmentRule;
import eu.bryants.anthony.plinth.parser.rules.statement.StatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.StatementsRule;
import eu.bryants.anthony.plinth.parser.rules.statement.TryCatchStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.TryFinallyStatementRule;
import eu.bryants.anthony.plinth.parser.rules.statement.WhileStatementRule;
import eu.bryants.anthony.plinth.parser.rules.type.ReturnTypeRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeListNoQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeListRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeNoQNameRule;
import eu.bryants.anthony.plinth.parser.rules.type.TypeRule;

/*
 * Created on 2 Oct 2012
 */

/**
 * @author Anthony Bryant
 */
public class GeneratedParser
{
  // Generated parser in 32591ms
  private static final ImportsRule RULE_0 = new ImportsRule();
  private static final OptionalModifiersRule RULE_1 = new OptionalModifiersRule();
  private static final GeneratedStartRule RULE_2 = new GeneratedStartRule();
  private static final CompilationUnitRule RULE_3 = new CompilationUnitRule();
  private static final QNameRule RULE_4 = new QNameRule();
  private static final ModifiersRule RULE_5 = new ModifiersRule();
  private static final ImplementsClauseRule RULE_6 = new ImplementsClauseRule();
  private static final MemberListRule RULE_7 = new MemberListRule();
  private static final InterfaceListRule RULE_8 = new InterfaceListRule();
  private static final TypeNoQNameRule RULE_9 = new TypeNoQNameRule();
  private static final CompoundDefinitionRule RULE_10 = new CompoundDefinitionRule();
  private static final TypeRule RULE_11 = new TypeRule();
  private static final InitialiserRule RULE_12 = new InitialiserRule();
  private static final InterfaceDefinitionRule RULE_13 = new InterfaceDefinitionRule();
  private static final ThrowsClauseRule RULE_14 = new ThrowsClauseRule();
  private static final QNameListRule RULE_15 = new QNameListRule();
  private static final TypeListNoQNameRule RULE_16 = new TypeListNoQNameRule();
  private static final BasicPrimaryRule RULE_17 = new BasicPrimaryRule();
  private static final PrimaryNoTrailingTypeRule RULE_18 = new PrimaryNoTrailingTypeRule();
  private static final PrimaryRule RULE_19 = new PrimaryRule();
  private static final AssigneeNoQNameRule RULE_20 = new AssigneeNoQNameRule();
  private static final BlockRule RULE_21 = new BlockRule();
  private static final StatementRule RULE_22 = new StatementRule();
  private static final TypeListRule RULE_23 = new TypeListRule();
  private static final PrimaryNoThisRule RULE_24 = new PrimaryNoThisRule();
  private static final AssigneeRule RULE_25 = new AssigneeRule();
  private static final QNameExpressionRule RULE_26 = new QNameExpressionRule();
  private static final StatementsRule RULE_27 = new StatementsRule();
  private static final AssigneeListRule RULE_28 = new AssigneeListRule();
  private static final ClassDefinitionRule RULE_29 = new ClassDefinitionRule();
  private static final ParameterListRule RULE_30 = new ParameterListRule();
  private static final NestedQNameListRule RULE_31 = new NestedQNameListRule();
  private static final ReturnTypeRule RULE_32 = new ReturnTypeRule();
  private static final InstanceOfExpressionRule RULE_33 = new InstanceOfExpressionRule();
  private static final MultiplicativeExpressionRule RULE_34 = new MultiplicativeExpressionRule();
  private static final ExpressionNoTupleRule RULE_35 = new ExpressionNoTupleRule();
  private static final AdditiveExpressionRule RULE_36 = new AdditiveExpressionRule();
  private static final TupleIndexExpressionRule RULE_37 = new TupleIndexExpressionRule();
  private static final LogicalExpressionRule RULE_38 = new LogicalExpressionRule();
  private static final ShiftExpressionRule RULE_39 = new ShiftExpressionRule();
  private static final UnaryExpressionRule RULE_40 = new UnaryExpressionRule();
  private static final ComparisonExpressionRule RULE_41 = new ComparisonExpressionRule();
  private static final TupleExpressionRule RULE_42 = new TupleExpressionRule();
  private static final ReturnStatementRule RULE_43 = new ReturnStatementRule();
  private static final ExpressionRule RULE_44 = new ExpressionRule();
  private static final ContinueStatementRule RULE_45 = new ContinueStatementRule();
  private static final BreakStatementRule RULE_46 = new BreakStatementRule();
  private static final FunctionCallExpressionRule RULE_47 = new FunctionCallExpressionRule();
  private static final DeclarationAssigneeListRule RULE_48 = new DeclarationAssigneeListRule();
  private static final FieldRule RULE_49 = new FieldRule();
  private static final ThrowsListRule RULE_50 = new ThrowsListRule();
  private static final ConstructorRule RULE_51 = new ConstructorRule();
  private static final PrefixIncDecStatementRule RULE_52 = new PrefixIncDecStatementRule();
  private static final ArgumentsRule RULE_53 = new ArgumentsRule();
  private static final ExpressionListRule RULE_54 = new ExpressionListRule();
  private static final IfStatementRule RULE_55 = new IfStatementRule();
  private static final ForInitRule RULE_56 = new ForInitRule();
  private static final ClassCreationExpressionRule RULE_57 = new ClassCreationExpressionRule();
  private static final WhileStatementRule RULE_58 = new WhileStatementRule();
  private static final AssignStatementRule RULE_59 = new AssignStatementRule();
  private static final TryFinallyStatementRule RULE_60 = new TryFinallyStatementRule();
  private static final CatchTypeListRule RULE_61 = new CatchTypeListRule();
  private static final ShorthandAssignmentRule RULE_62 = new ShorthandAssignmentRule();
  private static final PropertyMethodListRule RULE_63 = new PropertyMethodListRule();
  private static final ParametersRule RULE_64 = new ParametersRule();
  private static final MethodRule RULE_65 = new MethodRule();
  private static final ForUpdateRule RULE_66 = new ForUpdateRule();
  private static final DimensionsRule RULE_67 = new DimensionsRule();
  private static final TryCatchStatementRule RULE_68 = new TryCatchStatementRule();
  private static final PropertyRule RULE_69 = new PropertyRule();
  private static final PropertyMethodRule RULE_70 = new PropertyMethodRule();
  private static final ForStatementRule RULE_71 = new ForStatementRule();

  private Deque<Integer> stateStack = new LinkedList<Integer>();
  private Deque<Token<ParseType>> tokenStack = new LinkedList<Token<ParseType>>();
  private Tokenizer<ParseType> tokenizer;

  private boolean accepted = false;

  public GeneratedParser(Tokenizer<ParseType> tokenizer)
  {
    this.tokenizer = tokenizer;
  }

  private final boolean reduce(Rule<ParseType> rule, int productionIndex) throws ParseException
  {
    Production<ParseType> production = rule.getProductions()[productionIndex];
    ParseType[] productionTypes = production.getTypes();
    if (stateStack.size() <= productionTypes.length || tokenStack.size() < productionTypes.length)
    {
      throw new ParseException("Bad reduction of rule, not enough elements");
    }

    // get the list of token values
    Object[] values = new Object[productionTypes.length];
    for (int i = values.length - 1; i >= 0; i--)
    {
      Token<ParseType> t = tokenStack.removeFirst();
      if (!t.getType().equals(productionTypes[i]))
      {
        throw new ParseException("Bad reduction of rule, invalid token type");
      }
      values[i] = t.getValue();

      // remove the top state from the state stack
      stateStack.removeFirst();
    }

    Object result = rule.match(production, values);
    Token<ParseType> nonTerminal = new Token<ParseType>(rule.getType(), result);

    Integer topState = stateStack.peekFirst();
    Integer gotoState = findGotoState(topState, nonTerminal.getType());

    stateStack.addFirst(gotoState);
    tokenStack.addFirst(nonTerminal);

    return false;
  }

  private static class GeneratedStartRule extends Rule<ParseType>
  {
    private static final long serialVersionUID = 1L;

    public GeneratedStartRule()
    {
      super(GENERATED_START_RULE, new Production<ParseType>(COMPILATION_UNIT));
    }

    @Override
    public Object match(Production<ParseType> production, Object[] args) throws ParseException
    {
      ParseType[] productionTypes = production.getTypes();
      if (productionTypes.length == 1 && productionTypes[0] == COMPILATION_UNIT)
      {
        return args[0];
      }
      throw badTypeList();
    }
  }

  public Token<ParseType> parse() throws ParseException, BadTokenException
  {
    stateStack.addFirst(0);
    Token<ParseType> lookahead = tokenizer.next();

    while (true)
    {
      Integer state = stateStack.peekFirst();
      boolean used = false;
      switch (state)
      {
      case 0: used = action0(lookahead); break;
      case 1: used = action1(lookahead); break;
      case 2: used = action2(lookahead); break;
      case 3: used = action3(lookahead); break;
      case 4: used = action4(lookahead); break;
      case 5: used = action5(lookahead); break;
      case 6: used = action6(lookahead); break;
      case 7: used = action7(lookahead); break;
      case 8: used = action8(lookahead); break;
      case 9: used = action9(lookahead); break;
      case 10: used = action10(lookahead); break;
      case 11: used = action11(lookahead); break;
      case 12: used = action12(lookahead); break;
      case 13: used = action13(lookahead); break;
      case 14: used = action14(lookahead); break;
      case 15: used = action15(lookahead); break;
      case 16: used = action16(lookahead); break;
      case 17: used = action17(lookahead); break;
      case 18: used = action18(lookahead); break;
      case 19: used = action19(lookahead); break;
      case 20: used = action20(lookahead); break;
      case 21: used = action21(lookahead); break;
      case 22: used = action22(lookahead); break;
      case 23: used = action23(lookahead); break;
      case 24: used = action24(lookahead); break;
      case 25: used = action25(lookahead); break;
      case 26: used = action26(lookahead); break;
      case 27: used = action27(lookahead); break;
      case 28: used = action28(lookahead); break;
      case 29: used = action29(lookahead); break;
      case 30: used = action30(lookahead); break;
      case 31: used = action31(lookahead); break;
      case 32: used = action32(lookahead); break;
      case 33: used = action33(lookahead); break;
      case 34: used = action34(lookahead); break;
      case 35: used = action35(lookahead); break;
      case 36: used = action36(lookahead); break;
      case 37: used = action37(lookahead); break;
      case 38: used = action38(lookahead); break;
      case 39: used = action39(lookahead); break;
      case 40: used = action40(lookahead); break;
      case 41: used = action41(lookahead); break;
      case 42: used = action42(lookahead); break;
      case 43: used = action43(lookahead); break;
      case 44: used = action44(lookahead); break;
      case 45: used = action45(lookahead); break;
      case 46: used = action46(lookahead); break;
      case 47: used = action47(lookahead); break;
      case 48: used = action48(lookahead); break;
      case 49: used = action49(lookahead); break;
      case 50: used = action50(lookahead); break;
      case 51: used = action51(lookahead); break;
      case 52: used = action52(lookahead); break;
      case 53: used = action53(lookahead); break;
      case 54: used = action54(lookahead); break;
      case 55: used = action55(lookahead); break;
      case 56: used = action56(lookahead); break;
      case 57: used = action57(lookahead); break;
      case 58: used = action58(lookahead); break;
      case 59: used = action59(lookahead); break;
      case 60: used = action60(lookahead); break;
      case 61: used = action61(lookahead); break;
      case 62: used = action62(lookahead); break;
      case 63: used = action63(lookahead); break;
      case 64: used = action64(lookahead); break;
      case 65: used = action65(lookahead); break;
      case 66: used = action66(lookahead); break;
      case 67: used = action67(lookahead); break;
      case 68: used = action68(lookahead); break;
      case 69: used = action69(lookahead); break;
      case 70: used = action70(lookahead); break;
      case 71: used = action71(lookahead); break;
      case 72: used = action72(lookahead); break;
      case 73: used = action73(lookahead); break;
      case 74: used = action74(lookahead); break;
      case 75: used = action75(lookahead); break;
      case 76: used = action76(lookahead); break;
      case 77: used = action77(lookahead); break;
      case 78: used = action78(lookahead); break;
      case 79: used = action79(lookahead); break;
      case 80: used = action80(lookahead); break;
      case 81: used = action81(lookahead); break;
      case 82: used = action82(lookahead); break;
      case 83: used = action83(lookahead); break;
      case 84: used = action84(lookahead); break;
      case 85: used = action85(lookahead); break;
      case 86: used = action86(lookahead); break;
      case 87: used = action87(lookahead); break;
      case 88: used = action88(lookahead); break;
      case 89: used = action89(lookahead); break;
      case 90: used = action90(lookahead); break;
      case 91: used = action91(lookahead); break;
      case 92: used = action92(lookahead); break;
      case 93: used = action93(lookahead); break;
      case 94: used = action94(lookahead); break;
      case 95: used = action95(lookahead); break;
      case 96: used = action96(lookahead); break;
      case 97: used = action97(lookahead); break;
      case 98: used = action98(lookahead); break;
      case 99: used = action99(lookahead); break;
      case 100: used = action100(lookahead); break;
      case 101: used = action101(lookahead); break;
      case 102: used = action102(lookahead); break;
      case 103: used = action103(lookahead); break;
      case 104: used = action104(lookahead); break;
      case 105: used = action105(lookahead); break;
      case 106: used = action106(lookahead); break;
      case 107: used = action107(lookahead); break;
      case 108: used = action108(lookahead); break;
      case 109: used = action109(lookahead); break;
      case 110: used = action110(lookahead); break;
      case 111: used = action111(lookahead); break;
      case 112: used = action112(lookahead); break;
      case 113: used = action113(lookahead); break;
      case 114: used = action114(lookahead); break;
      case 115: used = action115(lookahead); break;
      case 116: used = action116(lookahead); break;
      case 117: used = action117(lookahead); break;
      case 118: used = action118(lookahead); break;
      case 119: used = action119(lookahead); break;
      case 120: used = action120(lookahead); break;
      case 121: used = action121(lookahead); break;
      case 122: used = action122(lookahead); break;
      case 123: used = action123(lookahead); break;
      case 124: used = action124(lookahead); break;
      case 125: used = action125(lookahead); break;
      case 126: used = action126(lookahead); break;
      case 127: used = action127(lookahead); break;
      case 128: used = action128(lookahead); break;
      case 129: used = action129(lookahead); break;
      case 130: used = action130(lookahead); break;
      case 131: used = action131(lookahead); break;
      case 132: used = action132(lookahead); break;
      case 133: used = action133(lookahead); break;
      case 134: used = action134(lookahead); break;
      case 135: used = action135(lookahead); break;
      case 136: used = action136(lookahead); break;
      case 137: used = action137(lookahead); break;
      case 138: used = action138(lookahead); break;
      case 139: used = action139(lookahead); break;
      case 140: used = action140(lookahead); break;
      case 141: used = action141(lookahead); break;
      case 142: used = action142(lookahead); break;
      case 143: used = action143(lookahead); break;
      case 144: used = action144(lookahead); break;
      case 145: used = action145(lookahead); break;
      case 146: used = action146(lookahead); break;
      case 147: used = action147(lookahead); break;
      case 148: used = action148(lookahead); break;
      case 149: used = action149(lookahead); break;
      case 150: used = action150(lookahead); break;
      case 151: used = action151(lookahead); break;
      case 152: used = action152(lookahead); break;
      case 153: used = action153(lookahead); break;
      case 154: used = action154(lookahead); break;
      case 155: used = action155(lookahead); break;
      case 156: used = action156(lookahead); break;
      case 157: used = action157(lookahead); break;
      case 158: used = action158(lookahead); break;
      case 159: used = action159(lookahead); break;
      case 160: used = action160(lookahead); break;
      case 161: used = action161(lookahead); break;
      case 162: used = action162(lookahead); break;
      case 163: used = action163(lookahead); break;
      case 164: used = action164(lookahead); break;
      case 165: used = action165(lookahead); break;
      case 166: used = action166(lookahead); break;
      case 167: used = action167(lookahead); break;
      case 168: used = action168(lookahead); break;
      case 169: used = action169(lookahead); break;
      case 170: used = action170(lookahead); break;
      case 171: used = action171(lookahead); break;
      case 172: used = action172(lookahead); break;
      case 173: used = action173(lookahead); break;
      case 174: used = action174(lookahead); break;
      case 175: used = action175(lookahead); break;
      case 176: used = action176(lookahead); break;
      case 177: used = action177(lookahead); break;
      case 178: used = action178(lookahead); break;
      case 179: used = action179(lookahead); break;
      case 180: used = action180(lookahead); break;
      case 181: used = action181(lookahead); break;
      case 182: used = action182(lookahead); break;
      case 183: used = action183(lookahead); break;
      case 184: used = action184(lookahead); break;
      case 185: used = action185(lookahead); break;
      case 186: used = action186(lookahead); break;
      case 187: used = action187(lookahead); break;
      case 188: used = action188(lookahead); break;
      case 189: used = action189(lookahead); break;
      case 190: used = action190(lookahead); break;
      case 191: used = action191(lookahead); break;
      case 192: used = action192(lookahead); break;
      case 193: used = action193(lookahead); break;
      case 194: used = action194(lookahead); break;
      case 195: used = action195(lookahead); break;
      case 196: used = action196(lookahead); break;
      case 197: used = action197(lookahead); break;
      case 198: used = action198(lookahead); break;
      case 199: used = action199(lookahead); break;
      case 200: used = action200(lookahead); break;
      case 201: used = action201(lookahead); break;
      case 202: used = action202(lookahead); break;
      case 203: used = action203(lookahead); break;
      case 204: used = action204(lookahead); break;
      case 205: used = action205(lookahead); break;
      case 206: used = action206(lookahead); break;
      case 207: used = action207(lookahead); break;
      case 208: used = action208(lookahead); break;
      case 209: used = action209(lookahead); break;
      case 210: used = action210(lookahead); break;
      case 211: used = action211(lookahead); break;
      case 212: used = action212(lookahead); break;
      case 213: used = action213(lookahead); break;
      case 214: used = action214(lookahead); break;
      case 215: used = action215(lookahead); break;
      case 216: used = action216(lookahead); break;
      case 217: used = action217(lookahead); break;
      case 218: used = action218(lookahead); break;
      case 219: used = action219(lookahead); break;
      case 220: used = action220(lookahead); break;
      case 221: used = action221(lookahead); break;
      case 222: used = action222(lookahead); break;
      case 223: used = action223(lookahead); break;
      case 224: used = action224(lookahead); break;
      case 225: used = action225(lookahead); break;
      case 226: used = action226(lookahead); break;
      case 227: used = action227(lookahead); break;
      case 228: used = action228(lookahead); break;
      case 229: used = action229(lookahead); break;
      case 230: used = action230(lookahead); break;
      case 231: used = action231(lookahead); break;
      case 232: used = action232(lookahead); break;
      case 233: used = action233(lookahead); break;
      case 234: used = action234(lookahead); break;
      case 235: used = action235(lookahead); break;
      case 236: used = action236(lookahead); break;
      case 237: used = action237(lookahead); break;
      case 238: used = action238(lookahead); break;
      case 239: used = action239(lookahead); break;
      case 240: used = action240(lookahead); break;
      case 241: used = action241(lookahead); break;
      case 242: used = action242(lookahead); break;
      case 243: used = action243(lookahead); break;
      case 244: used = action244(lookahead); break;
      case 245: used = action245(lookahead); break;
      case 246: used = action246(lookahead); break;
      case 247: used = action247(lookahead); break;
      case 248: used = action248(lookahead); break;
      case 249: used = action249(lookahead); break;
      case 250: used = action250(lookahead); break;
      case 251: used = action251(lookahead); break;
      case 252: used = action252(lookahead); break;
      case 253: used = action253(lookahead); break;
      case 254: used = action254(lookahead); break;
      case 255: used = action255(lookahead); break;
      case 256: used = action256(lookahead); break;
      case 257: used = action257(lookahead); break;
      case 258: used = action258(lookahead); break;
      case 259: used = action259(lookahead); break;
      case 260: used = action260(lookahead); break;
      case 261: used = action261(lookahead); break;
      case 262: used = action262(lookahead); break;
      case 263: used = action263(lookahead); break;
      case 264: used = action264(lookahead); break;
      case 265: used = action265(lookahead); break;
      case 266: used = action266(lookahead); break;
      case 267: used = action267(lookahead); break;
      case 268: used = action268(lookahead); break;
      case 269: used = action269(lookahead); break;
      case 270: used = action270(lookahead); break;
      case 271: used = action271(lookahead); break;
      case 272: used = action272(lookahead); break;
      case 273: used = action273(lookahead); break;
      case 274: used = action274(lookahead); break;
      case 275: used = action275(lookahead); break;
      case 276: used = action276(lookahead); break;
      case 277: used = action277(lookahead); break;
      case 278: used = action278(lookahead); break;
      case 279: used = action279(lookahead); break;
      case 280: used = action280(lookahead); break;
      case 281: used = action281(lookahead); break;
      case 282: used = action282(lookahead); break;
      case 283: used = action283(lookahead); break;
      case 284: used = action284(lookahead); break;
      case 285: used = action285(lookahead); break;
      case 286: used = action286(lookahead); break;
      case 287: used = action287(lookahead); break;
      case 288: used = action288(lookahead); break;
      case 289: used = action289(lookahead); break;
      case 290: used = action290(lookahead); break;
      case 291: used = action291(lookahead); break;
      case 292: used = action292(lookahead); break;
      case 293: used = action293(lookahead); break;
      case 294: used = action294(lookahead); break;
      case 295: used = action295(lookahead); break;
      case 296: used = action296(lookahead); break;
      case 297: used = action297(lookahead); break;
      case 298: used = action298(lookahead); break;
      case 299: used = action299(lookahead); break;
      case 300: used = action300(lookahead); break;
      case 301: used = action301(lookahead); break;
      case 302: used = action302(lookahead); break;
      case 303: used = action303(lookahead); break;
      case 304: used = action304(lookahead); break;
      case 305: used = action305(lookahead); break;
      case 306: used = action306(lookahead); break;
      case 307: used = action307(lookahead); break;
      case 308: used = action308(lookahead); break;
      case 309: used = action309(lookahead); break;
      case 310: used = action310(lookahead); break;
      case 311: used = action311(lookahead); break;
      case 312: used = action312(lookahead); break;
      case 313: used = action313(lookahead); break;
      case 314: used = action314(lookahead); break;
      case 315: used = action315(lookahead); break;
      case 316: used = action316(lookahead); break;
      case 317: used = action317(lookahead); break;
      case 318: used = action318(lookahead); break;
      case 319: used = action319(lookahead); break;
      case 320: used = action320(lookahead); break;
      case 321: used = action321(lookahead); break;
      case 322: used = action322(lookahead); break;
      case 323: used = action323(lookahead); break;
      case 324: used = action324(lookahead); break;
      case 325: used = action325(lookahead); break;
      case 326: used = action326(lookahead); break;
      case 327: used = action327(lookahead); break;
      case 328: used = action328(lookahead); break;
      case 329: used = action329(lookahead); break;
      case 330: used = action330(lookahead); break;
      case 331: used = action331(lookahead); break;
      case 332: used = action332(lookahead); break;
      case 333: used = action333(lookahead); break;
      case 334: used = action334(lookahead); break;
      case 335: used = action335(lookahead); break;
      case 336: used = action336(lookahead); break;
      case 337: used = action337(lookahead); break;
      case 338: used = action338(lookahead); break;
      case 339: used = action339(lookahead); break;
      case 340: used = action340(lookahead); break;
      case 341: used = action341(lookahead); break;
      case 342: used = action342(lookahead); break;
      case 343: used = action343(lookahead); break;
      case 344: used = action344(lookahead); break;
      case 345: used = action345(lookahead); break;
      case 346: used = action346(lookahead); break;
      case 347: used = action347(lookahead); break;
      case 348: used = action348(lookahead); break;
      case 349: used = action349(lookahead); break;
      case 350: used = action350(lookahead); break;
      case 351: used = action351(lookahead); break;
      case 352: used = action352(lookahead); break;
      case 353: used = action353(lookahead); break;
      case 354: used = action354(lookahead); break;
      case 355: used = action355(lookahead); break;
      case 356: used = action356(lookahead); break;
      case 357: used = action357(lookahead); break;
      case 358: used = action358(lookahead); break;
      case 359: used = action359(lookahead); break;
      case 360: used = action360(lookahead); break;
      case 361: used = action361(lookahead); break;
      case 362: used = action362(lookahead); break;
      case 363: used = action363(lookahead); break;
      case 364: used = action364(lookahead); break;
      case 365: used = action365(lookahead); break;
      case 366: used = action366(lookahead); break;
      case 367: used = action367(lookahead); break;
      case 368: used = action368(lookahead); break;
      case 369: used = action369(lookahead); break;
      case 370: used = action370(lookahead); break;
      case 371: used = action371(lookahead); break;
      case 372: used = action372(lookahead); break;
      case 373: used = action373(lookahead); break;
      case 374: used = action374(lookahead); break;
      case 375: used = action375(lookahead); break;
      case 376: used = action376(lookahead); break;
      case 377: used = action377(lookahead); break;
      case 378: used = action378(lookahead); break;
      case 379: used = action379(lookahead); break;
      case 380: used = action380(lookahead); break;
      case 381: used = action381(lookahead); break;
      case 382: used = action382(lookahead); break;
      case 383: used = action383(lookahead); break;
      case 384: used = action384(lookahead); break;
      case 385: used = action385(lookahead); break;
      case 386: used = action386(lookahead); break;
      case 387: used = action387(lookahead); break;
      case 388: used = action388(lookahead); break;
      case 389: used = action389(lookahead); break;
      case 390: used = action390(lookahead); break;
      case 391: used = action391(lookahead); break;
      case 392: used = action392(lookahead); break;
      case 393: used = action393(lookahead); break;
      case 394: used = action394(lookahead); break;
      case 395: used = action395(lookahead); break;
      case 396: used = action396(lookahead); break;
      case 397: used = action397(lookahead); break;
      case 398: used = action398(lookahead); break;
      case 399: used = action399(lookahead); break;
      case 400: used = action400(lookahead); break;
      case 401: used = action401(lookahead); break;
      case 402: used = action402(lookahead); break;
      case 403: used = action403(lookahead); break;
      case 404: used = action404(lookahead); break;
      case 405: used = action405(lookahead); break;
      case 406: used = action406(lookahead); break;
      case 407: used = action407(lookahead); break;
      case 408: used = action408(lookahead); break;
      case 409: used = action409(lookahead); break;
      case 410: used = action410(lookahead); break;
      case 411: used = action411(lookahead); break;
      case 412: used = action412(lookahead); break;
      case 413: used = action413(lookahead); break;
      case 414: used = action414(lookahead); break;
      case 415: used = action415(lookahead); break;
      case 416: used = action416(lookahead); break;
      case 417: used = action417(lookahead); break;
      case 418: used = action418(lookahead); break;
      case 419: used = action419(lookahead); break;
      case 420: used = action420(lookahead); break;
      case 421: used = action421(lookahead); break;
      case 422: used = action422(lookahead); break;
      case 423: used = action423(lookahead); break;
      case 424: used = action424(lookahead); break;
      case 425: used = action425(lookahead); break;
      case 426: used = action426(lookahead); break;
      case 427: used = action427(lookahead); break;
      case 428: used = action428(lookahead); break;
      case 429: used = action429(lookahead); break;
      case 430: used = action430(lookahead); break;
      case 431: used = action431(lookahead); break;
      case 432: used = action432(lookahead); break;
      case 433: used = action433(lookahead); break;
      case 434: used = action434(lookahead); break;
      case 435: used = action435(lookahead); break;
      case 436: used = action436(lookahead); break;
      case 437: used = action437(lookahead); break;
      case 438: used = action438(lookahead); break;
      case 439: used = action439(lookahead); break;
      case 440: used = action440(lookahead); break;
      case 441: used = action441(lookahead); break;
      case 442: used = action442(lookahead); break;
      case 443: used = action443(lookahead); break;
      case 444: used = action444(lookahead); break;
      case 445: used = action445(lookahead); break;
      case 446: used = action446(lookahead); break;
      case 447: used = action447(lookahead); break;
      case 448: used = action448(lookahead); break;
      case 449: used = action449(lookahead); break;
      case 450: used = action450(lookahead); break;
      case 451: used = action451(lookahead); break;
      case 452: used = action452(lookahead); break;
      case 453: used = action453(lookahead); break;
      case 454: used = action454(lookahead); break;
      case 455: used = action455(lookahead); break;
      case 456: used = action456(lookahead); break;
      case 457: used = action457(lookahead); break;
      case 458: used = action458(lookahead); break;
      case 459: used = action459(lookahead); break;
      case 460: used = action460(lookahead); break;
      case 461: used = action461(lookahead); break;
      case 462: used = action462(lookahead); break;
      case 463: used = action463(lookahead); break;
      case 464: used = action464(lookahead); break;
      case 465: used = action465(lookahead); break;
      case 466: used = action466(lookahead); break;
      case 467: used = action467(lookahead); break;
      case 468: used = action468(lookahead); break;
      case 469: used = action469(lookahead); break;
      case 470: used = action470(lookahead); break;
      case 471: used = action471(lookahead); break;
      case 472: used = action472(lookahead); break;
      case 473: used = action473(lookahead); break;
      case 474: used = action474(lookahead); break;
      case 475: used = action475(lookahead); break;
      case 476: used = action476(lookahead); break;
      case 477: used = action477(lookahead); break;
      case 478: used = action478(lookahead); break;
      case 479: used = action479(lookahead); break;
      case 480: used = action480(lookahead); break;
      case 481: used = action481(lookahead); break;
      case 482: used = action482(lookahead); break;
      case 483: used = action483(lookahead); break;
      case 484: used = action484(lookahead); break;
      case 485: used = action485(lookahead); break;
      case 486: used = action486(lookahead); break;
      case 487: used = action487(lookahead); break;
      case 488: used = action488(lookahead); break;
      case 489: used = action489(lookahead); break;
      case 490: used = action490(lookahead); break;
      case 491: used = action491(lookahead); break;
      case 492: used = action492(lookahead); break;
      case 493: used = action493(lookahead); break;
      case 494: used = action494(lookahead); break;
      case 495: used = action495(lookahead); break;
      case 496: used = action496(lookahead); break;
      case 497: used = action497(lookahead); break;
      case 498: used = action498(lookahead); break;
      case 499: used = action499(lookahead); break;
      case 500: used = action500(lookahead); break;
      case 501: used = action501(lookahead); break;
      case 502: used = action502(lookahead); break;
      case 503: used = action503(lookahead); break;
      case 504: used = action504(lookahead); break;
      case 505: used = action505(lookahead); break;
      case 506: used = action506(lookahead); break;
      case 507: used = action507(lookahead); break;
      case 508: used = action508(lookahead); break;
      case 509: used = action509(lookahead); break;
      case 510: used = action510(lookahead); break;
      case 511: used = action511(lookahead); break;
      case 512: used = action512(lookahead); break;
      case 513: used = action513(lookahead); break;
      case 514: used = action514(lookahead); break;
      case 515: used = action515(lookahead); break;
      case 516: used = action516(lookahead); break;
      case 517: used = action517(lookahead); break;
      case 518: used = action518(lookahead); break;
      case 519: used = action519(lookahead); break;
      case 520: used = action520(lookahead); break;
      case 521: used = action521(lookahead); break;
      case 522: used = action522(lookahead); break;
      case 523: used = action523(lookahead); break;
      case 524: used = action524(lookahead); break;
      case 525: used = action525(lookahead); break;
      case 526: used = action526(lookahead); break;
      case 527: used = action527(lookahead); break;
      case 528: used = action528(lookahead); break;
      case 529: used = action529(lookahead); break;
      case 530: used = action530(lookahead); break;
      case 531: used = action531(lookahead); break;
      case 532: used = action532(lookahead); break;
      case 533: used = action533(lookahead); break;
      case 534: used = action534(lookahead); break;
      case 535: used = action535(lookahead); break;
      case 536: used = action536(lookahead); break;
      case 537: used = action537(lookahead); break;
      case 538: used = action538(lookahead); break;
      case 539: used = action539(lookahead); break;
      case 540: used = action540(lookahead); break;
      case 541: used = action541(lookahead); break;
      case 542: used = action542(lookahead); break;
      case 543: used = action543(lookahead); break;
      case 544: used = action544(lookahead); break;
      case 545: used = action545(lookahead); break;
      case 546: used = action546(lookahead); break;
      case 547: used = action547(lookahead); break;
      case 548: used = action548(lookahead); break;
      case 549: used = action549(lookahead); break;
      case 550: used = action550(lookahead); break;
      case 551: used = action551(lookahead); break;
      case 552: used = action552(lookahead); break;
      case 553: used = action553(lookahead); break;
      case 554: used = action554(lookahead); break;
      case 555: used = action555(lookahead); break;
      case 556: used = action556(lookahead); break;
      case 557: used = action557(lookahead); break;
      case 558: used = action558(lookahead); break;
      case 559: used = action559(lookahead); break;
      case 560: used = action560(lookahead); break;
      case 561: used = action561(lookahead); break;
      case 562: used = action562(lookahead); break;
      case 563: used = action563(lookahead); break;
      case 564: used = action564(lookahead); break;
      case 565: used = action565(lookahead); break;
      case 566: used = action566(lookahead); break;
      case 567: used = action567(lookahead); break;
      case 568: used = action568(lookahead); break;
      case 569: used = action569(lookahead); break;
      case 570: used = action570(lookahead); break;
      case 571: used = action571(lookahead); break;
      case 572: used = action572(lookahead); break;
      case 573: used = action573(lookahead); break;
      case 574: used = action574(lookahead); break;
      case 575: used = action575(lookahead); break;
      case 576: used = action576(lookahead); break;
      case 577: used = action577(lookahead); break;
      case 578: used = action578(lookahead); break;
      case 579: used = action579(lookahead); break;
      case 580: used = action580(lookahead); break;
      case 581: used = action581(lookahead); break;
      case 582: used = action582(lookahead); break;
      case 583: used = action583(lookahead); break;
      case 584: used = action584(lookahead); break;
      case 585: used = action585(lookahead); break;
      case 586: used = action586(lookahead); break;
      case 587: used = action587(lookahead); break;
      case 588: used = action588(lookahead); break;
      case 589: used = action589(lookahead); break;
      case 590: used = action590(lookahead); break;
      case 591: used = action591(lookahead); break;
      case 592: used = action592(lookahead); break;
      case 593: used = action593(lookahead); break;
      case 594: used = action594(lookahead); break;
      case 595: used = action595(lookahead); break;
      case 596: used = action596(lookahead); break;
      case 597: used = action597(lookahead); break;
      case 598: used = action598(lookahead); break;
      case 599: used = action599(lookahead); break;
      case 600: used = action600(lookahead); break;
      case 601: used = action601(lookahead); break;
      case 602: used = action602(lookahead); break;
      case 603: used = action603(lookahead); break;
      case 604: used = action604(lookahead); break;
      case 605: used = action605(lookahead); break;
      case 606: used = action606(lookahead); break;
      case 607: used = action607(lookahead); break;
      case 608: used = action608(lookahead); break;
      case 609: used = action609(lookahead); break;
      case 610: used = action610(lookahead); break;
      case 611: used = action611(lookahead); break;
      case 612: used = action612(lookahead); break;
      case 613: used = action613(lookahead); break;
      case 614: used = action614(lookahead); break;
      case 615: used = action615(lookahead); break;
      case 616: used = action616(lookahead); break;
      case 617: used = action617(lookahead); break;
      case 618: used = action618(lookahead); break;
      case 619: used = action619(lookahead); break;
      case 620: used = action620(lookahead); break;
      case 621: used = action621(lookahead); break;
      case 622: used = action622(lookahead); break;
      case 623: used = action623(lookahead); break;
      case 624: used = action624(lookahead); break;
      case 625: used = action625(lookahead); break;
      case 626: used = action626(lookahead); break;
      case 627: used = action627(lookahead); break;
      case 628: used = action628(lookahead); break;
      case 629: used = action629(lookahead); break;
      case 630: used = action630(lookahead); break;
      case 631: used = action631(lookahead); break;
      case 632: used = action632(lookahead); break;
      case 633: used = action633(lookahead); break;
      case 634: used = action634(lookahead); break;
      case 635: used = action635(lookahead); break;
      case 636: used = action636(lookahead); break;
      case 637: used = action637(lookahead); break;
      case 638: used = action638(lookahead); break;
      case 639: used = action639(lookahead); break;
      case 640: used = action640(lookahead); break;
      case 641: used = action641(lookahead); break;
      case 642: used = action642(lookahead); break;
      case 643: used = action643(lookahead); break;
      case 644: used = action644(lookahead); break;
      case 645: used = action645(lookahead); break;
      case 646: used = action646(lookahead); break;
      case 647: used = action647(lookahead); break;
      case 648: used = action648(lookahead); break;
      case 649: used = action649(lookahead); break;
      case 650: used = action650(lookahead); break;
      case 651: used = action651(lookahead); break;
      case 652: used = action652(lookahead); break;
      case 653: used = action653(lookahead); break;
      case 654: used = action654(lookahead); break;
      case 655: used = action655(lookahead); break;
      case 656: used = action656(lookahead); break;
      case 657: used = action657(lookahead); break;
      case 658: used = action658(lookahead); break;
      case 659: used = action659(lookahead); break;
      case 660: used = action660(lookahead); break;
      case 661: used = action661(lookahead); break;
      case 662: used = action662(lookahead); break;
      case 663: used = action663(lookahead); break;
      case 664: used = action664(lookahead); break;
      case 665: used = action665(lookahead); break;
      case 666: used = action666(lookahead); break;
      case 667: used = action667(lookahead); break;
      case 668: used = action668(lookahead); break;
      case 669: used = action669(lookahead); break;
      case 670: used = action670(lookahead); break;
      case 671: used = action671(lookahead); break;
      case 672: used = action672(lookahead); break;
      case 673: used = action673(lookahead); break;
      case 674: used = action674(lookahead); break;
      case 675: used = action675(lookahead); break;
      case 676: used = action676(lookahead); break;
      case 677: used = action677(lookahead); break;
      case 678: used = action678(lookahead); break;
      case 679: used = action679(lookahead); break;
      case 680: used = action680(lookahead); break;
      case 681: used = action681(lookahead); break;
      case 682: used = action682(lookahead); break;
      case 683: used = action683(lookahead); break;
      case 684: used = action684(lookahead); break;
      case 685: used = action685(lookahead); break;
      case 686: used = action686(lookahead); break;
      case 687: used = action687(lookahead); break;
      case 688: used = action688(lookahead); break;
      case 689: used = action689(lookahead); break;
      case 690: used = action690(lookahead); break;
      case 691: used = action691(lookahead); break;
      case 692: used = action692(lookahead); break;
      case 693: used = action693(lookahead); break;
      case 694: used = action694(lookahead); break;
      case 695: used = action695(lookahead); break;
      case 696: used = action696(lookahead); break;
      case 697: used = action697(lookahead); break;
      case 698: used = action698(lookahead); break;
      case 699: used = action699(lookahead); break;
      case 700: used = action700(lookahead); break;
      case 701: used = action701(lookahead); break;
      case 702: used = action702(lookahead); break;
      case 703: used = action703(lookahead); break;
      case 704: used = action704(lookahead); break;
      case 705: used = action705(lookahead); break;
      case 706: used = action706(lookahead); break;
      case 707: used = action707(lookahead); break;
      case 708: used = action708(lookahead); break;
      case 709: used = action709(lookahead); break;
      case 710: used = action710(lookahead); break;
      case 711: used = action711(lookahead); break;
      case 712: used = action712(lookahead); break;
      case 713: used = action713(lookahead); break;
      case 714: used = action714(lookahead); break;
      case 715: used = action715(lookahead); break;
      case 716: used = action716(lookahead); break;
      case 717: used = action717(lookahead); break;
      case 718: used = action718(lookahead); break;
      case 719: used = action719(lookahead); break;
      case 720: used = action720(lookahead); break;
      case 721: used = action721(lookahead); break;
      case 722: used = action722(lookahead); break;
      case 723: used = action723(lookahead); break;
      case 724: used = action724(lookahead); break;
      case 725: used = action725(lookahead); break;
      case 726: used = action726(lookahead); break;
      case 727: used = action727(lookahead); break;
      case 728: used = action728(lookahead); break;
      case 729: used = action729(lookahead); break;
      case 730: used = action730(lookahead); break;
      case 731: used = action731(lookahead); break;
      case 732: used = action732(lookahead); break;
      case 733: used = action733(lookahead); break;
      case 734: used = action734(lookahead); break;
      case 735: used = action735(lookahead); break;
      case 736: used = action736(lookahead); break;
      case 737: used = action737(lookahead); break;
      case 738: used = action738(lookahead); break;
      case 739: used = action739(lookahead); break;
      case 740: used = action740(lookahead); break;
      case 741: used = action741(lookahead); break;
      case 742: used = action742(lookahead); break;
      case 743: used = action743(lookahead); break;
      case 744: used = action744(lookahead); break;
      case 745: used = action745(lookahead); break;
      case 746: used = action746(lookahead); break;
      case 747: used = action747(lookahead); break;
      case 748: used = action748(lookahead); break;
      case 749: used = action749(lookahead); break;
      case 750: used = action750(lookahead); break;
      case 751: used = action751(lookahead); break;
      case 752: used = action752(lookahead); break;
      case 753: used = action753(lookahead); break;
      default: throw new IllegalStateException();
      }
      if (accepted)
      {
        return tokenStack.removeFirst();
      }
      if (used)
      {
        lookahead = tokenizer.next();
      }
    }
  }

  private final int findGotoState(int state, ParseType tokenType)
  {
    switch (state)
    {
    case 0: return goto0(tokenType);
    case 1: return goto1(tokenType);
    case 2: return goto2(tokenType);
    case 20: return goto20(tokenType);
    case 21: return goto21(tokenType);
    case 42: return goto42(tokenType);
    case 45: return goto45(tokenType);
    case 46: return goto46(tokenType);
    case 47: return goto47(tokenType);
    case 48: return goto48(tokenType);
    case 49: return goto49(tokenType);
    case 52: return goto52(tokenType);
    case 53: return goto53(tokenType);
    case 57: return goto57(tokenType);
    case 58: return goto58(tokenType);
    case 60: return goto60(tokenType);
    case 64: return goto64(tokenType);
    case 68: return goto68(tokenType);
    case 77: return goto77(tokenType);
    case 79: return goto79(tokenType);
    case 80: return goto80(tokenType);
    case 93: return goto93(tokenType);
    case 94: return goto94(tokenType);
    case 96: return goto96(tokenType);
    case 97: return goto97(tokenType);
    case 98: return goto98(tokenType);
    case 99: return goto99(tokenType);
    case 108: return goto108(tokenType);
    case 109: return goto109(tokenType);
    case 111: return goto111(tokenType);
    case 112: return goto112(tokenType);
    case 113: return goto113(tokenType);
    case 115: return goto115(tokenType);
    case 116: return goto116(tokenType);
    case 118: return goto118(tokenType);
    case 119: return goto119(tokenType);
    case 121: return goto121(tokenType);
    case 123: return goto123(tokenType);
    case 125: return goto125(tokenType);
    case 127: return goto127(tokenType);
    case 133: return goto133(tokenType);
    case 134: return goto134(tokenType);
    case 137: return goto137(tokenType);
    case 140: return goto140(tokenType);
    case 142: return goto142(tokenType);
    case 147: return goto147(tokenType);
    case 153: return goto153(tokenType);
    case 158: return goto158(tokenType);
    case 159: return goto159(tokenType);
    case 172: return goto172(tokenType);
    case 177: return goto177(tokenType);
    case 179: return goto179(tokenType);
    case 185: return goto185(tokenType);
    case 189: return goto189(tokenType);
    case 190: return goto190(tokenType);
    case 192: return goto192(tokenType);
    case 193: return goto193(tokenType);
    case 197: return goto197(tokenType);
    case 198: return goto198(tokenType);
    case 199: return goto199(tokenType);
    case 200: return goto200(tokenType);
    case 203: return goto203(tokenType);
    case 204: return goto204(tokenType);
    case 205: return goto205(tokenType);
    case 206: return goto206(tokenType);
    case 209: return goto209(tokenType);
    case 211: return goto211(tokenType);
    case 213: return goto213(tokenType);
    case 214: return goto214(tokenType);
    case 217: return goto217(tokenType);
    case 220: return goto220(tokenType);
    case 237: return goto237(tokenType);
    case 249: return goto249(tokenType);
    case 251: return goto251(tokenType);
    case 252: return goto252(tokenType);
    case 254: return goto254(tokenType);
    case 255: return goto255(tokenType);
    case 256: return goto256(tokenType);
    case 257: return goto257(tokenType);
    case 258: return goto258(tokenType);
    case 264: return goto264(tokenType);
    case 268: return goto268(tokenType);
    case 270: return goto270(tokenType);
    case 271: return goto271(tokenType);
    case 276: return goto276(tokenType);
    case 277: return goto277(tokenType);
    case 281: return goto281(tokenType);
    case 285: return goto285(tokenType);
    case 286: return goto286(tokenType);
    case 287: return goto287(tokenType);
    case 288: return goto288(tokenType);
    case 289: return goto289(tokenType);
    case 290: return goto290(tokenType);
    case 291: return goto291(tokenType);
    case 292: return goto292(tokenType);
    case 293: return goto293(tokenType);
    case 294: return goto294(tokenType);
    case 295: return goto295(tokenType);
    case 296: return goto296(tokenType);
    case 298: return goto298(tokenType);
    case 299: return goto299(tokenType);
    case 300: return goto300(tokenType);
    case 302: return goto302(tokenType);
    case 304: return goto304(tokenType);
    case 305: return goto305(tokenType);
    case 307: return goto307(tokenType);
    case 308: return goto308(tokenType);
    case 313: return goto313(tokenType);
    case 314: return goto314(tokenType);
    case 316: return goto316(tokenType);
    case 317: return goto317(tokenType);
    case 318: return goto318(tokenType);
    case 319: return goto319(tokenType);
    case 321: return goto321(tokenType);
    case 323: return goto323(tokenType);
    case 325: return goto325(tokenType);
    case 326: return goto326(tokenType);
    case 329: return goto329(tokenType);
    case 340: return goto340(tokenType);
    case 342: return goto342(tokenType);
    case 343: return goto343(tokenType);
    case 346: return goto346(tokenType);
    case 349: return goto349(tokenType);
    case 350: return goto350(tokenType);
    case 352: return goto352(tokenType);
    case 353: return goto353(tokenType);
    case 354: return goto354(tokenType);
    case 355: return goto355(tokenType);
    case 356: return goto356(tokenType);
    case 357: return goto357(tokenType);
    case 358: return goto358(tokenType);
    case 359: return goto359(tokenType);
    case 360: return goto360(tokenType);
    case 361: return goto361(tokenType);
    case 362: return goto362(tokenType);
    case 363: return goto363(tokenType);
    case 364: return goto364(tokenType);
    case 365: return goto365(tokenType);
    case 367: return goto367(tokenType);
    case 368: return goto368(tokenType);
    case 369: return goto369(tokenType);
    case 370: return goto370(tokenType);
    case 371: return goto371(tokenType);
    case 372: return goto372(tokenType);
    case 373: return goto373(tokenType);
    case 374: return goto374(tokenType);
    case 375: return goto375(tokenType);
    case 376: return goto376(tokenType);
    case 377: return goto377(tokenType);
    case 378: return goto378(tokenType);
    case 379: return goto379(tokenType);
    case 381: return goto381(tokenType);
    case 382: return goto382(tokenType);
    case 383: return goto383(tokenType);
    case 384: return goto384(tokenType);
    case 385: return goto385(tokenType);
    case 386: return goto386(tokenType);
    case 387: return goto387(tokenType);
    case 388: return goto388(tokenType);
    case 389: return goto389(tokenType);
    case 390: return goto390(tokenType);
    case 391: return goto391(tokenType);
    case 392: return goto392(tokenType);
    case 393: return goto393(tokenType);
    case 396: return goto396(tokenType);
    case 397: return goto397(tokenType);
    case 399: return goto399(tokenType);
    case 400: return goto400(tokenType);
    case 401: return goto401(tokenType);
    case 402: return goto402(tokenType);
    case 403: return goto403(tokenType);
    case 404: return goto404(tokenType);
    case 405: return goto405(tokenType);
    case 406: return goto406(tokenType);
    case 407: return goto407(tokenType);
    case 408: return goto408(tokenType);
    case 409: return goto409(tokenType);
    case 410: return goto410(tokenType);
    case 416: return goto416(tokenType);
    case 425: return goto425(tokenType);
    case 426: return goto426(tokenType);
    case 429: return goto429(tokenType);
    case 437: return goto437(tokenType);
    case 438: return goto438(tokenType);
    case 443: return goto443(tokenType);
    case 446: return goto446(tokenType);
    case 450: return goto450(tokenType);
    case 455: return goto455(tokenType);
    case 474: return goto474(tokenType);
    case 479: return goto479(tokenType);
    case 480: return goto480(tokenType);
    case 481: return goto481(tokenType);
    case 483: return goto483(tokenType);
    case 485: return goto485(tokenType);
    case 486: return goto486(tokenType);
    case 487: return goto487(tokenType);
    case 489: return goto489(tokenType);
    case 490: return goto490(tokenType);
    case 492: return goto492(tokenType);
    case 494: return goto494(tokenType);
    case 497: return goto497(tokenType);
    case 503: return goto503(tokenType);
    case 505: return goto505(tokenType);
    case 507: return goto507(tokenType);
    case 510: return goto510(tokenType);
    case 512: return goto512(tokenType);
    case 514: return goto514(tokenType);
    case 516: return goto516(tokenType);
    case 517: return goto517(tokenType);
    case 519: return goto519(tokenType);
    case 521: return goto521(tokenType);
    case 524: return goto524(tokenType);
    case 526: return goto526(tokenType);
    case 529: return goto529(tokenType);
    case 531: return goto531(tokenType);
    case 533: return goto533(tokenType);
    case 535: return goto535(tokenType);
    case 537: return goto537(tokenType);
    case 540: return goto540(tokenType);
    case 541: return goto541(tokenType);
    case 543: return goto543(tokenType);
    case 545: return goto545(tokenType);
    case 547: return goto547(tokenType);
    case 549: return goto549(tokenType);
    case 551: return goto551(tokenType);
    case 554: return goto554(tokenType);
    case 557: return goto557(tokenType);
    case 559: return goto559(tokenType);
    case 561: return goto561(tokenType);
    case 563: return goto563(tokenType);
    case 565: return goto565(tokenType);
    case 567: return goto567(tokenType);
    case 571: return goto571(tokenType);
    case 573: return goto573(tokenType);
    case 575: return goto575(tokenType);
    case 577: return goto577(tokenType);
    case 585: return goto585(tokenType);
    case 587: return goto587(tokenType);
    case 590: return goto590(tokenType);
    case 592: return goto592(tokenType);
    case 594: return goto594(tokenType);
    case 596: return goto596(tokenType);
    case 601: return goto601(tokenType);
    case 603: return goto603(tokenType);
    case 604: return goto604(tokenType);
    case 606: return goto606(tokenType);
    case 611: return goto611(tokenType);
    case 618: return goto618(tokenType);
    case 619: return goto619(tokenType);
    case 624: return goto624(tokenType);
    case 626: return goto626(tokenType);
    case 628: return goto628(tokenType);
    case 633: return goto633(tokenType);
    case 634: return goto634(tokenType);
    case 635: return goto635(tokenType);
    case 637: return goto637(tokenType);
    case 639: return goto639(tokenType);
    case 640: return goto640(tokenType);
    case 641: return goto641(tokenType);
    case 646: return goto646(tokenType);
    case 648: return goto648(tokenType);
    case 650: return goto650(tokenType);
    case 651: return goto651(tokenType);
    case 652: return goto652(tokenType);
    case 657: return goto657(tokenType);
    case 663: return goto663(tokenType);
    case 664: return goto664(tokenType);
    case 669: return goto669(tokenType);
    case 670: return goto670(tokenType);
    case 678: return goto678(tokenType);
    case 685: return goto685(tokenType);
    case 692: return goto692(tokenType);
    case 699: return goto699(tokenType);
    case 701: return goto701(tokenType);
    case 702: return goto702(tokenType);
    case 704: return goto704(tokenType);
    case 709: return goto709(tokenType);
    case 710: return goto710(tokenType);
    case 722: return goto722(tokenType);
    case 723: return goto723(tokenType);
    case 724: return goto724(tokenType);
    case 725: return goto725(tokenType);
    case 729: return goto729(tokenType);
    case 733: return goto733(tokenType);
    case 734: return goto734(tokenType);
    case 735: return goto735(tokenType);
    case 736: return goto736(tokenType);
    case 737: return goto737(tokenType);
    case 739: return goto739(tokenType);
    case 740: return goto740(tokenType);
    case 741: return goto741(tokenType);
    case 742: return goto742(tokenType);
    case 748: return goto748(tokenType);
    case 749: return goto749(tokenType);
    case 750: return goto750(tokenType);
    case 751: return goto751(tokenType);
    default: break;
    }
    throw new IllegalArgumentException();
  }

  private final boolean action0(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 0);
    }
    switch (token.getType().ordinal())
    {
    case 161:
      stateStack.addFirst(1);
      tokenStack.addFirst(token);
      return true;
    case 151:
      return reduce(RULE_0, 0);
    case 129:
      return reduce(RULE_0, 0);
    case 136:
      return reduce(RULE_0, 0);
    case 167:
      return reduce(RULE_0, 0);
    case 149:
      return reduce(RULE_0, 0);
    case 164:
      return reduce(RULE_0, 0);
    case 75:
      return reduce(RULE_0, 0);
    case 157:
      return reduce(RULE_0, 0);
    case 154:
      return reduce(RULE_0, 0);
    case 135:
      return reduce(RULE_0, 0);
    case 156:
      return reduce(RULE_0, 0);
    case 177:
      return reduce(RULE_0, 0);
    case 143:
      return reduce(RULE_0, 0);
    default: throw new BadTokenException(token, new Object[] {null, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, MUTABLE_KEYWORD, IMPORT_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, PACKAGE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto0(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 1: return 2;
    case 2: return 3;
    default: return -1;
    }
  }

  private final boolean action1(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto1(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 5;
    default: return -1;
    }
  }

  private final boolean action2(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      accepted = true;
      return reduce(RULE_2, 0);
    }
    switch (token.getType().ordinal())
    {
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 136:
      return reduce(RULE_1, 0);
    case 154:
      return reduce(RULE_1, 0);
    case 135:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {null, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, CLASS_KEYWORD, MUTABLE_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto2(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 15;
    case 5: return 16;
    case 27: return 17;
    case 4: return 18;
    case 3: return 19;
    default: return -1;
    }
  }

  private final boolean action3(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 0);
    }
    switch (token.getType().ordinal())
    {
    case 151:
      stateStack.addFirst(20);
      tokenStack.addFirst(token);
      return true;
    case 129:
      return reduce(RULE_3, 0);
    case 136:
      return reduce(RULE_3, 0);
    case 149:
      return reduce(RULE_3, 0);
    case 167:
      return reduce(RULE_3, 0);
    case 164:
      return reduce(RULE_3, 0);
    case 75:
      return reduce(RULE_3, 0);
    case 154:
      return reduce(RULE_3, 0);
    case 157:
      return reduce(RULE_3, 0);
    case 156:
      return reduce(RULE_3, 0);
    case 135:
      return reduce(RULE_3, 0);
    case 177:
      return reduce(RULE_3, 0);
    case 143:
      return reduce(RULE_3, 0);
    default: throw new BadTokenException(token, new Object[] {null, IMPORT_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, NATIVE_KEYWORD, INTERFACE_KEYWORD, CLASS_KEYWORD, MUTABLE_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action4(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_4, 0);
    case 137:
      return reduce(RULE_4, 0);
    case 150:
      return reduce(RULE_4, 0);
    case 110:
      return reduce(RULE_4, 0);
    case 115:
      return reduce(RULE_4, 0);
    case 79:
      return reduce(RULE_4, 0);
    case 88:
      return reduce(RULE_4, 0);
    case 106:
      return reduce(RULE_4, 0);
    case 81:
      return reduce(RULE_4, 0);
    case 167:
      return reduce(RULE_4, 0);
    case 102:
      return reduce(RULE_4, 0);
    case 117:
      return reduce(RULE_4, 0);
    case 152:
      return reduce(RULE_4, 0);
    case 94:
      return reduce(RULE_4, 0);
    case 80:
      return reduce(RULE_4, 0);
    case 98:
      return reduce(RULE_4, 0);
    case 86:
      return reduce(RULE_4, 0);
    case 171:
      return reduce(RULE_4, 0);
    case 83:
      return reduce(RULE_4, 0);
    case 122:
      return reduce(RULE_4, 0);
    case 95:
      return reduce(RULE_4, 0);
    case 108:
      return reduce(RULE_4, 0);
    case 92:
      return reduce(RULE_4, 0);
    case 128:
      return reduce(RULE_4, 0);
    case 109:
      return reduce(RULE_4, 0);
    case 91:
      return reduce(RULE_4, 0);
    case 104:
      return reduce(RULE_4, 0);
    case 82:
      return reduce(RULE_4, 0);
    case 116:
      return reduce(RULE_4, 0);
    case 118:
      return reduce(RULE_4, 0);
    case 85:
      return reduce(RULE_4, 0);
    case 149:
      return reduce(RULE_4, 0);
    case 126:
      return reduce(RULE_4, 0);
    case 157:
      return reduce(RULE_4, 0);
    case 111:
      return reduce(RULE_4, 0);
    case 96:
      return reduce(RULE_4, 0);
    case 103:
      return reduce(RULE_4, 0);
    case 101:
      return reduce(RULE_4, 0);
    case 147:
      return reduce(RULE_4, 0);
    case 129:
      return reduce(RULE_4, 0);
    case 119:
      return reduce(RULE_4, 0);
    case 75:
      return reduce(RULE_4, 0);
    case 100:
      return reduce(RULE_4, 0);
    case 107:
      return reduce(RULE_4, 0);
    case 143:
      return reduce(RULE_4, 0);
    case 112:
      return reduce(RULE_4, 0);
    case 120:
      return reduce(RULE_4, 0);
    case 121:
      return reduce(RULE_4, 0);
    case 97:
      return reduce(RULE_4, 0);
    case 124:
      return reduce(RULE_4, 0);
    case 123:
      return reduce(RULE_4, 0);
    case 156:
      return reduce(RULE_4, 0);
    case 99:
      return reduce(RULE_4, 0);
    case 113:
      return reduce(RULE_4, 0);
    case 125:
      return reduce(RULE_4, 0);
    case 165:
      return reduce(RULE_4, 0);
    case 77:
      return reduce(RULE_4, 0);
    case 164:
      return reduce(RULE_4, 0);
    case 84:
      return reduce(RULE_4, 0);
    case 105:
      return reduce(RULE_4, 0);
    case 78:
      return reduce(RULE_4, 0);
    case 114:
      return reduce(RULE_4, 0);
    case 72:
      return reduce(RULE_4, 0);
    case 177:
      return reduce(RULE_4, 0);
    case 90:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, IMPLEMENTS_KEYWORD, PERCENT, PLUS_EQUALS, ARROW, DOUBLE_LANGLE_EQUALS, LPAREN, CARET_EQUALS, STATIC_KEYWORD, HASH, QUESTION_MARK_COLON, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, THROWS_KEYWORD, DOUBLE_EQUALS, COMMA, RPAREN, DOUBLE_RANGLE_EQUALS, UNDERSCORE, DOUBLE_PIPE, MINUS, MINUS_EQUALS, DOUBLE_PERCENT_EQUALS, LANGLE_EQUALS, COLON, QUESTION_MARK, QUESTION_MARK_DOT, DOUBLE_COLON, IMMUTABLE_KEYWORD, STAR_EQUALS, NATIVE_KEYWORD, PERCENT_EQUALS, DOT, LANGLE, FORWARD_SLASH_EQUALS, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, PIPE_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, AMPERSAND_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action5(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(21);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT});
    }
  }

  private final boolean action6(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 0);
    case 139:
      return reduce(RULE_5, 0);
    case 137:
      return reduce(RULE_5, 0);
    case 175:
      return reduce(RULE_5, 0);
    case 157:
      return reduce(RULE_5, 0);
    case 154:
      return reduce(RULE_5, 0);
    case 155:
      return reduce(RULE_5, 0);
    case 106:
      return reduce(RULE_5, 0);
    case 160:
      return reduce(RULE_5, 0);
    case 147:
      return reduce(RULE_5, 0);
    case 130:
      return reduce(RULE_5, 0);
    case 136:
      return reduce(RULE_5, 0);
    case 129:
      return reduce(RULE_5, 0);
    case 167:
      return reduce(RULE_5, 0);
    case 153:
      return reduce(RULE_5, 0);
    case 102:
      return reduce(RULE_5, 0);
    case 75:
      return reduce(RULE_5, 0);
    case 135:
      return reduce(RULE_5, 0);
    case 174:
      return reduce(RULE_5, 0);
    case 166:
      return reduce(RULE_5, 0);
    case 180:
      return reduce(RULE_5, 0);
    case 107:
      return reduce(RULE_5, 0);
    case 143:
      return reduce(RULE_5, 0);
    case 176:
      return reduce(RULE_5, 0);
    case 132:
      return reduce(RULE_5, 0);
    case 156:
      return reduce(RULE_5, 0);
    case 165:
      return reduce(RULE_5, 0);
    case 145:
      return reduce(RULE_5, 0);
    case 162:
      return reduce(RULE_5, 0);
    case 164:
      return reduce(RULE_5, 0);
    case 105:
      return reduce(RULE_5, 0);
    case 179:
      return reduce(RULE_5, 0);
    case 177:
      return reduce(RULE_5, 0);
    case 72:
      return reduce(RULE_5, 0);
    case 116:
      return reduce(RULE_5, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action7(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 10);
    case 139:
      return reduce(RULE_5, 10);
    case 137:
      return reduce(RULE_5, 10);
    case 175:
      return reduce(RULE_5, 10);
    case 157:
      return reduce(RULE_5, 10);
    case 154:
      return reduce(RULE_5, 10);
    case 155:
      return reduce(RULE_5, 10);
    case 106:
      return reduce(RULE_5, 10);
    case 160:
      return reduce(RULE_5, 10);
    case 147:
      return reduce(RULE_5, 10);
    case 130:
      return reduce(RULE_5, 10);
    case 136:
      return reduce(RULE_5, 10);
    case 129:
      return reduce(RULE_5, 10);
    case 167:
      return reduce(RULE_5, 10);
    case 153:
      return reduce(RULE_5, 10);
    case 102:
      return reduce(RULE_5, 10);
    case 75:
      return reduce(RULE_5, 10);
    case 135:
      return reduce(RULE_5, 10);
    case 174:
      return reduce(RULE_5, 10);
    case 166:
      return reduce(RULE_5, 10);
    case 180:
      return reduce(RULE_5, 10);
    case 107:
      return reduce(RULE_5, 10);
    case 143:
      return reduce(RULE_5, 10);
    case 176:
      return reduce(RULE_5, 10);
    case 132:
      return reduce(RULE_5, 10);
    case 156:
      return reduce(RULE_5, 10);
    case 165:
      return reduce(RULE_5, 10);
    case 145:
      return reduce(RULE_5, 10);
    case 162:
      return reduce(RULE_5, 10);
    case 164:
      return reduce(RULE_5, 10);
    case 105:
      return reduce(RULE_5, 10);
    case 179:
      return reduce(RULE_5, 10);
    case 177:
      return reduce(RULE_5, 10);
    case 72:
      return reduce(RULE_5, 10);
    case 116:
      return reduce(RULE_5, 10);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action8(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 4);
    case 139:
      return reduce(RULE_5, 4);
    case 137:
      return reduce(RULE_5, 4);
    case 175:
      return reduce(RULE_5, 4);
    case 157:
      return reduce(RULE_5, 4);
    case 154:
      return reduce(RULE_5, 4);
    case 155:
      return reduce(RULE_5, 4);
    case 106:
      return reduce(RULE_5, 4);
    case 160:
      return reduce(RULE_5, 4);
    case 147:
      return reduce(RULE_5, 4);
    case 130:
      return reduce(RULE_5, 4);
    case 136:
      return reduce(RULE_5, 4);
    case 129:
      return reduce(RULE_5, 4);
    case 167:
      return reduce(RULE_5, 4);
    case 153:
      return reduce(RULE_5, 4);
    case 102:
      return reduce(RULE_5, 4);
    case 75:
      return reduce(RULE_5, 4);
    case 135:
      return reduce(RULE_5, 4);
    case 174:
      return reduce(RULE_5, 4);
    case 166:
      return reduce(RULE_5, 4);
    case 180:
      return reduce(RULE_5, 4);
    case 107:
      return reduce(RULE_5, 4);
    case 143:
      return reduce(RULE_5, 4);
    case 176:
      return reduce(RULE_5, 4);
    case 132:
      return reduce(RULE_5, 4);
    case 156:
      return reduce(RULE_5, 4);
    case 165:
      return reduce(RULE_5, 4);
    case 145:
      return reduce(RULE_5, 4);
    case 162:
      return reduce(RULE_5, 4);
    case 164:
      return reduce(RULE_5, 4);
    case 105:
      return reduce(RULE_5, 4);
    case 179:
      return reduce(RULE_5, 4);
    case 177:
      return reduce(RULE_5, 4);
    case 72:
      return reduce(RULE_5, 4);
    case 116:
      return reduce(RULE_5, 4);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action9(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 8);
    case 139:
      return reduce(RULE_5, 8);
    case 137:
      return reduce(RULE_5, 8);
    case 175:
      return reduce(RULE_5, 8);
    case 157:
      return reduce(RULE_5, 8);
    case 154:
      return reduce(RULE_5, 8);
    case 155:
      return reduce(RULE_5, 8);
    case 106:
      return reduce(RULE_5, 8);
    case 160:
      return reduce(RULE_5, 8);
    case 147:
      return reduce(RULE_5, 8);
    case 130:
      return reduce(RULE_5, 8);
    case 136:
      return reduce(RULE_5, 8);
    case 129:
      return reduce(RULE_5, 8);
    case 167:
      return reduce(RULE_5, 8);
    case 153:
      return reduce(RULE_5, 8);
    case 102:
      return reduce(RULE_5, 8);
    case 75:
      return reduce(RULE_5, 8);
    case 135:
      return reduce(RULE_5, 8);
    case 174:
      return reduce(RULE_5, 8);
    case 166:
      return reduce(RULE_5, 8);
    case 180:
      return reduce(RULE_5, 8);
    case 107:
      return reduce(RULE_5, 8);
    case 143:
      return reduce(RULE_5, 8);
    case 176:
      return reduce(RULE_5, 8);
    case 132:
      return reduce(RULE_5, 8);
    case 156:
      return reduce(RULE_5, 8);
    case 165:
      return reduce(RULE_5, 8);
    case 145:
      return reduce(RULE_5, 8);
    case 162:
      return reduce(RULE_5, 8);
    case 164:
      return reduce(RULE_5, 8);
    case 105:
      return reduce(RULE_5, 8);
    case 179:
      return reduce(RULE_5, 8);
    case 177:
      return reduce(RULE_5, 8);
    case 72:
      return reduce(RULE_5, 8);
    case 116:
      return reduce(RULE_5, 8);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action10(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 18);
    case 139:
      return reduce(RULE_5, 18);
    case 137:
      return reduce(RULE_5, 18);
    case 175:
      return reduce(RULE_5, 18);
    case 157:
      return reduce(RULE_5, 18);
    case 154:
      return reduce(RULE_5, 18);
    case 155:
      return reduce(RULE_5, 18);
    case 106:
      return reduce(RULE_5, 18);
    case 160:
      return reduce(RULE_5, 18);
    case 147:
      return reduce(RULE_5, 18);
    case 130:
      return reduce(RULE_5, 18);
    case 136:
      return reduce(RULE_5, 18);
    case 129:
      return reduce(RULE_5, 18);
    case 167:
      return reduce(RULE_5, 18);
    case 153:
      return reduce(RULE_5, 18);
    case 102:
      return reduce(RULE_5, 18);
    case 75:
      return reduce(RULE_5, 18);
    case 135:
      return reduce(RULE_5, 18);
    case 174:
      return reduce(RULE_5, 18);
    case 166:
      return reduce(RULE_5, 18);
    case 180:
      return reduce(RULE_5, 18);
    case 107:
      return reduce(RULE_5, 18);
    case 143:
      return reduce(RULE_5, 18);
    case 176:
      return reduce(RULE_5, 18);
    case 132:
      return reduce(RULE_5, 18);
    case 156:
      return reduce(RULE_5, 18);
    case 165:
      return reduce(RULE_5, 18);
    case 145:
      return reduce(RULE_5, 18);
    case 162:
      return reduce(RULE_5, 18);
    case 164:
      return reduce(RULE_5, 18);
    case 105:
      return reduce(RULE_5, 18);
    case 179:
      return reduce(RULE_5, 18);
    case 177:
      return reduce(RULE_5, 18);
    case 72:
      return reduce(RULE_5, 18);
    case 116:
      return reduce(RULE_5, 18);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action11(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 76:
      stateStack.addFirst(23);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_5, 14);
    case 139:
      return reduce(RULE_5, 14);
    case 137:
      return reduce(RULE_5, 14);
    case 175:
      return reduce(RULE_5, 14);
    case 157:
      return reduce(RULE_5, 14);
    case 154:
      return reduce(RULE_5, 14);
    case 155:
      return reduce(RULE_5, 14);
    case 106:
      return reduce(RULE_5, 14);
    case 160:
      return reduce(RULE_5, 14);
    case 147:
      return reduce(RULE_5, 14);
    case 130:
      return reduce(RULE_5, 14);
    case 136:
      return reduce(RULE_5, 14);
    case 129:
      return reduce(RULE_5, 14);
    case 167:
      return reduce(RULE_5, 14);
    case 153:
      return reduce(RULE_5, 14);
    case 102:
      return reduce(RULE_5, 14);
    case 75:
      return reduce(RULE_5, 14);
    case 135:
      return reduce(RULE_5, 14);
    case 174:
      return reduce(RULE_5, 14);
    case 166:
      return reduce(RULE_5, 14);
    case 180:
      return reduce(RULE_5, 14);
    case 107:
      return reduce(RULE_5, 14);
    case 143:
      return reduce(RULE_5, 14);
    case 176:
      return reduce(RULE_5, 14);
    case 132:
      return reduce(RULE_5, 14);
    case 156:
      return reduce(RULE_5, 14);
    case 165:
      return reduce(RULE_5, 14);
    case 145:
      return reduce(RULE_5, 14);
    case 162:
      return reduce(RULE_5, 14);
    case 164:
      return reduce(RULE_5, 14);
    case 105:
      return reduce(RULE_5, 14);
    case 179:
      return reduce(RULE_5, 14);
    case 177:
      return reduce(RULE_5, 14);
    case 72:
      return reduce(RULE_5, 14);
    case 116:
      return reduce(RULE_5, 14);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action12(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 6);
    case 139:
      return reduce(RULE_5, 6);
    case 137:
      return reduce(RULE_5, 6);
    case 175:
      return reduce(RULE_5, 6);
    case 157:
      return reduce(RULE_5, 6);
    case 154:
      return reduce(RULE_5, 6);
    case 155:
      return reduce(RULE_5, 6);
    case 106:
      return reduce(RULE_5, 6);
    case 160:
      return reduce(RULE_5, 6);
    case 147:
      return reduce(RULE_5, 6);
    case 130:
      return reduce(RULE_5, 6);
    case 136:
      return reduce(RULE_5, 6);
    case 129:
      return reduce(RULE_5, 6);
    case 167:
      return reduce(RULE_5, 6);
    case 153:
      return reduce(RULE_5, 6);
    case 102:
      return reduce(RULE_5, 6);
    case 75:
      return reduce(RULE_5, 6);
    case 135:
      return reduce(RULE_5, 6);
    case 174:
      return reduce(RULE_5, 6);
    case 166:
      return reduce(RULE_5, 6);
    case 180:
      return reduce(RULE_5, 6);
    case 107:
      return reduce(RULE_5, 6);
    case 143:
      return reduce(RULE_5, 6);
    case 176:
      return reduce(RULE_5, 6);
    case 132:
      return reduce(RULE_5, 6);
    case 156:
      return reduce(RULE_5, 6);
    case 165:
      return reduce(RULE_5, 6);
    case 145:
      return reduce(RULE_5, 6);
    case 162:
      return reduce(RULE_5, 6);
    case 164:
      return reduce(RULE_5, 6);
    case 105:
      return reduce(RULE_5, 6);
    case 179:
      return reduce(RULE_5, 6);
    case 177:
      return reduce(RULE_5, 6);
    case 72:
      return reduce(RULE_5, 6);
    case 116:
      return reduce(RULE_5, 6);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action13(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 12);
    case 139:
      return reduce(RULE_5, 12);
    case 137:
      return reduce(RULE_5, 12);
    case 175:
      return reduce(RULE_5, 12);
    case 157:
      return reduce(RULE_5, 12);
    case 154:
      return reduce(RULE_5, 12);
    case 155:
      return reduce(RULE_5, 12);
    case 106:
      return reduce(RULE_5, 12);
    case 160:
      return reduce(RULE_5, 12);
    case 147:
      return reduce(RULE_5, 12);
    case 130:
      return reduce(RULE_5, 12);
    case 136:
      return reduce(RULE_5, 12);
    case 129:
      return reduce(RULE_5, 12);
    case 167:
      return reduce(RULE_5, 12);
    case 153:
      return reduce(RULE_5, 12);
    case 102:
      return reduce(RULE_5, 12);
    case 75:
      return reduce(RULE_5, 12);
    case 135:
      return reduce(RULE_5, 12);
    case 174:
      return reduce(RULE_5, 12);
    case 166:
      return reduce(RULE_5, 12);
    case 180:
      return reduce(RULE_5, 12);
    case 107:
      return reduce(RULE_5, 12);
    case 143:
      return reduce(RULE_5, 12);
    case 176:
      return reduce(RULE_5, 12);
    case 132:
      return reduce(RULE_5, 12);
    case 156:
      return reduce(RULE_5, 12);
    case 165:
      return reduce(RULE_5, 12);
    case 145:
      return reduce(RULE_5, 12);
    case 162:
      return reduce(RULE_5, 12);
    case 164:
      return reduce(RULE_5, 12);
    case 105:
      return reduce(RULE_5, 12);
    case 179:
      return reduce(RULE_5, 12);
    case 177:
      return reduce(RULE_5, 12);
    case 72:
      return reduce(RULE_5, 12);
    case 116:
      return reduce(RULE_5, 12);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action14(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 2);
    case 139:
      return reduce(RULE_5, 2);
    case 137:
      return reduce(RULE_5, 2);
    case 175:
      return reduce(RULE_5, 2);
    case 157:
      return reduce(RULE_5, 2);
    case 154:
      return reduce(RULE_5, 2);
    case 155:
      return reduce(RULE_5, 2);
    case 106:
      return reduce(RULE_5, 2);
    case 160:
      return reduce(RULE_5, 2);
    case 147:
      return reduce(RULE_5, 2);
    case 130:
      return reduce(RULE_5, 2);
    case 136:
      return reduce(RULE_5, 2);
    case 129:
      return reduce(RULE_5, 2);
    case 167:
      return reduce(RULE_5, 2);
    case 153:
      return reduce(RULE_5, 2);
    case 102:
      return reduce(RULE_5, 2);
    case 75:
      return reduce(RULE_5, 2);
    case 135:
      return reduce(RULE_5, 2);
    case 174:
      return reduce(RULE_5, 2);
    case 166:
      return reduce(RULE_5, 2);
    case 180:
      return reduce(RULE_5, 2);
    case 107:
      return reduce(RULE_5, 2);
    case 143:
      return reduce(RULE_5, 2);
    case 176:
      return reduce(RULE_5, 2);
    case 132:
      return reduce(RULE_5, 2);
    case 156:
      return reduce(RULE_5, 2);
    case 165:
      return reduce(RULE_5, 2);
    case 145:
      return reduce(RULE_5, 2);
    case 162:
      return reduce(RULE_5, 2);
    case 164:
      return reduce(RULE_5, 2);
    case 105:
      return reduce(RULE_5, 2);
    case 179:
      return reduce(RULE_5, 2);
    case 177:
      return reduce(RULE_5, 2);
    case 72:
      return reduce(RULE_5, 2);
    case 116:
      return reduce(RULE_5, 2);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action15(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(24);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 176:
      return reduce(RULE_1, 1);
    case 132:
      return reduce(RULE_1, 1);
    case 137:
      return reduce(RULE_1, 1);
    case 139:
      return reduce(RULE_1, 1);
    case 175:
      return reduce(RULE_1, 1);
    case 154:
      return reduce(RULE_1, 1);
    case 155:
      return reduce(RULE_1, 1);
    case 165:
      return reduce(RULE_1, 1);
    case 106:
      return reduce(RULE_1, 1);
    case 147:
      return reduce(RULE_1, 1);
    case 145:
      return reduce(RULE_1, 1);
    case 160:
      return reduce(RULE_1, 1);
    case 130:
      return reduce(RULE_1, 1);
    case 136:
      return reduce(RULE_1, 1);
    case 102:
      return reduce(RULE_1, 1);
    case 153:
      return reduce(RULE_1, 1);
    case 135:
      return reduce(RULE_1, 1);
    case 174:
      return reduce(RULE_1, 1);
    case 105:
      return reduce(RULE_1, 1);
    case 166:
      return reduce(RULE_1, 1);
    case 107:
      return reduce(RULE_1, 1);
    case 179:
      return reduce(RULE_1, 1);
    case 72:
      return reduce(RULE_1, 1);
    case 116:
      return reduce(RULE_1, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, INT_KEYWORD, STATIC_KEYWORD, HASH, SINCE_SPECIFIER, UBYTE_KEYWORD, CLASS_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action16(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 4);
    }
    switch (token.getType().ordinal())
    {
    case 136:
      return reduce(RULE_3, 4);
    case 129:
      return reduce(RULE_3, 4);
    case 167:
      return reduce(RULE_3, 4);
    case 149:
      return reduce(RULE_3, 4);
    case 164:
      return reduce(RULE_3, 4);
    case 75:
      return reduce(RULE_3, 4);
    case 157:
      return reduce(RULE_3, 4);
    case 154:
      return reduce(RULE_3, 4);
    case 135:
      return reduce(RULE_3, 4);
    case 156:
      return reduce(RULE_3, 4);
    case 177:
      return reduce(RULE_3, 4);
    case 143:
      return reduce(RULE_3, 4);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action17(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 136:
      stateStack.addFirst(33);
      tokenStack.addFirst(token);
      return true;
    case 154:
      stateStack.addFirst(34);
      tokenStack.addFirst(token);
      return true;
    case 135:
      stateStack.addFirst(35);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMPOUND_KEYWORD, INTERFACE_KEYWORD, CLASS_KEYWORD});
    }
  }

  private final boolean action18(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 3);
    }
    switch (token.getType().ordinal())
    {
    case 136:
      return reduce(RULE_3, 3);
    case 129:
      return reduce(RULE_3, 3);
    case 167:
      return reduce(RULE_3, 3);
    case 149:
      return reduce(RULE_3, 3);
    case 164:
      return reduce(RULE_3, 3);
    case 75:
      return reduce(RULE_3, 3);
    case 157:
      return reduce(RULE_3, 3);
    case 154:
      return reduce(RULE_3, 3);
    case 135:
      return reduce(RULE_3, 3);
    case 156:
      return reduce(RULE_3, 3);
    case 177:
      return reduce(RULE_3, 3);
    case 143:
      return reduce(RULE_3, 3);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action19(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 2);
    }
    switch (token.getType().ordinal())
    {
    case 136:
      return reduce(RULE_3, 2);
    case 129:
      return reduce(RULE_3, 2);
    case 167:
      return reduce(RULE_3, 2);
    case 149:
      return reduce(RULE_3, 2);
    case 164:
      return reduce(RULE_3, 2);
    case 75:
      return reduce(RULE_3, 2);
    case 157:
      return reduce(RULE_3, 2);
    case 154:
      return reduce(RULE_3, 2);
    case 135:
      return reduce(RULE_3, 2);
    case 156:
      return reduce(RULE_3, 2);
    case 177:
      return reduce(RULE_3, 2);
    case 143:
      return reduce(RULE_3, 2);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action20(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto20(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 36;
    default: return -1;
    }
  }

  private final boolean action21(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 0);
    }
    switch (token.getType().ordinal())
    {
    case 151:
      return reduce(RULE_0, 0);
    case 129:
      return reduce(RULE_0, 0);
    case 136:
      return reduce(RULE_0, 0);
    case 167:
      return reduce(RULE_0, 0);
    case 149:
      return reduce(RULE_0, 0);
    case 164:
      return reduce(RULE_0, 0);
    case 75:
      return reduce(RULE_0, 0);
    case 154:
      return reduce(RULE_0, 0);
    case 157:
      return reduce(RULE_0, 0);
    case 135:
      return reduce(RULE_0, 0);
    case 156:
      return reduce(RULE_0, 0);
    case 177:
      return reduce(RULE_0, 0);
    case 143:
      return reduce(RULE_0, 0);
    default: throw new BadTokenException(token, new Object[] {null, IMPORT_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, NATIVE_KEYWORD, INTERFACE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto21(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 2: return 37;
    default: return -1;
    }
  }

  private final boolean action22(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action23(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 16);
    case 137:
      return reduce(RULE_5, 16);
    case 139:
      return reduce(RULE_5, 16);
    case 175:
      return reduce(RULE_5, 16);
    case 154:
      return reduce(RULE_5, 16);
    case 157:
      return reduce(RULE_5, 16);
    case 155:
      return reduce(RULE_5, 16);
    case 106:
      return reduce(RULE_5, 16);
    case 160:
      return reduce(RULE_5, 16);
    case 147:
      return reduce(RULE_5, 16);
    case 130:
      return reduce(RULE_5, 16);
    case 129:
      return reduce(RULE_5, 16);
    case 136:
      return reduce(RULE_5, 16);
    case 167:
      return reduce(RULE_5, 16);
    case 153:
      return reduce(RULE_5, 16);
    case 102:
      return reduce(RULE_5, 16);
    case 75:
      return reduce(RULE_5, 16);
    case 135:
      return reduce(RULE_5, 16);
    case 174:
      return reduce(RULE_5, 16);
    case 166:
      return reduce(RULE_5, 16);
    case 180:
      return reduce(RULE_5, 16);
    case 107:
      return reduce(RULE_5, 16);
    case 143:
      return reduce(RULE_5, 16);
    case 176:
      return reduce(RULE_5, 16);
    case 132:
      return reduce(RULE_5, 16);
    case 156:
      return reduce(RULE_5, 16);
    case 165:
      return reduce(RULE_5, 16);
    case 145:
      return reduce(RULE_5, 16);
    case 162:
      return reduce(RULE_5, 16);
    case 164:
      return reduce(RULE_5, 16);
    case 105:
      return reduce(RULE_5, 16);
    case 179:
      return reduce(RULE_5, 16);
    case 177:
      return reduce(RULE_5, 16);
    case 72:
      return reduce(RULE_5, 16);
    case 116:
      return reduce(RULE_5, 16);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action24(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 1);
    case 137:
      return reduce(RULE_5, 1);
    case 139:
      return reduce(RULE_5, 1);
    case 175:
      return reduce(RULE_5, 1);
    case 154:
      return reduce(RULE_5, 1);
    case 157:
      return reduce(RULE_5, 1);
    case 155:
      return reduce(RULE_5, 1);
    case 106:
      return reduce(RULE_5, 1);
    case 160:
      return reduce(RULE_5, 1);
    case 147:
      return reduce(RULE_5, 1);
    case 130:
      return reduce(RULE_5, 1);
    case 129:
      return reduce(RULE_5, 1);
    case 136:
      return reduce(RULE_5, 1);
    case 167:
      return reduce(RULE_5, 1);
    case 153:
      return reduce(RULE_5, 1);
    case 102:
      return reduce(RULE_5, 1);
    case 75:
      return reduce(RULE_5, 1);
    case 135:
      return reduce(RULE_5, 1);
    case 174:
      return reduce(RULE_5, 1);
    case 166:
      return reduce(RULE_5, 1);
    case 180:
      return reduce(RULE_5, 1);
    case 107:
      return reduce(RULE_5, 1);
    case 143:
      return reduce(RULE_5, 1);
    case 176:
      return reduce(RULE_5, 1);
    case 132:
      return reduce(RULE_5, 1);
    case 156:
      return reduce(RULE_5, 1);
    case 165:
      return reduce(RULE_5, 1);
    case 145:
      return reduce(RULE_5, 1);
    case 162:
      return reduce(RULE_5, 1);
    case 164:
      return reduce(RULE_5, 1);
    case 105:
      return reduce(RULE_5, 1);
    case 179:
      return reduce(RULE_5, 1);
    case 177:
      return reduce(RULE_5, 1);
    case 72:
      return reduce(RULE_5, 1);
    case 116:
      return reduce(RULE_5, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action25(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 11);
    case 137:
      return reduce(RULE_5, 11);
    case 139:
      return reduce(RULE_5, 11);
    case 175:
      return reduce(RULE_5, 11);
    case 154:
      return reduce(RULE_5, 11);
    case 157:
      return reduce(RULE_5, 11);
    case 155:
      return reduce(RULE_5, 11);
    case 106:
      return reduce(RULE_5, 11);
    case 160:
      return reduce(RULE_5, 11);
    case 147:
      return reduce(RULE_5, 11);
    case 130:
      return reduce(RULE_5, 11);
    case 129:
      return reduce(RULE_5, 11);
    case 136:
      return reduce(RULE_5, 11);
    case 167:
      return reduce(RULE_5, 11);
    case 153:
      return reduce(RULE_5, 11);
    case 102:
      return reduce(RULE_5, 11);
    case 75:
      return reduce(RULE_5, 11);
    case 135:
      return reduce(RULE_5, 11);
    case 174:
      return reduce(RULE_5, 11);
    case 166:
      return reduce(RULE_5, 11);
    case 180:
      return reduce(RULE_5, 11);
    case 107:
      return reduce(RULE_5, 11);
    case 143:
      return reduce(RULE_5, 11);
    case 176:
      return reduce(RULE_5, 11);
    case 132:
      return reduce(RULE_5, 11);
    case 156:
      return reduce(RULE_5, 11);
    case 165:
      return reduce(RULE_5, 11);
    case 145:
      return reduce(RULE_5, 11);
    case 162:
      return reduce(RULE_5, 11);
    case 164:
      return reduce(RULE_5, 11);
    case 105:
      return reduce(RULE_5, 11);
    case 179:
      return reduce(RULE_5, 11);
    case 177:
      return reduce(RULE_5, 11);
    case 72:
      return reduce(RULE_5, 11);
    case 116:
      return reduce(RULE_5, 11);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action26(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 5);
    case 137:
      return reduce(RULE_5, 5);
    case 139:
      return reduce(RULE_5, 5);
    case 175:
      return reduce(RULE_5, 5);
    case 154:
      return reduce(RULE_5, 5);
    case 157:
      return reduce(RULE_5, 5);
    case 155:
      return reduce(RULE_5, 5);
    case 106:
      return reduce(RULE_5, 5);
    case 160:
      return reduce(RULE_5, 5);
    case 147:
      return reduce(RULE_5, 5);
    case 130:
      return reduce(RULE_5, 5);
    case 129:
      return reduce(RULE_5, 5);
    case 136:
      return reduce(RULE_5, 5);
    case 167:
      return reduce(RULE_5, 5);
    case 153:
      return reduce(RULE_5, 5);
    case 102:
      return reduce(RULE_5, 5);
    case 75:
      return reduce(RULE_5, 5);
    case 135:
      return reduce(RULE_5, 5);
    case 174:
      return reduce(RULE_5, 5);
    case 166:
      return reduce(RULE_5, 5);
    case 180:
      return reduce(RULE_5, 5);
    case 107:
      return reduce(RULE_5, 5);
    case 143:
      return reduce(RULE_5, 5);
    case 176:
      return reduce(RULE_5, 5);
    case 132:
      return reduce(RULE_5, 5);
    case 156:
      return reduce(RULE_5, 5);
    case 165:
      return reduce(RULE_5, 5);
    case 145:
      return reduce(RULE_5, 5);
    case 162:
      return reduce(RULE_5, 5);
    case 164:
      return reduce(RULE_5, 5);
    case 105:
      return reduce(RULE_5, 5);
    case 179:
      return reduce(RULE_5, 5);
    case 177:
      return reduce(RULE_5, 5);
    case 72:
      return reduce(RULE_5, 5);
    case 116:
      return reduce(RULE_5, 5);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action27(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 9);
    case 137:
      return reduce(RULE_5, 9);
    case 139:
      return reduce(RULE_5, 9);
    case 175:
      return reduce(RULE_5, 9);
    case 154:
      return reduce(RULE_5, 9);
    case 157:
      return reduce(RULE_5, 9);
    case 155:
      return reduce(RULE_5, 9);
    case 106:
      return reduce(RULE_5, 9);
    case 160:
      return reduce(RULE_5, 9);
    case 147:
      return reduce(RULE_5, 9);
    case 130:
      return reduce(RULE_5, 9);
    case 129:
      return reduce(RULE_5, 9);
    case 136:
      return reduce(RULE_5, 9);
    case 167:
      return reduce(RULE_5, 9);
    case 153:
      return reduce(RULE_5, 9);
    case 102:
      return reduce(RULE_5, 9);
    case 75:
      return reduce(RULE_5, 9);
    case 135:
      return reduce(RULE_5, 9);
    case 174:
      return reduce(RULE_5, 9);
    case 166:
      return reduce(RULE_5, 9);
    case 180:
      return reduce(RULE_5, 9);
    case 107:
      return reduce(RULE_5, 9);
    case 143:
      return reduce(RULE_5, 9);
    case 176:
      return reduce(RULE_5, 9);
    case 132:
      return reduce(RULE_5, 9);
    case 156:
      return reduce(RULE_5, 9);
    case 165:
      return reduce(RULE_5, 9);
    case 145:
      return reduce(RULE_5, 9);
    case 162:
      return reduce(RULE_5, 9);
    case 164:
      return reduce(RULE_5, 9);
    case 105:
      return reduce(RULE_5, 9);
    case 179:
      return reduce(RULE_5, 9);
    case 177:
      return reduce(RULE_5, 9);
    case 72:
      return reduce(RULE_5, 9);
    case 116:
      return reduce(RULE_5, 9);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action28(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 19);
    case 137:
      return reduce(RULE_5, 19);
    case 139:
      return reduce(RULE_5, 19);
    case 175:
      return reduce(RULE_5, 19);
    case 154:
      return reduce(RULE_5, 19);
    case 157:
      return reduce(RULE_5, 19);
    case 155:
      return reduce(RULE_5, 19);
    case 106:
      return reduce(RULE_5, 19);
    case 160:
      return reduce(RULE_5, 19);
    case 147:
      return reduce(RULE_5, 19);
    case 130:
      return reduce(RULE_5, 19);
    case 129:
      return reduce(RULE_5, 19);
    case 136:
      return reduce(RULE_5, 19);
    case 167:
      return reduce(RULE_5, 19);
    case 153:
      return reduce(RULE_5, 19);
    case 102:
      return reduce(RULE_5, 19);
    case 75:
      return reduce(RULE_5, 19);
    case 135:
      return reduce(RULE_5, 19);
    case 174:
      return reduce(RULE_5, 19);
    case 166:
      return reduce(RULE_5, 19);
    case 180:
      return reduce(RULE_5, 19);
    case 107:
      return reduce(RULE_5, 19);
    case 143:
      return reduce(RULE_5, 19);
    case 176:
      return reduce(RULE_5, 19);
    case 132:
      return reduce(RULE_5, 19);
    case 156:
      return reduce(RULE_5, 19);
    case 165:
      return reduce(RULE_5, 19);
    case 145:
      return reduce(RULE_5, 19);
    case 162:
      return reduce(RULE_5, 19);
    case 164:
      return reduce(RULE_5, 19);
    case 105:
      return reduce(RULE_5, 19);
    case 179:
      return reduce(RULE_5, 19);
    case 177:
      return reduce(RULE_5, 19);
    case 72:
      return reduce(RULE_5, 19);
    case 116:
      return reduce(RULE_5, 19);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action29(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 76:
      stateStack.addFirst(39);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_5, 15);
    case 137:
      return reduce(RULE_5, 15);
    case 139:
      return reduce(RULE_5, 15);
    case 175:
      return reduce(RULE_5, 15);
    case 154:
      return reduce(RULE_5, 15);
    case 157:
      return reduce(RULE_5, 15);
    case 155:
      return reduce(RULE_5, 15);
    case 106:
      return reduce(RULE_5, 15);
    case 160:
      return reduce(RULE_5, 15);
    case 147:
      return reduce(RULE_5, 15);
    case 130:
      return reduce(RULE_5, 15);
    case 129:
      return reduce(RULE_5, 15);
    case 136:
      return reduce(RULE_5, 15);
    case 167:
      return reduce(RULE_5, 15);
    case 153:
      return reduce(RULE_5, 15);
    case 102:
      return reduce(RULE_5, 15);
    case 75:
      return reduce(RULE_5, 15);
    case 135:
      return reduce(RULE_5, 15);
    case 174:
      return reduce(RULE_5, 15);
    case 166:
      return reduce(RULE_5, 15);
    case 180:
      return reduce(RULE_5, 15);
    case 107:
      return reduce(RULE_5, 15);
    case 143:
      return reduce(RULE_5, 15);
    case 176:
      return reduce(RULE_5, 15);
    case 132:
      return reduce(RULE_5, 15);
    case 156:
      return reduce(RULE_5, 15);
    case 165:
      return reduce(RULE_5, 15);
    case 145:
      return reduce(RULE_5, 15);
    case 162:
      return reduce(RULE_5, 15);
    case 164:
      return reduce(RULE_5, 15);
    case 105:
      return reduce(RULE_5, 15);
    case 179:
      return reduce(RULE_5, 15);
    case 177:
      return reduce(RULE_5, 15);
    case 72:
      return reduce(RULE_5, 15);
    case 116:
      return reduce(RULE_5, 15);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action30(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 7);
    case 137:
      return reduce(RULE_5, 7);
    case 139:
      return reduce(RULE_5, 7);
    case 175:
      return reduce(RULE_5, 7);
    case 154:
      return reduce(RULE_5, 7);
    case 157:
      return reduce(RULE_5, 7);
    case 155:
      return reduce(RULE_5, 7);
    case 106:
      return reduce(RULE_5, 7);
    case 160:
      return reduce(RULE_5, 7);
    case 147:
      return reduce(RULE_5, 7);
    case 130:
      return reduce(RULE_5, 7);
    case 129:
      return reduce(RULE_5, 7);
    case 136:
      return reduce(RULE_5, 7);
    case 167:
      return reduce(RULE_5, 7);
    case 153:
      return reduce(RULE_5, 7);
    case 102:
      return reduce(RULE_5, 7);
    case 75:
      return reduce(RULE_5, 7);
    case 135:
      return reduce(RULE_5, 7);
    case 174:
      return reduce(RULE_5, 7);
    case 166:
      return reduce(RULE_5, 7);
    case 180:
      return reduce(RULE_5, 7);
    case 107:
      return reduce(RULE_5, 7);
    case 143:
      return reduce(RULE_5, 7);
    case 176:
      return reduce(RULE_5, 7);
    case 132:
      return reduce(RULE_5, 7);
    case 156:
      return reduce(RULE_5, 7);
    case 165:
      return reduce(RULE_5, 7);
    case 145:
      return reduce(RULE_5, 7);
    case 162:
      return reduce(RULE_5, 7);
    case 164:
      return reduce(RULE_5, 7);
    case 105:
      return reduce(RULE_5, 7);
    case 179:
      return reduce(RULE_5, 7);
    case 177:
      return reduce(RULE_5, 7);
    case 72:
      return reduce(RULE_5, 7);
    case 116:
      return reduce(RULE_5, 7);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action31(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 13);
    case 137:
      return reduce(RULE_5, 13);
    case 139:
      return reduce(RULE_5, 13);
    case 175:
      return reduce(RULE_5, 13);
    case 154:
      return reduce(RULE_5, 13);
    case 157:
      return reduce(RULE_5, 13);
    case 155:
      return reduce(RULE_5, 13);
    case 106:
      return reduce(RULE_5, 13);
    case 160:
      return reduce(RULE_5, 13);
    case 147:
      return reduce(RULE_5, 13);
    case 130:
      return reduce(RULE_5, 13);
    case 129:
      return reduce(RULE_5, 13);
    case 136:
      return reduce(RULE_5, 13);
    case 167:
      return reduce(RULE_5, 13);
    case 153:
      return reduce(RULE_5, 13);
    case 102:
      return reduce(RULE_5, 13);
    case 75:
      return reduce(RULE_5, 13);
    case 135:
      return reduce(RULE_5, 13);
    case 174:
      return reduce(RULE_5, 13);
    case 166:
      return reduce(RULE_5, 13);
    case 180:
      return reduce(RULE_5, 13);
    case 107:
      return reduce(RULE_5, 13);
    case 143:
      return reduce(RULE_5, 13);
    case 176:
      return reduce(RULE_5, 13);
    case 132:
      return reduce(RULE_5, 13);
    case 156:
      return reduce(RULE_5, 13);
    case 165:
      return reduce(RULE_5, 13);
    case 145:
      return reduce(RULE_5, 13);
    case 162:
      return reduce(RULE_5, 13);
    case 164:
      return reduce(RULE_5, 13);
    case 105:
      return reduce(RULE_5, 13);
    case 179:
      return reduce(RULE_5, 13);
    case 177:
      return reduce(RULE_5, 13);
    case 72:
      return reduce(RULE_5, 13);
    case 116:
      return reduce(RULE_5, 13);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action32(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 3);
    case 137:
      return reduce(RULE_5, 3);
    case 139:
      return reduce(RULE_5, 3);
    case 175:
      return reduce(RULE_5, 3);
    case 154:
      return reduce(RULE_5, 3);
    case 157:
      return reduce(RULE_5, 3);
    case 155:
      return reduce(RULE_5, 3);
    case 106:
      return reduce(RULE_5, 3);
    case 160:
      return reduce(RULE_5, 3);
    case 147:
      return reduce(RULE_5, 3);
    case 130:
      return reduce(RULE_5, 3);
    case 129:
      return reduce(RULE_5, 3);
    case 136:
      return reduce(RULE_5, 3);
    case 167:
      return reduce(RULE_5, 3);
    case 153:
      return reduce(RULE_5, 3);
    case 102:
      return reduce(RULE_5, 3);
    case 75:
      return reduce(RULE_5, 3);
    case 135:
      return reduce(RULE_5, 3);
    case 174:
      return reduce(RULE_5, 3);
    case 166:
      return reduce(RULE_5, 3);
    case 180:
      return reduce(RULE_5, 3);
    case 107:
      return reduce(RULE_5, 3);
    case 143:
      return reduce(RULE_5, 3);
    case 176:
      return reduce(RULE_5, 3);
    case 132:
      return reduce(RULE_5, 3);
    case 156:
      return reduce(RULE_5, 3);
    case 165:
      return reduce(RULE_5, 3);
    case 145:
      return reduce(RULE_5, 3);
    case 162:
      return reduce(RULE_5, 3);
    case 164:
      return reduce(RULE_5, 3);
    case 105:
      return reduce(RULE_5, 3);
    case 179:
      return reduce(RULE_5, 3);
    case 177:
      return reduce(RULE_5, 3);
    case 72:
      return reduce(RULE_5, 3);
    case 116:
      return reduce(RULE_5, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, INTERFACE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action33(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(40);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action34(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(41);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action35(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(42);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action36(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(43);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(44);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT});
    }
  }

  private final boolean action37(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_3, 1);
    }
    switch (token.getType().ordinal())
    {
    case 151:
      stateStack.addFirst(20);
      tokenStack.addFirst(token);
      return true;
    case 136:
      return reduce(RULE_3, 1);
    case 129:
      return reduce(RULE_3, 1);
    case 167:
      return reduce(RULE_3, 1);
    case 149:
      return reduce(RULE_3, 1);
    case 164:
      return reduce(RULE_3, 1);
    case 75:
      return reduce(RULE_3, 1);
    case 157:
      return reduce(RULE_3, 1);
    case 154:
      return reduce(RULE_3, 1);
    case 135:
      return reduce(RULE_3, 1);
    case 156:
      return reduce(RULE_3, 1);
    case 177:
      return reduce(RULE_3, 1);
    case 143:
      return reduce(RULE_3, 1);
    default: throw new BadTokenException(token, new Object[] {null, IMPORT_KEYWORD, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action38(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_4, 1);
    case 137:
      return reduce(RULE_4, 1);
    case 150:
      return reduce(RULE_4, 1);
    case 110:
      return reduce(RULE_4, 1);
    case 115:
      return reduce(RULE_4, 1);
    case 88:
      return reduce(RULE_4, 1);
    case 79:
      return reduce(RULE_4, 1);
    case 106:
      return reduce(RULE_4, 1);
    case 81:
      return reduce(RULE_4, 1);
    case 167:
      return reduce(RULE_4, 1);
    case 102:
      return reduce(RULE_4, 1);
    case 117:
      return reduce(RULE_4, 1);
    case 152:
      return reduce(RULE_4, 1);
    case 94:
      return reduce(RULE_4, 1);
    case 80:
      return reduce(RULE_4, 1);
    case 98:
      return reduce(RULE_4, 1);
    case 86:
      return reduce(RULE_4, 1);
    case 171:
      return reduce(RULE_4, 1);
    case 83:
      return reduce(RULE_4, 1);
    case 122:
      return reduce(RULE_4, 1);
    case 95:
      return reduce(RULE_4, 1);
    case 108:
      return reduce(RULE_4, 1);
    case 92:
      return reduce(RULE_4, 1);
    case 128:
      return reduce(RULE_4, 1);
    case 109:
      return reduce(RULE_4, 1);
    case 91:
      return reduce(RULE_4, 1);
    case 104:
      return reduce(RULE_4, 1);
    case 82:
      return reduce(RULE_4, 1);
    case 116:
      return reduce(RULE_4, 1);
    case 118:
      return reduce(RULE_4, 1);
    case 85:
      return reduce(RULE_4, 1);
    case 149:
      return reduce(RULE_4, 1);
    case 126:
      return reduce(RULE_4, 1);
    case 157:
      return reduce(RULE_4, 1);
    case 111:
      return reduce(RULE_4, 1);
    case 96:
      return reduce(RULE_4, 1);
    case 103:
      return reduce(RULE_4, 1);
    case 101:
      return reduce(RULE_4, 1);
    case 147:
      return reduce(RULE_4, 1);
    case 129:
      return reduce(RULE_4, 1);
    case 119:
      return reduce(RULE_4, 1);
    case 75:
      return reduce(RULE_4, 1);
    case 100:
      return reduce(RULE_4, 1);
    case 107:
      return reduce(RULE_4, 1);
    case 143:
      return reduce(RULE_4, 1);
    case 112:
      return reduce(RULE_4, 1);
    case 120:
      return reduce(RULE_4, 1);
    case 121:
      return reduce(RULE_4, 1);
    case 97:
      return reduce(RULE_4, 1);
    case 124:
      return reduce(RULE_4, 1);
    case 123:
      return reduce(RULE_4, 1);
    case 156:
      return reduce(RULE_4, 1);
    case 99:
      return reduce(RULE_4, 1);
    case 113:
      return reduce(RULE_4, 1);
    case 125:
      return reduce(RULE_4, 1);
    case 165:
      return reduce(RULE_4, 1);
    case 77:
      return reduce(RULE_4, 1);
    case 164:
      return reduce(RULE_4, 1);
    case 84:
      return reduce(RULE_4, 1);
    case 78:
      return reduce(RULE_4, 1);
    case 105:
      return reduce(RULE_4, 1);
    case 114:
      return reduce(RULE_4, 1);
    case 72:
      return reduce(RULE_4, 1);
    case 177:
      return reduce(RULE_4, 1);
    case 90:
      return reduce(RULE_4, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, IMPLEMENTS_KEYWORD, PERCENT, PLUS_EQUALS, DOUBLE_LANGLE_EQUALS, ARROW, LPAREN, CARET_EQUALS, STATIC_KEYWORD, HASH, QUESTION_MARK_COLON, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, THROWS_KEYWORD, DOUBLE_EQUALS, COMMA, RPAREN, DOUBLE_RANGLE_EQUALS, UNDERSCORE, DOUBLE_PIPE, MINUS, MINUS_EQUALS, DOUBLE_PERCENT_EQUALS, LANGLE_EQUALS, COLON, QUESTION_MARK, QUESTION_MARK_DOT, DOUBLE_COLON, IMMUTABLE_KEYWORD, STAR_EQUALS, NATIVE_KEYWORD, PERCENT_EQUALS, DOT, LANGLE, FORWARD_SLASH_EQUALS, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, PIPE_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, AMPERSAND_EQUALS, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action39(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_5, 17);
    case 139:
      return reduce(RULE_5, 17);
    case 137:
      return reduce(RULE_5, 17);
    case 175:
      return reduce(RULE_5, 17);
    case 157:
      return reduce(RULE_5, 17);
    case 154:
      return reduce(RULE_5, 17);
    case 155:
      return reduce(RULE_5, 17);
    case 106:
      return reduce(RULE_5, 17);
    case 160:
      return reduce(RULE_5, 17);
    case 147:
      return reduce(RULE_5, 17);
    case 130:
      return reduce(RULE_5, 17);
    case 136:
      return reduce(RULE_5, 17);
    case 129:
      return reduce(RULE_5, 17);
    case 167:
      return reduce(RULE_5, 17);
    case 153:
      return reduce(RULE_5, 17);
    case 102:
      return reduce(RULE_5, 17);
    case 75:
      return reduce(RULE_5, 17);
    case 135:
      return reduce(RULE_5, 17);
    case 174:
      return reduce(RULE_5, 17);
    case 166:
      return reduce(RULE_5, 17);
    case 180:
      return reduce(RULE_5, 17);
    case 107:
      return reduce(RULE_5, 17);
    case 143:
      return reduce(RULE_5, 17);
    case 176:
      return reduce(RULE_5, 17);
    case 132:
      return reduce(RULE_5, 17);
    case 156:
      return reduce(RULE_5, 17);
    case 165:
      return reduce(RULE_5, 17);
    case 145:
      return reduce(RULE_5, 17);
    case 162:
      return reduce(RULE_5, 17);
    case 164:
      return reduce(RULE_5, 17);
    case 105:
      return reduce(RULE_5, 17);
    case 179:
      return reduce(RULE_5, 17);
    case 177:
      return reduce(RULE_5, 17);
    case 72:
      return reduce(RULE_5, 17);
    case 116:
      return reduce(RULE_5, 17);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, INTERFACE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, INT_KEYWORD, HASH, SINCE_SPECIFIER, CLASS_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action40(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(45);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action41(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(46);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(47);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE, EXTENDS_KEYWORD});
    }
  }

  private final boolean action42(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(48);
      tokenStack.addFirst(token);
      return true;
    case 141:
      stateStack.addFirst(49);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_6, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, LBRACE, EXTENDS_KEYWORD});
    }
  }

  private final int goto42(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 50;
    default: return -1;
    }
  }

  private final boolean action43(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 1);
    }
    switch (token.getType().ordinal())
    {
    case 151:
      return reduce(RULE_0, 1);
    case 129:
      return reduce(RULE_0, 1);
    case 136:
      return reduce(RULE_0, 1);
    case 167:
      return reduce(RULE_0, 1);
    case 149:
      return reduce(RULE_0, 1);
    case 164:
      return reduce(RULE_0, 1);
    case 75:
      return reduce(RULE_0, 1);
    case 157:
      return reduce(RULE_0, 1);
    case 154:
      return reduce(RULE_0, 1);
    case 135:
      return reduce(RULE_0, 1);
    case 156:
      return reduce(RULE_0, 1);
    case 177:
      return reduce(RULE_0, 1);
    case 143:
      return reduce(RULE_0, 1);
    default: throw new BadTokenException(token, new Object[] {null, IMPORT_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action44(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 125:
      stateStack.addFirst(51);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(38);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, STAR});
    }
  }

  private final boolean action45(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 0);
    case 139:
      return reduce(RULE_7, 0);
    case 137:
      return reduce(RULE_7, 0);
    case 175:
      return reduce(RULE_7, 0);
    case 157:
      return reduce(RULE_7, 0);
    case 155:
      return reduce(RULE_7, 0);
    case 106:
      return reduce(RULE_7, 0);
    case 160:
      return reduce(RULE_7, 0);
    case 130:
      return reduce(RULE_7, 0);
    case 129:
      return reduce(RULE_7, 0);
    case 102:
      return reduce(RULE_7, 0);
    case 167:
      return reduce(RULE_7, 0);
    case 153:
      return reduce(RULE_7, 0);
    case 75:
      return reduce(RULE_7, 0);
    case 174:
      return reduce(RULE_7, 0);
    case 180:
      return reduce(RULE_7, 0);
    case 166:
      return reduce(RULE_7, 0);
    case 107:
      return reduce(RULE_7, 0);
    case 143:
      return reduce(RULE_7, 0);
    case 176:
      return reduce(RULE_7, 0);
    case 132:
      return reduce(RULE_7, 0);
    case 121:
      return reduce(RULE_7, 0);
    case 156:
      return reduce(RULE_7, 0);
    case 145:
      return reduce(RULE_7, 0);
    case 162:
      return reduce(RULE_7, 0);
    case 164:
      return reduce(RULE_7, 0);
    case 105:
      return reduce(RULE_7, 0);
    case 179:
      return reduce(RULE_7, 0);
    case 177:
      return reduce(RULE_7, 0);
    case 72:
      return reduce(RULE_7, 0);
    case 116:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto45(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 52;
    default: return -1;
    }
  }

  private final boolean action46(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 0);
    case 139:
      return reduce(RULE_7, 0);
    case 137:
      return reduce(RULE_7, 0);
    case 175:
      return reduce(RULE_7, 0);
    case 157:
      return reduce(RULE_7, 0);
    case 155:
      return reduce(RULE_7, 0);
    case 106:
      return reduce(RULE_7, 0);
    case 160:
      return reduce(RULE_7, 0);
    case 130:
      return reduce(RULE_7, 0);
    case 129:
      return reduce(RULE_7, 0);
    case 102:
      return reduce(RULE_7, 0);
    case 167:
      return reduce(RULE_7, 0);
    case 153:
      return reduce(RULE_7, 0);
    case 75:
      return reduce(RULE_7, 0);
    case 174:
      return reduce(RULE_7, 0);
    case 180:
      return reduce(RULE_7, 0);
    case 166:
      return reduce(RULE_7, 0);
    case 107:
      return reduce(RULE_7, 0);
    case 143:
      return reduce(RULE_7, 0);
    case 176:
      return reduce(RULE_7, 0);
    case 132:
      return reduce(RULE_7, 0);
    case 121:
      return reduce(RULE_7, 0);
    case 156:
      return reduce(RULE_7, 0);
    case 145:
      return reduce(RULE_7, 0);
    case 162:
      return reduce(RULE_7, 0);
    case 164:
      return reduce(RULE_7, 0);
    case 105:
      return reduce(RULE_7, 0);
    case 179:
      return reduce(RULE_7, 0);
    case 177:
      return reduce(RULE_7, 0);
    case 72:
      return reduce(RULE_7, 0);
    case 116:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto46(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 53;
    default: return -1;
    }
  }

  private final boolean action47(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto47(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 54;
    case 25: return 55;
    default: return -1;
    }
  }

  private final boolean action48(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto48(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 54;
    case 25: return 56;
    default: return -1;
    }
  }

  private final boolean action49(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto49(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 57;
    default: return -1;
    }
  }

  private final boolean action50(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(58);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action51(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(59);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action52(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(60);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(71);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(75);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 162:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, STATIC_KEYWORD, HASH, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto52(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 80;
    case 9: return 81;
    case 11: return 82;
    case 27: return 83;
    case 28: return 84;
    case 8: return 85;
    case 48: return 86;
    case 49: return 87;
    case 33: return 88;
    case 7: return 89;
    case 30: return 90;
    case 10: return 91;
    default: return -1;
    }
  }

  private final boolean action53(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(60);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(71);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(92);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 162:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, STATIC_KEYWORD, HASH, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto53(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 80;
    case 9: return 81;
    case 11: return 82;
    case 27: return 83;
    case 28: return 84;
    case 8: return 85;
    case 48: return 86;
    case 49: return 87;
    case 33: return 88;
    case 7: return 89;
    case 30: return 90;
    case 10: return 91;
    default: return -1;
    }
  }

  private final boolean action54(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 83:
      return reduce(RULE_8, 0);
    case 105:
      return reduce(RULE_8, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE, DOT});
    }
  }

  private final boolean action55(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(94);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action56(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(93);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_6, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE});
    }
  }

  private final boolean action57(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 150:
      stateStack.addFirst(48);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_6, 0);
    default: throw new BadTokenException(token, new Object[] {IMPLEMENTS_KEYWORD, LBRACE, DOT});
    }
  }

  private final int goto57(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 24: return 95;
    default: return -1;
    }
  }

  private final boolean action58(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 0);
    case 139:
      return reduce(RULE_7, 0);
    case 137:
      return reduce(RULE_7, 0);
    case 175:
      return reduce(RULE_7, 0);
    case 157:
      return reduce(RULE_7, 0);
    case 155:
      return reduce(RULE_7, 0);
    case 106:
      return reduce(RULE_7, 0);
    case 160:
      return reduce(RULE_7, 0);
    case 130:
      return reduce(RULE_7, 0);
    case 129:
      return reduce(RULE_7, 0);
    case 102:
      return reduce(RULE_7, 0);
    case 167:
      return reduce(RULE_7, 0);
    case 153:
      return reduce(RULE_7, 0);
    case 75:
      return reduce(RULE_7, 0);
    case 174:
      return reduce(RULE_7, 0);
    case 180:
      return reduce(RULE_7, 0);
    case 166:
      return reduce(RULE_7, 0);
    case 107:
      return reduce(RULE_7, 0);
    case 143:
      return reduce(RULE_7, 0);
    case 176:
      return reduce(RULE_7, 0);
    case 132:
      return reduce(RULE_7, 0);
    case 121:
      return reduce(RULE_7, 0);
    case 156:
      return reduce(RULE_7, 0);
    case 145:
      return reduce(RULE_7, 0);
    case 162:
      return reduce(RULE_7, 0);
    case 164:
      return reduce(RULE_7, 0);
    case 105:
      return reduce(RULE_7, 0);
    case 179:
      return reduce(RULE_7, 0);
    case 177:
      return reduce(RULE_7, 0);
    case 72:
      return reduce(RULE_7, 0);
    case 116:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto58(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 96;
    default: return -1;
    }
  }

  private final boolean action59(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_0, 2);
    }
    switch (token.getType().ordinal())
    {
    case 151:
      return reduce(RULE_0, 2);
    case 129:
      return reduce(RULE_0, 2);
    case 136:
      return reduce(RULE_0, 2);
    case 167:
      return reduce(RULE_0, 2);
    case 149:
      return reduce(RULE_0, 2);
    case 164:
      return reduce(RULE_0, 2);
    case 75:
      return reduce(RULE_0, 2);
    case 157:
      return reduce(RULE_0, 2);
    case 154:
      return reduce(RULE_0, 2);
    case 135:
      return reduce(RULE_0, 2);
    case 156:
      return reduce(RULE_0, 2);
    case 177:
      return reduce(RULE_0, 2);
    case 143:
      return reduce(RULE_0, 2);
    default: throw new BadTokenException(token, new Object[] {null, IMPORT_KEYWORD, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action60(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(97);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto60(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 98;
    default: return -1;
    }
  }

  private final boolean action61(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 2);
    case 137:
      return reduce(RULE_9, 2);
    case 110:
      return reduce(RULE_9, 2);
    case 79:
      return reduce(RULE_9, 2);
    case 106:
      return reduce(RULE_9, 2);
    case 117:
      return reduce(RULE_9, 2);
    case 102:
      return reduce(RULE_9, 2);
    case 167:
      return reduce(RULE_9, 2);
    case 152:
      return reduce(RULE_9, 2);
    case 94:
      return reduce(RULE_9, 2);
    case 80:
      return reduce(RULE_9, 2);
    case 98:
      return reduce(RULE_9, 2);
    case 171:
      return reduce(RULE_9, 2);
    case 86:
      return reduce(RULE_9, 2);
    case 83:
      return reduce(RULE_9, 2);
    case 122:
      return reduce(RULE_9, 2);
    case 108:
      return reduce(RULE_9, 2);
    case 92:
      return reduce(RULE_9, 2);
    case 128:
      return reduce(RULE_9, 2);
    case 104:
      return reduce(RULE_9, 2);
    case 82:
      return reduce(RULE_9, 2);
    case 116:
      return reduce(RULE_9, 2);
    case 85:
      return reduce(RULE_9, 2);
    case 149:
      return reduce(RULE_9, 2);
    case 157:
      return reduce(RULE_9, 2);
    case 103:
      return reduce(RULE_9, 2);
    case 147:
      return reduce(RULE_9, 2);
    case 129:
      return reduce(RULE_9, 2);
    case 119:
      return reduce(RULE_9, 2);
    case 75:
      return reduce(RULE_9, 2);
    case 100:
      return reduce(RULE_9, 2);
    case 107:
      return reduce(RULE_9, 2);
    case 143:
      return reduce(RULE_9, 2);
    case 112:
      return reduce(RULE_9, 2);
    case 120:
      return reduce(RULE_9, 2);
    case 121:
      return reduce(RULE_9, 2);
    case 124:
      return reduce(RULE_9, 2);
    case 156:
      return reduce(RULE_9, 2);
    case 123:
      return reduce(RULE_9, 2);
    case 99:
      return reduce(RULE_9, 2);
    case 125:
      return reduce(RULE_9, 2);
    case 165:
      return reduce(RULE_9, 2);
    case 77:
      return reduce(RULE_9, 2);
    case 164:
      return reduce(RULE_9, 2);
    case 84:
      return reduce(RULE_9, 2);
    case 105:
      return reduce(RULE_9, 2);
    case 114:
      return reduce(RULE_9, 2);
    case 72:
      return reduce(RULE_9, 2);
    case 177:
      return reduce(RULE_9, 2);
    case 90:
      return reduce(RULE_9, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action62(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 11);
    case 137:
      return reduce(RULE_9, 11);
    case 110:
      return reduce(RULE_9, 11);
    case 79:
      return reduce(RULE_9, 11);
    case 106:
      return reduce(RULE_9, 11);
    case 117:
      return reduce(RULE_9, 11);
    case 102:
      return reduce(RULE_9, 11);
    case 167:
      return reduce(RULE_9, 11);
    case 152:
      return reduce(RULE_9, 11);
    case 94:
      return reduce(RULE_9, 11);
    case 80:
      return reduce(RULE_9, 11);
    case 98:
      return reduce(RULE_9, 11);
    case 171:
      return reduce(RULE_9, 11);
    case 86:
      return reduce(RULE_9, 11);
    case 83:
      return reduce(RULE_9, 11);
    case 122:
      return reduce(RULE_9, 11);
    case 108:
      return reduce(RULE_9, 11);
    case 92:
      return reduce(RULE_9, 11);
    case 128:
      return reduce(RULE_9, 11);
    case 104:
      return reduce(RULE_9, 11);
    case 82:
      return reduce(RULE_9, 11);
    case 116:
      return reduce(RULE_9, 11);
    case 85:
      return reduce(RULE_9, 11);
    case 149:
      return reduce(RULE_9, 11);
    case 157:
      return reduce(RULE_9, 11);
    case 103:
      return reduce(RULE_9, 11);
    case 147:
      return reduce(RULE_9, 11);
    case 129:
      return reduce(RULE_9, 11);
    case 119:
      return reduce(RULE_9, 11);
    case 75:
      return reduce(RULE_9, 11);
    case 100:
      return reduce(RULE_9, 11);
    case 107:
      return reduce(RULE_9, 11);
    case 143:
      return reduce(RULE_9, 11);
    case 112:
      return reduce(RULE_9, 11);
    case 120:
      return reduce(RULE_9, 11);
    case 121:
      return reduce(RULE_9, 11);
    case 124:
      return reduce(RULE_9, 11);
    case 156:
      return reduce(RULE_9, 11);
    case 123:
      return reduce(RULE_9, 11);
    case 99:
      return reduce(RULE_9, 11);
    case 125:
      return reduce(RULE_9, 11);
    case 165:
      return reduce(RULE_9, 11);
    case 77:
      return reduce(RULE_9, 11);
    case 164:
      return reduce(RULE_9, 11);
    case 84:
      return reduce(RULE_9, 11);
    case 105:
      return reduce(RULE_9, 11);
    case 114:
      return reduce(RULE_9, 11);
    case 72:
      return reduce(RULE_9, 11);
    case 177:
      return reduce(RULE_9, 11);
    case 90:
      return reduce(RULE_9, 11);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action63(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 6);
    case 137:
      return reduce(RULE_9, 6);
    case 110:
      return reduce(RULE_9, 6);
    case 79:
      return reduce(RULE_9, 6);
    case 106:
      return reduce(RULE_9, 6);
    case 117:
      return reduce(RULE_9, 6);
    case 102:
      return reduce(RULE_9, 6);
    case 167:
      return reduce(RULE_9, 6);
    case 152:
      return reduce(RULE_9, 6);
    case 94:
      return reduce(RULE_9, 6);
    case 80:
      return reduce(RULE_9, 6);
    case 98:
      return reduce(RULE_9, 6);
    case 171:
      return reduce(RULE_9, 6);
    case 86:
      return reduce(RULE_9, 6);
    case 83:
      return reduce(RULE_9, 6);
    case 122:
      return reduce(RULE_9, 6);
    case 108:
      return reduce(RULE_9, 6);
    case 92:
      return reduce(RULE_9, 6);
    case 128:
      return reduce(RULE_9, 6);
    case 104:
      return reduce(RULE_9, 6);
    case 82:
      return reduce(RULE_9, 6);
    case 116:
      return reduce(RULE_9, 6);
    case 85:
      return reduce(RULE_9, 6);
    case 149:
      return reduce(RULE_9, 6);
    case 157:
      return reduce(RULE_9, 6);
    case 103:
      return reduce(RULE_9, 6);
    case 147:
      return reduce(RULE_9, 6);
    case 129:
      return reduce(RULE_9, 6);
    case 119:
      return reduce(RULE_9, 6);
    case 75:
      return reduce(RULE_9, 6);
    case 100:
      return reduce(RULE_9, 6);
    case 107:
      return reduce(RULE_9, 6);
    case 143:
      return reduce(RULE_9, 6);
    case 112:
      return reduce(RULE_9, 6);
    case 120:
      return reduce(RULE_9, 6);
    case 121:
      return reduce(RULE_9, 6);
    case 124:
      return reduce(RULE_9, 6);
    case 156:
      return reduce(RULE_9, 6);
    case 123:
      return reduce(RULE_9, 6);
    case 99:
      return reduce(RULE_9, 6);
    case 125:
      return reduce(RULE_9, 6);
    case 165:
      return reduce(RULE_9, 6);
    case 77:
      return reduce(RULE_9, 6);
    case 164:
      return reduce(RULE_9, 6);
    case 84:
      return reduce(RULE_9, 6);
    case 105:
      return reduce(RULE_9, 6);
    case 114:
      return reduce(RULE_9, 6);
    case 72:
      return reduce(RULE_9, 6);
    case 177:
      return reduce(RULE_9, 6);
    case 90:
      return reduce(RULE_9, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action64(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto64(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 100;
    case 50: return 101;
    case 29: return 102;
    case 49: return 103;
    case 30: return 104;
    default: return -1;
    }
  }

  private final boolean action65(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 40);
    case 137:
      return reduce(RULE_9, 40);
    case 110:
      return reduce(RULE_9, 40);
    case 79:
      return reduce(RULE_9, 40);
    case 106:
      return reduce(RULE_9, 40);
    case 117:
      return reduce(RULE_9, 40);
    case 102:
      return reduce(RULE_9, 40);
    case 167:
      return reduce(RULE_9, 40);
    case 152:
      return reduce(RULE_9, 40);
    case 94:
      return reduce(RULE_9, 40);
    case 80:
      return reduce(RULE_9, 40);
    case 98:
      return reduce(RULE_9, 40);
    case 171:
      return reduce(RULE_9, 40);
    case 86:
      return reduce(RULE_9, 40);
    case 83:
      return reduce(RULE_9, 40);
    case 122:
      return reduce(RULE_9, 40);
    case 108:
      return reduce(RULE_9, 40);
    case 92:
      return reduce(RULE_9, 40);
    case 128:
      return reduce(RULE_9, 40);
    case 104:
      return reduce(RULE_9, 40);
    case 82:
      return reduce(RULE_9, 40);
    case 116:
      return reduce(RULE_9, 40);
    case 85:
      return reduce(RULE_9, 40);
    case 149:
      return reduce(RULE_9, 40);
    case 157:
      return reduce(RULE_9, 40);
    case 103:
      return reduce(RULE_9, 40);
    case 147:
      return reduce(RULE_9, 40);
    case 129:
      return reduce(RULE_9, 40);
    case 119:
      return reduce(RULE_9, 40);
    case 75:
      return reduce(RULE_9, 40);
    case 100:
      return reduce(RULE_9, 40);
    case 107:
      return reduce(RULE_9, 40);
    case 143:
      return reduce(RULE_9, 40);
    case 112:
      return reduce(RULE_9, 40);
    case 120:
      return reduce(RULE_9, 40);
    case 121:
      return reduce(RULE_9, 40);
    case 124:
      return reduce(RULE_9, 40);
    case 156:
      return reduce(RULE_9, 40);
    case 123:
      return reduce(RULE_9, 40);
    case 99:
      return reduce(RULE_9, 40);
    case 125:
      return reduce(RULE_9, 40);
    case 165:
      return reduce(RULE_9, 40);
    case 77:
      return reduce(RULE_9, 40);
    case 164:
      return reduce(RULE_9, 40);
    case 84:
      return reduce(RULE_9, 40);
    case 105:
      return reduce(RULE_9, 40);
    case 114:
      return reduce(RULE_9, 40);
    case 72:
      return reduce(RULE_9, 40);
    case 177:
      return reduce(RULE_9, 40);
    case 90:
      return reduce(RULE_9, 40);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action66(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 0);
    case 137:
      return reduce(RULE_9, 0);
    case 110:
      return reduce(RULE_9, 0);
    case 79:
      return reduce(RULE_9, 0);
    case 106:
      return reduce(RULE_9, 0);
    case 117:
      return reduce(RULE_9, 0);
    case 102:
      return reduce(RULE_9, 0);
    case 167:
      return reduce(RULE_9, 0);
    case 152:
      return reduce(RULE_9, 0);
    case 94:
      return reduce(RULE_9, 0);
    case 80:
      return reduce(RULE_9, 0);
    case 98:
      return reduce(RULE_9, 0);
    case 171:
      return reduce(RULE_9, 0);
    case 86:
      return reduce(RULE_9, 0);
    case 83:
      return reduce(RULE_9, 0);
    case 122:
      return reduce(RULE_9, 0);
    case 108:
      return reduce(RULE_9, 0);
    case 92:
      return reduce(RULE_9, 0);
    case 128:
      return reduce(RULE_9, 0);
    case 104:
      return reduce(RULE_9, 0);
    case 82:
      return reduce(RULE_9, 0);
    case 116:
      return reduce(RULE_9, 0);
    case 85:
      return reduce(RULE_9, 0);
    case 149:
      return reduce(RULE_9, 0);
    case 157:
      return reduce(RULE_9, 0);
    case 103:
      return reduce(RULE_9, 0);
    case 147:
      return reduce(RULE_9, 0);
    case 129:
      return reduce(RULE_9, 0);
    case 119:
      return reduce(RULE_9, 0);
    case 75:
      return reduce(RULE_9, 0);
    case 100:
      return reduce(RULE_9, 0);
    case 107:
      return reduce(RULE_9, 0);
    case 143:
      return reduce(RULE_9, 0);
    case 112:
      return reduce(RULE_9, 0);
    case 120:
      return reduce(RULE_9, 0);
    case 121:
      return reduce(RULE_9, 0);
    case 124:
      return reduce(RULE_9, 0);
    case 156:
      return reduce(RULE_9, 0);
    case 123:
      return reduce(RULE_9, 0);
    case 99:
      return reduce(RULE_9, 0);
    case 125:
      return reduce(RULE_9, 0);
    case 165:
      return reduce(RULE_9, 0);
    case 77:
      return reduce(RULE_9, 0);
    case 164:
      return reduce(RULE_9, 0);
    case 84:
      return reduce(RULE_9, 0);
    case 105:
      return reduce(RULE_9, 0);
    case 114:
      return reduce(RULE_9, 0);
    case 72:
      return reduce(RULE_9, 0);
    case 177:
      return reduce(RULE_9, 0);
    case 90:
      return reduce(RULE_9, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action67(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 10);
    case 137:
      return reduce(RULE_9, 10);
    case 110:
      return reduce(RULE_9, 10);
    case 79:
      return reduce(RULE_9, 10);
    case 106:
      return reduce(RULE_9, 10);
    case 117:
      return reduce(RULE_9, 10);
    case 102:
      return reduce(RULE_9, 10);
    case 167:
      return reduce(RULE_9, 10);
    case 152:
      return reduce(RULE_9, 10);
    case 94:
      return reduce(RULE_9, 10);
    case 80:
      return reduce(RULE_9, 10);
    case 98:
      return reduce(RULE_9, 10);
    case 171:
      return reduce(RULE_9, 10);
    case 86:
      return reduce(RULE_9, 10);
    case 83:
      return reduce(RULE_9, 10);
    case 122:
      return reduce(RULE_9, 10);
    case 108:
      return reduce(RULE_9, 10);
    case 92:
      return reduce(RULE_9, 10);
    case 128:
      return reduce(RULE_9, 10);
    case 104:
      return reduce(RULE_9, 10);
    case 82:
      return reduce(RULE_9, 10);
    case 116:
      return reduce(RULE_9, 10);
    case 85:
      return reduce(RULE_9, 10);
    case 149:
      return reduce(RULE_9, 10);
    case 157:
      return reduce(RULE_9, 10);
    case 103:
      return reduce(RULE_9, 10);
    case 147:
      return reduce(RULE_9, 10);
    case 129:
      return reduce(RULE_9, 10);
    case 119:
      return reduce(RULE_9, 10);
    case 75:
      return reduce(RULE_9, 10);
    case 100:
      return reduce(RULE_9, 10);
    case 107:
      return reduce(RULE_9, 10);
    case 143:
      return reduce(RULE_9, 10);
    case 112:
      return reduce(RULE_9, 10);
    case 120:
      return reduce(RULE_9, 10);
    case 121:
      return reduce(RULE_9, 10);
    case 124:
      return reduce(RULE_9, 10);
    case 156:
      return reduce(RULE_9, 10);
    case 123:
      return reduce(RULE_9, 10);
    case 99:
      return reduce(RULE_9, 10);
    case 125:
      return reduce(RULE_9, 10);
    case 165:
      return reduce(RULE_9, 10);
    case 77:
      return reduce(RULE_9, 10);
    case 164:
      return reduce(RULE_9, 10);
    case 84:
      return reduce(RULE_9, 10);
    case 105:
      return reduce(RULE_9, 10);
    case 114:
      return reduce(RULE_9, 10);
    case 72:
      return reduce(RULE_9, 10);
    case 177:
      return reduce(RULE_9, 10);
    case 90:
      return reduce(RULE_9, 10);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action68(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(105);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(106);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LSQUARE, NAME, OBJECT_KEYWORD});
    }
  }

  private final int goto68(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 107;
    default: return -1;
    }
  }

  private final boolean action69(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 19);
    case 137:
      return reduce(RULE_9, 19);
    case 110:
      return reduce(RULE_9, 19);
    case 79:
      return reduce(RULE_9, 19);
    case 106:
      return reduce(RULE_9, 19);
    case 117:
      return reduce(RULE_9, 19);
    case 102:
      return reduce(RULE_9, 19);
    case 167:
      return reduce(RULE_9, 19);
    case 152:
      return reduce(RULE_9, 19);
    case 94:
      return reduce(RULE_9, 19);
    case 80:
      return reduce(RULE_9, 19);
    case 98:
      return reduce(RULE_9, 19);
    case 171:
      return reduce(RULE_9, 19);
    case 86:
      return reduce(RULE_9, 19);
    case 83:
      return reduce(RULE_9, 19);
    case 122:
      return reduce(RULE_9, 19);
    case 108:
      return reduce(RULE_9, 19);
    case 92:
      return reduce(RULE_9, 19);
    case 128:
      return reduce(RULE_9, 19);
    case 104:
      return reduce(RULE_9, 19);
    case 82:
      return reduce(RULE_9, 19);
    case 116:
      return reduce(RULE_9, 19);
    case 85:
      return reduce(RULE_9, 19);
    case 149:
      return reduce(RULE_9, 19);
    case 157:
      return reduce(RULE_9, 19);
    case 103:
      return reduce(RULE_9, 19);
    case 147:
      return reduce(RULE_9, 19);
    case 129:
      return reduce(RULE_9, 19);
    case 119:
      return reduce(RULE_9, 19);
    case 75:
      return reduce(RULE_9, 19);
    case 100:
      return reduce(RULE_9, 19);
    case 107:
      return reduce(RULE_9, 19);
    case 143:
      return reduce(RULE_9, 19);
    case 112:
      return reduce(RULE_9, 19);
    case 120:
      return reduce(RULE_9, 19);
    case 121:
      return reduce(RULE_9, 19);
    case 124:
      return reduce(RULE_9, 19);
    case 156:
      return reduce(RULE_9, 19);
    case 123:
      return reduce(RULE_9, 19);
    case 99:
      return reduce(RULE_9, 19);
    case 125:
      return reduce(RULE_9, 19);
    case 165:
      return reduce(RULE_9, 19);
    case 77:
      return reduce(RULE_9, 19);
    case 164:
      return reduce(RULE_9, 19);
    case 84:
      return reduce(RULE_9, 19);
    case 105:
      return reduce(RULE_9, 19);
    case 114:
      return reduce(RULE_9, 19);
    case 72:
      return reduce(RULE_9, 19);
    case 177:
      return reduce(RULE_9, 19);
    case 90:
      return reduce(RULE_9, 19);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action70(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 14);
    case 137:
      return reduce(RULE_9, 14);
    case 110:
      return reduce(RULE_9, 14);
    case 79:
      return reduce(RULE_9, 14);
    case 106:
      return reduce(RULE_9, 14);
    case 117:
      return reduce(RULE_9, 14);
    case 102:
      return reduce(RULE_9, 14);
    case 167:
      return reduce(RULE_9, 14);
    case 152:
      return reduce(RULE_9, 14);
    case 94:
      return reduce(RULE_9, 14);
    case 80:
      return reduce(RULE_9, 14);
    case 98:
      return reduce(RULE_9, 14);
    case 171:
      return reduce(RULE_9, 14);
    case 86:
      return reduce(RULE_9, 14);
    case 83:
      return reduce(RULE_9, 14);
    case 122:
      return reduce(RULE_9, 14);
    case 108:
      return reduce(RULE_9, 14);
    case 92:
      return reduce(RULE_9, 14);
    case 128:
      return reduce(RULE_9, 14);
    case 104:
      return reduce(RULE_9, 14);
    case 82:
      return reduce(RULE_9, 14);
    case 116:
      return reduce(RULE_9, 14);
    case 85:
      return reduce(RULE_9, 14);
    case 149:
      return reduce(RULE_9, 14);
    case 157:
      return reduce(RULE_9, 14);
    case 103:
      return reduce(RULE_9, 14);
    case 147:
      return reduce(RULE_9, 14);
    case 129:
      return reduce(RULE_9, 14);
    case 119:
      return reduce(RULE_9, 14);
    case 75:
      return reduce(RULE_9, 14);
    case 100:
      return reduce(RULE_9, 14);
    case 107:
      return reduce(RULE_9, 14);
    case 143:
      return reduce(RULE_9, 14);
    case 112:
      return reduce(RULE_9, 14);
    case 120:
      return reduce(RULE_9, 14);
    case 121:
      return reduce(RULE_9, 14);
    case 124:
      return reduce(RULE_9, 14);
    case 156:
      return reduce(RULE_9, 14);
    case 123:
      return reduce(RULE_9, 14);
    case 99:
      return reduce(RULE_9, 14);
    case 125:
      return reduce(RULE_9, 14);
    case 165:
      return reduce(RULE_9, 14);
    case 77:
      return reduce(RULE_9, 14);
    case 164:
      return reduce(RULE_9, 14);
    case 84:
      return reduce(RULE_9, 14);
    case 105:
      return reduce(RULE_9, 14);
    case 114:
      return reduce(RULE_9, 14);
    case 72:
      return reduce(RULE_9, 14);
    case 177:
      return reduce(RULE_9, 14);
    case 90:
      return reduce(RULE_9, 14);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action71(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(108);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action72(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(109);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action73(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 7);
    case 137:
      return reduce(RULE_9, 7);
    case 110:
      return reduce(RULE_9, 7);
    case 79:
      return reduce(RULE_9, 7);
    case 106:
      return reduce(RULE_9, 7);
    case 117:
      return reduce(RULE_9, 7);
    case 102:
      return reduce(RULE_9, 7);
    case 167:
      return reduce(RULE_9, 7);
    case 152:
      return reduce(RULE_9, 7);
    case 94:
      return reduce(RULE_9, 7);
    case 80:
      return reduce(RULE_9, 7);
    case 98:
      return reduce(RULE_9, 7);
    case 171:
      return reduce(RULE_9, 7);
    case 86:
      return reduce(RULE_9, 7);
    case 83:
      return reduce(RULE_9, 7);
    case 122:
      return reduce(RULE_9, 7);
    case 108:
      return reduce(RULE_9, 7);
    case 92:
      return reduce(RULE_9, 7);
    case 128:
      return reduce(RULE_9, 7);
    case 104:
      return reduce(RULE_9, 7);
    case 82:
      return reduce(RULE_9, 7);
    case 116:
      return reduce(RULE_9, 7);
    case 85:
      return reduce(RULE_9, 7);
    case 149:
      return reduce(RULE_9, 7);
    case 157:
      return reduce(RULE_9, 7);
    case 103:
      return reduce(RULE_9, 7);
    case 147:
      return reduce(RULE_9, 7);
    case 129:
      return reduce(RULE_9, 7);
    case 119:
      return reduce(RULE_9, 7);
    case 75:
      return reduce(RULE_9, 7);
    case 100:
      return reduce(RULE_9, 7);
    case 107:
      return reduce(RULE_9, 7);
    case 143:
      return reduce(RULE_9, 7);
    case 112:
      return reduce(RULE_9, 7);
    case 120:
      return reduce(RULE_9, 7);
    case 121:
      return reduce(RULE_9, 7);
    case 124:
      return reduce(RULE_9, 7);
    case 156:
      return reduce(RULE_9, 7);
    case 123:
      return reduce(RULE_9, 7);
    case 99:
      return reduce(RULE_9, 7);
    case 125:
      return reduce(RULE_9, 7);
    case 165:
      return reduce(RULE_9, 7);
    case 77:
      return reduce(RULE_9, 7);
    case 164:
      return reduce(RULE_9, 7);
    case 84:
      return reduce(RULE_9, 7);
    case 105:
      return reduce(RULE_9, 7);
    case 114:
      return reduce(RULE_9, 7);
    case 72:
      return reduce(RULE_9, 7);
    case 177:
      return reduce(RULE_9, 7);
    case 90:
      return reduce(RULE_9, 7);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action74(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 18);
    case 137:
      return reduce(RULE_9, 18);
    case 110:
      return reduce(RULE_9, 18);
    case 79:
      return reduce(RULE_9, 18);
    case 106:
      return reduce(RULE_9, 18);
    case 117:
      return reduce(RULE_9, 18);
    case 102:
      return reduce(RULE_9, 18);
    case 167:
      return reduce(RULE_9, 18);
    case 152:
      return reduce(RULE_9, 18);
    case 94:
      return reduce(RULE_9, 18);
    case 80:
      return reduce(RULE_9, 18);
    case 98:
      return reduce(RULE_9, 18);
    case 171:
      return reduce(RULE_9, 18);
    case 86:
      return reduce(RULE_9, 18);
    case 83:
      return reduce(RULE_9, 18);
    case 122:
      return reduce(RULE_9, 18);
    case 108:
      return reduce(RULE_9, 18);
    case 92:
      return reduce(RULE_9, 18);
    case 128:
      return reduce(RULE_9, 18);
    case 104:
      return reduce(RULE_9, 18);
    case 82:
      return reduce(RULE_9, 18);
    case 116:
      return reduce(RULE_9, 18);
    case 85:
      return reduce(RULE_9, 18);
    case 149:
      return reduce(RULE_9, 18);
    case 157:
      return reduce(RULE_9, 18);
    case 103:
      return reduce(RULE_9, 18);
    case 147:
      return reduce(RULE_9, 18);
    case 129:
      return reduce(RULE_9, 18);
    case 119:
      return reduce(RULE_9, 18);
    case 75:
      return reduce(RULE_9, 18);
    case 100:
      return reduce(RULE_9, 18);
    case 107:
      return reduce(RULE_9, 18);
    case 143:
      return reduce(RULE_9, 18);
    case 112:
      return reduce(RULE_9, 18);
    case 120:
      return reduce(RULE_9, 18);
    case 121:
      return reduce(RULE_9, 18);
    case 124:
      return reduce(RULE_9, 18);
    case 156:
      return reduce(RULE_9, 18);
    case 123:
      return reduce(RULE_9, 18);
    case 99:
      return reduce(RULE_9, 18);
    case 125:
      return reduce(RULE_9, 18);
    case 165:
      return reduce(RULE_9, 18);
    case 77:
      return reduce(RULE_9, 18);
    case 164:
      return reduce(RULE_9, 18);
    case 84:
      return reduce(RULE_9, 18);
    case 105:
      return reduce(RULE_9, 18);
    case 114:
      return reduce(RULE_9, 18);
    case 72:
      return reduce(RULE_9, 18);
    case 177:
      return reduce(RULE_9, 18);
    case 90:
      return reduce(RULE_9, 18);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action75(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_10, 0);
    }
    switch (token.getType().ordinal())
    {
    case 136:
      return reduce(RULE_10, 0);
    case 129:
      return reduce(RULE_10, 0);
    case 167:
      return reduce(RULE_10, 0);
    case 149:
      return reduce(RULE_10, 0);
    case 164:
      return reduce(RULE_10, 0);
    case 75:
      return reduce(RULE_10, 0);
    case 157:
      return reduce(RULE_10, 0);
    case 154:
      return reduce(RULE_10, 0);
    case 135:
      return reduce(RULE_10, 0);
    case 156:
      return reduce(RULE_10, 0);
    case 177:
      return reduce(RULE_10, 0);
    case 143:
      return reduce(RULE_10, 0);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action76(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 3);
    case 137:
      return reduce(RULE_9, 3);
    case 110:
      return reduce(RULE_9, 3);
    case 79:
      return reduce(RULE_9, 3);
    case 106:
      return reduce(RULE_9, 3);
    case 117:
      return reduce(RULE_9, 3);
    case 102:
      return reduce(RULE_9, 3);
    case 167:
      return reduce(RULE_9, 3);
    case 152:
      return reduce(RULE_9, 3);
    case 94:
      return reduce(RULE_9, 3);
    case 80:
      return reduce(RULE_9, 3);
    case 98:
      return reduce(RULE_9, 3);
    case 171:
      return reduce(RULE_9, 3);
    case 86:
      return reduce(RULE_9, 3);
    case 83:
      return reduce(RULE_9, 3);
    case 122:
      return reduce(RULE_9, 3);
    case 108:
      return reduce(RULE_9, 3);
    case 92:
      return reduce(RULE_9, 3);
    case 128:
      return reduce(RULE_9, 3);
    case 104:
      return reduce(RULE_9, 3);
    case 82:
      return reduce(RULE_9, 3);
    case 116:
      return reduce(RULE_9, 3);
    case 85:
      return reduce(RULE_9, 3);
    case 149:
      return reduce(RULE_9, 3);
    case 157:
      return reduce(RULE_9, 3);
    case 103:
      return reduce(RULE_9, 3);
    case 147:
      return reduce(RULE_9, 3);
    case 129:
      return reduce(RULE_9, 3);
    case 119:
      return reduce(RULE_9, 3);
    case 75:
      return reduce(RULE_9, 3);
    case 100:
      return reduce(RULE_9, 3);
    case 107:
      return reduce(RULE_9, 3);
    case 143:
      return reduce(RULE_9, 3);
    case 112:
      return reduce(RULE_9, 3);
    case 120:
      return reduce(RULE_9, 3);
    case 121:
      return reduce(RULE_9, 3);
    case 124:
      return reduce(RULE_9, 3);
    case 156:
      return reduce(RULE_9, 3);
    case 123:
      return reduce(RULE_9, 3);
    case 99:
      return reduce(RULE_9, 3);
    case 125:
      return reduce(RULE_9, 3);
    case 165:
      return reduce(RULE_9, 3);
    case 77:
      return reduce(RULE_9, 3);
    case 164:
      return reduce(RULE_9, 3);
    case 84:
      return reduce(RULE_9, 3);
    case 105:
      return reduce(RULE_9, 3);
    case 114:
      return reduce(RULE_9, 3);
    case 72:
      return reduce(RULE_9, 3);
    case 177:
      return reduce(RULE_9, 3);
    case 90:
      return reduce(RULE_9, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action77(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 173:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(116);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 170:
      stateStack.addFirst(119);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(121);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(122);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(123);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(125);
      tokenStack.addFirst(token);
      return true;
    case 146:
      stateStack.addFirst(126);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(129);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(130);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(131);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, ARROW, TRY_KEYWORD, LPAREN, FLOATING_LITERAL, INT_KEYWORD, STATIC_KEYWORD, HASH, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final int goto77(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 135;
    case 50: return 136;
    case 71: return 137;
    case 51: return 138;
    case 66: return 139;
    case 64: return 140;
    case 39: return 141;
    case 28: return 142;
    case 46: return 143;
    case 35: return 144;
    case 45: return 145;
    case 38: return 146;
    case 49: return 147;
    case 41: return 148;
    case 44: return 149;
    case 40: return 150;
    case 43: return 151;
    case 48: return 152;
    case 30: return 153;
    case 65: return 154;
    case 15: return 155;
    case 68: return 156;
    case 42: return 157;
    case 26: return 158;
    case 34: return 159;
    case 67: return 160;
    case 37: return 161;
    case 14: return 162;
    case 13: return 163;
    case 63: return 164;
    case 29: return 165;
    case 33: return 166;
    default: return -1;
    }
  }

  private final boolean action78(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 15);
    case 137:
      return reduce(RULE_9, 15);
    case 110:
      return reduce(RULE_9, 15);
    case 79:
      return reduce(RULE_9, 15);
    case 106:
      return reduce(RULE_9, 15);
    case 117:
      return reduce(RULE_9, 15);
    case 102:
      return reduce(RULE_9, 15);
    case 167:
      return reduce(RULE_9, 15);
    case 152:
      return reduce(RULE_9, 15);
    case 94:
      return reduce(RULE_9, 15);
    case 80:
      return reduce(RULE_9, 15);
    case 98:
      return reduce(RULE_9, 15);
    case 171:
      return reduce(RULE_9, 15);
    case 86:
      return reduce(RULE_9, 15);
    case 83:
      return reduce(RULE_9, 15);
    case 122:
      return reduce(RULE_9, 15);
    case 108:
      return reduce(RULE_9, 15);
    case 92:
      return reduce(RULE_9, 15);
    case 128:
      return reduce(RULE_9, 15);
    case 104:
      return reduce(RULE_9, 15);
    case 82:
      return reduce(RULE_9, 15);
    case 116:
      return reduce(RULE_9, 15);
    case 85:
      return reduce(RULE_9, 15);
    case 149:
      return reduce(RULE_9, 15);
    case 157:
      return reduce(RULE_9, 15);
    case 103:
      return reduce(RULE_9, 15);
    case 147:
      return reduce(RULE_9, 15);
    case 129:
      return reduce(RULE_9, 15);
    case 119:
      return reduce(RULE_9, 15);
    case 75:
      return reduce(RULE_9, 15);
    case 100:
      return reduce(RULE_9, 15);
    case 107:
      return reduce(RULE_9, 15);
    case 143:
      return reduce(RULE_9, 15);
    case 112:
      return reduce(RULE_9, 15);
    case 120:
      return reduce(RULE_9, 15);
    case 121:
      return reduce(RULE_9, 15);
    case 124:
      return reduce(RULE_9, 15);
    case 156:
      return reduce(RULE_9, 15);
    case 123:
      return reduce(RULE_9, 15);
    case 99:
      return reduce(RULE_9, 15);
    case 125:
      return reduce(RULE_9, 15);
    case 165:
      return reduce(RULE_9, 15);
    case 77:
      return reduce(RULE_9, 15);
    case 164:
      return reduce(RULE_9, 15);
    case 84:
      return reduce(RULE_9, 15);
    case 105:
      return reduce(RULE_9, 15);
    case 114:
      return reduce(RULE_9, 15);
    case 72:
      return reduce(RULE_9, 15);
    case 177:
      return reduce(RULE_9, 15);
    case 90:
      return reduce(RULE_9, 15);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action79(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(167);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(168);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(169);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(170);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(171);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(172);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(173);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(174);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(175);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(176);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(177);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(178);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(179);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(180);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(181);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(182);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, USHORT_KEYWORD, LSQUARE, NAME});
    }
  }

  private final int goto79(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 183;
    case 30: return 184;
    default: return -1;
    }
  }

  private final boolean action80(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(185);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(24);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(186);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 162:
      return reduce(RULE_1, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, HASH, STATIC_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto80(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 187;
    case 49: return 87;
    case 33: return 188;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action81(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 3);
    case 139:
      return reduce(RULE_7, 3);
    case 137:
      return reduce(RULE_7, 3);
    case 175:
      return reduce(RULE_7, 3);
    case 157:
      return reduce(RULE_7, 3);
    case 155:
      return reduce(RULE_7, 3);
    case 106:
      return reduce(RULE_7, 3);
    case 160:
      return reduce(RULE_7, 3);
    case 130:
      return reduce(RULE_7, 3);
    case 129:
      return reduce(RULE_7, 3);
    case 102:
      return reduce(RULE_7, 3);
    case 167:
      return reduce(RULE_7, 3);
    case 153:
      return reduce(RULE_7, 3);
    case 75:
      return reduce(RULE_7, 3);
    case 174:
      return reduce(RULE_7, 3);
    case 180:
      return reduce(RULE_7, 3);
    case 166:
      return reduce(RULE_7, 3);
    case 107:
      return reduce(RULE_7, 3);
    case 143:
      return reduce(RULE_7, 3);
    case 176:
      return reduce(RULE_7, 3);
    case 132:
      return reduce(RULE_7, 3);
    case 121:
      return reduce(RULE_7, 3);
    case 156:
      return reduce(RULE_7, 3);
    case 145:
      return reduce(RULE_7, 3);
    case 162:
      return reduce(RULE_7, 3);
    case 164:
      return reduce(RULE_7, 3);
    case 105:
      return reduce(RULE_7, 3);
    case 179:
      return reduce(RULE_7, 3);
    case 177:
      return reduce(RULE_7, 3);
    case 72:
      return reduce(RULE_7, 3);
    case 116:
      return reduce(RULE_7, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action82(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 5);
    case 139:
      return reduce(RULE_7, 5);
    case 137:
      return reduce(RULE_7, 5);
    case 175:
      return reduce(RULE_7, 5);
    case 157:
      return reduce(RULE_7, 5);
    case 155:
      return reduce(RULE_7, 5);
    case 106:
      return reduce(RULE_7, 5);
    case 160:
      return reduce(RULE_7, 5);
    case 130:
      return reduce(RULE_7, 5);
    case 129:
      return reduce(RULE_7, 5);
    case 102:
      return reduce(RULE_7, 5);
    case 167:
      return reduce(RULE_7, 5);
    case 153:
      return reduce(RULE_7, 5);
    case 75:
      return reduce(RULE_7, 5);
    case 174:
      return reduce(RULE_7, 5);
    case 180:
      return reduce(RULE_7, 5);
    case 166:
      return reduce(RULE_7, 5);
    case 107:
      return reduce(RULE_7, 5);
    case 143:
      return reduce(RULE_7, 5);
    case 176:
      return reduce(RULE_7, 5);
    case 132:
      return reduce(RULE_7, 5);
    case 121:
      return reduce(RULE_7, 5);
    case 156:
      return reduce(RULE_7, 5);
    case 145:
      return reduce(RULE_7, 5);
    case 162:
      return reduce(RULE_7, 5);
    case 164:
      return reduce(RULE_7, 5);
    case 105:
      return reduce(RULE_7, 5);
    case 179:
      return reduce(RULE_7, 5);
    case 177:
      return reduce(RULE_7, 5);
    case 72:
      return reduce(RULE_7, 5);
    case 116:
      return reduce(RULE_7, 5);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action83(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 162:
      stateStack.addFirst(189);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {PROPERTY_KEYWORD});
    }
  }

  private final boolean action84(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_11, 0);
    case 137:
      return reduce(RULE_11, 0);
    case 110:
      return reduce(RULE_11, 0);
    case 79:
      return reduce(RULE_11, 0);
    case 106:
      return reduce(RULE_11, 0);
    case 117:
      return reduce(RULE_11, 0);
    case 102:
      return reduce(RULE_11, 0);
    case 167:
      return reduce(RULE_11, 0);
    case 152:
      return reduce(RULE_11, 0);
    case 94:
      return reduce(RULE_11, 0);
    case 80:
      return reduce(RULE_11, 0);
    case 98:
      return reduce(RULE_11, 0);
    case 171:
      return reduce(RULE_11, 0);
    case 86:
      return reduce(RULE_11, 0);
    case 83:
      return reduce(RULE_11, 0);
    case 122:
      return reduce(RULE_11, 0);
    case 108:
      return reduce(RULE_11, 0);
    case 92:
      return reduce(RULE_11, 0);
    case 128:
      return reduce(RULE_11, 0);
    case 104:
      return reduce(RULE_11, 0);
    case 82:
      return reduce(RULE_11, 0);
    case 116:
      return reduce(RULE_11, 0);
    case 85:
      return reduce(RULE_11, 0);
    case 149:
      return reduce(RULE_11, 0);
    case 157:
      return reduce(RULE_11, 0);
    case 103:
      return reduce(RULE_11, 0);
    case 147:
      return reduce(RULE_11, 0);
    case 129:
      return reduce(RULE_11, 0);
    case 119:
      return reduce(RULE_11, 0);
    case 75:
      return reduce(RULE_11, 0);
    case 100:
      return reduce(RULE_11, 0);
    case 107:
      return reduce(RULE_11, 0);
    case 143:
      return reduce(RULE_11, 0);
    case 112:
      return reduce(RULE_11, 0);
    case 120:
      return reduce(RULE_11, 0);
    case 121:
      return reduce(RULE_11, 0);
    case 124:
      return reduce(RULE_11, 0);
    case 156:
      return reduce(RULE_11, 0);
    case 123:
      return reduce(RULE_11, 0);
    case 99:
      return reduce(RULE_11, 0);
    case 125:
      return reduce(RULE_11, 0);
    case 165:
      return reduce(RULE_11, 0);
    case 77:
      return reduce(RULE_11, 0);
    case 164:
      return reduce(RULE_11, 0);
    case 84:
      return reduce(RULE_11, 0);
    case 105:
      return reduce(RULE_11, 0);
    case 114:
      return reduce(RULE_11, 0);
    case 72:
      return reduce(RULE_11, 0);
    case 177:
      return reduce(RULE_11, 0);
    case 90:
      return reduce(RULE_11, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, DOT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action85(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 2);
    case 139:
      return reduce(RULE_7, 2);
    case 137:
      return reduce(RULE_7, 2);
    case 175:
      return reduce(RULE_7, 2);
    case 157:
      return reduce(RULE_7, 2);
    case 155:
      return reduce(RULE_7, 2);
    case 106:
      return reduce(RULE_7, 2);
    case 160:
      return reduce(RULE_7, 2);
    case 130:
      return reduce(RULE_7, 2);
    case 129:
      return reduce(RULE_7, 2);
    case 102:
      return reduce(RULE_7, 2);
    case 167:
      return reduce(RULE_7, 2);
    case 153:
      return reduce(RULE_7, 2);
    case 75:
      return reduce(RULE_7, 2);
    case 174:
      return reduce(RULE_7, 2);
    case 180:
      return reduce(RULE_7, 2);
    case 166:
      return reduce(RULE_7, 2);
    case 107:
      return reduce(RULE_7, 2);
    case 143:
      return reduce(RULE_7, 2);
    case 176:
      return reduce(RULE_7, 2);
    case 132:
      return reduce(RULE_7, 2);
    case 121:
      return reduce(RULE_7, 2);
    case 156:
      return reduce(RULE_7, 2);
    case 145:
      return reduce(RULE_7, 2);
    case 162:
      return reduce(RULE_7, 2);
    case 164:
      return reduce(RULE_7, 2);
    case 105:
      return reduce(RULE_7, 2);
    case 179:
      return reduce(RULE_7, 2);
    case 177:
      return reduce(RULE_7, 2);
    case 72:
      return reduce(RULE_7, 2);
    case 116:
      return reduce(RULE_7, 2);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action86(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(190);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action87(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_11, 2);
    case 137:
      return reduce(RULE_11, 2);
    case 110:
      return reduce(RULE_11, 2);
    case 79:
      return reduce(RULE_11, 2);
    case 106:
      return reduce(RULE_11, 2);
    case 117:
      return reduce(RULE_11, 2);
    case 102:
      return reduce(RULE_11, 2);
    case 167:
      return reduce(RULE_11, 2);
    case 152:
      return reduce(RULE_11, 2);
    case 94:
      return reduce(RULE_11, 2);
    case 80:
      return reduce(RULE_11, 2);
    case 98:
      return reduce(RULE_11, 2);
    case 171:
      return reduce(RULE_11, 2);
    case 86:
      return reduce(RULE_11, 2);
    case 83:
      return reduce(RULE_11, 2);
    case 122:
      return reduce(RULE_11, 2);
    case 108:
      return reduce(RULE_11, 2);
    case 92:
      return reduce(RULE_11, 2);
    case 128:
      return reduce(RULE_11, 2);
    case 104:
      return reduce(RULE_11, 2);
    case 82:
      return reduce(RULE_11, 2);
    case 116:
      return reduce(RULE_11, 2);
    case 85:
      return reduce(RULE_11, 2);
    case 149:
      return reduce(RULE_11, 2);
    case 157:
      return reduce(RULE_11, 2);
    case 103:
      return reduce(RULE_11, 2);
    case 147:
      return reduce(RULE_11, 2);
    case 129:
      return reduce(RULE_11, 2);
    case 119:
      return reduce(RULE_11, 2);
    case 75:
      return reduce(RULE_11, 2);
    case 100:
      return reduce(RULE_11, 2);
    case 107:
      return reduce(RULE_11, 2);
    case 143:
      return reduce(RULE_11, 2);
    case 112:
      return reduce(RULE_11, 2);
    case 120:
      return reduce(RULE_11, 2);
    case 121:
      return reduce(RULE_11, 2);
    case 124:
      return reduce(RULE_11, 2);
    case 156:
      return reduce(RULE_11, 2);
    case 123:
      return reduce(RULE_11, 2);
    case 99:
      return reduce(RULE_11, 2);
    case 125:
      return reduce(RULE_11, 2);
    case 165:
      return reduce(RULE_11, 2);
    case 77:
      return reduce(RULE_11, 2);
    case 164:
      return reduce(RULE_11, 2);
    case 84:
      return reduce(RULE_11, 2);
    case 105:
      return reduce(RULE_11, 2);
    case 114:
      return reduce(RULE_11, 2);
    case 72:
      return reduce(RULE_11, 2);
    case 177:
      return reduce(RULE_11, 2);
    case 90:
      return reduce(RULE_11, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action88(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_12, 1);
    case 137:
      return reduce(RULE_12, 1);
    case 139:
      return reduce(RULE_12, 1);
    case 175:
      return reduce(RULE_12, 1);
    case 157:
      return reduce(RULE_12, 1);
    case 155:
      return reduce(RULE_12, 1);
    case 106:
      return reduce(RULE_12, 1);
    case 160:
      return reduce(RULE_12, 1);
    case 130:
      return reduce(RULE_12, 1);
    case 129:
      return reduce(RULE_12, 1);
    case 167:
      return reduce(RULE_12, 1);
    case 102:
      return reduce(RULE_12, 1);
    case 153:
      return reduce(RULE_12, 1);
    case 75:
      return reduce(RULE_12, 1);
    case 174:
      return reduce(RULE_12, 1);
    case 180:
      return reduce(RULE_12, 1);
    case 166:
      return reduce(RULE_12, 1);
    case 107:
      return reduce(RULE_12, 1);
    case 143:
      return reduce(RULE_12, 1);
    case 176:
      return reduce(RULE_12, 1);
    case 132:
      return reduce(RULE_12, 1);
    case 121:
      return reduce(RULE_12, 1);
    case 156:
      return reduce(RULE_12, 1);
    case 145:
      return reduce(RULE_12, 1);
    case 162:
      return reduce(RULE_12, 1);
    case 164:
      return reduce(RULE_12, 1);
    case 105:
      return reduce(RULE_12, 1);
    case 179:
      return reduce(RULE_12, 1);
    case 72:
      return reduce(RULE_12, 1);
    case 177:
      return reduce(RULE_12, 1);
    case 116:
      return reduce(RULE_12, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, HASH, STATIC_KEYWORD, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final boolean action89(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 1);
    case 139:
      return reduce(RULE_7, 1);
    case 137:
      return reduce(RULE_7, 1);
    case 175:
      return reduce(RULE_7, 1);
    case 157:
      return reduce(RULE_7, 1);
    case 155:
      return reduce(RULE_7, 1);
    case 106:
      return reduce(RULE_7, 1);
    case 160:
      return reduce(RULE_7, 1);
    case 130:
      return reduce(RULE_7, 1);
    case 129:
      return reduce(RULE_7, 1);
    case 102:
      return reduce(RULE_7, 1);
    case 167:
      return reduce(RULE_7, 1);
    case 153:
      return reduce(RULE_7, 1);
    case 75:
      return reduce(RULE_7, 1);
    case 174:
      return reduce(RULE_7, 1);
    case 180:
      return reduce(RULE_7, 1);
    case 166:
      return reduce(RULE_7, 1);
    case 107:
      return reduce(RULE_7, 1);
    case 143:
      return reduce(RULE_7, 1);
    case 176:
      return reduce(RULE_7, 1);
    case 132:
      return reduce(RULE_7, 1);
    case 121:
      return reduce(RULE_7, 1);
    case 156:
      return reduce(RULE_7, 1);
    case 145:
      return reduce(RULE_7, 1);
    case 162:
      return reduce(RULE_7, 1);
    case 164:
      return reduce(RULE_7, 1);
    case 105:
      return reduce(RULE_7, 1);
    case 179:
      return reduce(RULE_7, 1);
    case 177:
      return reduce(RULE_7, 1);
    case 72:
      return reduce(RULE_7, 1);
    case 116:
      return reduce(RULE_7, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action90(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_11, 1);
    case 137:
      return reduce(RULE_11, 1);
    case 110:
      return reduce(RULE_11, 1);
    case 79:
      return reduce(RULE_11, 1);
    case 106:
      return reduce(RULE_11, 1);
    case 117:
      return reduce(RULE_11, 1);
    case 102:
      return reduce(RULE_11, 1);
    case 167:
      return reduce(RULE_11, 1);
    case 152:
      return reduce(RULE_11, 1);
    case 94:
      return reduce(RULE_11, 1);
    case 80:
      return reduce(RULE_11, 1);
    case 98:
      return reduce(RULE_11, 1);
    case 171:
      return reduce(RULE_11, 1);
    case 86:
      return reduce(RULE_11, 1);
    case 83:
      return reduce(RULE_11, 1);
    case 122:
      return reduce(RULE_11, 1);
    case 108:
      return reduce(RULE_11, 1);
    case 92:
      return reduce(RULE_11, 1);
    case 128:
      return reduce(RULE_11, 1);
    case 104:
      return reduce(RULE_11, 1);
    case 82:
      return reduce(RULE_11, 1);
    case 116:
      return reduce(RULE_11, 1);
    case 85:
      return reduce(RULE_11, 1);
    case 149:
      return reduce(RULE_11, 1);
    case 157:
      return reduce(RULE_11, 1);
    case 103:
      return reduce(RULE_11, 1);
    case 147:
      return reduce(RULE_11, 1);
    case 129:
      return reduce(RULE_11, 1);
    case 119:
      return reduce(RULE_11, 1);
    case 75:
      return reduce(RULE_11, 1);
    case 100:
      return reduce(RULE_11, 1);
    case 107:
      return reduce(RULE_11, 1);
    case 143:
      return reduce(RULE_11, 1);
    case 112:
      return reduce(RULE_11, 1);
    case 120:
      return reduce(RULE_11, 1);
    case 121:
      return reduce(RULE_11, 1);
    case 124:
      return reduce(RULE_11, 1);
    case 156:
      return reduce(RULE_11, 1);
    case 123:
      return reduce(RULE_11, 1);
    case 99:
      return reduce(RULE_11, 1);
    case 125:
      return reduce(RULE_11, 1);
    case 165:
      return reduce(RULE_11, 1);
    case 77:
      return reduce(RULE_11, 1);
    case 164:
      return reduce(RULE_11, 1);
    case 84:
      return reduce(RULE_11, 1);
    case 105:
      return reduce(RULE_11, 1);
    case 114:
      return reduce(RULE_11, 1);
    case 72:
      return reduce(RULE_11, 1);
    case 177:
      return reduce(RULE_11, 1);
    case 90:
      return reduce(RULE_11, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action91(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 4);
    case 139:
      return reduce(RULE_7, 4);
    case 137:
      return reduce(RULE_7, 4);
    case 175:
      return reduce(RULE_7, 4);
    case 157:
      return reduce(RULE_7, 4);
    case 155:
      return reduce(RULE_7, 4);
    case 106:
      return reduce(RULE_7, 4);
    case 160:
      return reduce(RULE_7, 4);
    case 130:
      return reduce(RULE_7, 4);
    case 129:
      return reduce(RULE_7, 4);
    case 102:
      return reduce(RULE_7, 4);
    case 167:
      return reduce(RULE_7, 4);
    case 153:
      return reduce(RULE_7, 4);
    case 75:
      return reduce(RULE_7, 4);
    case 174:
      return reduce(RULE_7, 4);
    case 180:
      return reduce(RULE_7, 4);
    case 166:
      return reduce(RULE_7, 4);
    case 107:
      return reduce(RULE_7, 4);
    case 143:
      return reduce(RULE_7, 4);
    case 176:
      return reduce(RULE_7, 4);
    case 132:
      return reduce(RULE_7, 4);
    case 121:
      return reduce(RULE_7, 4);
    case 156:
      return reduce(RULE_7, 4);
    case 145:
      return reduce(RULE_7, 4);
    case 162:
      return reduce(RULE_7, 4);
    case 164:
      return reduce(RULE_7, 4);
    case 105:
      return reduce(RULE_7, 4);
    case 179:
      return reduce(RULE_7, 4);
    case 177:
      return reduce(RULE_7, 4);
    case 72:
      return reduce(RULE_7, 4);
    case 116:
      return reduce(RULE_7, 4);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action92(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_13, 0);
    }
    switch (token.getType().ordinal())
    {
    case 136:
      return reduce(RULE_13, 0);
    case 129:
      return reduce(RULE_13, 0);
    case 167:
      return reduce(RULE_13, 0);
    case 149:
      return reduce(RULE_13, 0);
    case 164:
      return reduce(RULE_13, 0);
    case 75:
      return reduce(RULE_13, 0);
    case 157:
      return reduce(RULE_13, 0);
    case 154:
      return reduce(RULE_13, 0);
    case 135:
      return reduce(RULE_13, 0);
    case 156:
      return reduce(RULE_13, 0);
    case 177:
      return reduce(RULE_13, 0);
    case 143:
      return reduce(RULE_13, 0);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action93(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto93(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 191;
    default: return -1;
    }
  }

  private final boolean action94(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 0);
    case 139:
      return reduce(RULE_7, 0);
    case 137:
      return reduce(RULE_7, 0);
    case 175:
      return reduce(RULE_7, 0);
    case 157:
      return reduce(RULE_7, 0);
    case 155:
      return reduce(RULE_7, 0);
    case 106:
      return reduce(RULE_7, 0);
    case 160:
      return reduce(RULE_7, 0);
    case 130:
      return reduce(RULE_7, 0);
    case 129:
      return reduce(RULE_7, 0);
    case 102:
      return reduce(RULE_7, 0);
    case 167:
      return reduce(RULE_7, 0);
    case 153:
      return reduce(RULE_7, 0);
    case 75:
      return reduce(RULE_7, 0);
    case 174:
      return reduce(RULE_7, 0);
    case 180:
      return reduce(RULE_7, 0);
    case 166:
      return reduce(RULE_7, 0);
    case 107:
      return reduce(RULE_7, 0);
    case 143:
      return reduce(RULE_7, 0);
    case 176:
      return reduce(RULE_7, 0);
    case 132:
      return reduce(RULE_7, 0);
    case 121:
      return reduce(RULE_7, 0);
    case 156:
      return reduce(RULE_7, 0);
    case 145:
      return reduce(RULE_7, 0);
    case 162:
      return reduce(RULE_7, 0);
    case 164:
      return reduce(RULE_7, 0);
    case 105:
      return reduce(RULE_7, 0);
    case 179:
      return reduce(RULE_7, 0);
    case 177:
      return reduce(RULE_7, 0);
    case 72:
      return reduce(RULE_7, 0);
    case 116:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto94(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 192;
    default: return -1;
    }
  }

  private final boolean action95(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(193);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action96(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(60);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(71);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(194);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 162:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, STATIC_KEYWORD, HASH, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto96(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 80;
    case 9: return 81;
    case 11: return 82;
    case 27: return 83;
    case 28: return 84;
    case 8: return 85;
    case 48: return 86;
    case 49: return 87;
    case 33: return 88;
    case 7: return 89;
    case 30: return 90;
    case 10: return 91;
    default: return -1;
    }
  }

  private final boolean action97(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      return reduce(RULE_1, 0);
    case 132:
      return reduce(RULE_1, 0);
    case 139:
      return reduce(RULE_1, 0);
    case 175:
      return reduce(RULE_1, 0);
    case 155:
      return reduce(RULE_1, 0);
    case 106:
      return reduce(RULE_1, 0);
    case 145:
      return reduce(RULE_1, 0);
    case 160:
      return reduce(RULE_1, 0);
    case 130:
      return reduce(RULE_1, 0);
    case 102:
      return reduce(RULE_1, 0);
    case 153:
      return reduce(RULE_1, 0);
    case 174:
      return reduce(RULE_1, 0);
    case 105:
      return reduce(RULE_1, 0);
    case 166:
      return reduce(RULE_1, 0);
    case 107:
      return reduce(RULE_1, 0);
    case 179:
      return reduce(RULE_1, 0);
    case 72:
      return reduce(RULE_1, 0);
    case 116:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, RPAREN, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto97(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 20: return 196;
    case 26: return 15;
    case 27: return 197;
    default: return -1;
    }
  }

  private final boolean action98(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto98(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 199;
    default: return -1;
    }
  }

  private final boolean action99(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(111);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(115);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, ARROW, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, HASH, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto99(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 100;
    case 50: return 136;
    case 29: return 165;
    case 51: return 138;
    case 49: return 103;
    case 30: return 104;
    default: return -1;
    }
  }

  private final boolean action100(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(200);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 102:
      return reduce(RULE_15, 0);
    case 122:
      return reduce(RULE_15, 0);
    case 79:
      return reduce(RULE_15, 0);
    default: throw new BadTokenException(token, new Object[] {HASH, COMMA, ARROW, RPAREN, DOT});
    }
  }

  private final boolean action101(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(201);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action102(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(202);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action103(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 102:
      return reduce(RULE_16, 4);
    case 122:
      return reduce(RULE_16, 4);
    case 79:
      return reduce(RULE_16, 4);
    default: throw new BadTokenException(token, new Object[] {HASH, COMMA, ARROW, RPAREN});
    }
  }

  private final boolean action104(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 102:
      return reduce(RULE_15, 1);
    case 122:
      return reduce(RULE_15, 1);
    case 79:
      return reduce(RULE_15, 1);
    default: throw new BadTokenException(token, new Object[] {HASH, COMMA, ARROW, RPAREN});
    }
  }

  private final boolean action105(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(205);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action106(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 42);
    case 137:
      return reduce(RULE_9, 42);
    case 110:
      return reduce(RULE_9, 42);
    case 79:
      return reduce(RULE_9, 42);
    case 106:
      return reduce(RULE_9, 42);
    case 117:
      return reduce(RULE_9, 42);
    case 102:
      return reduce(RULE_9, 42);
    case 167:
      return reduce(RULE_9, 42);
    case 152:
      return reduce(RULE_9, 42);
    case 94:
      return reduce(RULE_9, 42);
    case 80:
      return reduce(RULE_9, 42);
    case 98:
      return reduce(RULE_9, 42);
    case 171:
      return reduce(RULE_9, 42);
    case 86:
      return reduce(RULE_9, 42);
    case 83:
      return reduce(RULE_9, 42);
    case 122:
      return reduce(RULE_9, 42);
    case 108:
      return reduce(RULE_9, 42);
    case 92:
      return reduce(RULE_9, 42);
    case 128:
      return reduce(RULE_9, 42);
    case 104:
      return reduce(RULE_9, 42);
    case 82:
      return reduce(RULE_9, 42);
    case 116:
      return reduce(RULE_9, 42);
    case 85:
      return reduce(RULE_9, 42);
    case 149:
      return reduce(RULE_9, 42);
    case 157:
      return reduce(RULE_9, 42);
    case 103:
      return reduce(RULE_9, 42);
    case 147:
      return reduce(RULE_9, 42);
    case 129:
      return reduce(RULE_9, 42);
    case 119:
      return reduce(RULE_9, 42);
    case 75:
      return reduce(RULE_9, 42);
    case 100:
      return reduce(RULE_9, 42);
    case 107:
      return reduce(RULE_9, 42);
    case 143:
      return reduce(RULE_9, 42);
    case 112:
      return reduce(RULE_9, 42);
    case 120:
      return reduce(RULE_9, 42);
    case 121:
      return reduce(RULE_9, 42);
    case 124:
      return reduce(RULE_9, 42);
    case 156:
      return reduce(RULE_9, 42);
    case 123:
      return reduce(RULE_9, 42);
    case 99:
      return reduce(RULE_9, 42);
    case 125:
      return reduce(RULE_9, 42);
    case 165:
      return reduce(RULE_9, 42);
    case 77:
      return reduce(RULE_9, 42);
    case 164:
      return reduce(RULE_9, 42);
    case 84:
      return reduce(RULE_9, 42);
    case 105:
      return reduce(RULE_9, 42);
    case 114:
      return reduce(RULE_9, 42);
    case 72:
      return reduce(RULE_9, 42);
    case 177:
      return reduce(RULE_9, 42);
    case 90:
      return reduce(RULE_9, 42);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action107(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_9, 23);
    case 137:
      return reduce(RULE_9, 23);
    case 110:
      return reduce(RULE_9, 23);
    case 79:
      return reduce(RULE_9, 23);
    case 106:
      return reduce(RULE_9, 23);
    case 117:
      return reduce(RULE_9, 23);
    case 102:
      return reduce(RULE_9, 23);
    case 167:
      return reduce(RULE_9, 23);
    case 152:
      return reduce(RULE_9, 23);
    case 94:
      return reduce(RULE_9, 23);
    case 80:
      return reduce(RULE_9, 23);
    case 98:
      return reduce(RULE_9, 23);
    case 171:
      return reduce(RULE_9, 23);
    case 86:
      return reduce(RULE_9, 23);
    case 83:
      return reduce(RULE_9, 23);
    case 122:
      return reduce(RULE_9, 23);
    case 108:
      return reduce(RULE_9, 23);
    case 92:
      return reduce(RULE_9, 23);
    case 128:
      return reduce(RULE_9, 23);
    case 104:
      return reduce(RULE_9, 23);
    case 82:
      return reduce(RULE_9, 23);
    case 116:
      return reduce(RULE_9, 23);
    case 85:
      return reduce(RULE_9, 23);
    case 149:
      return reduce(RULE_9, 23);
    case 157:
      return reduce(RULE_9, 23);
    case 103:
      return reduce(RULE_9, 23);
    case 147:
      return reduce(RULE_9, 23);
    case 129:
      return reduce(RULE_9, 23);
    case 119:
      return reduce(RULE_9, 23);
    case 75:
      return reduce(RULE_9, 23);
    case 100:
      return reduce(RULE_9, 23);
    case 107:
      return reduce(RULE_9, 23);
    case 143:
      return reduce(RULE_9, 23);
    case 112:
      return reduce(RULE_9, 23);
    case 120:
      return reduce(RULE_9, 23);
    case 121:
      return reduce(RULE_9, 23);
    case 124:
      return reduce(RULE_9, 23);
    case 156:
      return reduce(RULE_9, 23);
    case 123:
      return reduce(RULE_9, 23);
    case 99:
      return reduce(RULE_9, 23);
    case 125:
      return reduce(RULE_9, 23);
    case 165:
      return reduce(RULE_9, 23);
    case 77:
      return reduce(RULE_9, 23);
    case 164:
      return reduce(RULE_9, 23);
    case 84:
      return reduce(RULE_9, 23);
    case 105:
      return reduce(RULE_9, 23);
    case 114:
      return reduce(RULE_9, 23);
    case 72:
      return reduce(RULE_9, 23);
    case 177:
      return reduce(RULE_9, 23);
    case 90:
      return reduce(RULE_9, 23);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, DOT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action108(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(97);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto108(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 206;
    default: return -1;
    }
  }

  private final boolean action109(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, HASH, INT_KEYWORD, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto109(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 207;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action110(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 3);
    case 149:
      return reduce(RULE_17, 3);
    case 137:
      return reduce(RULE_17, 3);
    case 110:
      return reduce(RULE_17, 3);
    case 157:
      return reduce(RULE_17, 3);
    case 96:
      return reduce(RULE_17, 3);
    case 103:
      return reduce(RULE_17, 3);
    case 106:
      return reduce(RULE_17, 3);
    case 147:
      return reduce(RULE_17, 3);
    case 129:
      return reduce(RULE_17, 3);
    case 117:
      return reduce(RULE_17, 3);
    case 167:
      return reduce(RULE_17, 3);
    case 119:
      return reduce(RULE_17, 3);
    case 75:
      return reduce(RULE_17, 3);
    case 100:
      return reduce(RULE_17, 3);
    case 152:
      return reduce(RULE_17, 3);
    case 80:
      return reduce(RULE_17, 3);
    case 94:
      return reduce(RULE_17, 3);
    case 107:
      return reduce(RULE_17, 3);
    case 143:
      return reduce(RULE_17, 3);
    case 98:
      return reduce(RULE_17, 3);
    case 112:
      return reduce(RULE_17, 3);
    case 86:
      return reduce(RULE_17, 3);
    case 120:
      return reduce(RULE_17, 3);
    case 121:
      return reduce(RULE_17, 3);
    case 124:
      return reduce(RULE_17, 3);
    case 123:
      return reduce(RULE_17, 3);
    case 156:
      return reduce(RULE_17, 3);
    case 83:
      return reduce(RULE_17, 3);
    case 99:
      return reduce(RULE_17, 3);
    case 122:
      return reduce(RULE_17, 3);
    case 125:
      return reduce(RULE_17, 3);
    case 165:
      return reduce(RULE_17, 3);
    case 77:
      return reduce(RULE_17, 3);
    case 108:
      return reduce(RULE_17, 3);
    case 92:
      return reduce(RULE_17, 3);
    case 164:
      return reduce(RULE_17, 3);
    case 84:
      return reduce(RULE_17, 3);
    case 104:
      return reduce(RULE_17, 3);
    case 105:
      return reduce(RULE_17, 3);
    case 114:
      return reduce(RULE_17, 3);
    case 82:
      return reduce(RULE_17, 3);
    case 177:
      return reduce(RULE_17, 3);
    case 90:
      return reduce(RULE_17, 3);
    case 116:
      return reduce(RULE_17, 3);
    case 118:
      return reduce(RULE_17, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action111(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto111(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 47: return 209;
    case 28: return 84;
    case 48: return 210;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action112(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto112(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 212;
    default: return -1;
    }
  }

  private final boolean action113(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto113(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 50: return 101;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 224;
    case 65: return 225;
    case 68: return 226;
    case 53: return 227;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 231;
    case 61: return 232;
    case 63: return 233;
    case 29: return 102;
    case 49: return 234;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action114(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 1);
    case 149:
      return reduce(RULE_17, 1);
    case 137:
      return reduce(RULE_17, 1);
    case 110:
      return reduce(RULE_17, 1);
    case 157:
      return reduce(RULE_17, 1);
    case 96:
      return reduce(RULE_17, 1);
    case 103:
      return reduce(RULE_17, 1);
    case 106:
      return reduce(RULE_17, 1);
    case 147:
      return reduce(RULE_17, 1);
    case 129:
      return reduce(RULE_17, 1);
    case 117:
      return reduce(RULE_17, 1);
    case 167:
      return reduce(RULE_17, 1);
    case 119:
      return reduce(RULE_17, 1);
    case 75:
      return reduce(RULE_17, 1);
    case 100:
      return reduce(RULE_17, 1);
    case 152:
      return reduce(RULE_17, 1);
    case 80:
      return reduce(RULE_17, 1);
    case 94:
      return reduce(RULE_17, 1);
    case 107:
      return reduce(RULE_17, 1);
    case 143:
      return reduce(RULE_17, 1);
    case 98:
      return reduce(RULE_17, 1);
    case 112:
      return reduce(RULE_17, 1);
    case 86:
      return reduce(RULE_17, 1);
    case 120:
      return reduce(RULE_17, 1);
    case 121:
      return reduce(RULE_17, 1);
    case 124:
      return reduce(RULE_17, 1);
    case 123:
      return reduce(RULE_17, 1);
    case 156:
      return reduce(RULE_17, 1);
    case 83:
      return reduce(RULE_17, 1);
    case 99:
      return reduce(RULE_17, 1);
    case 122:
      return reduce(RULE_17, 1);
    case 125:
      return reduce(RULE_17, 1);
    case 165:
      return reduce(RULE_17, 1);
    case 77:
      return reduce(RULE_17, 1);
    case 108:
      return reduce(RULE_17, 1);
    case 92:
      return reduce(RULE_17, 1);
    case 164:
      return reduce(RULE_17, 1);
    case 84:
      return reduce(RULE_17, 1);
    case 104:
      return reduce(RULE_17, 1);
    case 105:
      return reduce(RULE_17, 1);
    case 114:
      return reduce(RULE_17, 1);
    case 82:
      return reduce(RULE_17, 1);
    case 177:
      return reduce(RULE_17, 1);
    case 90:
      return reduce(RULE_17, 1);
    case 116:
      return reduce(RULE_17, 1);
    case 118:
      return reduce(RULE_17, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action115(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 79:
      stateStack.addFirst(237);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(105);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(106);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW, LSQUARE, NAME, OBJECT_KEYWORD});
    }
  }

  private final int goto115(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 107;
    default: return -1;
    }
  }

  private final boolean action116(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(238);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, SEMICOLON, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto116(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 242;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action117(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 2);
    case 149:
      return reduce(RULE_17, 2);
    case 137:
      return reduce(RULE_17, 2);
    case 110:
      return reduce(RULE_17, 2);
    case 157:
      return reduce(RULE_17, 2);
    case 96:
      return reduce(RULE_17, 2);
    case 103:
      return reduce(RULE_17, 2);
    case 106:
      return reduce(RULE_17, 2);
    case 147:
      return reduce(RULE_17, 2);
    case 129:
      return reduce(RULE_17, 2);
    case 117:
      return reduce(RULE_17, 2);
    case 167:
      return reduce(RULE_17, 2);
    case 119:
      return reduce(RULE_17, 2);
    case 75:
      return reduce(RULE_17, 2);
    case 100:
      return reduce(RULE_17, 2);
    case 152:
      return reduce(RULE_17, 2);
    case 80:
      return reduce(RULE_17, 2);
    case 94:
      return reduce(RULE_17, 2);
    case 107:
      return reduce(RULE_17, 2);
    case 143:
      return reduce(RULE_17, 2);
    case 98:
      return reduce(RULE_17, 2);
    case 112:
      return reduce(RULE_17, 2);
    case 86:
      return reduce(RULE_17, 2);
    case 120:
      return reduce(RULE_17, 2);
    case 121:
      return reduce(RULE_17, 2);
    case 124:
      return reduce(RULE_17, 2);
    case 123:
      return reduce(RULE_17, 2);
    case 156:
      return reduce(RULE_17, 2);
    case 83:
      return reduce(RULE_17, 2);
    case 99:
      return reduce(RULE_17, 2);
    case 122:
      return reduce(RULE_17, 2);
    case 125:
      return reduce(RULE_17, 2);
    case 165:
      return reduce(RULE_17, 2);
    case 77:
      return reduce(RULE_17, 2);
    case 108:
      return reduce(RULE_17, 2);
    case 92:
      return reduce(RULE_17, 2);
    case 164:
      return reduce(RULE_17, 2);
    case 84:
      return reduce(RULE_17, 2);
    case 104:
      return reduce(RULE_17, 2);
    case 105:
      return reduce(RULE_17, 2);
    case 114:
      return reduce(RULE_17, 2);
    case 82:
      return reduce(RULE_17, 2);
    case 177:
      return reduce(RULE_17, 2);
    case 90:
      return reduce(RULE_17, 2);
    case 116:
      return reduce(RULE_17, 2);
    case 118:
      return reduce(RULE_17, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action118(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, UNDERSCORE, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto118(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 67: return 230;
    case 14: return 244;
    case 28: return 245;
    case 71: return 137;
    case 13: return 246;
    case 63: return 164;
    case 48: return 152;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 247;
    case 65: return 154;
    default: return -1;
    }
  }

  private final boolean action119(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto119(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 248;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action120(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 0);
    case 149:
      return reduce(RULE_17, 0);
    case 137:
      return reduce(RULE_17, 0);
    case 110:
      return reduce(RULE_17, 0);
    case 157:
      return reduce(RULE_17, 0);
    case 96:
      return reduce(RULE_17, 0);
    case 103:
      return reduce(RULE_17, 0);
    case 106:
      return reduce(RULE_17, 0);
    case 147:
      return reduce(RULE_17, 0);
    case 129:
      return reduce(RULE_17, 0);
    case 117:
      return reduce(RULE_17, 0);
    case 167:
      return reduce(RULE_17, 0);
    case 119:
      return reduce(RULE_17, 0);
    case 75:
      return reduce(RULE_17, 0);
    case 100:
      return reduce(RULE_17, 0);
    case 152:
      return reduce(RULE_17, 0);
    case 80:
      return reduce(RULE_17, 0);
    case 94:
      return reduce(RULE_17, 0);
    case 107:
      return reduce(RULE_17, 0);
    case 143:
      return reduce(RULE_17, 0);
    case 98:
      return reduce(RULE_17, 0);
    case 112:
      return reduce(RULE_17, 0);
    case 86:
      return reduce(RULE_17, 0);
    case 120:
      return reduce(RULE_17, 0);
    case 121:
      return reduce(RULE_17, 0);
    case 124:
      return reduce(RULE_17, 0);
    case 123:
      return reduce(RULE_17, 0);
    case 156:
      return reduce(RULE_17, 0);
    case 83:
      return reduce(RULE_17, 0);
    case 99:
      return reduce(RULE_17, 0);
    case 122:
      return reduce(RULE_17, 0);
    case 125:
      return reduce(RULE_17, 0);
    case 165:
      return reduce(RULE_17, 0);
    case 77:
      return reduce(RULE_17, 0);
    case 108:
      return reduce(RULE_17, 0);
    case 92:
      return reduce(RULE_17, 0);
    case 164:
      return reduce(RULE_17, 0);
    case 84:
      return reduce(RULE_17, 0);
    case 104:
      return reduce(RULE_17, 0);
    case 105:
      return reduce(RULE_17, 0);
    case 114:
      return reduce(RULE_17, 0);
    case 82:
      return reduce(RULE_17, 0);
    case 177:
      return reduce(RULE_17, 0);
    case 90:
      return reduce(RULE_17, 0);
    case 116:
      return reduce(RULE_17, 0);
    case 118:
      return reduce(RULE_17, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action121(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 96:
      return reduce(RULE_18, 1);
    case 107:
      return reduce(RULE_19, 1);
    case 118:
      return reduce(RULE_18, 1);
    default: throw new BadTokenException(token, new Object[] {DOT, LSQUARE, LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final int goto121(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 250;
    default: return -1;
    }
  }

  private final boolean action122(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(251);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LANGLE});
    }
  }

  private final boolean action123(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto123(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 252;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action124(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_20, 5);
    case 97:
      return reduce(RULE_20, 5);
    case 124:
      return reduce(RULE_20, 5);
    case 111:
      return reduce(RULE_20, 5);
    case 115:
      return reduce(RULE_20, 5);
    case 83:
      return reduce(RULE_20, 5);
    case 122:
      return reduce(RULE_20, 5);
    case 88:
      return reduce(RULE_20, 5);
    case 113:
      return reduce(RULE_20, 5);
    case 101:
      return reduce(RULE_20, 5);
    case 95:
      return reduce(RULE_20, 5);
    case 81:
      return reduce(RULE_20, 5);
    case 109:
      return reduce(RULE_20, 5);
    case 91:
      return reduce(RULE_20, 5);
    case 78:
      return reduce(RULE_20, 5);
    default: throw new BadTokenException(token, new Object[] {STAR_EQUALS, EQUALS, SEMICOLON, PERCENT_EQUALS, PLUS_EQUALS, COMMA, RPAREN, DOUBLE_LANGLE_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_RANGLE_EQUALS, CARET_EQUALS, MINUS_EQUALS, AMPERSAND_EQUALS, DOUBLE_PERCENT_EQUALS});
    }
  }

  private final boolean action125(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, UNDERSCORE, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto125(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 67: return 230;
    case 14: return 244;
    case 28: return 245;
    case 71: return 137;
    case 13: return 253;
    case 63: return 164;
    case 48: return 152;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 247;
    case 65: return 154;
    default: return -1;
    }
  }

  private final boolean action126(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(254);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final boolean action127(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(255);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(256);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LSQUARE, NAME, OBJECT_KEYWORD});
    }
  }

  private final int goto127(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 70: return 257;
    case 28: return 258;
    default: return -1;
    }
  }

  private final boolean action128(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 4);
    case 149:
      return reduce(RULE_17, 4);
    case 137:
      return reduce(RULE_17, 4);
    case 110:
      return reduce(RULE_17, 4);
    case 157:
      return reduce(RULE_17, 4);
    case 96:
      return reduce(RULE_17, 4);
    case 103:
      return reduce(RULE_17, 4);
    case 106:
      return reduce(RULE_17, 4);
    case 147:
      return reduce(RULE_17, 4);
    case 129:
      return reduce(RULE_17, 4);
    case 117:
      return reduce(RULE_17, 4);
    case 167:
      return reduce(RULE_17, 4);
    case 119:
      return reduce(RULE_17, 4);
    case 75:
      return reduce(RULE_17, 4);
    case 100:
      return reduce(RULE_17, 4);
    case 152:
      return reduce(RULE_17, 4);
    case 80:
      return reduce(RULE_17, 4);
    case 94:
      return reduce(RULE_17, 4);
    case 107:
      return reduce(RULE_17, 4);
    case 143:
      return reduce(RULE_17, 4);
    case 98:
      return reduce(RULE_17, 4);
    case 112:
      return reduce(RULE_17, 4);
    case 86:
      return reduce(RULE_17, 4);
    case 120:
      return reduce(RULE_17, 4);
    case 121:
      return reduce(RULE_17, 4);
    case 124:
      return reduce(RULE_17, 4);
    case 123:
      return reduce(RULE_17, 4);
    case 156:
      return reduce(RULE_17, 4);
    case 83:
      return reduce(RULE_17, 4);
    case 99:
      return reduce(RULE_17, 4);
    case 122:
      return reduce(RULE_17, 4);
    case 125:
      return reduce(RULE_17, 4);
    case 165:
      return reduce(RULE_17, 4);
    case 77:
      return reduce(RULE_17, 4);
    case 108:
      return reduce(RULE_17, 4);
    case 92:
      return reduce(RULE_17, 4);
    case 164:
      return reduce(RULE_17, 4);
    case 84:
      return reduce(RULE_17, 4);
    case 104:
      return reduce(RULE_17, 4);
    case 105:
      return reduce(RULE_17, 4);
    case 114:
      return reduce(RULE_17, 4);
    case 82:
      return reduce(RULE_17, 4);
    case 177:
      return reduce(RULE_17, 4);
    case 90:
      return reduce(RULE_17, 4);
    case 116:
      return reduce(RULE_17, 4);
    case 118:
      return reduce(RULE_17, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action129(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(259);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(260);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, INTEGER_LITERAL});
    }
  }

  private final boolean action130(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 137:
      return reduce(RULE_21, 1);
    case 142:
      return reduce(RULE_21, 1);
    case 173:
      return reduce(RULE_21, 1);
    case 106:
      return reduce(RULE_21, 1);
    case 153:
      return reduce(RULE_21, 1);
    case 102:
      return reduce(RULE_21, 1);
    case 167:
      return reduce(RULE_21, 1);
    case 74:
      return reduce(RULE_21, 1);
    case 163:
      return reduce(RULE_21, 1);
    case 174:
      return reduce(RULE_21, 1);
    case 134:
      return reduce(RULE_21, 1);
    case 172:
      return reduce(RULE_21, 1);
    case 89:
      return reduce(RULE_21, 1);
    case 170:
      return reduce(RULE_21, 1);
    case 73:
      return reduce(RULE_21, 1);
    case 176:
      return reduce(RULE_21, 1);
    case 132:
      return reduce(RULE_21, 1);
    case 169:
      return reduce(RULE_21, 1);
    case 133:
      return reduce(RULE_21, 1);
    case 148:
      return reduce(RULE_21, 1);
    case 128:
      return reduce(RULE_21, 1);
    case 162:
      return reduce(RULE_21, 1);
    case 144:
      return reduce(RULE_21, 1);
    case 93:
      return reduce(RULE_21, 1);
    case 146:
      return reduce(RULE_21, 1);
    case 158:
      return reduce(RULE_21, 1);
    case 116:
      return reduce(RULE_21, 1);
    case 159:
      return reduce(RULE_21, 1);
    case 149:
      return reduce(RULE_21, 1);
    case 139:
      return reduce(RULE_21, 1);
    case 175:
      return reduce(RULE_21, 1);
    case 157:
      return reduce(RULE_21, 1);
    case 155:
      return reduce(RULE_21, 1);
    case 147:
      return reduce(RULE_21, 1);
    case 160:
      return reduce(RULE_21, 1);
    case 130:
      return reduce(RULE_21, 1);
    case 129:
      return reduce(RULE_21, 1);
    case 75:
      return reduce(RULE_21, 1);
    case 138:
      return reduce(RULE_21, 1);
    case 166:
      return reduce(RULE_21, 1);
    case 180:
      return reduce(RULE_21, 1);
    case 107:
      return reduce(RULE_21, 1);
    case 143:
      return reduce(RULE_21, 1);
    case 121:
      return reduce(RULE_21, 1);
    case 124:
      return reduce(RULE_21, 1);
    case 156:
      return reduce(RULE_21, 1);
    case 140:
      return reduce(RULE_21, 1);
    case 131:
      return reduce(RULE_21, 1);
    case 76:
      return reduce(RULE_21, 1);
    case 165:
      return reduce(RULE_21, 1);
    case 145:
      return reduce(RULE_21, 1);
    case 168:
      return reduce(RULE_21, 1);
    case 164:
      return reduce(RULE_21, 1);
    case 181:
      return reduce(RULE_21, 1);
    case 105:
      return reduce(RULE_21, 1);
    case 179:
      return reduce(RULE_21, 1);
    case 72:
      return reduce(RULE_21, 1);
    case 177:
      return reduce(RULE_21, 1);
    default: throw new BadTokenException(token, new Object[] {CONSTRUCTOR_KEYWORD, FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, STATIC_KEYWORD, FLOATING_LITERAL, RETURN_KEYWORD, UBYTE_KEYWORD, CATCH_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, PROPERTY_KEYWORD, FINALLY_KEYWORD, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, ELSE_KEYWORD, BREAK_KEYWORD, SETTER_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action131(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(261);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(262);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, INTEGER_LITERAL});
    }
  }

  private final boolean action132(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 19);
    case 149:
      return reduce(RULE_17, 19);
    case 137:
      return reduce(RULE_17, 19);
    case 110:
      return reduce(RULE_17, 19);
    case 157:
      return reduce(RULE_17, 19);
    case 96:
      return reduce(RULE_17, 19);
    case 103:
      return reduce(RULE_17, 19);
    case 106:
      return reduce(RULE_17, 19);
    case 147:
      return reduce(RULE_17, 19);
    case 129:
      return reduce(RULE_17, 19);
    case 117:
      return reduce(RULE_17, 19);
    case 167:
      return reduce(RULE_17, 19);
    case 119:
      return reduce(RULE_17, 19);
    case 75:
      return reduce(RULE_17, 19);
    case 100:
      return reduce(RULE_17, 19);
    case 152:
      return reduce(RULE_17, 19);
    case 80:
      return reduce(RULE_17, 19);
    case 94:
      return reduce(RULE_17, 19);
    case 107:
      return reduce(RULE_17, 19);
    case 143:
      return reduce(RULE_17, 19);
    case 98:
      return reduce(RULE_17, 19);
    case 112:
      return reduce(RULE_17, 19);
    case 86:
      return reduce(RULE_17, 19);
    case 120:
      return reduce(RULE_17, 19);
    case 121:
      return reduce(RULE_17, 19);
    case 124:
      return reduce(RULE_17, 19);
    case 123:
      return reduce(RULE_17, 19);
    case 156:
      return reduce(RULE_17, 19);
    case 83:
      return reduce(RULE_17, 19);
    case 99:
      return reduce(RULE_17, 19);
    case 122:
      return reduce(RULE_17, 19);
    case 125:
      return reduce(RULE_17, 19);
    case 165:
      return reduce(RULE_17, 19);
    case 77:
      return reduce(RULE_17, 19);
    case 108:
      return reduce(RULE_17, 19);
    case 92:
      return reduce(RULE_17, 19);
    case 164:
      return reduce(RULE_17, 19);
    case 84:
      return reduce(RULE_17, 19);
    case 104:
      return reduce(RULE_17, 19);
    case 105:
      return reduce(RULE_17, 19);
    case 114:
      return reduce(RULE_17, 19);
    case 82:
      return reduce(RULE_17, 19);
    case 177:
      return reduce(RULE_17, 19);
    case 90:
      return reduce(RULE_17, 19);
    case 116:
      return reduce(RULE_17, 19);
    case 118:
      return reduce(RULE_17, 19);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action133(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto133(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 263;
    default: return -1;
    }
  }

  private final boolean action134(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto134(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 264;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action135(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 0);
    case 149:
      return reduce(RULE_22, 0);
    case 139:
      return reduce(RULE_22, 0);
    case 175:
      return reduce(RULE_22, 0);
    case 142:
      return reduce(RULE_22, 0);
    case 157:
      return reduce(RULE_22, 0);
    case 155:
      return reduce(RULE_22, 0);
    case 173:
      return reduce(RULE_22, 0);
    case 106:
      return reduce(RULE_22, 0);
    case 160:
      return reduce(RULE_22, 0);
    case 130:
      return reduce(RULE_22, 0);
    case 129:
      return reduce(RULE_22, 0);
    case 167:
      return reduce(RULE_22, 0);
    case 74:
      return reduce(RULE_22, 0);
    case 102:
      return reduce(RULE_22, 0);
    case 153:
      return reduce(RULE_22, 0);
    case 75:
      return reduce(RULE_22, 0);
    case 138:
      return reduce(RULE_22, 0);
    case 163:
      return reduce(RULE_22, 0);
    case 174:
      return reduce(RULE_22, 0);
    case 166:
      return reduce(RULE_22, 0);
    case 172:
      return reduce(RULE_22, 0);
    case 107:
      return reduce(RULE_22, 0);
    case 89:
      return reduce(RULE_22, 0);
    case 170:
      return reduce(RULE_22, 0);
    case 143:
      return reduce(RULE_22, 0);
    case 73:
      return reduce(RULE_22, 0);
    case 176:
      return reduce(RULE_22, 0);
    case 132:
      return reduce(RULE_22, 0);
    case 169:
      return reduce(RULE_22, 0);
    case 121:
      return reduce(RULE_22, 0);
    case 133:
      return reduce(RULE_22, 0);
    case 156:
      return reduce(RULE_22, 0);
    case 131:
      return reduce(RULE_22, 0);
    case 76:
      return reduce(RULE_22, 0);
    case 148:
      return reduce(RULE_22, 0);
    case 145:
      return reduce(RULE_22, 0);
    case 128:
      return reduce(RULE_22, 0);
    case 168:
      return reduce(RULE_22, 0);
    case 181:
      return reduce(RULE_22, 0);
    case 164:
      return reduce(RULE_22, 0);
    case 93:
      return reduce(RULE_22, 0);
    case 105:
      return reduce(RULE_22, 0);
    case 179:
      return reduce(RULE_22, 0);
    case 72:
      return reduce(RULE_22, 0);
    case 146:
      return reduce(RULE_22, 0);
    case 177:
      return reduce(RULE_22, 0);
    case 158:
      return reduce(RULE_22, 0);
    case 116:
      return reduce(RULE_22, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action136(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      return reduce(RULE_23, 0);
    case 79:
      return reduce(RULE_23, 0);
    default: throw new BadTokenException(token, new Object[] {HASH, ARROW});
    }
  }

  private final boolean action137(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final int goto137(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action138(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      stateStack.addFirst(267);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(268);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {HASH, ARROW});
    }
  }

  private final boolean action139(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_24, 0);
    case 149:
      return reduce(RULE_24, 0);
    case 137:
      return reduce(RULE_24, 0);
    case 110:
      return reduce(RULE_24, 0);
    case 157:
      return reduce(RULE_24, 0);
    case 103:
      return reduce(RULE_24, 0);
    case 96:
      return reduce(RULE_18, 0);
    case 106:
      return reduce(RULE_24, 0);
    case 147:
      return reduce(RULE_24, 0);
    case 129:
      return reduce(RULE_24, 0);
    case 167:
      return reduce(RULE_24, 0);
    case 117:
      return reduce(RULE_24, 0);
    case 119:
      return reduce(RULE_24, 0);
    case 75:
      return reduce(RULE_24, 0);
    case 100:
      return reduce(RULE_24, 0);
    case 152:
      return reduce(RULE_24, 0);
    case 94:
      return reduce(RULE_24, 0);
    case 80:
      return reduce(RULE_24, 0);
    case 107:
      return reduce(RULE_24, 0);
    case 143:
      return reduce(RULE_24, 0);
    case 98:
      return reduce(RULE_24, 0);
    case 112:
      return reduce(RULE_24, 0);
    case 86:
      return reduce(RULE_24, 0);
    case 120:
      return reduce(RULE_24, 0);
    case 121:
      return reduce(RULE_24, 0);
    case 124:
      return reduce(RULE_24, 0);
    case 123:
      return reduce(RULE_24, 0);
    case 156:
      return reduce(RULE_24, 0);
    case 83:
      return reduce(RULE_24, 0);
    case 99:
      return reduce(RULE_24, 0);
    case 122:
      return reduce(RULE_24, 0);
    case 125:
      return reduce(RULE_24, 0);
    case 165:
      return reduce(RULE_24, 0);
    case 77:
      return reduce(RULE_24, 0);
    case 108:
      return reduce(RULE_24, 0);
    case 92:
      return reduce(RULE_24, 0);
    case 164:
      return reduce(RULE_24, 0);
    case 84:
      return reduce(RULE_24, 0);
    case 104:
      return reduce(RULE_24, 0);
    case 105:
      return reduce(RULE_24, 0);
    case 114:
      return reduce(RULE_24, 0);
    case 82:
      return reduce(RULE_24, 0);
    case 177:
      return reduce(RULE_24, 0);
    case 90:
      return reduce(RULE_24, 0);
    case 116:
      return reduce(RULE_24, 0);
    case 118:
      return reduce(RULE_18, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action140(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_19, 0);
    case 149:
      return reduce(RULE_19, 0);
    case 137:
      return reduce(RULE_19, 0);
    case 110:
      return reduce(RULE_19, 0);
    case 157:
      return reduce(RULE_19, 0);
    case 103:
      return reduce(RULE_19, 0);
    case 147:
      return reduce(RULE_19, 0);
    case 129:
      return reduce(RULE_19, 0);
    case 117:
      return reduce(RULE_19, 0);
    case 167:
      return reduce(RULE_19, 0);
    case 119:
      return reduce(RULE_19, 0);
    case 75:
      return reduce(RULE_19, 0);
    case 100:
      return reduce(RULE_19, 0);
    case 152:
      return reduce(RULE_19, 0);
    case 94:
      return reduce(RULE_19, 0);
    case 80:
      return reduce(RULE_19, 0);
    case 107:
      return reduce(RULE_19, 0);
    case 143:
      return reduce(RULE_19, 0);
    case 98:
      return reduce(RULE_19, 0);
    case 112:
      return reduce(RULE_19, 0);
    case 86:
      return reduce(RULE_19, 0);
    case 120:
      return reduce(RULE_19, 0);
    case 121:
      return reduce(RULE_19, 0);
    case 124:
      return reduce(RULE_19, 0);
    case 123:
      return reduce(RULE_19, 0);
    case 156:
      return reduce(RULE_19, 0);
    case 83:
      return reduce(RULE_19, 0);
    case 99:
      return reduce(RULE_19, 0);
    case 122:
      return reduce(RULE_19, 0);
    case 125:
      return reduce(RULE_19, 0);
    case 165:
      return reduce(RULE_19, 0);
    case 77:
      return reduce(RULE_19, 0);
    case 108:
      return reduce(RULE_19, 0);
    case 92:
      return reduce(RULE_19, 0);
    case 164:
      return reduce(RULE_19, 0);
    case 84:
      return reduce(RULE_19, 0);
    case 104:
      return reduce(RULE_19, 0);
    case 105:
      return reduce(RULE_19, 0);
    case 114:
      return reduce(RULE_19, 0);
    case 82:
      return reduce(RULE_19, 0);
    case 177:
      return reduce(RULE_19, 0);
    case 90:
      return reduce(RULE_19, 0);
    case 116:
      return reduce(RULE_19, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final int goto140(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 269;
    default: return -1;
    }
  }

  private final boolean action141(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 5);
    case 149:
      return reduce(RULE_22, 5);
    case 139:
      return reduce(RULE_22, 5);
    case 175:
      return reduce(RULE_22, 5);
    case 142:
      return reduce(RULE_22, 5);
    case 157:
      return reduce(RULE_22, 5);
    case 155:
      return reduce(RULE_22, 5);
    case 173:
      return reduce(RULE_22, 5);
    case 106:
      return reduce(RULE_22, 5);
    case 160:
      return reduce(RULE_22, 5);
    case 130:
      return reduce(RULE_22, 5);
    case 129:
      return reduce(RULE_22, 5);
    case 167:
      return reduce(RULE_22, 5);
    case 74:
      return reduce(RULE_22, 5);
    case 102:
      return reduce(RULE_22, 5);
    case 153:
      return reduce(RULE_22, 5);
    case 75:
      return reduce(RULE_22, 5);
    case 138:
      return reduce(RULE_22, 5);
    case 163:
      return reduce(RULE_22, 5);
    case 174:
      return reduce(RULE_22, 5);
    case 166:
      return reduce(RULE_22, 5);
    case 172:
      return reduce(RULE_22, 5);
    case 107:
      return reduce(RULE_22, 5);
    case 89:
      return reduce(RULE_22, 5);
    case 170:
      return reduce(RULE_22, 5);
    case 143:
      return reduce(RULE_22, 5);
    case 73:
      return reduce(RULE_22, 5);
    case 176:
      return reduce(RULE_22, 5);
    case 132:
      return reduce(RULE_22, 5);
    case 169:
      return reduce(RULE_22, 5);
    case 121:
      return reduce(RULE_22, 5);
    case 133:
      return reduce(RULE_22, 5);
    case 156:
      return reduce(RULE_22, 5);
    case 131:
      return reduce(RULE_22, 5);
    case 76:
      return reduce(RULE_22, 5);
    case 148:
      return reduce(RULE_22, 5);
    case 145:
      return reduce(RULE_22, 5);
    case 128:
      return reduce(RULE_22, 5);
    case 168:
      return reduce(RULE_22, 5);
    case 181:
      return reduce(RULE_22, 5);
    case 164:
      return reduce(RULE_22, 5);
    case 93:
      return reduce(RULE_22, 5);
    case 105:
      return reduce(RULE_22, 5);
    case 179:
      return reduce(RULE_22, 5);
    case 72:
      return reduce(RULE_22, 5);
    case 146:
      return reduce(RULE_22, 5);
    case 177:
      return reduce(RULE_22, 5);
    case 158:
      return reduce(RULE_22, 5);
    case 116:
      return reduce(RULE_22, 5);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action142(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(270);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(271);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 0);
    case 126:
      return reduce(RULE_25, 0);
    case 97:
      return reduce(RULE_25, 0);
    case 111:
      return reduce(RULE_25, 0);
    case 115:
      return reduce(RULE_25, 0);
    case 79:
      return reduce(RULE_15, 0);
    case 88:
      return reduce(RULE_25, 0);
    case 101:
      return reduce(RULE_25, 0);
    case 113:
      return reduce(RULE_25, 0);
    case 95:
      return reduce(RULE_25, 0);
    case 106:
      return reduce(RULE_26, 0);
    case 81:
      return reduce(RULE_25, 0);
    case 109:
      return reduce(RULE_25, 0);
    case 102:
      return reduce(RULE_15, 0);
    case 91:
      return reduce(RULE_25, 0);
    case 78:
      return reduce(RULE_25, 0);
    case 118:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, STAR_EQUALS, EQUALS, PERCENT_EQUALS, COMMA, PLUS_EQUALS, DOT, ARROW, DOUBLE_LANGLE_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_RANGLE_EQUALS, LPAREN, UNDERSCORE, CARET_EQUALS, MINUS_EQUALS, HASH, AMPERSAND_EQUALS, DOUBLE_PERCENT_EQUALS, LSQUARE, NAME, QUESTION_MARK_DOT});
    }
  }

  private final int goto142(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 274;
    default: return -1;
    }
  }

  private final boolean action143(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 10);
    case 149:
      return reduce(RULE_22, 10);
    case 139:
      return reduce(RULE_22, 10);
    case 175:
      return reduce(RULE_22, 10);
    case 142:
      return reduce(RULE_22, 10);
    case 157:
      return reduce(RULE_22, 10);
    case 155:
      return reduce(RULE_22, 10);
    case 173:
      return reduce(RULE_22, 10);
    case 106:
      return reduce(RULE_22, 10);
    case 160:
      return reduce(RULE_22, 10);
    case 130:
      return reduce(RULE_22, 10);
    case 129:
      return reduce(RULE_22, 10);
    case 167:
      return reduce(RULE_22, 10);
    case 74:
      return reduce(RULE_22, 10);
    case 102:
      return reduce(RULE_22, 10);
    case 153:
      return reduce(RULE_22, 10);
    case 75:
      return reduce(RULE_22, 10);
    case 138:
      return reduce(RULE_22, 10);
    case 163:
      return reduce(RULE_22, 10);
    case 174:
      return reduce(RULE_22, 10);
    case 166:
      return reduce(RULE_22, 10);
    case 172:
      return reduce(RULE_22, 10);
    case 107:
      return reduce(RULE_22, 10);
    case 89:
      return reduce(RULE_22, 10);
    case 170:
      return reduce(RULE_22, 10);
    case 143:
      return reduce(RULE_22, 10);
    case 73:
      return reduce(RULE_22, 10);
    case 176:
      return reduce(RULE_22, 10);
    case 132:
      return reduce(RULE_22, 10);
    case 169:
      return reduce(RULE_22, 10);
    case 121:
      return reduce(RULE_22, 10);
    case 133:
      return reduce(RULE_22, 10);
    case 156:
      return reduce(RULE_22, 10);
    case 131:
      return reduce(RULE_22, 10);
    case 76:
      return reduce(RULE_22, 10);
    case 148:
      return reduce(RULE_22, 10);
    case 145:
      return reduce(RULE_22, 10);
    case 128:
      return reduce(RULE_22, 10);
    case 168:
      return reduce(RULE_22, 10);
    case 181:
      return reduce(RULE_22, 10);
    case 164:
      return reduce(RULE_22, 10);
    case 93:
      return reduce(RULE_22, 10);
    case 105:
      return reduce(RULE_22, 10);
    case 179:
      return reduce(RULE_22, 10);
    case 72:
      return reduce(RULE_22, 10);
    case 146:
      return reduce(RULE_22, 10);
    case 177:
      return reduce(RULE_22, 10);
    case 158:
      return reduce(RULE_22, 10);
    case 116:
      return reduce(RULE_22, 10);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action144(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_27, 0);
    case 149:
      return reduce(RULE_27, 0);
    case 139:
      return reduce(RULE_27, 0);
    case 175:
      return reduce(RULE_27, 0);
    case 142:
      return reduce(RULE_27, 0);
    case 157:
      return reduce(RULE_27, 0);
    case 155:
      return reduce(RULE_27, 0);
    case 173:
      return reduce(RULE_27, 0);
    case 106:
      return reduce(RULE_27, 0);
    case 160:
      return reduce(RULE_27, 0);
    case 130:
      return reduce(RULE_27, 0);
    case 129:
      return reduce(RULE_27, 0);
    case 167:
      return reduce(RULE_27, 0);
    case 74:
      return reduce(RULE_27, 0);
    case 102:
      return reduce(RULE_27, 0);
    case 153:
      return reduce(RULE_27, 0);
    case 75:
      return reduce(RULE_27, 0);
    case 138:
      return reduce(RULE_27, 0);
    case 163:
      return reduce(RULE_27, 0);
    case 174:
      return reduce(RULE_27, 0);
    case 166:
      return reduce(RULE_27, 0);
    case 172:
      return reduce(RULE_27, 0);
    case 107:
      return reduce(RULE_27, 0);
    case 89:
      return reduce(RULE_27, 0);
    case 170:
      return reduce(RULE_27, 0);
    case 143:
      return reduce(RULE_27, 0);
    case 73:
      return reduce(RULE_27, 0);
    case 176:
      return reduce(RULE_27, 0);
    case 132:
      return reduce(RULE_27, 0);
    case 169:
      return reduce(RULE_27, 0);
    case 121:
      return reduce(RULE_27, 0);
    case 133:
      return reduce(RULE_27, 0);
    case 156:
      return reduce(RULE_27, 0);
    case 131:
      return reduce(RULE_27, 0);
    case 76:
      return reduce(RULE_27, 0);
    case 148:
      return reduce(RULE_27, 0);
    case 145:
      return reduce(RULE_27, 0);
    case 128:
      return reduce(RULE_27, 0);
    case 168:
      return reduce(RULE_27, 0);
    case 181:
      return reduce(RULE_27, 0);
    case 164:
      return reduce(RULE_27, 0);
    case 93:
      return reduce(RULE_27, 0);
    case 105:
      return reduce(RULE_27, 0);
    case 179:
      return reduce(RULE_27, 0);
    case 72:
      return reduce(RULE_27, 0);
    case 146:
      return reduce(RULE_27, 0);
    case 177:
      return reduce(RULE_27, 0);
    case 158:
      return reduce(RULE_27, 0);
    case 116:
      return reduce(RULE_27, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action145(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 9);
    case 149:
      return reduce(RULE_22, 9);
    case 139:
      return reduce(RULE_22, 9);
    case 175:
      return reduce(RULE_22, 9);
    case 142:
      return reduce(RULE_22, 9);
    case 157:
      return reduce(RULE_22, 9);
    case 155:
      return reduce(RULE_22, 9);
    case 173:
      return reduce(RULE_22, 9);
    case 106:
      return reduce(RULE_22, 9);
    case 160:
      return reduce(RULE_22, 9);
    case 130:
      return reduce(RULE_22, 9);
    case 129:
      return reduce(RULE_22, 9);
    case 167:
      return reduce(RULE_22, 9);
    case 74:
      return reduce(RULE_22, 9);
    case 102:
      return reduce(RULE_22, 9);
    case 153:
      return reduce(RULE_22, 9);
    case 75:
      return reduce(RULE_22, 9);
    case 138:
      return reduce(RULE_22, 9);
    case 163:
      return reduce(RULE_22, 9);
    case 174:
      return reduce(RULE_22, 9);
    case 166:
      return reduce(RULE_22, 9);
    case 172:
      return reduce(RULE_22, 9);
    case 107:
      return reduce(RULE_22, 9);
    case 89:
      return reduce(RULE_22, 9);
    case 170:
      return reduce(RULE_22, 9);
    case 143:
      return reduce(RULE_22, 9);
    case 73:
      return reduce(RULE_22, 9);
    case 176:
      return reduce(RULE_22, 9);
    case 132:
      return reduce(RULE_22, 9);
    case 169:
      return reduce(RULE_22, 9);
    case 121:
      return reduce(RULE_22, 9);
    case 133:
      return reduce(RULE_22, 9);
    case 156:
      return reduce(RULE_22, 9);
    case 131:
      return reduce(RULE_22, 9);
    case 76:
      return reduce(RULE_22, 9);
    case 148:
      return reduce(RULE_22, 9);
    case 145:
      return reduce(RULE_22, 9);
    case 128:
      return reduce(RULE_22, 9);
    case 168:
      return reduce(RULE_22, 9);
    case 181:
      return reduce(RULE_22, 9);
    case 164:
      return reduce(RULE_22, 9);
    case 93:
      return reduce(RULE_22, 9);
    case 105:
      return reduce(RULE_22, 9);
    case 179:
      return reduce(RULE_22, 9);
    case 72:
      return reduce(RULE_22, 9);
    case 146:
      return reduce(RULE_22, 9);
    case 177:
      return reduce(RULE_22, 9);
    case 158:
      return reduce(RULE_22, 9);
    case 116:
      return reduce(RULE_22, 9);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action146(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 3);
    case 149:
      return reduce(RULE_22, 3);
    case 139:
      return reduce(RULE_22, 3);
    case 175:
      return reduce(RULE_22, 3);
    case 142:
      return reduce(RULE_22, 3);
    case 157:
      return reduce(RULE_22, 3);
    case 155:
      return reduce(RULE_22, 3);
    case 173:
      return reduce(RULE_22, 3);
    case 106:
      return reduce(RULE_22, 3);
    case 160:
      return reduce(RULE_22, 3);
    case 130:
      return reduce(RULE_22, 3);
    case 129:
      return reduce(RULE_22, 3);
    case 167:
      return reduce(RULE_22, 3);
    case 74:
      return reduce(RULE_22, 3);
    case 102:
      return reduce(RULE_22, 3);
    case 153:
      return reduce(RULE_22, 3);
    case 75:
      return reduce(RULE_22, 3);
    case 138:
      return reduce(RULE_22, 3);
    case 163:
      return reduce(RULE_22, 3);
    case 174:
      return reduce(RULE_22, 3);
    case 166:
      return reduce(RULE_22, 3);
    case 172:
      return reduce(RULE_22, 3);
    case 107:
      return reduce(RULE_22, 3);
    case 89:
      return reduce(RULE_22, 3);
    case 170:
      return reduce(RULE_22, 3);
    case 143:
      return reduce(RULE_22, 3);
    case 73:
      return reduce(RULE_22, 3);
    case 176:
      return reduce(RULE_22, 3);
    case 132:
      return reduce(RULE_22, 3);
    case 169:
      return reduce(RULE_22, 3);
    case 121:
      return reduce(RULE_22, 3);
    case 133:
      return reduce(RULE_22, 3);
    case 156:
      return reduce(RULE_22, 3);
    case 131:
      return reduce(RULE_22, 3);
    case 76:
      return reduce(RULE_22, 3);
    case 148:
      return reduce(RULE_22, 3);
    case 145:
      return reduce(RULE_22, 3);
    case 128:
      return reduce(RULE_22, 3);
    case 168:
      return reduce(RULE_22, 3);
    case 181:
      return reduce(RULE_22, 3);
    case 164:
      return reduce(RULE_22, 3);
    case 93:
      return reduce(RULE_22, 3);
    case 105:
      return reduce(RULE_22, 3);
    case 179:
      return reduce(RULE_22, 3);
    case 72:
      return reduce(RULE_22, 3);
    case 146:
      return reduce(RULE_22, 3);
    case 177:
      return reduce(RULE_22, 3);
    case 158:
      return reduce(RULE_22, 3);
    case 116:
      return reduce(RULE_22, 3);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action147(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 2);
    case 102:
      return reduce(RULE_16, 4);
    case 79:
      return reduce(RULE_16, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, HASH, COMMA, ARROW, NAME, UNDERSCORE});
    }
  }

  private final int goto147(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 275;
    default: return -1;
    }
  }

  private final boolean action148(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 6);
    case 149:
      return reduce(RULE_22, 6);
    case 139:
      return reduce(RULE_22, 6);
    case 175:
      return reduce(RULE_22, 6);
    case 142:
      return reduce(RULE_22, 6);
    case 157:
      return reduce(RULE_22, 6);
    case 155:
      return reduce(RULE_22, 6);
    case 173:
      return reduce(RULE_22, 6);
    case 106:
      return reduce(RULE_22, 6);
    case 160:
      return reduce(RULE_22, 6);
    case 130:
      return reduce(RULE_22, 6);
    case 129:
      return reduce(RULE_22, 6);
    case 167:
      return reduce(RULE_22, 6);
    case 74:
      return reduce(RULE_22, 6);
    case 102:
      return reduce(RULE_22, 6);
    case 153:
      return reduce(RULE_22, 6);
    case 75:
      return reduce(RULE_22, 6);
    case 138:
      return reduce(RULE_22, 6);
    case 163:
      return reduce(RULE_22, 6);
    case 174:
      return reduce(RULE_22, 6);
    case 166:
      return reduce(RULE_22, 6);
    case 172:
      return reduce(RULE_22, 6);
    case 107:
      return reduce(RULE_22, 6);
    case 89:
      return reduce(RULE_22, 6);
    case 170:
      return reduce(RULE_22, 6);
    case 143:
      return reduce(RULE_22, 6);
    case 73:
      return reduce(RULE_22, 6);
    case 176:
      return reduce(RULE_22, 6);
    case 132:
      return reduce(RULE_22, 6);
    case 169:
      return reduce(RULE_22, 6);
    case 121:
      return reduce(RULE_22, 6);
    case 133:
      return reduce(RULE_22, 6);
    case 156:
      return reduce(RULE_22, 6);
    case 131:
      return reduce(RULE_22, 6);
    case 76:
      return reduce(RULE_22, 6);
    case 148:
      return reduce(RULE_22, 6);
    case 145:
      return reduce(RULE_22, 6);
    case 128:
      return reduce(RULE_22, 6);
    case 168:
      return reduce(RULE_22, 6);
    case 181:
      return reduce(RULE_22, 6);
    case 164:
      return reduce(RULE_22, 6);
    case 93:
      return reduce(RULE_22, 6);
    case 105:
      return reduce(RULE_22, 6);
    case 179:
      return reduce(RULE_22, 6);
    case 72:
      return reduce(RULE_22, 6);
    case 146:
      return reduce(RULE_22, 6);
    case 177:
      return reduce(RULE_22, 6);
    case 158:
      return reduce(RULE_22, 6);
    case 116:
      return reduce(RULE_22, 6);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action149(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 144:
      stateStack.addFirst(276);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(277);
      tokenStack.addFirst(token);
      return true;
    case 159:
      return reduce(RULE_22, 8);
    case 149:
      return reduce(RULE_22, 8);
    case 139:
      return reduce(RULE_22, 8);
    case 175:
      return reduce(RULE_22, 8);
    case 142:
      return reduce(RULE_22, 8);
    case 157:
      return reduce(RULE_22, 8);
    case 155:
      return reduce(RULE_22, 8);
    case 173:
      return reduce(RULE_22, 8);
    case 106:
      return reduce(RULE_22, 8);
    case 160:
      return reduce(RULE_22, 8);
    case 130:
      return reduce(RULE_22, 8);
    case 129:
      return reduce(RULE_22, 8);
    case 167:
      return reduce(RULE_22, 8);
    case 74:
      return reduce(RULE_22, 8);
    case 102:
      return reduce(RULE_22, 8);
    case 153:
      return reduce(RULE_22, 8);
    case 75:
      return reduce(RULE_22, 8);
    case 138:
      return reduce(RULE_22, 8);
    case 163:
      return reduce(RULE_22, 8);
    case 174:
      return reduce(RULE_22, 8);
    case 166:
      return reduce(RULE_22, 8);
    case 172:
      return reduce(RULE_22, 8);
    case 107:
      return reduce(RULE_22, 8);
    case 89:
      return reduce(RULE_22, 8);
    case 170:
      return reduce(RULE_22, 8);
    case 143:
      return reduce(RULE_22, 8);
    case 73:
      return reduce(RULE_22, 8);
    case 176:
      return reduce(RULE_22, 8);
    case 132:
      return reduce(RULE_22, 8);
    case 169:
      return reduce(RULE_22, 8);
    case 121:
      return reduce(RULE_22, 8);
    case 133:
      return reduce(RULE_22, 8);
    case 156:
      return reduce(RULE_22, 8);
    case 131:
      return reduce(RULE_22, 8);
    case 76:
      return reduce(RULE_22, 8);
    case 148:
      return reduce(RULE_22, 8);
    case 145:
      return reduce(RULE_22, 8);
    case 128:
      return reduce(RULE_22, 8);
    case 168:
      return reduce(RULE_22, 8);
    case 181:
      return reduce(RULE_22, 8);
    case 164:
      return reduce(RULE_22, 8);
    case 93:
      return reduce(RULE_22, 8);
    case 105:
      return reduce(RULE_22, 8);
    case 179:
      return reduce(RULE_22, 8);
    case 72:
      return reduce(RULE_22, 8);
    case 146:
      return reduce(RULE_22, 8);
    case 177:
      return reduce(RULE_22, 8);
    case 158:
      return reduce(RULE_22, 8);
    case 116:
      return reduce(RULE_22, 8);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, CATCH_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, FINALLY_KEYWORD, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action150(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 4);
    case 149:
      return reduce(RULE_22, 4);
    case 139:
      return reduce(RULE_22, 4);
    case 175:
      return reduce(RULE_22, 4);
    case 142:
      return reduce(RULE_22, 4);
    case 157:
      return reduce(RULE_22, 4);
    case 155:
      return reduce(RULE_22, 4);
    case 173:
      return reduce(RULE_22, 4);
    case 106:
      return reduce(RULE_22, 4);
    case 160:
      return reduce(RULE_22, 4);
    case 130:
      return reduce(RULE_22, 4);
    case 129:
      return reduce(RULE_22, 4);
    case 167:
      return reduce(RULE_22, 4);
    case 74:
      return reduce(RULE_22, 4);
    case 102:
      return reduce(RULE_22, 4);
    case 153:
      return reduce(RULE_22, 4);
    case 75:
      return reduce(RULE_22, 4);
    case 138:
      return reduce(RULE_22, 4);
    case 163:
      return reduce(RULE_22, 4);
    case 174:
      return reduce(RULE_22, 4);
    case 166:
      return reduce(RULE_22, 4);
    case 172:
      return reduce(RULE_22, 4);
    case 107:
      return reduce(RULE_22, 4);
    case 89:
      return reduce(RULE_22, 4);
    case 170:
      return reduce(RULE_22, 4);
    case 143:
      return reduce(RULE_22, 4);
    case 73:
      return reduce(RULE_22, 4);
    case 176:
      return reduce(RULE_22, 4);
    case 132:
      return reduce(RULE_22, 4);
    case 169:
      return reduce(RULE_22, 4);
    case 121:
      return reduce(RULE_22, 4);
    case 133:
      return reduce(RULE_22, 4);
    case 156:
      return reduce(RULE_22, 4);
    case 131:
      return reduce(RULE_22, 4);
    case 76:
      return reduce(RULE_22, 4);
    case 148:
      return reduce(RULE_22, 4);
    case 145:
      return reduce(RULE_22, 4);
    case 128:
      return reduce(RULE_22, 4);
    case 168:
      return reduce(RULE_22, 4);
    case 181:
      return reduce(RULE_22, 4);
    case 164:
      return reduce(RULE_22, 4);
    case 93:
      return reduce(RULE_22, 4);
    case 105:
      return reduce(RULE_22, 4);
    case 179:
      return reduce(RULE_22, 4);
    case 72:
      return reduce(RULE_22, 4);
    case 146:
      return reduce(RULE_22, 4);
    case 177:
      return reduce(RULE_22, 4);
    case 158:
      return reduce(RULE_22, 4);
    case 116:
      return reduce(RULE_22, 4);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action151(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(278);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action152(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 85:
      stateStack.addFirst(279);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action153(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(281);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 1);
    case 102:
      return reduce(RULE_15, 1);
    case 79:
      return reduce(RULE_15, 1);
    case 106:
      return reduce(RULE_26, 1);
    case 118:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, HASH, COMMA, ARROW, DOT, LSQUARE, NAME, LPAREN, UNDERSCORE, QUESTION_MARK_DOT});
    }
  }

  private final int goto153(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 282;
    default: return -1;
    }
  }

  private final boolean action154(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(283);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(284);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOT, QUESTION_MARK_DOT});
    }
  }

  private final boolean action155(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(285);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(286);
      tokenStack.addFirst(token);
      return true;
    case 97:
      stateStack.addFirst(287);
      tokenStack.addFirst(token);
      return true;
    case 111:
      stateStack.addFirst(288);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(289);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(295);
      tokenStack.addFirst(token);
      return true;
    case 81:
      stateStack.addFirst(296);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {MINUS_EQUALS, STAR_EQUALS, EQUALS, PERCENT_EQUALS, PLUS_EQUALS, DOUBLE_LANGLE_EQUALS, DOUBLE_PERCENT_EQUALS, AMPERSAND_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action156(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(297);
      tokenStack.addFirst(token);
      return true;
    case 96:
      return reduce(RULE_17, 15);
    case 107:
      return reduce(RULE_17, 15);
    case 106:
      return reduce(RULE_17, 15);
    case 118:
      return reduce(RULE_17, 15);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT, LSQUARE, LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final boolean action157(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 7);
    case 149:
      return reduce(RULE_22, 7);
    case 139:
      return reduce(RULE_22, 7);
    case 175:
      return reduce(RULE_22, 7);
    case 142:
      return reduce(RULE_22, 7);
    case 157:
      return reduce(RULE_22, 7);
    case 155:
      return reduce(RULE_22, 7);
    case 173:
      return reduce(RULE_22, 7);
    case 106:
      return reduce(RULE_22, 7);
    case 160:
      return reduce(RULE_22, 7);
    case 130:
      return reduce(RULE_22, 7);
    case 129:
      return reduce(RULE_22, 7);
    case 167:
      return reduce(RULE_22, 7);
    case 74:
      return reduce(RULE_22, 7);
    case 102:
      return reduce(RULE_22, 7);
    case 153:
      return reduce(RULE_22, 7);
    case 75:
      return reduce(RULE_22, 7);
    case 138:
      return reduce(RULE_22, 7);
    case 163:
      return reduce(RULE_22, 7);
    case 174:
      return reduce(RULE_22, 7);
    case 166:
      return reduce(RULE_22, 7);
    case 172:
      return reduce(RULE_22, 7);
    case 107:
      return reduce(RULE_22, 7);
    case 89:
      return reduce(RULE_22, 7);
    case 170:
      return reduce(RULE_22, 7);
    case 143:
      return reduce(RULE_22, 7);
    case 73:
      return reduce(RULE_22, 7);
    case 176:
      return reduce(RULE_22, 7);
    case 132:
      return reduce(RULE_22, 7);
    case 169:
      return reduce(RULE_22, 7);
    case 121:
      return reduce(RULE_22, 7);
    case 133:
      return reduce(RULE_22, 7);
    case 156:
      return reduce(RULE_22, 7);
    case 131:
      return reduce(RULE_22, 7);
    case 76:
      return reduce(RULE_22, 7);
    case 148:
      return reduce(RULE_22, 7);
    case 145:
      return reduce(RULE_22, 7);
    case 128:
      return reduce(RULE_22, 7);
    case 168:
      return reduce(RULE_22, 7);
    case 181:
      return reduce(RULE_22, 7);
    case 164:
      return reduce(RULE_22, 7);
    case 93:
      return reduce(RULE_22, 7);
    case 105:
      return reduce(RULE_22, 7);
    case 179:
      return reduce(RULE_22, 7);
    case 72:
      return reduce(RULE_22, 7);
    case 146:
      return reduce(RULE_22, 7);
    case 177:
      return reduce(RULE_22, 7);
    case 158:
      return reduce(RULE_22, 7);
    case 116:
      return reduce(RULE_22, 7);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action158(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(24);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, HASH, STATIC_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto158(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 298;
    case 49: return 299;
    case 30: return 300;
    default: return -1;
    }
  }

  private final boolean action159(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 173:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(116);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 170:
      stateStack.addFirst(119);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(121);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(122);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(123);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(125);
      tokenStack.addFirst(token);
      return true;
    case 146:
      stateStack.addFirst(126);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(129);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(301);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(131);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, FLOATING_LITERAL, INT_KEYWORD, STATIC_KEYWORD, HASH, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final int goto159(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 135;
    case 71: return 137;
    case 66: return 139;
    case 64: return 140;
    case 39: return 141;
    case 28: return 302;
    case 46: return 143;
    case 35: return 303;
    case 38: return 146;
    case 45: return 145;
    case 49: return 304;
    case 41: return 148;
    case 44: return 149;
    case 40: return 150;
    case 43: return 151;
    case 48: return 152;
    case 30: return 305;
    case 65: return 154;
    case 68: return 156;
    case 15: return 155;
    case 26: return 158;
    case 42: return 157;
    case 67: return 160;
    case 37: return 161;
    case 14: return 162;
    case 13: return 163;
    case 63: return 164;
    case 33: return 166;
    default: return -1;
    }
  }

  private final boolean action160(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(306);
      tokenStack.addFirst(token);
      return true;
    case 96:
      return reduce(RULE_17, 17);
    case 107:
      return reduce(RULE_17, 17);
    case 106:
      return reduce(RULE_17, 17);
    case 118:
      return reduce(RULE_17, 17);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT, LSQUARE, LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final boolean action161(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 2);
    case 149:
      return reduce(RULE_22, 2);
    case 139:
      return reduce(RULE_22, 2);
    case 175:
      return reduce(RULE_22, 2);
    case 142:
      return reduce(RULE_22, 2);
    case 157:
      return reduce(RULE_22, 2);
    case 155:
      return reduce(RULE_22, 2);
    case 173:
      return reduce(RULE_22, 2);
    case 106:
      return reduce(RULE_22, 2);
    case 160:
      return reduce(RULE_22, 2);
    case 130:
      return reduce(RULE_22, 2);
    case 129:
      return reduce(RULE_22, 2);
    case 167:
      return reduce(RULE_22, 2);
    case 74:
      return reduce(RULE_22, 2);
    case 102:
      return reduce(RULE_22, 2);
    case 153:
      return reduce(RULE_22, 2);
    case 75:
      return reduce(RULE_22, 2);
    case 138:
      return reduce(RULE_22, 2);
    case 163:
      return reduce(RULE_22, 2);
    case 174:
      return reduce(RULE_22, 2);
    case 166:
      return reduce(RULE_22, 2);
    case 172:
      return reduce(RULE_22, 2);
    case 107:
      return reduce(RULE_22, 2);
    case 89:
      return reduce(RULE_22, 2);
    case 170:
      return reduce(RULE_22, 2);
    case 143:
      return reduce(RULE_22, 2);
    case 73:
      return reduce(RULE_22, 2);
    case 176:
      return reduce(RULE_22, 2);
    case 132:
      return reduce(RULE_22, 2);
    case 169:
      return reduce(RULE_22, 2);
    case 121:
      return reduce(RULE_22, 2);
    case 133:
      return reduce(RULE_22, 2);
    case 156:
      return reduce(RULE_22, 2);
    case 131:
      return reduce(RULE_22, 2);
    case 76:
      return reduce(RULE_22, 2);
    case 148:
      return reduce(RULE_22, 2);
    case 145:
      return reduce(RULE_22, 2);
    case 128:
      return reduce(RULE_22, 2);
    case 168:
      return reduce(RULE_22, 2);
    case 181:
      return reduce(RULE_22, 2);
    case 164:
      return reduce(RULE_22, 2);
    case 93:
      return reduce(RULE_22, 2);
    case 105:
      return reduce(RULE_22, 2);
    case 179:
      return reduce(RULE_22, 2);
    case 72:
      return reduce(RULE_22, 2);
    case 146:
      return reduce(RULE_22, 2);
    case 177:
      return reduce(RULE_22, 2);
    case 158:
      return reduce(RULE_22, 2);
    case 116:
      return reduce(RULE_22, 2);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action162(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(307);
      tokenStack.addFirst(token);
      return true;
    case 109:
      return reduce(RULE_25, 1);
    case 126:
      return reduce(RULE_25, 1);
    case 97:
      return reduce(RULE_25, 1);
    case 111:
      return reduce(RULE_25, 1);
    case 115:
      return reduce(RULE_25, 1);
    case 78:
      return reduce(RULE_25, 1);
    case 88:
      return reduce(RULE_25, 1);
    case 91:
      return reduce(RULE_25, 1);
    case 113:
      return reduce(RULE_25, 1);
    case 101:
      return reduce(RULE_25, 1);
    case 95:
      return reduce(RULE_25, 1);
    case 81:
      return reduce(RULE_25, 1);
    default: throw new BadTokenException(token, new Object[] {MINUS_EQUALS, STAR_EQUALS, EQUALS, PERCENT_EQUALS, PLUS_EQUALS, COMMA, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, AMPERSAND_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action163(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_28, 2);
    case 126:
      return reduce(RULE_28, 2);
    case 97:
      return reduce(RULE_28, 2);
    case 111:
      return reduce(RULE_28, 2);
    case 115:
      return reduce(RULE_28, 2);
    case 78:
      return reduce(RULE_28, 2);
    case 88:
      return reduce(RULE_28, 2);
    case 91:
      return reduce(RULE_28, 2);
    case 113:
      return reduce(RULE_28, 2);
    case 101:
      return reduce(RULE_28, 2);
    case 95:
      return reduce(RULE_28, 2);
    case 81:
      return reduce(RULE_28, 2);
    default: throw new BadTokenException(token, new Object[] {MINUS_EQUALS, STAR_EQUALS, EQUALS, PERCENT_EQUALS, PLUS_EQUALS, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, AMPERSAND_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action164(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(308);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LSQUARE});
    }
  }

  private final boolean action165(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      return reduce(RULE_23, 1);
    case 79:
      return reduce(RULE_23, 1);
    default: throw new BadTokenException(token, new Object[] {HASH, ARROW});
    }
  }

  private final boolean action166(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 1);
    case 149:
      return reduce(RULE_22, 1);
    case 139:
      return reduce(RULE_22, 1);
    case 175:
      return reduce(RULE_22, 1);
    case 142:
      return reduce(RULE_22, 1);
    case 157:
      return reduce(RULE_22, 1);
    case 155:
      return reduce(RULE_22, 1);
    case 173:
      return reduce(RULE_22, 1);
    case 106:
      return reduce(RULE_22, 1);
    case 160:
      return reduce(RULE_22, 1);
    case 130:
      return reduce(RULE_22, 1);
    case 129:
      return reduce(RULE_22, 1);
    case 167:
      return reduce(RULE_22, 1);
    case 74:
      return reduce(RULE_22, 1);
    case 102:
      return reduce(RULE_22, 1);
    case 153:
      return reduce(RULE_22, 1);
    case 75:
      return reduce(RULE_22, 1);
    case 138:
      return reduce(RULE_22, 1);
    case 163:
      return reduce(RULE_22, 1);
    case 174:
      return reduce(RULE_22, 1);
    case 166:
      return reduce(RULE_22, 1);
    case 172:
      return reduce(RULE_22, 1);
    case 107:
      return reduce(RULE_22, 1);
    case 89:
      return reduce(RULE_22, 1);
    case 170:
      return reduce(RULE_22, 1);
    case 143:
      return reduce(RULE_22, 1);
    case 73:
      return reduce(RULE_22, 1);
    case 176:
      return reduce(RULE_22, 1);
    case 132:
      return reduce(RULE_22, 1);
    case 169:
      return reduce(RULE_22, 1);
    case 121:
      return reduce(RULE_22, 1);
    case 133:
      return reduce(RULE_22, 1);
    case 156:
      return reduce(RULE_22, 1);
    case 131:
      return reduce(RULE_22, 1);
    case 76:
      return reduce(RULE_22, 1);
    case 148:
      return reduce(RULE_22, 1);
    case 145:
      return reduce(RULE_22, 1);
    case 128:
      return reduce(RULE_22, 1);
    case 168:
      return reduce(RULE_22, 1);
    case 181:
      return reduce(RULE_22, 1);
    case 164:
      return reduce(RULE_22, 1);
    case 93:
      return reduce(RULE_22, 1);
    case 105:
      return reduce(RULE_22, 1);
    case 179:
      return reduce(RULE_22, 1);
    case 72:
      return reduce(RULE_22, 1);
    case 146:
      return reduce(RULE_22, 1);
    case 177:
      return reduce(RULE_22, 1);
    case 158:
      return reduce(RULE_22, 1);
    case 116:
      return reduce(RULE_22, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action167(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 9);
    case 137:
      return reduce(RULE_9, 9);
    case 110:
      return reduce(RULE_9, 9);
    case 79:
      return reduce(RULE_9, 9);
    case 106:
      return reduce(RULE_9, 9);
    case 117:
      return reduce(RULE_9, 9);
    case 102:
      return reduce(RULE_9, 9);
    case 167:
      return reduce(RULE_9, 9);
    case 152:
      return reduce(RULE_9, 9);
    case 94:
      return reduce(RULE_9, 9);
    case 80:
      return reduce(RULE_9, 9);
    case 98:
      return reduce(RULE_9, 9);
    case 171:
      return reduce(RULE_9, 9);
    case 86:
      return reduce(RULE_9, 9);
    case 83:
      return reduce(RULE_9, 9);
    case 122:
      return reduce(RULE_9, 9);
    case 108:
      return reduce(RULE_9, 9);
    case 92:
      return reduce(RULE_9, 9);
    case 128:
      return reduce(RULE_9, 9);
    case 104:
      return reduce(RULE_9, 9);
    case 82:
      return reduce(RULE_9, 9);
    case 116:
      return reduce(RULE_9, 9);
    case 85:
      return reduce(RULE_9, 9);
    case 149:
      return reduce(RULE_9, 9);
    case 157:
      return reduce(RULE_9, 9);
    case 103:
      return reduce(RULE_9, 9);
    case 147:
      return reduce(RULE_9, 9);
    case 129:
      return reduce(RULE_9, 9);
    case 119:
      return reduce(RULE_9, 9);
    case 75:
      return reduce(RULE_9, 9);
    case 100:
      return reduce(RULE_9, 9);
    case 107:
      return reduce(RULE_9, 9);
    case 143:
      return reduce(RULE_9, 9);
    case 112:
      return reduce(RULE_9, 9);
    case 120:
      return reduce(RULE_9, 9);
    case 121:
      return reduce(RULE_9, 9);
    case 124:
      return reduce(RULE_9, 9);
    case 156:
      return reduce(RULE_9, 9);
    case 123:
      return reduce(RULE_9, 9);
    case 99:
      return reduce(RULE_9, 9);
    case 125:
      return reduce(RULE_9, 9);
    case 165:
      return reduce(RULE_9, 9);
    case 77:
      return reduce(RULE_9, 9);
    case 164:
      return reduce(RULE_9, 9);
    case 84:
      return reduce(RULE_9, 9);
    case 105:
      return reduce(RULE_9, 9);
    case 114:
      return reduce(RULE_9, 9);
    case 72:
      return reduce(RULE_9, 9);
    case 177:
      return reduce(RULE_9, 9);
    case 90:
      return reduce(RULE_9, 9);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action168(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 20);
    case 137:
      return reduce(RULE_9, 20);
    case 110:
      return reduce(RULE_9, 20);
    case 79:
      return reduce(RULE_9, 20);
    case 106:
      return reduce(RULE_9, 20);
    case 117:
      return reduce(RULE_9, 20);
    case 102:
      return reduce(RULE_9, 20);
    case 167:
      return reduce(RULE_9, 20);
    case 152:
      return reduce(RULE_9, 20);
    case 94:
      return reduce(RULE_9, 20);
    case 80:
      return reduce(RULE_9, 20);
    case 98:
      return reduce(RULE_9, 20);
    case 171:
      return reduce(RULE_9, 20);
    case 86:
      return reduce(RULE_9, 20);
    case 83:
      return reduce(RULE_9, 20);
    case 122:
      return reduce(RULE_9, 20);
    case 108:
      return reduce(RULE_9, 20);
    case 92:
      return reduce(RULE_9, 20);
    case 128:
      return reduce(RULE_9, 20);
    case 104:
      return reduce(RULE_9, 20);
    case 82:
      return reduce(RULE_9, 20);
    case 116:
      return reduce(RULE_9, 20);
    case 85:
      return reduce(RULE_9, 20);
    case 149:
      return reduce(RULE_9, 20);
    case 157:
      return reduce(RULE_9, 20);
    case 103:
      return reduce(RULE_9, 20);
    case 147:
      return reduce(RULE_9, 20);
    case 129:
      return reduce(RULE_9, 20);
    case 119:
      return reduce(RULE_9, 20);
    case 75:
      return reduce(RULE_9, 20);
    case 100:
      return reduce(RULE_9, 20);
    case 107:
      return reduce(RULE_9, 20);
    case 143:
      return reduce(RULE_9, 20);
    case 112:
      return reduce(RULE_9, 20);
    case 120:
      return reduce(RULE_9, 20);
    case 121:
      return reduce(RULE_9, 20);
    case 124:
      return reduce(RULE_9, 20);
    case 156:
      return reduce(RULE_9, 20);
    case 123:
      return reduce(RULE_9, 20);
    case 99:
      return reduce(RULE_9, 20);
    case 125:
      return reduce(RULE_9, 20);
    case 165:
      return reduce(RULE_9, 20);
    case 77:
      return reduce(RULE_9, 20);
    case 164:
      return reduce(RULE_9, 20);
    case 84:
      return reduce(RULE_9, 20);
    case 105:
      return reduce(RULE_9, 20);
    case 114:
      return reduce(RULE_9, 20);
    case 72:
      return reduce(RULE_9, 20);
    case 177:
      return reduce(RULE_9, 20);
    case 90:
      return reduce(RULE_9, 20);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action169(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 4);
    case 137:
      return reduce(RULE_9, 4);
    case 110:
      return reduce(RULE_9, 4);
    case 79:
      return reduce(RULE_9, 4);
    case 106:
      return reduce(RULE_9, 4);
    case 117:
      return reduce(RULE_9, 4);
    case 102:
      return reduce(RULE_9, 4);
    case 167:
      return reduce(RULE_9, 4);
    case 152:
      return reduce(RULE_9, 4);
    case 94:
      return reduce(RULE_9, 4);
    case 80:
      return reduce(RULE_9, 4);
    case 98:
      return reduce(RULE_9, 4);
    case 171:
      return reduce(RULE_9, 4);
    case 86:
      return reduce(RULE_9, 4);
    case 83:
      return reduce(RULE_9, 4);
    case 122:
      return reduce(RULE_9, 4);
    case 108:
      return reduce(RULE_9, 4);
    case 92:
      return reduce(RULE_9, 4);
    case 128:
      return reduce(RULE_9, 4);
    case 104:
      return reduce(RULE_9, 4);
    case 82:
      return reduce(RULE_9, 4);
    case 116:
      return reduce(RULE_9, 4);
    case 85:
      return reduce(RULE_9, 4);
    case 149:
      return reduce(RULE_9, 4);
    case 157:
      return reduce(RULE_9, 4);
    case 103:
      return reduce(RULE_9, 4);
    case 147:
      return reduce(RULE_9, 4);
    case 129:
      return reduce(RULE_9, 4);
    case 119:
      return reduce(RULE_9, 4);
    case 75:
      return reduce(RULE_9, 4);
    case 100:
      return reduce(RULE_9, 4);
    case 107:
      return reduce(RULE_9, 4);
    case 143:
      return reduce(RULE_9, 4);
    case 112:
      return reduce(RULE_9, 4);
    case 120:
      return reduce(RULE_9, 4);
    case 121:
      return reduce(RULE_9, 4);
    case 124:
      return reduce(RULE_9, 4);
    case 156:
      return reduce(RULE_9, 4);
    case 123:
      return reduce(RULE_9, 4);
    case 99:
      return reduce(RULE_9, 4);
    case 125:
      return reduce(RULE_9, 4);
    case 165:
      return reduce(RULE_9, 4);
    case 77:
      return reduce(RULE_9, 4);
    case 164:
      return reduce(RULE_9, 4);
    case 84:
      return reduce(RULE_9, 4);
    case 105:
      return reduce(RULE_9, 4);
    case 114:
      return reduce(RULE_9, 4);
    case 72:
      return reduce(RULE_9, 4);
    case 177:
      return reduce(RULE_9, 4);
    case 90:
      return reduce(RULE_9, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action170(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 13);
    case 137:
      return reduce(RULE_9, 13);
    case 110:
      return reduce(RULE_9, 13);
    case 79:
      return reduce(RULE_9, 13);
    case 106:
      return reduce(RULE_9, 13);
    case 117:
      return reduce(RULE_9, 13);
    case 102:
      return reduce(RULE_9, 13);
    case 167:
      return reduce(RULE_9, 13);
    case 152:
      return reduce(RULE_9, 13);
    case 94:
      return reduce(RULE_9, 13);
    case 80:
      return reduce(RULE_9, 13);
    case 98:
      return reduce(RULE_9, 13);
    case 171:
      return reduce(RULE_9, 13);
    case 86:
      return reduce(RULE_9, 13);
    case 83:
      return reduce(RULE_9, 13);
    case 122:
      return reduce(RULE_9, 13);
    case 108:
      return reduce(RULE_9, 13);
    case 92:
      return reduce(RULE_9, 13);
    case 128:
      return reduce(RULE_9, 13);
    case 104:
      return reduce(RULE_9, 13);
    case 82:
      return reduce(RULE_9, 13);
    case 116:
      return reduce(RULE_9, 13);
    case 85:
      return reduce(RULE_9, 13);
    case 149:
      return reduce(RULE_9, 13);
    case 157:
      return reduce(RULE_9, 13);
    case 103:
      return reduce(RULE_9, 13);
    case 147:
      return reduce(RULE_9, 13);
    case 129:
      return reduce(RULE_9, 13);
    case 119:
      return reduce(RULE_9, 13);
    case 75:
      return reduce(RULE_9, 13);
    case 100:
      return reduce(RULE_9, 13);
    case 107:
      return reduce(RULE_9, 13);
    case 143:
      return reduce(RULE_9, 13);
    case 112:
      return reduce(RULE_9, 13);
    case 120:
      return reduce(RULE_9, 13);
    case 121:
      return reduce(RULE_9, 13);
    case 124:
      return reduce(RULE_9, 13);
    case 156:
      return reduce(RULE_9, 13);
    case 123:
      return reduce(RULE_9, 13);
    case 99:
      return reduce(RULE_9, 13);
    case 125:
      return reduce(RULE_9, 13);
    case 165:
      return reduce(RULE_9, 13);
    case 77:
      return reduce(RULE_9, 13);
    case 164:
      return reduce(RULE_9, 13);
    case 84:
      return reduce(RULE_9, 13);
    case 105:
      return reduce(RULE_9, 13);
    case 114:
      return reduce(RULE_9, 13);
    case 72:
      return reduce(RULE_9, 13);
    case 177:
      return reduce(RULE_9, 13);
    case 90:
      return reduce(RULE_9, 13);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action171(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 8);
    case 137:
      return reduce(RULE_9, 8);
    case 110:
      return reduce(RULE_9, 8);
    case 79:
      return reduce(RULE_9, 8);
    case 106:
      return reduce(RULE_9, 8);
    case 117:
      return reduce(RULE_9, 8);
    case 102:
      return reduce(RULE_9, 8);
    case 167:
      return reduce(RULE_9, 8);
    case 152:
      return reduce(RULE_9, 8);
    case 94:
      return reduce(RULE_9, 8);
    case 80:
      return reduce(RULE_9, 8);
    case 98:
      return reduce(RULE_9, 8);
    case 171:
      return reduce(RULE_9, 8);
    case 86:
      return reduce(RULE_9, 8);
    case 83:
      return reduce(RULE_9, 8);
    case 122:
      return reduce(RULE_9, 8);
    case 108:
      return reduce(RULE_9, 8);
    case 92:
      return reduce(RULE_9, 8);
    case 128:
      return reduce(RULE_9, 8);
    case 104:
      return reduce(RULE_9, 8);
    case 82:
      return reduce(RULE_9, 8);
    case 116:
      return reduce(RULE_9, 8);
    case 85:
      return reduce(RULE_9, 8);
    case 149:
      return reduce(RULE_9, 8);
    case 157:
      return reduce(RULE_9, 8);
    case 103:
      return reduce(RULE_9, 8);
    case 147:
      return reduce(RULE_9, 8);
    case 129:
      return reduce(RULE_9, 8);
    case 119:
      return reduce(RULE_9, 8);
    case 75:
      return reduce(RULE_9, 8);
    case 100:
      return reduce(RULE_9, 8);
    case 107:
      return reduce(RULE_9, 8);
    case 143:
      return reduce(RULE_9, 8);
    case 112:
      return reduce(RULE_9, 8);
    case 120:
      return reduce(RULE_9, 8);
    case 121:
      return reduce(RULE_9, 8);
    case 124:
      return reduce(RULE_9, 8);
    case 156:
      return reduce(RULE_9, 8);
    case 123:
      return reduce(RULE_9, 8);
    case 99:
      return reduce(RULE_9, 8);
    case 125:
      return reduce(RULE_9, 8);
    case 165:
      return reduce(RULE_9, 8);
    case 77:
      return reduce(RULE_9, 8);
    case 164:
      return reduce(RULE_9, 8);
    case 84:
      return reduce(RULE_9, 8);
    case 105:
      return reduce(RULE_9, 8);
    case 114:
      return reduce(RULE_9, 8);
    case 72:
      return reduce(RULE_9, 8);
    case 177:
      return reduce(RULE_9, 8);
    case 90:
      return reduce(RULE_9, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action172(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto172(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 100;
    case 50: return 309;
    case 29: return 102;
    case 49: return 103;
    case 30: return 104;
    default: return -1;
    }
  }

  private final boolean action173(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 5);
    case 137:
      return reduce(RULE_9, 5);
    case 110:
      return reduce(RULE_9, 5);
    case 79:
      return reduce(RULE_9, 5);
    case 106:
      return reduce(RULE_9, 5);
    case 117:
      return reduce(RULE_9, 5);
    case 102:
      return reduce(RULE_9, 5);
    case 167:
      return reduce(RULE_9, 5);
    case 152:
      return reduce(RULE_9, 5);
    case 94:
      return reduce(RULE_9, 5);
    case 80:
      return reduce(RULE_9, 5);
    case 98:
      return reduce(RULE_9, 5);
    case 171:
      return reduce(RULE_9, 5);
    case 86:
      return reduce(RULE_9, 5);
    case 83:
      return reduce(RULE_9, 5);
    case 122:
      return reduce(RULE_9, 5);
    case 108:
      return reduce(RULE_9, 5);
    case 92:
      return reduce(RULE_9, 5);
    case 128:
      return reduce(RULE_9, 5);
    case 104:
      return reduce(RULE_9, 5);
    case 82:
      return reduce(RULE_9, 5);
    case 116:
      return reduce(RULE_9, 5);
    case 85:
      return reduce(RULE_9, 5);
    case 149:
      return reduce(RULE_9, 5);
    case 157:
      return reduce(RULE_9, 5);
    case 103:
      return reduce(RULE_9, 5);
    case 147:
      return reduce(RULE_9, 5);
    case 129:
      return reduce(RULE_9, 5);
    case 119:
      return reduce(RULE_9, 5);
    case 75:
      return reduce(RULE_9, 5);
    case 100:
      return reduce(RULE_9, 5);
    case 107:
      return reduce(RULE_9, 5);
    case 143:
      return reduce(RULE_9, 5);
    case 112:
      return reduce(RULE_9, 5);
    case 120:
      return reduce(RULE_9, 5);
    case 121:
      return reduce(RULE_9, 5);
    case 124:
      return reduce(RULE_9, 5);
    case 156:
      return reduce(RULE_9, 5);
    case 123:
      return reduce(RULE_9, 5);
    case 99:
      return reduce(RULE_9, 5);
    case 125:
      return reduce(RULE_9, 5);
    case 165:
      return reduce(RULE_9, 5);
    case 77:
      return reduce(RULE_9, 5);
    case 164:
      return reduce(RULE_9, 5);
    case 84:
      return reduce(RULE_9, 5);
    case 105:
      return reduce(RULE_9, 5);
    case 114:
      return reduce(RULE_9, 5);
    case 72:
      return reduce(RULE_9, 5);
    case 177:
      return reduce(RULE_9, 5);
    case 90:
      return reduce(RULE_9, 5);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action174(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 41);
    case 137:
      return reduce(RULE_9, 41);
    case 110:
      return reduce(RULE_9, 41);
    case 79:
      return reduce(RULE_9, 41);
    case 106:
      return reduce(RULE_9, 41);
    case 117:
      return reduce(RULE_9, 41);
    case 102:
      return reduce(RULE_9, 41);
    case 167:
      return reduce(RULE_9, 41);
    case 152:
      return reduce(RULE_9, 41);
    case 94:
      return reduce(RULE_9, 41);
    case 80:
      return reduce(RULE_9, 41);
    case 98:
      return reduce(RULE_9, 41);
    case 171:
      return reduce(RULE_9, 41);
    case 86:
      return reduce(RULE_9, 41);
    case 83:
      return reduce(RULE_9, 41);
    case 122:
      return reduce(RULE_9, 41);
    case 108:
      return reduce(RULE_9, 41);
    case 92:
      return reduce(RULE_9, 41);
    case 128:
      return reduce(RULE_9, 41);
    case 104:
      return reduce(RULE_9, 41);
    case 82:
      return reduce(RULE_9, 41);
    case 116:
      return reduce(RULE_9, 41);
    case 85:
      return reduce(RULE_9, 41);
    case 149:
      return reduce(RULE_9, 41);
    case 157:
      return reduce(RULE_9, 41);
    case 103:
      return reduce(RULE_9, 41);
    case 147:
      return reduce(RULE_9, 41);
    case 129:
      return reduce(RULE_9, 41);
    case 119:
      return reduce(RULE_9, 41);
    case 75:
      return reduce(RULE_9, 41);
    case 100:
      return reduce(RULE_9, 41);
    case 107:
      return reduce(RULE_9, 41);
    case 143:
      return reduce(RULE_9, 41);
    case 112:
      return reduce(RULE_9, 41);
    case 120:
      return reduce(RULE_9, 41);
    case 121:
      return reduce(RULE_9, 41);
    case 124:
      return reduce(RULE_9, 41);
    case 156:
      return reduce(RULE_9, 41);
    case 123:
      return reduce(RULE_9, 41);
    case 99:
      return reduce(RULE_9, 41);
    case 125:
      return reduce(RULE_9, 41);
    case 165:
      return reduce(RULE_9, 41);
    case 77:
      return reduce(RULE_9, 41);
    case 164:
      return reduce(RULE_9, 41);
    case 84:
      return reduce(RULE_9, 41);
    case 105:
      return reduce(RULE_9, 41);
    case 114:
      return reduce(RULE_9, 41);
    case 72:
      return reduce(RULE_9, 41);
    case 177:
      return reduce(RULE_9, 41);
    case 90:
      return reduce(RULE_9, 41);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action175(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 1);
    case 137:
      return reduce(RULE_9, 1);
    case 110:
      return reduce(RULE_9, 1);
    case 79:
      return reduce(RULE_9, 1);
    case 106:
      return reduce(RULE_9, 1);
    case 117:
      return reduce(RULE_9, 1);
    case 102:
      return reduce(RULE_9, 1);
    case 167:
      return reduce(RULE_9, 1);
    case 152:
      return reduce(RULE_9, 1);
    case 94:
      return reduce(RULE_9, 1);
    case 80:
      return reduce(RULE_9, 1);
    case 98:
      return reduce(RULE_9, 1);
    case 171:
      return reduce(RULE_9, 1);
    case 86:
      return reduce(RULE_9, 1);
    case 83:
      return reduce(RULE_9, 1);
    case 122:
      return reduce(RULE_9, 1);
    case 108:
      return reduce(RULE_9, 1);
    case 92:
      return reduce(RULE_9, 1);
    case 128:
      return reduce(RULE_9, 1);
    case 104:
      return reduce(RULE_9, 1);
    case 82:
      return reduce(RULE_9, 1);
    case 116:
      return reduce(RULE_9, 1);
    case 85:
      return reduce(RULE_9, 1);
    case 149:
      return reduce(RULE_9, 1);
    case 157:
      return reduce(RULE_9, 1);
    case 103:
      return reduce(RULE_9, 1);
    case 147:
      return reduce(RULE_9, 1);
    case 129:
      return reduce(RULE_9, 1);
    case 119:
      return reduce(RULE_9, 1);
    case 75:
      return reduce(RULE_9, 1);
    case 100:
      return reduce(RULE_9, 1);
    case 107:
      return reduce(RULE_9, 1);
    case 143:
      return reduce(RULE_9, 1);
    case 112:
      return reduce(RULE_9, 1);
    case 120:
      return reduce(RULE_9, 1);
    case 121:
      return reduce(RULE_9, 1);
    case 124:
      return reduce(RULE_9, 1);
    case 156:
      return reduce(RULE_9, 1);
    case 123:
      return reduce(RULE_9, 1);
    case 99:
      return reduce(RULE_9, 1);
    case 125:
      return reduce(RULE_9, 1);
    case 165:
      return reduce(RULE_9, 1);
    case 77:
      return reduce(RULE_9, 1);
    case 164:
      return reduce(RULE_9, 1);
    case 84:
      return reduce(RULE_9, 1);
    case 105:
      return reduce(RULE_9, 1);
    case 114:
      return reduce(RULE_9, 1);
    case 72:
      return reduce(RULE_9, 1);
    case 177:
      return reduce(RULE_9, 1);
    case 90:
      return reduce(RULE_9, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action176(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 12);
    case 137:
      return reduce(RULE_9, 12);
    case 110:
      return reduce(RULE_9, 12);
    case 79:
      return reduce(RULE_9, 12);
    case 106:
      return reduce(RULE_9, 12);
    case 117:
      return reduce(RULE_9, 12);
    case 102:
      return reduce(RULE_9, 12);
    case 167:
      return reduce(RULE_9, 12);
    case 152:
      return reduce(RULE_9, 12);
    case 94:
      return reduce(RULE_9, 12);
    case 80:
      return reduce(RULE_9, 12);
    case 98:
      return reduce(RULE_9, 12);
    case 171:
      return reduce(RULE_9, 12);
    case 86:
      return reduce(RULE_9, 12);
    case 83:
      return reduce(RULE_9, 12);
    case 122:
      return reduce(RULE_9, 12);
    case 108:
      return reduce(RULE_9, 12);
    case 92:
      return reduce(RULE_9, 12);
    case 128:
      return reduce(RULE_9, 12);
    case 104:
      return reduce(RULE_9, 12);
    case 82:
      return reduce(RULE_9, 12);
    case 116:
      return reduce(RULE_9, 12);
    case 85:
      return reduce(RULE_9, 12);
    case 149:
      return reduce(RULE_9, 12);
    case 157:
      return reduce(RULE_9, 12);
    case 103:
      return reduce(RULE_9, 12);
    case 147:
      return reduce(RULE_9, 12);
    case 129:
      return reduce(RULE_9, 12);
    case 119:
      return reduce(RULE_9, 12);
    case 75:
      return reduce(RULE_9, 12);
    case 100:
      return reduce(RULE_9, 12);
    case 107:
      return reduce(RULE_9, 12);
    case 143:
      return reduce(RULE_9, 12);
    case 112:
      return reduce(RULE_9, 12);
    case 120:
      return reduce(RULE_9, 12);
    case 121:
      return reduce(RULE_9, 12);
    case 124:
      return reduce(RULE_9, 12);
    case 156:
      return reduce(RULE_9, 12);
    case 123:
      return reduce(RULE_9, 12);
    case 99:
      return reduce(RULE_9, 12);
    case 125:
      return reduce(RULE_9, 12);
    case 165:
      return reduce(RULE_9, 12);
    case 77:
      return reduce(RULE_9, 12);
    case 164:
      return reduce(RULE_9, 12);
    case 84:
      return reduce(RULE_9, 12);
    case 105:
      return reduce(RULE_9, 12);
    case 114:
      return reduce(RULE_9, 12);
    case 72:
      return reduce(RULE_9, 12);
    case 177:
      return reduce(RULE_9, 12);
    case 90:
      return reduce(RULE_9, 12);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action177(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(310);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(311);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LSQUARE, NAME, OBJECT_KEYWORD});
    }
  }

  private final int goto177(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 312;
    default: return -1;
    }
  }

  private final boolean action178(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 21);
    case 137:
      return reduce(RULE_9, 21);
    case 110:
      return reduce(RULE_9, 21);
    case 79:
      return reduce(RULE_9, 21);
    case 106:
      return reduce(RULE_9, 21);
    case 117:
      return reduce(RULE_9, 21);
    case 102:
      return reduce(RULE_9, 21);
    case 167:
      return reduce(RULE_9, 21);
    case 152:
      return reduce(RULE_9, 21);
    case 94:
      return reduce(RULE_9, 21);
    case 80:
      return reduce(RULE_9, 21);
    case 98:
      return reduce(RULE_9, 21);
    case 171:
      return reduce(RULE_9, 21);
    case 86:
      return reduce(RULE_9, 21);
    case 83:
      return reduce(RULE_9, 21);
    case 122:
      return reduce(RULE_9, 21);
    case 108:
      return reduce(RULE_9, 21);
    case 92:
      return reduce(RULE_9, 21);
    case 128:
      return reduce(RULE_9, 21);
    case 104:
      return reduce(RULE_9, 21);
    case 82:
      return reduce(RULE_9, 21);
    case 116:
      return reduce(RULE_9, 21);
    case 85:
      return reduce(RULE_9, 21);
    case 149:
      return reduce(RULE_9, 21);
    case 157:
      return reduce(RULE_9, 21);
    case 103:
      return reduce(RULE_9, 21);
    case 147:
      return reduce(RULE_9, 21);
    case 129:
      return reduce(RULE_9, 21);
    case 119:
      return reduce(RULE_9, 21);
    case 75:
      return reduce(RULE_9, 21);
    case 100:
      return reduce(RULE_9, 21);
    case 107:
      return reduce(RULE_9, 21);
    case 143:
      return reduce(RULE_9, 21);
    case 112:
      return reduce(RULE_9, 21);
    case 120:
      return reduce(RULE_9, 21);
    case 121:
      return reduce(RULE_9, 21);
    case 124:
      return reduce(RULE_9, 21);
    case 156:
      return reduce(RULE_9, 21);
    case 123:
      return reduce(RULE_9, 21);
    case 99:
      return reduce(RULE_9, 21);
    case 125:
      return reduce(RULE_9, 21);
    case 165:
      return reduce(RULE_9, 21);
    case 77:
      return reduce(RULE_9, 21);
    case 164:
      return reduce(RULE_9, 21);
    case 84:
      return reduce(RULE_9, 21);
    case 105:
      return reduce(RULE_9, 21);
    case 114:
      return reduce(RULE_9, 21);
    case 72:
      return reduce(RULE_9, 21);
    case 177:
      return reduce(RULE_9, 21);
    case 90:
      return reduce(RULE_9, 21);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action179(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(313);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(314);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, ARROW, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, HASH, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto179(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 100;
    case 50: return 136;
    case 29: return 165;
    case 51: return 315;
    case 49: return 103;
    case 30: return 104;
    default: return -1;
    }
  }

  private final boolean action180(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 16);
    case 137:
      return reduce(RULE_9, 16);
    case 110:
      return reduce(RULE_9, 16);
    case 79:
      return reduce(RULE_9, 16);
    case 106:
      return reduce(RULE_9, 16);
    case 117:
      return reduce(RULE_9, 16);
    case 102:
      return reduce(RULE_9, 16);
    case 167:
      return reduce(RULE_9, 16);
    case 152:
      return reduce(RULE_9, 16);
    case 94:
      return reduce(RULE_9, 16);
    case 80:
      return reduce(RULE_9, 16);
    case 98:
      return reduce(RULE_9, 16);
    case 171:
      return reduce(RULE_9, 16);
    case 86:
      return reduce(RULE_9, 16);
    case 83:
      return reduce(RULE_9, 16);
    case 122:
      return reduce(RULE_9, 16);
    case 108:
      return reduce(RULE_9, 16);
    case 92:
      return reduce(RULE_9, 16);
    case 128:
      return reduce(RULE_9, 16);
    case 104:
      return reduce(RULE_9, 16);
    case 82:
      return reduce(RULE_9, 16);
    case 116:
      return reduce(RULE_9, 16);
    case 85:
      return reduce(RULE_9, 16);
    case 149:
      return reduce(RULE_9, 16);
    case 157:
      return reduce(RULE_9, 16);
    case 103:
      return reduce(RULE_9, 16);
    case 147:
      return reduce(RULE_9, 16);
    case 129:
      return reduce(RULE_9, 16);
    case 119:
      return reduce(RULE_9, 16);
    case 75:
      return reduce(RULE_9, 16);
    case 100:
      return reduce(RULE_9, 16);
    case 107:
      return reduce(RULE_9, 16);
    case 143:
      return reduce(RULE_9, 16);
    case 112:
      return reduce(RULE_9, 16);
    case 120:
      return reduce(RULE_9, 16);
    case 121:
      return reduce(RULE_9, 16);
    case 124:
      return reduce(RULE_9, 16);
    case 156:
      return reduce(RULE_9, 16);
    case 123:
      return reduce(RULE_9, 16);
    case 99:
      return reduce(RULE_9, 16);
    case 125:
      return reduce(RULE_9, 16);
    case 165:
      return reduce(RULE_9, 16);
    case 77:
      return reduce(RULE_9, 16);
    case 164:
      return reduce(RULE_9, 16);
    case 84:
      return reduce(RULE_9, 16);
    case 105:
      return reduce(RULE_9, 16);
    case 114:
      return reduce(RULE_9, 16);
    case 72:
      return reduce(RULE_9, 16);
    case 177:
      return reduce(RULE_9, 16);
    case 90:
      return reduce(RULE_9, 16);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action181(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(316);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action182(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 17);
    case 137:
      return reduce(RULE_9, 17);
    case 110:
      return reduce(RULE_9, 17);
    case 79:
      return reduce(RULE_9, 17);
    case 106:
      return reduce(RULE_9, 17);
    case 117:
      return reduce(RULE_9, 17);
    case 102:
      return reduce(RULE_9, 17);
    case 167:
      return reduce(RULE_9, 17);
    case 152:
      return reduce(RULE_9, 17);
    case 94:
      return reduce(RULE_9, 17);
    case 80:
      return reduce(RULE_9, 17);
    case 98:
      return reduce(RULE_9, 17);
    case 171:
      return reduce(RULE_9, 17);
    case 86:
      return reduce(RULE_9, 17);
    case 83:
      return reduce(RULE_9, 17);
    case 122:
      return reduce(RULE_9, 17);
    case 108:
      return reduce(RULE_9, 17);
    case 92:
      return reduce(RULE_9, 17);
    case 128:
      return reduce(RULE_9, 17);
    case 104:
      return reduce(RULE_9, 17);
    case 82:
      return reduce(RULE_9, 17);
    case 116:
      return reduce(RULE_9, 17);
    case 85:
      return reduce(RULE_9, 17);
    case 149:
      return reduce(RULE_9, 17);
    case 157:
      return reduce(RULE_9, 17);
    case 103:
      return reduce(RULE_9, 17);
    case 147:
      return reduce(RULE_9, 17);
    case 129:
      return reduce(RULE_9, 17);
    case 119:
      return reduce(RULE_9, 17);
    case 75:
      return reduce(RULE_9, 17);
    case 100:
      return reduce(RULE_9, 17);
    case 107:
      return reduce(RULE_9, 17);
    case 143:
      return reduce(RULE_9, 17);
    case 112:
      return reduce(RULE_9, 17);
    case 120:
      return reduce(RULE_9, 17);
    case 121:
      return reduce(RULE_9, 17);
    case 124:
      return reduce(RULE_9, 17);
    case 156:
      return reduce(RULE_9, 17);
    case 123:
      return reduce(RULE_9, 17);
    case 99:
      return reduce(RULE_9, 17);
    case 125:
      return reduce(RULE_9, 17);
    case 165:
      return reduce(RULE_9, 17);
    case 77:
      return reduce(RULE_9, 17);
    case 164:
      return reduce(RULE_9, 17);
    case 84:
      return reduce(RULE_9, 17);
    case 105:
      return reduce(RULE_9, 17);
    case 114:
      return reduce(RULE_9, 17);
    case 72:
      return reduce(RULE_9, 17);
    case 177:
      return reduce(RULE_9, 17);
    case 90:
      return reduce(RULE_9, 17);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action183(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_9, 22);
    case 137:
      return reduce(RULE_9, 22);
    case 110:
      return reduce(RULE_9, 22);
    case 79:
      return reduce(RULE_9, 22);
    case 106:
      return reduce(RULE_9, 22);
    case 117:
      return reduce(RULE_9, 22);
    case 102:
      return reduce(RULE_9, 22);
    case 167:
      return reduce(RULE_9, 22);
    case 152:
      return reduce(RULE_9, 22);
    case 94:
      return reduce(RULE_9, 22);
    case 80:
      return reduce(RULE_9, 22);
    case 98:
      return reduce(RULE_9, 22);
    case 171:
      return reduce(RULE_9, 22);
    case 86:
      return reduce(RULE_9, 22);
    case 83:
      return reduce(RULE_9, 22);
    case 122:
      return reduce(RULE_9, 22);
    case 108:
      return reduce(RULE_9, 22);
    case 92:
      return reduce(RULE_9, 22);
    case 128:
      return reduce(RULE_9, 22);
    case 104:
      return reduce(RULE_9, 22);
    case 82:
      return reduce(RULE_9, 22);
    case 116:
      return reduce(RULE_9, 22);
    case 85:
      return reduce(RULE_9, 22);
    case 149:
      return reduce(RULE_9, 22);
    case 157:
      return reduce(RULE_9, 22);
    case 103:
      return reduce(RULE_9, 22);
    case 147:
      return reduce(RULE_9, 22);
    case 129:
      return reduce(RULE_9, 22);
    case 119:
      return reduce(RULE_9, 22);
    case 75:
      return reduce(RULE_9, 22);
    case 100:
      return reduce(RULE_9, 22);
    case 107:
      return reduce(RULE_9, 22);
    case 143:
      return reduce(RULE_9, 22);
    case 112:
      return reduce(RULE_9, 22);
    case 120:
      return reduce(RULE_9, 22);
    case 121:
      return reduce(RULE_9, 22);
    case 124:
      return reduce(RULE_9, 22);
    case 156:
      return reduce(RULE_9, 22);
    case 123:
      return reduce(RULE_9, 22);
    case 99:
      return reduce(RULE_9, 22);
    case 125:
      return reduce(RULE_9, 22);
    case 165:
      return reduce(RULE_9, 22);
    case 77:
      return reduce(RULE_9, 22);
    case 164:
      return reduce(RULE_9, 22);
    case 84:
      return reduce(RULE_9, 22);
    case 105:
      return reduce(RULE_9, 22);
    case 114:
      return reduce(RULE_9, 22);
    case 72:
      return reduce(RULE_9, 22);
    case 177:
      return reduce(RULE_9, 22);
    case 90:
      return reduce(RULE_9, 22);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, DOT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action184(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 31);
    case 137:
      return reduce(RULE_9, 31);
    case 110:
      return reduce(RULE_9, 31);
    case 79:
      return reduce(RULE_9, 31);
    case 106:
      return reduce(RULE_9, 31);
    case 117:
      return reduce(RULE_9, 31);
    case 102:
      return reduce(RULE_9, 31);
    case 167:
      return reduce(RULE_9, 31);
    case 152:
      return reduce(RULE_9, 31);
    case 94:
      return reduce(RULE_9, 31);
    case 80:
      return reduce(RULE_9, 31);
    case 98:
      return reduce(RULE_9, 31);
    case 171:
      return reduce(RULE_9, 31);
    case 86:
      return reduce(RULE_9, 31);
    case 83:
      return reduce(RULE_9, 31);
    case 122:
      return reduce(RULE_9, 31);
    case 108:
      return reduce(RULE_9, 31);
    case 92:
      return reduce(RULE_9, 31);
    case 128:
      return reduce(RULE_9, 31);
    case 104:
      return reduce(RULE_9, 31);
    case 82:
      return reduce(RULE_9, 31);
    case 116:
      return reduce(RULE_9, 31);
    case 85:
      return reduce(RULE_9, 31);
    case 149:
      return reduce(RULE_9, 31);
    case 157:
      return reduce(RULE_9, 31);
    case 103:
      return reduce(RULE_9, 31);
    case 147:
      return reduce(RULE_9, 31);
    case 129:
      return reduce(RULE_9, 31);
    case 119:
      return reduce(RULE_9, 31);
    case 75:
      return reduce(RULE_9, 31);
    case 100:
      return reduce(RULE_9, 31);
    case 107:
      return reduce(RULE_9, 31);
    case 143:
      return reduce(RULE_9, 31);
    case 112:
      return reduce(RULE_9, 31);
    case 120:
      return reduce(RULE_9, 31);
    case 121:
      return reduce(RULE_9, 31);
    case 124:
      return reduce(RULE_9, 31);
    case 156:
      return reduce(RULE_9, 31);
    case 123:
      return reduce(RULE_9, 31);
    case 99:
      return reduce(RULE_9, 31);
    case 125:
      return reduce(RULE_9, 31);
    case 165:
      return reduce(RULE_9, 31);
    case 77:
      return reduce(RULE_9, 31);
    case 164:
      return reduce(RULE_9, 31);
    case 84:
      return reduce(RULE_9, 31);
    case 105:
      return reduce(RULE_9, 31);
    case 114:
      return reduce(RULE_9, 31);
    case 72:
      return reduce(RULE_9, 31);
    case 177:
      return reduce(RULE_9, 31);
    case 90:
      return reduce(RULE_9, 31);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action185(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(97);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto185(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 317;
    default: return -1;
    }
  }

  private final boolean action186(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(318);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action187(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(319);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action188(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_12, 0);
    case 139:
      return reduce(RULE_12, 0);
    case 137:
      return reduce(RULE_12, 0);
    case 175:
      return reduce(RULE_12, 0);
    case 157:
      return reduce(RULE_12, 0);
    case 155:
      return reduce(RULE_12, 0);
    case 106:
      return reduce(RULE_12, 0);
    case 160:
      return reduce(RULE_12, 0);
    case 130:
      return reduce(RULE_12, 0);
    case 129:
      return reduce(RULE_12, 0);
    case 102:
      return reduce(RULE_12, 0);
    case 167:
      return reduce(RULE_12, 0);
    case 153:
      return reduce(RULE_12, 0);
    case 75:
      return reduce(RULE_12, 0);
    case 174:
      return reduce(RULE_12, 0);
    case 180:
      return reduce(RULE_12, 0);
    case 166:
      return reduce(RULE_12, 0);
    case 107:
      return reduce(RULE_12, 0);
    case 143:
      return reduce(RULE_12, 0);
    case 176:
      return reduce(RULE_12, 0);
    case 132:
      return reduce(RULE_12, 0);
    case 121:
      return reduce(RULE_12, 0);
    case 156:
      return reduce(RULE_12, 0);
    case 145:
      return reduce(RULE_12, 0);
    case 162:
      return reduce(RULE_12, 0);
    case 164:
      return reduce(RULE_12, 0);
    case 105:
      return reduce(RULE_12, 0);
    case 179:
      return reduce(RULE_12, 0);
    case 177:
      return reduce(RULE_12, 0);
    case 72:
      return reduce(RULE_12, 0);
    case 116:
      return reduce(RULE_12, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action189(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto189(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 320;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action190(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(321);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(322);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(97);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, LPAREN});
    }
  }

  private final int goto190(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 323;
    default: return -1;
    }
  }

  private final boolean action191(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 83:
      return reduce(RULE_8, 1);
    case 105:
      return reduce(RULE_8, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, LBRACE, DOT});
    }
  }

  private final boolean action192(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(60);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(71);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(324);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 162:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, STATIC_KEYWORD, HASH, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto192(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 80;
    case 9: return 81;
    case 11: return 82;
    case 27: return 83;
    case 28: return 84;
    case 8: return 85;
    case 48: return 86;
    case 49: return 87;
    case 33: return 88;
    case 7: return 89;
    case 30: return 90;
    case 10: return 91;
    default: return -1;
    }
  }

  private final boolean action193(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_7, 0);
    case 139:
      return reduce(RULE_7, 0);
    case 137:
      return reduce(RULE_7, 0);
    case 175:
      return reduce(RULE_7, 0);
    case 157:
      return reduce(RULE_7, 0);
    case 155:
      return reduce(RULE_7, 0);
    case 106:
      return reduce(RULE_7, 0);
    case 160:
      return reduce(RULE_7, 0);
    case 130:
      return reduce(RULE_7, 0);
    case 129:
      return reduce(RULE_7, 0);
    case 102:
      return reduce(RULE_7, 0);
    case 167:
      return reduce(RULE_7, 0);
    case 153:
      return reduce(RULE_7, 0);
    case 75:
      return reduce(RULE_7, 0);
    case 174:
      return reduce(RULE_7, 0);
    case 180:
      return reduce(RULE_7, 0);
    case 166:
      return reduce(RULE_7, 0);
    case 107:
      return reduce(RULE_7, 0);
    case 143:
      return reduce(RULE_7, 0);
    case 176:
      return reduce(RULE_7, 0);
    case 132:
      return reduce(RULE_7, 0);
    case 121:
      return reduce(RULE_7, 0);
    case 156:
      return reduce(RULE_7, 0);
    case 145:
      return reduce(RULE_7, 0);
    case 162:
      return reduce(RULE_7, 0);
    case 164:
      return reduce(RULE_7, 0);
    case 105:
      return reduce(RULE_7, 0);
    case 179:
      return reduce(RULE_7, 0);
    case 177:
      return reduce(RULE_7, 0);
    case 72:
      return reduce(RULE_7, 0);
    case 116:
      return reduce(RULE_7, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto193(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 6: return 325;
    default: return -1;
    }
  }

  private final boolean action194(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_29, 0);
    }
    switch (token.getType().ordinal())
    {
    case 129:
      return reduce(RULE_29, 0);
    case 136:
      return reduce(RULE_29, 0);
    case 149:
      return reduce(RULE_29, 0);
    case 167:
      return reduce(RULE_29, 0);
    case 164:
      return reduce(RULE_29, 0);
    case 75:
      return reduce(RULE_29, 0);
    case 154:
      return reduce(RULE_29, 0);
    case 157:
      return reduce(RULE_29, 0);
    case 156:
      return reduce(RULE_29, 0);
    case 135:
      return reduce(RULE_29, 0);
    case 177:
      return reduce(RULE_29, 0);
    case 143:
      return reduce(RULE_29, 0);
    default: throw new BadTokenException(token, new Object[] {null, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, NATIVE_KEYWORD, INTERFACE_KEYWORD, CLASS_KEYWORD, MUTABLE_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action195(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_30, 1);
    case 105:
      return reduce(RULE_30, 1);
    case 171:
      return reduce(RULE_30, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE, THROWS_KEYWORD});
    }
  }

  private final boolean action196(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(326);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(327);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action197(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto197(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 328;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action198(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 178:
      stateStack.addFirst(329);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNCHECKED_KEYWORD, NAME});
    }
  }

  private final int goto198(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 32: return 330;
    case 28: return 331;
    default: return -1;
    }
  }

  private final boolean action199(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto199(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 332;
    default: return -1;
    }
  }

  private final boolean action200(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto200(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 100;
    case 50: return 333;
    case 29: return 334;
    case 49: return 103;
    case 30: return 104;
    default: return -1;
    }
  }

  private final boolean action201(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 29);
    case 137:
      return reduce(RULE_9, 29);
    case 110:
      return reduce(RULE_9, 29);
    case 79:
      return reduce(RULE_9, 29);
    case 106:
      return reduce(RULE_9, 29);
    case 117:
      return reduce(RULE_9, 29);
    case 102:
      return reduce(RULE_9, 29);
    case 167:
      return reduce(RULE_9, 29);
    case 152:
      return reduce(RULE_9, 29);
    case 94:
      return reduce(RULE_9, 29);
    case 80:
      return reduce(RULE_9, 29);
    case 98:
      return reduce(RULE_9, 29);
    case 171:
      return reduce(RULE_9, 29);
    case 86:
      return reduce(RULE_9, 29);
    case 83:
      return reduce(RULE_9, 29);
    case 122:
      return reduce(RULE_9, 29);
    case 108:
      return reduce(RULE_9, 29);
    case 92:
      return reduce(RULE_9, 29);
    case 128:
      return reduce(RULE_9, 29);
    case 104:
      return reduce(RULE_9, 29);
    case 82:
      return reduce(RULE_9, 29);
    case 116:
      return reduce(RULE_9, 29);
    case 85:
      return reduce(RULE_9, 29);
    case 149:
      return reduce(RULE_9, 29);
    case 157:
      return reduce(RULE_9, 29);
    case 103:
      return reduce(RULE_9, 29);
    case 147:
      return reduce(RULE_9, 29);
    case 129:
      return reduce(RULE_9, 29);
    case 119:
      return reduce(RULE_9, 29);
    case 75:
      return reduce(RULE_9, 29);
    case 100:
      return reduce(RULE_9, 29);
    case 107:
      return reduce(RULE_9, 29);
    case 143:
      return reduce(RULE_9, 29);
    case 112:
      return reduce(RULE_9, 29);
    case 120:
      return reduce(RULE_9, 29);
    case 121:
      return reduce(RULE_9, 29);
    case 124:
      return reduce(RULE_9, 29);
    case 156:
      return reduce(RULE_9, 29);
    case 123:
      return reduce(RULE_9, 29);
    case 99:
      return reduce(RULE_9, 29);
    case 125:
      return reduce(RULE_9, 29);
    case 165:
      return reduce(RULE_9, 29);
    case 77:
      return reduce(RULE_9, 29);
    case 164:
      return reduce(RULE_9, 29);
    case 84:
      return reduce(RULE_9, 29);
    case 105:
      return reduce(RULE_9, 29);
    case 114:
      return reduce(RULE_9, 29);
    case 72:
      return reduce(RULE_9, 29);
    case 177:
      return reduce(RULE_9, 29);
    case 90:
      return reduce(RULE_9, 29);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action202(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_31, 0);
    case 137:
      return reduce(RULE_31, 0);
    case 110:
      return reduce(RULE_31, 0);
    case 79:
      return reduce(RULE_31, 0);
    case 106:
      return reduce(RULE_31, 0);
    case 117:
      return reduce(RULE_31, 0);
    case 102:
      return reduce(RULE_31, 0);
    case 167:
      return reduce(RULE_31, 0);
    case 152:
      return reduce(RULE_31, 0);
    case 80:
      return reduce(RULE_31, 0);
    case 94:
      return reduce(RULE_31, 0);
    case 98:
      return reduce(RULE_31, 0);
    case 86:
      return reduce(RULE_31, 0);
    case 171:
      return reduce(RULE_31, 0);
    case 83:
      return reduce(RULE_31, 0);
    case 122:
      return reduce(RULE_31, 0);
    case 108:
      return reduce(RULE_31, 0);
    case 92:
      return reduce(RULE_31, 0);
    case 128:
      return reduce(RULE_31, 0);
    case 104:
      return reduce(RULE_31, 0);
    case 82:
      return reduce(RULE_31, 0);
    case 116:
      return reduce(RULE_31, 0);
    case 118:
      return reduce(RULE_31, 0);
    case 85:
      return reduce(RULE_31, 0);
    case 149:
      return reduce(RULE_31, 0);
    case 157:
      return reduce(RULE_31, 0);
    case 103:
      return reduce(RULE_31, 0);
    case 96:
      return reduce(RULE_31, 0);
    case 147:
      return reduce(RULE_31, 0);
    case 129:
      return reduce(RULE_31, 0);
    case 119:
      return reduce(RULE_31, 0);
    case 75:
      return reduce(RULE_31, 0);
    case 100:
      return reduce(RULE_31, 0);
    case 107:
      return reduce(RULE_31, 0);
    case 143:
      return reduce(RULE_31, 0);
    case 112:
      return reduce(RULE_31, 0);
    case 120:
      return reduce(RULE_31, 0);
    case 121:
      return reduce(RULE_31, 0);
    case 124:
      return reduce(RULE_31, 0);
    case 123:
      return reduce(RULE_31, 0);
    case 156:
      return reduce(RULE_31, 0);
    case 99:
      return reduce(RULE_31, 0);
    case 165:
      return reduce(RULE_31, 0);
    case 125:
      return reduce(RULE_31, 0);
    case 77:
      return reduce(RULE_31, 0);
    case 164:
      return reduce(RULE_31, 0);
    case 84:
      return reduce(RULE_31, 0);
    case 105:
      return reduce(RULE_31, 0);
    case 114:
      return reduce(RULE_31, 0);
    case 72:
      return reduce(RULE_31, 0);
    case 177:
      return reduce(RULE_31, 0);
    case 90:
      return reduce(RULE_31, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, THROWS_KEYWORD, DOUBLE_EQUALS, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, QUESTION_MARK_DOT, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, DOT, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action203(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto203(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 100;
    case 50: return 335;
    case 29: return 336;
    case 49: return 103;
    case 30: return 104;
    default: return -1;
    }
  }

  private final boolean action204(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto204(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 100;
    case 50: return 337;
    case 29: return 338;
    case 49: return 103;
    case 30: return 104;
    default: return -1;
    }
  }

  private final boolean action205(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto205(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 339;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action206(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 124:
      return reduce(RULE_14, 0);
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto206(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 340;
    default: return -1;
    }
  }

  private final boolean action207(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 25);
    case 137:
      return reduce(RULE_9, 25);
    case 110:
      return reduce(RULE_9, 25);
    case 79:
      return reduce(RULE_9, 25);
    case 106:
      return reduce(RULE_9, 25);
    case 117:
      return reduce(RULE_9, 25);
    case 102:
      return reduce(RULE_9, 25);
    case 167:
      return reduce(RULE_9, 25);
    case 152:
      return reduce(RULE_9, 25);
    case 80:
      return reduce(RULE_9, 25);
    case 94:
      return reduce(RULE_9, 25);
    case 98:
      return reduce(RULE_9, 25);
    case 171:
      return reduce(RULE_9, 25);
    case 86:
      return reduce(RULE_9, 25);
    case 83:
      return reduce(RULE_9, 25);
    case 122:
      return reduce(RULE_9, 25);
    case 108:
      return reduce(RULE_9, 25);
    case 92:
      return reduce(RULE_9, 25);
    case 128:
      return reduce(RULE_9, 25);
    case 104:
      return reduce(RULE_9, 25);
    case 82:
      return reduce(RULE_9, 25);
    case 116:
      return reduce(RULE_9, 25);
    case 85:
      return reduce(RULE_9, 25);
    case 149:
      return reduce(RULE_9, 25);
    case 157:
      return reduce(RULE_9, 25);
    case 103:
      return reduce(RULE_9, 25);
    case 147:
      return reduce(RULE_9, 25);
    case 129:
      return reduce(RULE_9, 25);
    case 119:
      return reduce(RULE_9, 25);
    case 75:
      return reduce(RULE_9, 25);
    case 100:
      return reduce(RULE_9, 25);
    case 107:
      return reduce(RULE_9, 25);
    case 143:
      return reduce(RULE_9, 25);
    case 112:
      return reduce(RULE_9, 25);
    case 120:
      return reduce(RULE_9, 25);
    case 121:
      return reduce(RULE_9, 25);
    case 124:
      return reduce(RULE_9, 25);
    case 156:
      return reduce(RULE_9, 25);
    case 123:
      return reduce(RULE_9, 25);
    case 99:
      return reduce(RULE_9, 25);
    case 125:
      return reduce(RULE_9, 25);
    case 165:
      return reduce(RULE_9, 25);
    case 77:
      return reduce(RULE_9, 25);
    case 164:
      return reduce(RULE_9, 25);
    case 84:
      return reduce(RULE_9, 25);
    case 105:
      return reduce(RULE_9, 25);
    case 114:
      return reduce(RULE_9, 25);
    case 72:
      return reduce(RULE_9, 25);
    case 177:
      return reduce(RULE_9, 25);
    case 90:
      return reduce(RULE_9, 25);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action208(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_32, 1);
    case 171:
      return reduce(RULE_32, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final boolean action209(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto209(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 341;
    default: return -1;
    }
  }

  private final boolean action210(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_32, 0);
    case 171:
      return reduce(RULE_32, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final boolean action211(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 173:
      stateStack.addFirst(112);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 163:
      stateStack.addFirst(116);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(118);
      tokenStack.addFirst(token);
      return true;
    case 170:
      stateStack.addFirst(119);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(121);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(122);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(123);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(125);
      tokenStack.addFirst(token);
      return true;
    case 146:
      stateStack.addFirst(126);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 138:
      stateStack.addFirst(129);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(130);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 131:
      stateStack.addFirst(131);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 168:
      stateStack.addFirst(133);
      tokenStack.addFirst(token);
      return true;
    case 181:
      stateStack.addFirst(134);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, FLOATING_LITERAL, INT_KEYWORD, STATIC_KEYWORD, HASH, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final int goto211(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 135;
    case 71: return 137;
    case 66: return 139;
    case 64: return 140;
    case 39: return 141;
    case 28: return 302;
    case 46: return 143;
    case 35: return 144;
    case 38: return 146;
    case 45: return 145;
    case 49: return 304;
    case 41: return 148;
    case 44: return 149;
    case 40: return 150;
    case 43: return 151;
    case 48: return 152;
    case 30: return 305;
    case 65: return 154;
    case 68: return 156;
    case 15: return 155;
    case 42: return 157;
    case 26: return 158;
    case 34: return 159;
    case 67: return 160;
    case 37: return 161;
    case 14: return 162;
    case 13: return 163;
    case 63: return 164;
    case 33: return 166;
    default: return -1;
    }
  }

  private final boolean action212(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 144:
      stateStack.addFirst(342);
      tokenStack.addFirst(token);
      return true;
    case 134:
      stateStack.addFirst(343);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {FINALLY_KEYWORD, CATCH_KEYWORD});
    }
  }

  private final boolean action213(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto213(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 344;
    case 67: return 230;
    case 28: return 345;
    case 71: return 346;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action214(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto214(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 348;
    case 67: return 230;
    case 28: return 345;
    case 71: return 349;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action215(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_19, 1);
    case 149:
      return reduce(RULE_19, 1);
    case 137:
      return reduce(RULE_19, 1);
    case 110:
      return reduce(RULE_19, 1);
    case 157:
      return reduce(RULE_19, 1);
    case 96:
      return reduce(RULE_18, 1);
    case 103:
      return reduce(RULE_19, 1);
    case 147:
      return reduce(RULE_19, 1);
    case 129:
      return reduce(RULE_19, 1);
    case 117:
      return reduce(RULE_19, 1);
    case 167:
      return reduce(RULE_19, 1);
    case 119:
      return reduce(RULE_19, 1);
    case 75:
      return reduce(RULE_19, 1);
    case 100:
      return reduce(RULE_19, 1);
    case 152:
      return reduce(RULE_19, 1);
    case 80:
      return reduce(RULE_19, 1);
    case 94:
      return reduce(RULE_19, 1);
    case 107:
      return reduce(RULE_19, 1);
    case 143:
      return reduce(RULE_19, 1);
    case 98:
      return reduce(RULE_19, 1);
    case 112:
      return reduce(RULE_19, 1);
    case 86:
      return reduce(RULE_19, 1);
    case 120:
      return reduce(RULE_19, 1);
    case 121:
      return reduce(RULE_19, 1);
    case 124:
      return reduce(RULE_19, 1);
    case 123:
      return reduce(RULE_19, 1);
    case 156:
      return reduce(RULE_19, 1);
    case 83:
      return reduce(RULE_19, 1);
    case 99:
      return reduce(RULE_19, 1);
    case 122:
      return reduce(RULE_19, 1);
    case 125:
      return reduce(RULE_19, 1);
    case 165:
      return reduce(RULE_19, 1);
    case 77:
      return reduce(RULE_19, 1);
    case 108:
      return reduce(RULE_19, 1);
    case 92:
      return reduce(RULE_19, 1);
    case 164:
      return reduce(RULE_19, 1);
    case 84:
      return reduce(RULE_19, 1);
    case 104:
      return reduce(RULE_19, 1);
    case 105:
      return reduce(RULE_19, 1);
    case 114:
      return reduce(RULE_19, 1);
    case 82:
      return reduce(RULE_19, 1);
    case 177:
      return reduce(RULE_19, 1);
    case 90:
      return reduce(RULE_19, 1);
    case 116:
      return reduce(RULE_19, 1);
    case 118:
      return reduce(RULE_18, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action216(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 103:
      stateStack.addFirst(350);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LANGLE});
    }
  }

  private final boolean action217(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto217(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 351;
    case 67: return 230;
    case 28: return 345;
    case 71: return 352;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action218(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 114:
      stateStack.addFirst(353);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(354);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_33, 0);
    case 137:
      return reduce(RULE_33, 0);
    case 157:
      return reduce(RULE_33, 0);
    case 103:
      return reduce(RULE_33, 0);
    case 147:
      return reduce(RULE_33, 0);
    case 129:
      return reduce(RULE_33, 0);
    case 117:
      return reduce(RULE_33, 0);
    case 167:
      return reduce(RULE_33, 0);
    case 119:
      return reduce(RULE_33, 0);
    case 75:
      return reduce(RULE_33, 0);
    case 152:
      return reduce(RULE_33, 0);
    case 80:
      return reduce(RULE_33, 0);
    case 143:
      return reduce(RULE_33, 0);
    case 112:
      return reduce(RULE_33, 0);
    case 86:
      return reduce(RULE_33, 0);
    case 120:
      return reduce(RULE_33, 0);
    case 121:
      return reduce(RULE_33, 0);
    case 124:
      return reduce(RULE_33, 0);
    case 156:
      return reduce(RULE_33, 0);
    case 123:
      return reduce(RULE_33, 0);
    case 83:
      return reduce(RULE_33, 0);
    case 122:
      return reduce(RULE_33, 0);
    case 99:
      return reduce(RULE_33, 0);
    case 165:
      return reduce(RULE_33, 0);
    case 77:
      return reduce(RULE_33, 0);
    case 92:
      return reduce(RULE_33, 0);
    case 164:
      return reduce(RULE_33, 0);
    case 84:
      return reduce(RULE_33, 0);
    case 105:
      return reduce(RULE_33, 0);
    case 104:
      return reduce(RULE_33, 0);
    case 82:
      return reduce(RULE_33, 0);
    case 177:
      return reduce(RULE_33, 0);
    case 116:
      return reduce(RULE_33, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, QUESTION_MARK});
    }
  }

  private final boolean action219(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(355);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 0);
    case 137:
      return reduce(RULE_34, 0);
    case 110:
      return reduce(RULE_34, 0);
    case 157:
      return reduce(RULE_34, 0);
    case 103:
      return reduce(RULE_34, 0);
    case 147:
      return reduce(RULE_34, 0);
    case 129:
      return reduce(RULE_34, 0);
    case 117:
      return reduce(RULE_34, 0);
    case 167:
      return reduce(RULE_34, 0);
    case 119:
      return reduce(RULE_34, 0);
    case 75:
      return reduce(RULE_34, 0);
    case 100:
      return reduce(RULE_34, 0);
    case 152:
      return reduce(RULE_34, 0);
    case 80:
      return reduce(RULE_34, 0);
    case 143:
      return reduce(RULE_34, 0);
    case 112:
      return reduce(RULE_34, 0);
    case 86:
      return reduce(RULE_34, 0);
    case 120:
      return reduce(RULE_34, 0);
    case 121:
      return reduce(RULE_34, 0);
    case 124:
      return reduce(RULE_34, 0);
    case 156:
      return reduce(RULE_34, 0);
    case 123:
      return reduce(RULE_34, 0);
    case 83:
      return reduce(RULE_34, 0);
    case 99:
      return reduce(RULE_34, 0);
    case 122:
      return reduce(RULE_34, 0);
    case 125:
      return reduce(RULE_34, 0);
    case 165:
      return reduce(RULE_34, 0);
    case 77:
      return reduce(RULE_34, 0);
    case 92:
      return reduce(RULE_34, 0);
    case 108:
      return reduce(RULE_34, 0);
    case 164:
      return reduce(RULE_34, 0);
    case 84:
      return reduce(RULE_34, 0);
    case 105:
      return reduce(RULE_34, 0);
    case 104:
      return reduce(RULE_34, 0);
    case 114:
      return reduce(RULE_34, 0);
    case 82:
      return reduce(RULE_34, 0);
    case 177:
      return reduce(RULE_34, 0);
    case 90:
      return reduce(RULE_34, 0);
    case 116:
      return reduce(RULE_34, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action220(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(360);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(364);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(367);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(372);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(373);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(375);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(379);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, PERCENT, LANGLE, LPAREN, QUESTION_MARK_COLON, RANGLE, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, EXCLAIMATION_MARK_EQUALS, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, DOUBLE_AMPERSAND, LANGLE_EQUALS, PLUS, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto220(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action221(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 85:
      stateStack.addFirst(380);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON});
    }
  }

  private final boolean action222(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 117:
      stateStack.addFirst(381);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(382);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(383);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(384);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(385);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(386);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(387);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_35, 0);
    case 137:
      return reduce(RULE_35, 0);
    case 121:
      return reduce(RULE_35, 0);
    case 124:
      return reduce(RULE_35, 0);
    case 157:
      return reduce(RULE_35, 0);
    case 123:
      return reduce(RULE_35, 0);
    case 156:
      return reduce(RULE_35, 0);
    case 83:
      return reduce(RULE_35, 0);
    case 122:
      return reduce(RULE_35, 0);
    case 165:
      return reduce(RULE_35, 0);
    case 147:
      return reduce(RULE_35, 0);
    case 129:
      return reduce(RULE_35, 0);
    case 167:
      return reduce(RULE_35, 0);
    case 164:
      return reduce(RULE_35, 0);
    case 75:
      return reduce(RULE_35, 0);
    case 105:
      return reduce(RULE_35, 0);
    case 82:
      return reduce(RULE_35, 0);
    case 177:
      return reduce(RULE_35, 0);
    case 143:
      return reduce(RULE_35, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, UNBACKED_KEYWORD, COLON, QUESTION_MARK});
    }
  }

  private final boolean action223(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(389);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(390);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_36, 0);
    case 137:
      return reduce(RULE_36, 0);
    case 157:
      return reduce(RULE_36, 0);
    case 103:
      return reduce(RULE_36, 0);
    case 147:
      return reduce(RULE_36, 0);
    case 129:
      return reduce(RULE_36, 0);
    case 117:
      return reduce(RULE_36, 0);
    case 167:
      return reduce(RULE_36, 0);
    case 119:
      return reduce(RULE_36, 0);
    case 75:
      return reduce(RULE_36, 0);
    case 152:
      return reduce(RULE_36, 0);
    case 80:
      return reduce(RULE_36, 0);
    case 143:
      return reduce(RULE_36, 0);
    case 112:
      return reduce(RULE_36, 0);
    case 86:
      return reduce(RULE_36, 0);
    case 120:
      return reduce(RULE_36, 0);
    case 121:
      return reduce(RULE_36, 0);
    case 124:
      return reduce(RULE_36, 0);
    case 156:
      return reduce(RULE_36, 0);
    case 123:
      return reduce(RULE_36, 0);
    case 83:
      return reduce(RULE_36, 0);
    case 122:
      return reduce(RULE_36, 0);
    case 99:
      return reduce(RULE_36, 0);
    case 165:
      return reduce(RULE_36, 0);
    case 77:
      return reduce(RULE_36, 0);
    case 92:
      return reduce(RULE_36, 0);
    case 108:
      return reduce(RULE_36, 0);
    case 164:
      return reduce(RULE_36, 0);
    case 84:
      return reduce(RULE_36, 0);
    case 105:
      return reduce(RULE_36, 0);
    case 104:
      return reduce(RULE_36, 0);
    case 114:
      return reduce(RULE_36, 0);
    case 82:
      return reduce(RULE_36, 0);
    case 177:
      return reduce(RULE_36, 0);
    case 116:
      return reduce(RULE_36, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action224(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(392);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(393);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_26, 1);
    case 85:
      return reduce(RULE_11, 1);
    case 110:
      return reduce(RULE_26, 1);
    case 103:
      return reduce(RULE_26, 1);
    case 106:
      return reduce(RULE_26, 1);
    case 117:
      return reduce(RULE_26, 1);
    case 119:
      return reduce(RULE_26, 1);
    case 100:
      return reduce(RULE_26, 1);
    case 152:
      return reduce(RULE_26, 1);
    case 80:
      return reduce(RULE_26, 1);
    case 94:
      return reduce(RULE_26, 1);
    case 98:
      return reduce(RULE_26, 1);
    case 112:
      return reduce(RULE_26, 1);
    case 86:
      return reduce(RULE_26, 1);
    case 120:
      return reduce(RULE_26, 1);
    case 122:
      return reduce(RULE_15, 1);
    case 99:
      return reduce(RULE_26, 1);
    case 125:
      return reduce(RULE_26, 1);
    case 77:
      return reduce(RULE_26, 1);
    case 92:
      return reduce(RULE_26, 1);
    case 108:
      return reduce(RULE_26, 1);
    case 84:
      return reduce(RULE_26, 1);
    case 104:
      return reduce(RULE_26, 1);
    case 114:
      return reduce(RULE_26, 1);
    case 90:
      return reduce(RULE_26, 1);
    case 116:
      return reduce(RULE_26, 1);
    case 118:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, DOUBLE_COLON, PERCENT, LANGLE, DOT, LPAREN, QUESTION_MARK_COLON, RANGLE, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, DOUBLE_AMPERSAND, LANGLE_EQUALS, PLUS, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action225(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(394);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(284);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOT, QUESTION_MARK_DOT});
    }
  }

  private final boolean action226(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 15);
    case 149:
      return reduce(RULE_17, 15);
    case 137:
      return reduce(RULE_17, 15);
    case 110:
      return reduce(RULE_17, 15);
    case 157:
      return reduce(RULE_17, 15);
    case 96:
      return reduce(RULE_17, 15);
    case 103:
      return reduce(RULE_17, 15);
    case 106:
      return reduce(RULE_17, 15);
    case 147:
      return reduce(RULE_17, 15);
    case 129:
      return reduce(RULE_17, 15);
    case 117:
      return reduce(RULE_17, 15);
    case 167:
      return reduce(RULE_17, 15);
    case 119:
      return reduce(RULE_17, 15);
    case 75:
      return reduce(RULE_17, 15);
    case 100:
      return reduce(RULE_17, 15);
    case 152:
      return reduce(RULE_17, 15);
    case 80:
      return reduce(RULE_17, 15);
    case 94:
      return reduce(RULE_17, 15);
    case 107:
      return reduce(RULE_17, 15);
    case 143:
      return reduce(RULE_17, 15);
    case 98:
      return reduce(RULE_17, 15);
    case 112:
      return reduce(RULE_17, 15);
    case 86:
      return reduce(RULE_17, 15);
    case 120:
      return reduce(RULE_17, 15);
    case 121:
      return reduce(RULE_17, 15);
    case 124:
      return reduce(RULE_17, 15);
    case 123:
      return reduce(RULE_17, 15);
    case 156:
      return reduce(RULE_17, 15);
    case 83:
      return reduce(RULE_17, 15);
    case 99:
      return reduce(RULE_17, 15);
    case 122:
      return reduce(RULE_17, 15);
    case 125:
      return reduce(RULE_17, 15);
    case 165:
      return reduce(RULE_17, 15);
    case 77:
      return reduce(RULE_17, 15);
    case 108:
      return reduce(RULE_17, 15);
    case 92:
      return reduce(RULE_17, 15);
    case 164:
      return reduce(RULE_17, 15);
    case 84:
      return reduce(RULE_17, 15);
    case 104:
      return reduce(RULE_17, 15);
    case 105:
      return reduce(RULE_17, 15);
    case 114:
      return reduce(RULE_17, 15);
    case 82:
      return reduce(RULE_17, 15);
    case 177:
      return reduce(RULE_17, 15);
    case 90:
      return reduce(RULE_17, 15);
    case 116:
      return reduce(RULE_17, 15);
    case 118:
      return reduce(RULE_17, 15);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action227(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(395);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action228(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_37, 0);
    case 149:
      return reduce(RULE_37, 0);
    case 137:
      return reduce(RULE_37, 0);
    case 110:
      return reduce(RULE_37, 0);
    case 157:
      return reduce(RULE_37, 0);
    case 103:
      return reduce(RULE_37, 0);
    case 147:
      return reduce(RULE_37, 0);
    case 129:
      return reduce(RULE_37, 0);
    case 117:
      return reduce(RULE_37, 0);
    case 167:
      return reduce(RULE_37, 0);
    case 119:
      return reduce(RULE_37, 0);
    case 75:
      return reduce(RULE_37, 0);
    case 100:
      return reduce(RULE_37, 0);
    case 152:
      return reduce(RULE_37, 0);
    case 80:
      return reduce(RULE_37, 0);
    case 94:
      return reduce(RULE_37, 0);
    case 143:
      return reduce(RULE_37, 0);
    case 98:
      return reduce(RULE_37, 0);
    case 112:
      return reduce(RULE_37, 0);
    case 86:
      return reduce(RULE_37, 0);
    case 120:
      return reduce(RULE_37, 0);
    case 121:
      return reduce(RULE_37, 0);
    case 124:
      return reduce(RULE_37, 0);
    case 123:
      return reduce(RULE_37, 0);
    case 156:
      return reduce(RULE_37, 0);
    case 83:
      return reduce(RULE_37, 0);
    case 99:
      return reduce(RULE_37, 0);
    case 122:
      return reduce(RULE_37, 0);
    case 125:
      return reduce(RULE_37, 0);
    case 165:
      return reduce(RULE_37, 0);
    case 77:
      return reduce(RULE_37, 0);
    case 108:
      return reduce(RULE_37, 0);
    case 92:
      return reduce(RULE_37, 0);
    case 164:
      return reduce(RULE_37, 0);
    case 84:
      return reduce(RULE_37, 0);
    case 104:
      return reduce(RULE_37, 0);
    case 105:
      return reduce(RULE_37, 0);
    case 114:
      return reduce(RULE_37, 0);
    case 82:
      return reduce(RULE_37, 0);
    case 177:
      return reduce(RULE_37, 0);
    case 90:
      return reduce(RULE_37, 0);
    case 116:
      return reduce(RULE_37, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action229(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 0);
    case 137:
      return reduce(RULE_38, 0);
    case 157:
      return reduce(RULE_38, 0);
    case 147:
      return reduce(RULE_38, 0);
    case 129:
      return reduce(RULE_38, 0);
    case 167:
      return reduce(RULE_38, 0);
    case 117:
      return reduce(RULE_38, 0);
    case 75:
      return reduce(RULE_38, 0);
    case 80:
      return reduce(RULE_38, 0);
    case 143:
      return reduce(RULE_38, 0);
    case 112:
      return reduce(RULE_38, 0);
    case 121:
      return reduce(RULE_38, 0);
    case 124:
      return reduce(RULE_38, 0);
    case 123:
      return reduce(RULE_38, 0);
    case 156:
      return reduce(RULE_38, 0);
    case 83:
      return reduce(RULE_38, 0);
    case 122:
      return reduce(RULE_38, 0);
    case 165:
      return reduce(RULE_38, 0);
    case 77:
      return reduce(RULE_38, 0);
    case 92:
      return reduce(RULE_38, 0);
    case 164:
      return reduce(RULE_38, 0);
    case 84:
      return reduce(RULE_38, 0);
    case 105:
      return reduce(RULE_38, 0);
    case 177:
      return reduce(RULE_38, 0);
    case 82:
      return reduce(RULE_38, 0);
    case 116:
      return reduce(RULE_38, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action230(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 17);
    case 149:
      return reduce(RULE_17, 17);
    case 137:
      return reduce(RULE_17, 17);
    case 110:
      return reduce(RULE_17, 17);
    case 157:
      return reduce(RULE_17, 17);
    case 96:
      return reduce(RULE_17, 17);
    case 103:
      return reduce(RULE_17, 17);
    case 106:
      return reduce(RULE_17, 17);
    case 147:
      return reduce(RULE_17, 17);
    case 129:
      return reduce(RULE_17, 17);
    case 117:
      return reduce(RULE_17, 17);
    case 167:
      return reduce(RULE_17, 17);
    case 119:
      return reduce(RULE_17, 17);
    case 75:
      return reduce(RULE_17, 17);
    case 100:
      return reduce(RULE_17, 17);
    case 152:
      return reduce(RULE_17, 17);
    case 80:
      return reduce(RULE_17, 17);
    case 94:
      return reduce(RULE_17, 17);
    case 107:
      return reduce(RULE_17, 17);
    case 143:
      return reduce(RULE_17, 17);
    case 98:
      return reduce(RULE_17, 17);
    case 112:
      return reduce(RULE_17, 17);
    case 86:
      return reduce(RULE_17, 17);
    case 120:
      return reduce(RULE_17, 17);
    case 121:
      return reduce(RULE_17, 17);
    case 124:
      return reduce(RULE_17, 17);
    case 123:
      return reduce(RULE_17, 17);
    case 156:
      return reduce(RULE_17, 17);
    case 83:
      return reduce(RULE_17, 17);
    case 99:
      return reduce(RULE_17, 17);
    case 122:
      return reduce(RULE_17, 17);
    case 125:
      return reduce(RULE_17, 17);
    case 165:
      return reduce(RULE_17, 17);
    case 77:
      return reduce(RULE_17, 17);
    case 108:
      return reduce(RULE_17, 17);
    case 92:
      return reduce(RULE_17, 17);
    case 164:
      return reduce(RULE_17, 17);
    case 84:
      return reduce(RULE_17, 17);
    case 104:
      return reduce(RULE_17, 17);
    case 105:
      return reduce(RULE_17, 17);
    case 114:
      return reduce(RULE_17, 17);
    case 82:
      return reduce(RULE_17, 17);
    case 177:
      return reduce(RULE_17, 17);
    case 90:
      return reduce(RULE_17, 17);
    case 116:
      return reduce(RULE_17, 17);
    case 118:
      return reduce(RULE_17, 17);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action231(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(396);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(397);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_26, 0);
    case 85:
      return reduce(RULE_11, 0);
    case 110:
      return reduce(RULE_26, 0);
    case 103:
      return reduce(RULE_26, 0);
    case 106:
      return reduce(RULE_26, 0);
    case 117:
      return reduce(RULE_26, 0);
    case 119:
      return reduce(RULE_26, 0);
    case 100:
      return reduce(RULE_26, 0);
    case 152:
      return reduce(RULE_26, 0);
    case 80:
      return reduce(RULE_26, 0);
    case 94:
      return reduce(RULE_26, 0);
    case 98:
      return reduce(RULE_26, 0);
    case 112:
      return reduce(RULE_26, 0);
    case 86:
      return reduce(RULE_26, 0);
    case 120:
      return reduce(RULE_26, 0);
    case 122:
      return reduce(RULE_15, 0);
    case 99:
      return reduce(RULE_26, 0);
    case 125:
      return reduce(RULE_26, 0);
    case 77:
      return reduce(RULE_26, 0);
    case 92:
      return reduce(RULE_26, 0);
    case 108:
      return reduce(RULE_26, 0);
    case 84:
      return reduce(RULE_26, 0);
    case 104:
      return reduce(RULE_26, 0);
    case 114:
      return reduce(RULE_26, 0);
    case 90:
      return reduce(RULE_26, 0);
    case 116:
      return reduce(RULE_26, 0);
    case 118:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, DOUBLE_COLON, PERCENT, LANGLE, DOT, LPAREN, QUESTION_MARK_COLON, RANGLE, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, DOUBLE_AMPERSAND, LANGLE_EQUALS, PLUS, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action232(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(398);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_39, 0);
    case 149:
      return reduce(RULE_39, 0);
    case 137:
      return reduce(RULE_39, 0);
    case 110:
      return reduce(RULE_39, 0);
    case 157:
      return reduce(RULE_39, 0);
    case 103:
      return reduce(RULE_39, 0);
    case 147:
      return reduce(RULE_39, 0);
    case 129:
      return reduce(RULE_39, 0);
    case 117:
      return reduce(RULE_39, 0);
    case 167:
      return reduce(RULE_39, 0);
    case 119:
      return reduce(RULE_39, 0);
    case 75:
      return reduce(RULE_39, 0);
    case 100:
      return reduce(RULE_39, 0);
    case 152:
      return reduce(RULE_39, 0);
    case 80:
      return reduce(RULE_39, 0);
    case 94:
      return reduce(RULE_39, 0);
    case 143:
      return reduce(RULE_39, 0);
    case 112:
      return reduce(RULE_39, 0);
    case 86:
      return reduce(RULE_39, 0);
    case 120:
      return reduce(RULE_39, 0);
    case 121:
      return reduce(RULE_39, 0);
    case 124:
      return reduce(RULE_39, 0);
    case 156:
      return reduce(RULE_39, 0);
    case 123:
      return reduce(RULE_39, 0);
    case 83:
      return reduce(RULE_39, 0);
    case 99:
      return reduce(RULE_39, 0);
    case 122:
      return reduce(RULE_39, 0);
    case 125:
      return reduce(RULE_39, 0);
    case 165:
      return reduce(RULE_39, 0);
    case 77:
      return reduce(RULE_39, 0);
    case 92:
      return reduce(RULE_39, 0);
    case 108:
      return reduce(RULE_39, 0);
    case 164:
      return reduce(RULE_39, 0);
    case 84:
      return reduce(RULE_39, 0);
    case 104:
      return reduce(RULE_39, 0);
    case 105:
      return reduce(RULE_39, 0);
    case 114:
      return reduce(RULE_39, 0);
    case 82:
      return reduce(RULE_39, 0);
    case 177:
      return reduce(RULE_39, 0);
    case 90:
      return reduce(RULE_39, 0);
    case 116:
      return reduce(RULE_39, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action233(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_40, 0);
    case 149:
      return reduce(RULE_40, 0);
    case 137:
      return reduce(RULE_40, 0);
    case 110:
      return reduce(RULE_40, 0);
    case 157:
      return reduce(RULE_40, 0);
    case 103:
      return reduce(RULE_40, 0);
    case 147:
      return reduce(RULE_40, 0);
    case 129:
      return reduce(RULE_40, 0);
    case 117:
      return reduce(RULE_40, 0);
    case 167:
      return reduce(RULE_40, 0);
    case 119:
      return reduce(RULE_40, 0);
    case 75:
      return reduce(RULE_40, 0);
    case 100:
      return reduce(RULE_40, 0);
    case 152:
      return reduce(RULE_40, 0);
    case 80:
      return reduce(RULE_40, 0);
    case 94:
      return reduce(RULE_40, 0);
    case 143:
      return reduce(RULE_40, 0);
    case 98:
      return reduce(RULE_40, 0);
    case 112:
      return reduce(RULE_40, 0);
    case 86:
      return reduce(RULE_40, 0);
    case 120:
      return reduce(RULE_40, 0);
    case 121:
      return reduce(RULE_40, 0);
    case 124:
      return reduce(RULE_40, 0);
    case 123:
      return reduce(RULE_40, 0);
    case 156:
      return reduce(RULE_40, 0);
    case 83:
      return reduce(RULE_40, 0);
    case 99:
      return reduce(RULE_40, 0);
    case 122:
      return reduce(RULE_40, 0);
    case 125:
      return reduce(RULE_40, 0);
    case 165:
      return reduce(RULE_40, 0);
    case 77:
      return reduce(RULE_40, 0);
    case 108:
      return reduce(RULE_40, 0);
    case 92:
      return reduce(RULE_40, 0);
    case 164:
      return reduce(RULE_40, 0);
    case 84:
      return reduce(RULE_40, 0);
    case 104:
      return reduce(RULE_40, 0);
    case 105:
      return reduce(RULE_40, 0);
    case 114:
      return reduce(RULE_40, 0);
    case 82:
      return reduce(RULE_40, 0);
    case 177:
      return reduce(RULE_40, 0);
    case 90:
      return reduce(RULE_40, 0);
    case 116:
      return reduce(RULE_40, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action234(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(203);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 2);
    case 102:
      return reduce(RULE_16, 4);
    case 122:
      return reduce(RULE_16, 4);
    case 79:
      return reduce(RULE_16, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, HASH, COMMA, ARROW, RPAREN});
    }
  }

  private final boolean action235(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(400);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(401);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(403);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(404);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(405);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(406);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 0);
    case 137:
      return reduce(RULE_41, 0);
    case 157:
      return reduce(RULE_41, 0);
    case 147:
      return reduce(RULE_41, 0);
    case 129:
      return reduce(RULE_41, 0);
    case 167:
      return reduce(RULE_41, 0);
    case 117:
      return reduce(RULE_41, 0);
    case 75:
      return reduce(RULE_41, 0);
    case 80:
      return reduce(RULE_41, 0);
    case 143:
      return reduce(RULE_41, 0);
    case 112:
      return reduce(RULE_41, 0);
    case 121:
      return reduce(RULE_41, 0);
    case 124:
      return reduce(RULE_41, 0);
    case 123:
      return reduce(RULE_41, 0);
    case 156:
      return reduce(RULE_41, 0);
    case 83:
      return reduce(RULE_41, 0);
    case 122:
      return reduce(RULE_41, 0);
    case 165:
      return reduce(RULE_41, 0);
    case 77:
      return reduce(RULE_41, 0);
    case 92:
      return reduce(RULE_41, 0);
    case 164:
      return reduce(RULE_41, 0);
    case 84:
      return reduce(RULE_41, 0);
    case 105:
      return reduce(RULE_41, 0);
    case 177:
      return reduce(RULE_41, 0);
    case 82:
      return reduce(RULE_41, 0);
    case 116:
      return reduce(RULE_41, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action236(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(407);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_42, 4);
    case 137:
      return reduce(RULE_42, 4);
    case 124:
      return reduce(RULE_42, 4);
    case 157:
      return reduce(RULE_42, 4);
    case 123:
      return reduce(RULE_42, 4);
    case 156:
      return reduce(RULE_42, 4);
    case 122:
      return reduce(RULE_42, 4);
    case 165:
      return reduce(RULE_42, 4);
    case 147:
      return reduce(RULE_42, 4);
    case 129:
      return reduce(RULE_42, 4);
    case 167:
      return reduce(RULE_42, 4);
    case 164:
      return reduce(RULE_42, 4);
    case 75:
      return reduce(RULE_42, 4);
    case 105:
      return reduce(RULE_42, 4);
    case 82:
      return reduce(RULE_42, 4);
    case 177:
      return reduce(RULE_42, 4);
    case 143:
      return reduce(RULE_42, 4);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action237(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto237(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 47: return 408;
    case 28: return 84;
    case 48: return 210;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action238(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_43, 1);
    case 149:
      return reduce(RULE_43, 1);
    case 139:
      return reduce(RULE_43, 1);
    case 175:
      return reduce(RULE_43, 1);
    case 157:
      return reduce(RULE_43, 1);
    case 142:
      return reduce(RULE_43, 1);
    case 155:
      return reduce(RULE_43, 1);
    case 173:
      return reduce(RULE_43, 1);
    case 106:
      return reduce(RULE_43, 1);
    case 160:
      return reduce(RULE_43, 1);
    case 130:
      return reduce(RULE_43, 1);
    case 129:
      return reduce(RULE_43, 1);
    case 167:
      return reduce(RULE_43, 1);
    case 74:
      return reduce(RULE_43, 1);
    case 102:
      return reduce(RULE_43, 1);
    case 153:
      return reduce(RULE_43, 1);
    case 75:
      return reduce(RULE_43, 1);
    case 138:
      return reduce(RULE_43, 1);
    case 163:
      return reduce(RULE_43, 1);
    case 174:
      return reduce(RULE_43, 1);
    case 166:
      return reduce(RULE_43, 1);
    case 172:
      return reduce(RULE_43, 1);
    case 107:
      return reduce(RULE_43, 1);
    case 89:
      return reduce(RULE_43, 1);
    case 170:
      return reduce(RULE_43, 1);
    case 143:
      return reduce(RULE_43, 1);
    case 73:
      return reduce(RULE_43, 1);
    case 176:
      return reduce(RULE_43, 1);
    case 132:
      return reduce(RULE_43, 1);
    case 169:
      return reduce(RULE_43, 1);
    case 121:
      return reduce(RULE_43, 1);
    case 156:
      return reduce(RULE_43, 1);
    case 133:
      return reduce(RULE_43, 1);
    case 131:
      return reduce(RULE_43, 1);
    case 148:
      return reduce(RULE_43, 1);
    case 76:
      return reduce(RULE_43, 1);
    case 128:
      return reduce(RULE_43, 1);
    case 145:
      return reduce(RULE_43, 1);
    case 168:
      return reduce(RULE_43, 1);
    case 164:
      return reduce(RULE_43, 1);
    case 181:
      return reduce(RULE_43, 1);
    case 93:
      return reduce(RULE_43, 1);
    case 105:
      return reduce(RULE_43, 1);
    case 179:
      return reduce(RULE_43, 1);
    case 177:
      return reduce(RULE_43, 1);
    case 146:
      return reduce(RULE_43, 1);
    case 72:
      return reduce(RULE_43, 1);
    case 158:
      return reduce(RULE_43, 1);
    case 116:
      return reduce(RULE_43, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action239(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(409);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(393);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_26, 1);
    case 85:
      return reduce(RULE_11, 1);
    case 149:
      return reduce(RULE_15, 1);
    case 137:
      return reduce(RULE_15, 1);
    case 157:
      return reduce(RULE_15, 1);
    case 110:
      return reduce(RULE_26, 1);
    case 103:
      return reduce(RULE_26, 1);
    case 106:
      return reduce(RULE_26, 1);
    case 147:
      return reduce(RULE_15, 1);
    case 129:
      return reduce(RULE_15, 1);
    case 167:
      return reduce(RULE_15, 1);
    case 117:
      return reduce(RULE_26, 1);
    case 119:
      return reduce(RULE_26, 1);
    case 75:
      return reduce(RULE_15, 1);
    case 100:
      return reduce(RULE_26, 1);
    case 152:
      return reduce(RULE_26, 1);
    case 80:
      return reduce(RULE_26, 1);
    case 94:
      return reduce(RULE_26, 1);
    case 98:
      return reduce(RULE_26, 1);
    case 143:
      return reduce(RULE_15, 1);
    case 112:
      return reduce(RULE_26, 1);
    case 86:
      return reduce(RULE_26, 1);
    case 120:
      return reduce(RULE_26, 1);
    case 124:
      return reduce(RULE_15, 1);
    case 156:
      return reduce(RULE_15, 1);
    case 123:
      return reduce(RULE_15, 1);
    case 99:
      return reduce(RULE_26, 1);
    case 122:
      return reduce(RULE_15, 1);
    case 125:
      return reduce(RULE_26, 1);
    case 165:
      return reduce(RULE_15, 1);
    case 77:
      return reduce(RULE_26, 1);
    case 108:
      return reduce(RULE_26, 1);
    case 92:
      return reduce(RULE_26, 1);
    case 164:
      return reduce(RULE_15, 1);
    case 84:
      return reduce(RULE_26, 1);
    case 104:
      return reduce(RULE_26, 1);
    case 105:
      return reduce(RULE_15, 1);
    case 114:
      return reduce(RULE_26, 1);
    case 177:
      return reduce(RULE_15, 1);
    case 82:
      return reduce(RULE_15, 1);
    case 90:
      return reduce(RULE_26, 1);
    case 116:
      return reduce(RULE_26, 1);
    case 118:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, DOUBLE_COLON, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action240(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_44, 0);
    case 137:
      return reduce(RULE_44, 0);
    case 124:
      return reduce(RULE_44, 0);
    case 157:
      return reduce(RULE_44, 0);
    case 123:
      return reduce(RULE_44, 0);
    case 156:
      return reduce(RULE_44, 0);
    case 122:
      return reduce(RULE_44, 0);
    case 165:
      return reduce(RULE_44, 0);
    case 147:
      return reduce(RULE_44, 0);
    case 129:
      return reduce(RULE_44, 0);
    case 167:
      return reduce(RULE_44, 0);
    case 164:
      return reduce(RULE_44, 0);
    case 75:
      return reduce(RULE_44, 0);
    case 105:
      return reduce(RULE_44, 0);
    case 82:
      return reduce(RULE_44, 0);
    case 177:
      return reduce(RULE_44, 0);
    case 143:
      return reduce(RULE_44, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action241(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(410);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(397);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_26, 0);
    case 85:
      return reduce(RULE_11, 0);
    case 149:
      return reduce(RULE_15, 0);
    case 137:
      return reduce(RULE_15, 0);
    case 157:
      return reduce(RULE_15, 0);
    case 110:
      return reduce(RULE_26, 0);
    case 103:
      return reduce(RULE_26, 0);
    case 106:
      return reduce(RULE_26, 0);
    case 147:
      return reduce(RULE_15, 0);
    case 129:
      return reduce(RULE_15, 0);
    case 167:
      return reduce(RULE_15, 0);
    case 117:
      return reduce(RULE_26, 0);
    case 119:
      return reduce(RULE_26, 0);
    case 75:
      return reduce(RULE_15, 0);
    case 100:
      return reduce(RULE_26, 0);
    case 152:
      return reduce(RULE_26, 0);
    case 80:
      return reduce(RULE_26, 0);
    case 94:
      return reduce(RULE_26, 0);
    case 98:
      return reduce(RULE_26, 0);
    case 143:
      return reduce(RULE_15, 0);
    case 112:
      return reduce(RULE_26, 0);
    case 86:
      return reduce(RULE_26, 0);
    case 120:
      return reduce(RULE_26, 0);
    case 124:
      return reduce(RULE_15, 0);
    case 156:
      return reduce(RULE_15, 0);
    case 123:
      return reduce(RULE_15, 0);
    case 99:
      return reduce(RULE_26, 0);
    case 122:
      return reduce(RULE_15, 0);
    case 125:
      return reduce(RULE_26, 0);
    case 165:
      return reduce(RULE_15, 0);
    case 77:
      return reduce(RULE_26, 0);
    case 108:
      return reduce(RULE_26, 0);
    case 92:
      return reduce(RULE_26, 0);
    case 164:
      return reduce(RULE_15, 0);
    case 84:
      return reduce(RULE_26, 0);
    case 104:
      return reduce(RULE_26, 0);
    case 105:
      return reduce(RULE_15, 0);
    case 114:
      return reduce(RULE_26, 0);
    case 177:
      return reduce(RULE_15, 0);
    case 82:
      return reduce(RULE_15, 0);
    case 90:
      return reduce(RULE_26, 0);
    case 116:
      return reduce(RULE_26, 0);
    case 118:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, DOUBLE_COLON, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action242(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(411);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action243(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_44, 1);
    case 137:
      return reduce(RULE_44, 1);
    case 124:
      return reduce(RULE_44, 1);
    case 157:
      return reduce(RULE_44, 1);
    case 123:
      return reduce(RULE_44, 1);
    case 156:
      return reduce(RULE_44, 1);
    case 122:
      return reduce(RULE_44, 1);
    case 165:
      return reduce(RULE_44, 1);
    case 147:
      return reduce(RULE_44, 1);
    case 129:
      return reduce(RULE_44, 1);
    case 167:
      return reduce(RULE_44, 1);
    case 164:
      return reduce(RULE_44, 1);
    case 75:
      return reduce(RULE_44, 1);
    case 105:
      return reduce(RULE_44, 1);
    case 82:
      return reduce(RULE_44, 1);
    case 177:
      return reduce(RULE_44, 1);
    case 143:
      return reduce(RULE_44, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action244(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_25, 1);
    case 122:
      return reduce(RULE_25, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action245(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(271);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 0);
    case 124:
      return reduce(RULE_25, 0);
    case 122:
      return reduce(RULE_25, 0);
    case 106:
      return reduce(RULE_26, 0);
    case 118:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, SEMICOLON, RPAREN, DOT, LSQUARE, LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final boolean action246(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(412);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action247(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(281);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 1);
    case 106:
      return reduce(RULE_26, 1);
    case 118:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, DOT, LSQUARE, LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final boolean action248(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(413);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action249(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(414);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, RPAREN, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto249(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 69: return 415;
    case 60: return 219;
    case 71: return 416;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 347;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    case 54: return 417;
    default: return -1;
    }
  }

  private final boolean action250(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(418);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action251(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, HASH, INT_KEYWORD, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto251(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 419;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action252(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto252(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 420;
    default: return -1;
    }
  }

  private final boolean action253(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(421);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action254(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(422);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, FLOATING_LITERAL, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, SEMICOLON, MUTABLE_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto254(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 36: return 423;
    case 71: return 137;
    case 43: return 424;
    case 48: return 152;
    case 64: return 140;
    case 66: return 139;
    case 30: return 305;
    case 65: return 154;
    case 15: return 155;
    case 68: return 226;
    case 26: return 158;
    case 22: return 425;
    case 67: return 230;
    case 14: return 162;
    case 28: return 302;
    case 13: return 163;
    case 63: return 164;
    case 49: return 304;
    default: return -1;
    }
  }

  private final boolean action255(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(426);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RSQUARE, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto255(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 427;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action256(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto256(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 428;
    default: return -1;
    }
  }

  private final boolean action257(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(429);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, USHORT_KEYWORD, LSQUARE, NAME, QUESTION_MARK});
    }
  }

  private final int goto257(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 430;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action258(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOT, LPAREN});
    }
  }

  private final int goto258(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 431;
    default: return -1;
    }
  }

  private final boolean action259(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_45, 0);
    case 149:
      return reduce(RULE_45, 0);
    case 139:
      return reduce(RULE_45, 0);
    case 175:
      return reduce(RULE_45, 0);
    case 157:
      return reduce(RULE_45, 0);
    case 142:
      return reduce(RULE_45, 0);
    case 155:
      return reduce(RULE_45, 0);
    case 173:
      return reduce(RULE_45, 0);
    case 106:
      return reduce(RULE_45, 0);
    case 160:
      return reduce(RULE_45, 0);
    case 130:
      return reduce(RULE_45, 0);
    case 129:
      return reduce(RULE_45, 0);
    case 167:
      return reduce(RULE_45, 0);
    case 74:
      return reduce(RULE_45, 0);
    case 102:
      return reduce(RULE_45, 0);
    case 153:
      return reduce(RULE_45, 0);
    case 75:
      return reduce(RULE_45, 0);
    case 138:
      return reduce(RULE_45, 0);
    case 163:
      return reduce(RULE_45, 0);
    case 174:
      return reduce(RULE_45, 0);
    case 166:
      return reduce(RULE_45, 0);
    case 172:
      return reduce(RULE_45, 0);
    case 107:
      return reduce(RULE_45, 0);
    case 89:
      return reduce(RULE_45, 0);
    case 170:
      return reduce(RULE_45, 0);
    case 143:
      return reduce(RULE_45, 0);
    case 73:
      return reduce(RULE_45, 0);
    case 176:
      return reduce(RULE_45, 0);
    case 132:
      return reduce(RULE_45, 0);
    case 169:
      return reduce(RULE_45, 0);
    case 121:
      return reduce(RULE_45, 0);
    case 156:
      return reduce(RULE_45, 0);
    case 133:
      return reduce(RULE_45, 0);
    case 131:
      return reduce(RULE_45, 0);
    case 148:
      return reduce(RULE_45, 0);
    case 76:
      return reduce(RULE_45, 0);
    case 128:
      return reduce(RULE_45, 0);
    case 145:
      return reduce(RULE_45, 0);
    case 168:
      return reduce(RULE_45, 0);
    case 164:
      return reduce(RULE_45, 0);
    case 181:
      return reduce(RULE_45, 0);
    case 93:
      return reduce(RULE_45, 0);
    case 105:
      return reduce(RULE_45, 0);
    case 179:
      return reduce(RULE_45, 0);
    case 177:
      return reduce(RULE_45, 0);
    case 146:
      return reduce(RULE_45, 0);
    case 72:
      return reduce(RULE_45, 0);
    case 158:
      return reduce(RULE_45, 0);
    case 116:
      return reduce(RULE_45, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action260(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(432);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action261(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_46, 0);
    case 149:
      return reduce(RULE_46, 0);
    case 139:
      return reduce(RULE_46, 0);
    case 175:
      return reduce(RULE_46, 0);
    case 157:
      return reduce(RULE_46, 0);
    case 142:
      return reduce(RULE_46, 0);
    case 155:
      return reduce(RULE_46, 0);
    case 173:
      return reduce(RULE_46, 0);
    case 106:
      return reduce(RULE_46, 0);
    case 160:
      return reduce(RULE_46, 0);
    case 130:
      return reduce(RULE_46, 0);
    case 129:
      return reduce(RULE_46, 0);
    case 167:
      return reduce(RULE_46, 0);
    case 74:
      return reduce(RULE_46, 0);
    case 102:
      return reduce(RULE_46, 0);
    case 153:
      return reduce(RULE_46, 0);
    case 75:
      return reduce(RULE_46, 0);
    case 138:
      return reduce(RULE_46, 0);
    case 163:
      return reduce(RULE_46, 0);
    case 174:
      return reduce(RULE_46, 0);
    case 166:
      return reduce(RULE_46, 0);
    case 172:
      return reduce(RULE_46, 0);
    case 107:
      return reduce(RULE_46, 0);
    case 89:
      return reduce(RULE_46, 0);
    case 170:
      return reduce(RULE_46, 0);
    case 143:
      return reduce(RULE_46, 0);
    case 73:
      return reduce(RULE_46, 0);
    case 176:
      return reduce(RULE_46, 0);
    case 132:
      return reduce(RULE_46, 0);
    case 169:
      return reduce(RULE_46, 0);
    case 121:
      return reduce(RULE_46, 0);
    case 156:
      return reduce(RULE_46, 0);
    case 133:
      return reduce(RULE_46, 0);
    case 131:
      return reduce(RULE_46, 0);
    case 148:
      return reduce(RULE_46, 0);
    case 76:
      return reduce(RULE_46, 0);
    case 128:
      return reduce(RULE_46, 0);
    case 145:
      return reduce(RULE_46, 0);
    case 168:
      return reduce(RULE_46, 0);
    case 164:
      return reduce(RULE_46, 0);
    case 181:
      return reduce(RULE_46, 0);
    case 93:
      return reduce(RULE_46, 0);
    case 105:
      return reduce(RULE_46, 0);
    case 179:
      return reduce(RULE_46, 0);
    case 177:
      return reduce(RULE_46, 0);
    case 146:
      return reduce(RULE_46, 0);
    case 72:
      return reduce(RULE_46, 0);
    case 158:
      return reduce(RULE_46, 0);
    case 116:
      return reduce(RULE_46, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action262(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(433);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action263(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(434);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action264(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto264(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 435;
    default: return -1;
    }
  }

  private final boolean action265(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(436);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action266(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_47, 1);
    case 149:
      return reduce(RULE_47, 1);
    case 137:
      return reduce(RULE_47, 1);
    case 110:
      return reduce(RULE_47, 1);
    case 157:
      return reduce(RULE_47, 1);
    case 96:
      return reduce(RULE_47, 1);
    case 103:
      return reduce(RULE_47, 1);
    case 106:
      return reduce(RULE_47, 1);
    case 147:
      return reduce(RULE_47, 1);
    case 129:
      return reduce(RULE_47, 1);
    case 117:
      return reduce(RULE_47, 1);
    case 167:
      return reduce(RULE_47, 1);
    case 119:
      return reduce(RULE_47, 1);
    case 75:
      return reduce(RULE_47, 1);
    case 100:
      return reduce(RULE_47, 1);
    case 152:
      return reduce(RULE_47, 1);
    case 94:
      return reduce(RULE_47, 1);
    case 80:
      return reduce(RULE_47, 1);
    case 107:
      return reduce(RULE_47, 1);
    case 143:
      return reduce(RULE_47, 1);
    case 98:
      return reduce(RULE_47, 1);
    case 112:
      return reduce(RULE_47, 1);
    case 86:
      return reduce(RULE_47, 1);
    case 120:
      return reduce(RULE_47, 1);
    case 121:
      return reduce(RULE_47, 1);
    case 124:
      return reduce(RULE_47, 1);
    case 123:
      return reduce(RULE_47, 1);
    case 156:
      return reduce(RULE_47, 1);
    case 83:
      return reduce(RULE_47, 1);
    case 99:
      return reduce(RULE_47, 1);
    case 122:
      return reduce(RULE_47, 1);
    case 125:
      return reduce(RULE_47, 1);
    case 165:
      return reduce(RULE_47, 1);
    case 77:
      return reduce(RULE_47, 1);
    case 92:
      return reduce(RULE_47, 1);
    case 108:
      return reduce(RULE_47, 1);
    case 164:
      return reduce(RULE_47, 1);
    case 84:
      return reduce(RULE_47, 1);
    case 104:
      return reduce(RULE_47, 1);
    case 105:
      return reduce(RULE_47, 1);
    case 114:
      return reduce(RULE_47, 1);
    case 82:
      return reduce(RULE_47, 1);
    case 177:
      return reduce(RULE_47, 1);
    case 90:
      return reduce(RULE_47, 1);
    case 116:
      return reduce(RULE_47, 1);
    case 118:
      return reduce(RULE_47, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action267(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 79:
      stateStack.addFirst(437);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action268(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto268(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 47: return 438;
    case 28: return 84;
    case 48: return 210;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action269(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_47, 0);
    case 149:
      return reduce(RULE_47, 0);
    case 137:
      return reduce(RULE_47, 0);
    case 110:
      return reduce(RULE_47, 0);
    case 157:
      return reduce(RULE_47, 0);
    case 103:
      return reduce(RULE_47, 0);
    case 96:
      return reduce(RULE_47, 0);
    case 106:
      return reduce(RULE_47, 0);
    case 147:
      return reduce(RULE_47, 0);
    case 129:
      return reduce(RULE_47, 0);
    case 117:
      return reduce(RULE_47, 0);
    case 167:
      return reduce(RULE_47, 0);
    case 119:
      return reduce(RULE_47, 0);
    case 75:
      return reduce(RULE_47, 0);
    case 100:
      return reduce(RULE_47, 0);
    case 152:
      return reduce(RULE_47, 0);
    case 94:
      return reduce(RULE_47, 0);
    case 80:
      return reduce(RULE_47, 0);
    case 107:
      return reduce(RULE_47, 0);
    case 143:
      return reduce(RULE_47, 0);
    case 98:
      return reduce(RULE_47, 0);
    case 112:
      return reduce(RULE_47, 0);
    case 86:
      return reduce(RULE_47, 0);
    case 120:
      return reduce(RULE_47, 0);
    case 121:
      return reduce(RULE_47, 0);
    case 124:
      return reduce(RULE_47, 0);
    case 123:
      return reduce(RULE_47, 0);
    case 156:
      return reduce(RULE_47, 0);
    case 83:
      return reduce(RULE_47, 0);
    case 99:
      return reduce(RULE_47, 0);
    case 122:
      return reduce(RULE_47, 0);
    case 125:
      return reduce(RULE_47, 0);
    case 165:
      return reduce(RULE_47, 0);
    case 77:
      return reduce(RULE_47, 0);
    case 92:
      return reduce(RULE_47, 0);
    case 108:
      return reduce(RULE_47, 0);
    case 164:
      return reduce(RULE_47, 0);
    case 84:
      return reduce(RULE_47, 0);
    case 105:
      return reduce(RULE_47, 0);
    case 104:
      return reduce(RULE_47, 0);
    case 114:
      return reduce(RULE_47, 0);
    case 82:
      return reduce(RULE_47, 0);
    case 177:
      return reduce(RULE_47, 0);
    case 90:
      return reduce(RULE_47, 0);
    case 116:
      return reduce(RULE_47, 0);
    case 118:
      return reduce(RULE_47, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action270(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, UNDERSCORE, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto270(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 50: return 333;
    case 71: return 137;
    case 48: return 152;
    case 64: return 140;
    case 66: return 139;
    case 30: return 439;
    case 65: return 154;
    case 15: return 440;
    case 68: return 226;
    case 14: return 162;
    case 67: return 230;
    case 28: return 441;
    case 13: return 163;
    case 63: return 164;
    case 29: return 334;
    case 49: return 234;
    default: return -1;
    }
  }

  private final boolean action271(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto271(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 442;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action272(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      return reduce(RULE_48, 0);
    case 124:
      return reduce(RULE_48, 0);
    case 83:
      return reduce(RULE_48, 0);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action273(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      return reduce(RULE_48, 1);
    case 124:
      return reduce(RULE_48, 1);
    case 83:
      return reduce(RULE_48, 1);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action274(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(443);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(444);
      tokenStack.addFirst(token);
      return true;
    case 83:
      stateStack.addFirst(445);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action275(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(446);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(447);
      tokenStack.addFirst(token);
      return true;
    case 83:
      stateStack.addFirst(445);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action276(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto276(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 448;
    default: return -1;
    }
  }

  private final boolean action277(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, HASH, STATIC_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto277(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 17: return 449;
    case 26: return 450;
    case 28: return 84;
    case 48: return 451;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action278(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 11);
    case 149:
      return reduce(RULE_22, 11);
    case 139:
      return reduce(RULE_22, 11);
    case 175:
      return reduce(RULE_22, 11);
    case 157:
      return reduce(RULE_22, 11);
    case 142:
      return reduce(RULE_22, 11);
    case 155:
      return reduce(RULE_22, 11);
    case 173:
      return reduce(RULE_22, 11);
    case 106:
      return reduce(RULE_22, 11);
    case 160:
      return reduce(RULE_22, 11);
    case 130:
      return reduce(RULE_22, 11);
    case 129:
      return reduce(RULE_22, 11);
    case 167:
      return reduce(RULE_22, 11);
    case 74:
      return reduce(RULE_22, 11);
    case 102:
      return reduce(RULE_22, 11);
    case 153:
      return reduce(RULE_22, 11);
    case 75:
      return reduce(RULE_22, 11);
    case 138:
      return reduce(RULE_22, 11);
    case 163:
      return reduce(RULE_22, 11);
    case 174:
      return reduce(RULE_22, 11);
    case 166:
      return reduce(RULE_22, 11);
    case 172:
      return reduce(RULE_22, 11);
    case 107:
      return reduce(RULE_22, 11);
    case 89:
      return reduce(RULE_22, 11);
    case 170:
      return reduce(RULE_22, 11);
    case 143:
      return reduce(RULE_22, 11);
    case 73:
      return reduce(RULE_22, 11);
    case 176:
      return reduce(RULE_22, 11);
    case 132:
      return reduce(RULE_22, 11);
    case 169:
      return reduce(RULE_22, 11);
    case 121:
      return reduce(RULE_22, 11);
    case 156:
      return reduce(RULE_22, 11);
    case 133:
      return reduce(RULE_22, 11);
    case 131:
      return reduce(RULE_22, 11);
    case 148:
      return reduce(RULE_22, 11);
    case 76:
      return reduce(RULE_22, 11);
    case 128:
      return reduce(RULE_22, 11);
    case 145:
      return reduce(RULE_22, 11);
    case 168:
      return reduce(RULE_22, 11);
    case 164:
      return reduce(RULE_22, 11);
    case 181:
      return reduce(RULE_22, 11);
    case 93:
      return reduce(RULE_22, 11);
    case 105:
      return reduce(RULE_22, 11);
    case 179:
      return reduce(RULE_22, 11);
    case 177:
      return reduce(RULE_22, 11);
    case 146:
      return reduce(RULE_22, 11);
    case 72:
      return reduce(RULE_22, 11);
    case 158:
      return reduce(RULE_22, 11);
    case 116:
      return reduce(RULE_22, 11);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action279(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(452);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action280(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(453);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action281(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto281(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 454;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action282(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(455);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(456);
      tokenStack.addFirst(token);
      return true;
    case 83:
      stateStack.addFirst(445);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action283(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(457);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action284(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(458);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action285(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto285(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 459;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action286(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto286(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 460;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action287(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto287(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 461;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action288(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto288(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 462;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action289(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto289(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 463;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action290(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto290(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 464;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action291(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto291(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 465;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action292(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto292(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 466;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action293(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto293(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 467;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action294(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto294(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 468;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action295(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto295(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 469;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action296(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto296(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 470;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action297(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 12);
    case 149:
      return reduce(RULE_22, 12);
    case 139:
      return reduce(RULE_22, 12);
    case 175:
      return reduce(RULE_22, 12);
    case 157:
      return reduce(RULE_22, 12);
    case 142:
      return reduce(RULE_22, 12);
    case 155:
      return reduce(RULE_22, 12);
    case 173:
      return reduce(RULE_22, 12);
    case 106:
      return reduce(RULE_22, 12);
    case 160:
      return reduce(RULE_22, 12);
    case 130:
      return reduce(RULE_22, 12);
    case 129:
      return reduce(RULE_22, 12);
    case 167:
      return reduce(RULE_22, 12);
    case 74:
      return reduce(RULE_22, 12);
    case 102:
      return reduce(RULE_22, 12);
    case 153:
      return reduce(RULE_22, 12);
    case 75:
      return reduce(RULE_22, 12);
    case 138:
      return reduce(RULE_22, 12);
    case 163:
      return reduce(RULE_22, 12);
    case 174:
      return reduce(RULE_22, 12);
    case 166:
      return reduce(RULE_22, 12);
    case 172:
      return reduce(RULE_22, 12);
    case 107:
      return reduce(RULE_22, 12);
    case 89:
      return reduce(RULE_22, 12);
    case 170:
      return reduce(RULE_22, 12);
    case 143:
      return reduce(RULE_22, 12);
    case 73:
      return reduce(RULE_22, 12);
    case 176:
      return reduce(RULE_22, 12);
    case 132:
      return reduce(RULE_22, 12);
    case 169:
      return reduce(RULE_22, 12);
    case 121:
      return reduce(RULE_22, 12);
    case 156:
      return reduce(RULE_22, 12);
    case 133:
      return reduce(RULE_22, 12);
    case 131:
      return reduce(RULE_22, 12);
    case 148:
      return reduce(RULE_22, 12);
    case 76:
      return reduce(RULE_22, 12);
    case 128:
      return reduce(RULE_22, 12);
    case 145:
      return reduce(RULE_22, 12);
    case 168:
      return reduce(RULE_22, 12);
    case 164:
      return reduce(RULE_22, 12);
    case 181:
      return reduce(RULE_22, 12);
    case 93:
      return reduce(RULE_22, 12);
    case 105:
      return reduce(RULE_22, 12);
    case 179:
      return reduce(RULE_22, 12);
    case 177:
      return reduce(RULE_22, 12);
    case 146:
      return reduce(RULE_22, 12);
    case 72:
      return reduce(RULE_22, 12);
    case 158:
      return reduce(RULE_22, 12);
    case 116:
      return reduce(RULE_22, 12);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action298(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {DOT, NAME, UNDERSCORE});
    }
  }

  private final int goto298(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 471;
    default: return -1;
    }
  }

  private final boolean action299(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto299(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 472;
    default: return -1;
    }
  }

  private final boolean action300(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final int goto300(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 473;
    default: return -1;
    }
  }

  private final boolean action301(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 137:
      return reduce(RULE_21, 0);
    case 142:
      return reduce(RULE_21, 0);
    case 173:
      return reduce(RULE_21, 0);
    case 106:
      return reduce(RULE_21, 0);
    case 153:
      return reduce(RULE_21, 0);
    case 167:
      return reduce(RULE_21, 0);
    case 102:
      return reduce(RULE_21, 0);
    case 74:
      return reduce(RULE_21, 0);
    case 163:
      return reduce(RULE_21, 0);
    case 174:
      return reduce(RULE_21, 0);
    case 134:
      return reduce(RULE_21, 0);
    case 172:
      return reduce(RULE_21, 0);
    case 89:
      return reduce(RULE_21, 0);
    case 170:
      return reduce(RULE_21, 0);
    case 73:
      return reduce(RULE_21, 0);
    case 176:
      return reduce(RULE_21, 0);
    case 132:
      return reduce(RULE_21, 0);
    case 169:
      return reduce(RULE_21, 0);
    case 133:
      return reduce(RULE_21, 0);
    case 148:
      return reduce(RULE_21, 0);
    case 128:
      return reduce(RULE_21, 0);
    case 162:
      return reduce(RULE_21, 0);
    case 144:
      return reduce(RULE_21, 0);
    case 93:
      return reduce(RULE_21, 0);
    case 146:
      return reduce(RULE_21, 0);
    case 158:
      return reduce(RULE_21, 0);
    case 116:
      return reduce(RULE_21, 0);
    case 159:
      return reduce(RULE_21, 0);
    case 149:
      return reduce(RULE_21, 0);
    case 139:
      return reduce(RULE_21, 0);
    case 175:
      return reduce(RULE_21, 0);
    case 157:
      return reduce(RULE_21, 0);
    case 155:
      return reduce(RULE_21, 0);
    case 147:
      return reduce(RULE_21, 0);
    case 160:
      return reduce(RULE_21, 0);
    case 130:
      return reduce(RULE_21, 0);
    case 129:
      return reduce(RULE_21, 0);
    case 138:
      return reduce(RULE_21, 0);
    case 75:
      return reduce(RULE_21, 0);
    case 166:
      return reduce(RULE_21, 0);
    case 180:
      return reduce(RULE_21, 0);
    case 107:
      return reduce(RULE_21, 0);
    case 143:
      return reduce(RULE_21, 0);
    case 121:
      return reduce(RULE_21, 0);
    case 124:
      return reduce(RULE_21, 0);
    case 156:
      return reduce(RULE_21, 0);
    case 140:
      return reduce(RULE_21, 0);
    case 131:
      return reduce(RULE_21, 0);
    case 76:
      return reduce(RULE_21, 0);
    case 165:
      return reduce(RULE_21, 0);
    case 145:
      return reduce(RULE_21, 0);
    case 168:
      return reduce(RULE_21, 0);
    case 164:
      return reduce(RULE_21, 0);
    case 181:
      return reduce(RULE_21, 0);
    case 105:
      return reduce(RULE_21, 0);
    case 179:
      return reduce(RULE_21, 0);
    case 177:
      return reduce(RULE_21, 0);
    case 72:
      return reduce(RULE_21, 0);
    default: throw new BadTokenException(token, new Object[] {CONSTRUCTOR_KEYWORD, FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, STATIC_KEYWORD, HASH, FLOATING_LITERAL, RETURN_KEYWORD, UBYTE_KEYWORD, CATCH_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, PROPERTY_KEYWORD, FINALLY_KEYWORD, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, GETTER_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, ELSE_KEYWORD, BREAK_KEYWORD, SETTER_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final boolean action302(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(474);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(271);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 0);
    case 126:
      return reduce(RULE_25, 0);
    case 97:
      return reduce(RULE_25, 0);
    case 111:
      return reduce(RULE_25, 0);
    case 115:
      return reduce(RULE_25, 0);
    case 88:
      return reduce(RULE_25, 0);
    case 101:
      return reduce(RULE_25, 0);
    case 113:
      return reduce(RULE_25, 0);
    case 95:
      return reduce(RULE_25, 0);
    case 106:
      return reduce(RULE_26, 0);
    case 81:
      return reduce(RULE_25, 0);
    case 109:
      return reduce(RULE_25, 0);
    case 91:
      return reduce(RULE_25, 0);
    case 78:
      return reduce(RULE_25, 0);
    case 118:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, STAR_EQUALS, EQUALS, PERCENT_EQUALS, COMMA, PLUS_EQUALS, DOT, DOUBLE_LANGLE_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_RANGLE_EQUALS, LPAREN, UNDERSCORE, CARET_EQUALS, MINUS_EQUALS, AMPERSAND_EQUALS, DOUBLE_PERCENT_EQUALS, LSQUARE, NAME, QUESTION_MARK_DOT});
    }
  }

  private final int goto302(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 274;
    default: return -1;
    }
  }

  private final boolean action303(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_27, 1);
    case 149:
      return reduce(RULE_27, 1);
    case 139:
      return reduce(RULE_27, 1);
    case 175:
      return reduce(RULE_27, 1);
    case 157:
      return reduce(RULE_27, 1);
    case 142:
      return reduce(RULE_27, 1);
    case 155:
      return reduce(RULE_27, 1);
    case 173:
      return reduce(RULE_27, 1);
    case 106:
      return reduce(RULE_27, 1);
    case 160:
      return reduce(RULE_27, 1);
    case 130:
      return reduce(RULE_27, 1);
    case 129:
      return reduce(RULE_27, 1);
    case 167:
      return reduce(RULE_27, 1);
    case 74:
      return reduce(RULE_27, 1);
    case 102:
      return reduce(RULE_27, 1);
    case 153:
      return reduce(RULE_27, 1);
    case 75:
      return reduce(RULE_27, 1);
    case 138:
      return reduce(RULE_27, 1);
    case 163:
      return reduce(RULE_27, 1);
    case 174:
      return reduce(RULE_27, 1);
    case 166:
      return reduce(RULE_27, 1);
    case 172:
      return reduce(RULE_27, 1);
    case 107:
      return reduce(RULE_27, 1);
    case 89:
      return reduce(RULE_27, 1);
    case 170:
      return reduce(RULE_27, 1);
    case 143:
      return reduce(RULE_27, 1);
    case 73:
      return reduce(RULE_27, 1);
    case 176:
      return reduce(RULE_27, 1);
    case 132:
      return reduce(RULE_27, 1);
    case 169:
      return reduce(RULE_27, 1);
    case 121:
      return reduce(RULE_27, 1);
    case 156:
      return reduce(RULE_27, 1);
    case 133:
      return reduce(RULE_27, 1);
    case 131:
      return reduce(RULE_27, 1);
    case 148:
      return reduce(RULE_27, 1);
    case 76:
      return reduce(RULE_27, 1);
    case 128:
      return reduce(RULE_27, 1);
    case 145:
      return reduce(RULE_27, 1);
    case 168:
      return reduce(RULE_27, 1);
    case 164:
      return reduce(RULE_27, 1);
    case 181:
      return reduce(RULE_27, 1);
    case 93:
      return reduce(RULE_27, 1);
    case 105:
      return reduce(RULE_27, 1);
    case 179:
      return reduce(RULE_27, 1);
    case 177:
      return reduce(RULE_27, 1);
    case 146:
      return reduce(RULE_27, 1);
    case 72:
      return reduce(RULE_27, 1);
    case 158:
      return reduce(RULE_27, 1);
    case 116:
      return reduce(RULE_27, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action304(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, NAME, UNDERSCORE});
    }
  }

  private final int goto304(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 275;
    default: return -1;
    }
  }

  private final boolean action305(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(281);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(272);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(273);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 1);
    case 106:
      return reduce(RULE_26, 1);
    case 118:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, DOT, LSQUARE, NAME, LPAREN, UNDERSCORE, QUESTION_MARK_DOT});
    }
  }

  private final int goto305(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 16: return 282;
    default: return -1;
    }
  }

  private final boolean action306(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 14);
    case 149:
      return reduce(RULE_22, 14);
    case 139:
      return reduce(RULE_22, 14);
    case 175:
      return reduce(RULE_22, 14);
    case 157:
      return reduce(RULE_22, 14);
    case 142:
      return reduce(RULE_22, 14);
    case 155:
      return reduce(RULE_22, 14);
    case 173:
      return reduce(RULE_22, 14);
    case 106:
      return reduce(RULE_22, 14);
    case 160:
      return reduce(RULE_22, 14);
    case 130:
      return reduce(RULE_22, 14);
    case 129:
      return reduce(RULE_22, 14);
    case 167:
      return reduce(RULE_22, 14);
    case 74:
      return reduce(RULE_22, 14);
    case 102:
      return reduce(RULE_22, 14);
    case 153:
      return reduce(RULE_22, 14);
    case 75:
      return reduce(RULE_22, 14);
    case 138:
      return reduce(RULE_22, 14);
    case 163:
      return reduce(RULE_22, 14);
    case 174:
      return reduce(RULE_22, 14);
    case 166:
      return reduce(RULE_22, 14);
    case 172:
      return reduce(RULE_22, 14);
    case 107:
      return reduce(RULE_22, 14);
    case 89:
      return reduce(RULE_22, 14);
    case 170:
      return reduce(RULE_22, 14);
    case 143:
      return reduce(RULE_22, 14);
    case 73:
      return reduce(RULE_22, 14);
    case 176:
      return reduce(RULE_22, 14);
    case 132:
      return reduce(RULE_22, 14);
    case 169:
      return reduce(RULE_22, 14);
    case 121:
      return reduce(RULE_22, 14);
    case 156:
      return reduce(RULE_22, 14);
    case 133:
      return reduce(RULE_22, 14);
    case 131:
      return reduce(RULE_22, 14);
    case 148:
      return reduce(RULE_22, 14);
    case 76:
      return reduce(RULE_22, 14);
    case 128:
      return reduce(RULE_22, 14);
    case 145:
      return reduce(RULE_22, 14);
    case 168:
      return reduce(RULE_22, 14);
    case 164:
      return reduce(RULE_22, 14);
    case 181:
      return reduce(RULE_22, 14);
    case 93:
      return reduce(RULE_22, 14);
    case 105:
      return reduce(RULE_22, 14);
    case 179:
      return reduce(RULE_22, 14);
    case 177:
      return reduce(RULE_22, 14);
    case 146:
      return reduce(RULE_22, 14);
    case 72:
      return reduce(RULE_22, 14);
    case 158:
      return reduce(RULE_22, 14);
    case 116:
      return reduce(RULE_22, 14);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action307(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, UNDERSCORE, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto307(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 15: return 475;
    case 68: return 226;
    case 67: return 230;
    case 14: return 162;
    case 28: return 476;
    case 71: return 137;
    case 13: return 163;
    case 63: return 164;
    case 48: return 152;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 247;
    case 65: return 154;
    default: return -1;
    }
  }

  private final boolean action308(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto308(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 477;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action309(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(478);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action310(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(479);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action311(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 43);
    case 137:
      return reduce(RULE_9, 43);
    case 110:
      return reduce(RULE_9, 43);
    case 79:
      return reduce(RULE_9, 43);
    case 106:
      return reduce(RULE_9, 43);
    case 117:
      return reduce(RULE_9, 43);
    case 102:
      return reduce(RULE_9, 43);
    case 167:
      return reduce(RULE_9, 43);
    case 152:
      return reduce(RULE_9, 43);
    case 94:
      return reduce(RULE_9, 43);
    case 80:
      return reduce(RULE_9, 43);
    case 98:
      return reduce(RULE_9, 43);
    case 171:
      return reduce(RULE_9, 43);
    case 86:
      return reduce(RULE_9, 43);
    case 83:
      return reduce(RULE_9, 43);
    case 122:
      return reduce(RULE_9, 43);
    case 108:
      return reduce(RULE_9, 43);
    case 92:
      return reduce(RULE_9, 43);
    case 128:
      return reduce(RULE_9, 43);
    case 104:
      return reduce(RULE_9, 43);
    case 82:
      return reduce(RULE_9, 43);
    case 116:
      return reduce(RULE_9, 43);
    case 85:
      return reduce(RULE_9, 43);
    case 149:
      return reduce(RULE_9, 43);
    case 157:
      return reduce(RULE_9, 43);
    case 103:
      return reduce(RULE_9, 43);
    case 147:
      return reduce(RULE_9, 43);
    case 129:
      return reduce(RULE_9, 43);
    case 119:
      return reduce(RULE_9, 43);
    case 75:
      return reduce(RULE_9, 43);
    case 100:
      return reduce(RULE_9, 43);
    case 107:
      return reduce(RULE_9, 43);
    case 143:
      return reduce(RULE_9, 43);
    case 112:
      return reduce(RULE_9, 43);
    case 120:
      return reduce(RULE_9, 43);
    case 121:
      return reduce(RULE_9, 43);
    case 124:
      return reduce(RULE_9, 43);
    case 156:
      return reduce(RULE_9, 43);
    case 123:
      return reduce(RULE_9, 43);
    case 99:
      return reduce(RULE_9, 43);
    case 125:
      return reduce(RULE_9, 43);
    case 165:
      return reduce(RULE_9, 43);
    case 77:
      return reduce(RULE_9, 43);
    case 164:
      return reduce(RULE_9, 43);
    case 84:
      return reduce(RULE_9, 43);
    case 105:
      return reduce(RULE_9, 43);
    case 114:
      return reduce(RULE_9, 43);
    case 72:
      return reduce(RULE_9, 43);
    case 177:
      return reduce(RULE_9, 43);
    case 90:
      return reduce(RULE_9, 43);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action312(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_9, 24);
    case 137:
      return reduce(RULE_9, 24);
    case 110:
      return reduce(RULE_9, 24);
    case 79:
      return reduce(RULE_9, 24);
    case 106:
      return reduce(RULE_9, 24);
    case 117:
      return reduce(RULE_9, 24);
    case 102:
      return reduce(RULE_9, 24);
    case 167:
      return reduce(RULE_9, 24);
    case 152:
      return reduce(RULE_9, 24);
    case 94:
      return reduce(RULE_9, 24);
    case 80:
      return reduce(RULE_9, 24);
    case 98:
      return reduce(RULE_9, 24);
    case 171:
      return reduce(RULE_9, 24);
    case 86:
      return reduce(RULE_9, 24);
    case 83:
      return reduce(RULE_9, 24);
    case 122:
      return reduce(RULE_9, 24);
    case 108:
      return reduce(RULE_9, 24);
    case 92:
      return reduce(RULE_9, 24);
    case 128:
      return reduce(RULE_9, 24);
    case 104:
      return reduce(RULE_9, 24);
    case 82:
      return reduce(RULE_9, 24);
    case 116:
      return reduce(RULE_9, 24);
    case 85:
      return reduce(RULE_9, 24);
    case 149:
      return reduce(RULE_9, 24);
    case 157:
      return reduce(RULE_9, 24);
    case 103:
      return reduce(RULE_9, 24);
    case 147:
      return reduce(RULE_9, 24);
    case 129:
      return reduce(RULE_9, 24);
    case 119:
      return reduce(RULE_9, 24);
    case 75:
      return reduce(RULE_9, 24);
    case 100:
      return reduce(RULE_9, 24);
    case 107:
      return reduce(RULE_9, 24);
    case 143:
      return reduce(RULE_9, 24);
    case 112:
      return reduce(RULE_9, 24);
    case 120:
      return reduce(RULE_9, 24);
    case 121:
      return reduce(RULE_9, 24);
    case 124:
      return reduce(RULE_9, 24);
    case 156:
      return reduce(RULE_9, 24);
    case 123:
      return reduce(RULE_9, 24);
    case 99:
      return reduce(RULE_9, 24);
    case 125:
      return reduce(RULE_9, 24);
    case 165:
      return reduce(RULE_9, 24);
    case 77:
      return reduce(RULE_9, 24);
    case 164:
      return reduce(RULE_9, 24);
    case 84:
      return reduce(RULE_9, 24);
    case 105:
      return reduce(RULE_9, 24);
    case 114:
      return reduce(RULE_9, 24);
    case 72:
      return reduce(RULE_9, 24);
    case 177:
      return reduce(RULE_9, 24);
    case 90:
      return reduce(RULE_9, 24);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, DOT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action313(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto313(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 47: return 480;
    case 28: return 84;
    case 48: return 210;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action314(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 79:
      stateStack.addFirst(481);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(105);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(106);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW, LSQUARE, NAME, OBJECT_KEYWORD});
    }
  }

  private final int goto314(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 107;
    default: return -1;
    }
  }

  private final boolean action315(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      stateStack.addFirst(482);
      tokenStack.addFirst(token);
      return true;
    case 79:
      stateStack.addFirst(483);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {HASH, ARROW});
    }
  }

  private final boolean action316(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto316(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 484;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action317(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto317(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 485;
    default: return -1;
    }
  }

  private final boolean action318(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(97);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LPAREN});
    }
  }

  private final int goto318(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 486;
    default: return -1;
    }
  }

  private final boolean action319(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(487);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(488);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(97);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, LPAREN});
    }
  }

  private final int goto319(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 489;
    default: return -1;
    }
  }

  private final boolean action320(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(490);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action321(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto321(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 491;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action322(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_49, 0);
    case 137:
      return reduce(RULE_49, 0);
    case 139:
      return reduce(RULE_49, 0);
    case 175:
      return reduce(RULE_49, 0);
    case 157:
      return reduce(RULE_49, 0);
    case 155:
      return reduce(RULE_49, 0);
    case 106:
      return reduce(RULE_49, 0);
    case 160:
      return reduce(RULE_49, 0);
    case 130:
      return reduce(RULE_49, 0);
    case 129:
      return reduce(RULE_49, 0);
    case 167:
      return reduce(RULE_49, 0);
    case 102:
      return reduce(RULE_49, 0);
    case 153:
      return reduce(RULE_49, 0);
    case 75:
      return reduce(RULE_49, 0);
    case 174:
      return reduce(RULE_49, 0);
    case 180:
      return reduce(RULE_49, 0);
    case 166:
      return reduce(RULE_49, 0);
    case 107:
      return reduce(RULE_49, 0);
    case 143:
      return reduce(RULE_49, 0);
    case 176:
      return reduce(RULE_49, 0);
    case 132:
      return reduce(RULE_49, 0);
    case 121:
      return reduce(RULE_49, 0);
    case 156:
      return reduce(RULE_49, 0);
    case 145:
      return reduce(RULE_49, 0);
    case 162:
      return reduce(RULE_49, 0);
    case 164:
      return reduce(RULE_49, 0);
    case 105:
      return reduce(RULE_49, 0);
    case 179:
      return reduce(RULE_49, 0);
    case 72:
      return reduce(RULE_49, 0);
    case 177:
      return reduce(RULE_49, 0);
    case 116:
      return reduce(RULE_49, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, HASH, STATIC_KEYWORD, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final boolean action323(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 124:
      return reduce(RULE_14, 0);
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto323(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 492;
    default: return -1;
    }
  }

  private final boolean action324(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_13, 1);
    }
    switch (token.getType().ordinal())
    {
    case 136:
      return reduce(RULE_13, 1);
    case 129:
      return reduce(RULE_13, 1);
    case 167:
      return reduce(RULE_13, 1);
    case 149:
      return reduce(RULE_13, 1);
    case 164:
      return reduce(RULE_13, 1);
    case 75:
      return reduce(RULE_13, 1);
    case 157:
      return reduce(RULE_13, 1);
    case 154:
      return reduce(RULE_13, 1);
    case 135:
      return reduce(RULE_13, 1);
    case 156:
      return reduce(RULE_13, 1);
    case 177:
      return reduce(RULE_13, 1);
    case 143:
      return reduce(RULE_13, 1);
    default: throw new BadTokenException(token, new Object[] {null, ABSTRACT_KEYWORD, COMPOUND_KEYWORD, IMMUTABLE_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, INTERFACE_KEYWORD, NATIVE_KEYWORD, MUTABLE_KEYWORD, CLASS_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action325(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 137:
      stateStack.addFirst(60);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(71);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(493);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(77);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 162:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, STATIC_KEYWORD, HASH, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto325(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 80;
    case 9: return 81;
    case 11: return 82;
    case 27: return 83;
    case 28: return 84;
    case 8: return 85;
    case 48: return 86;
    case 49: return 87;
    case 33: return 88;
    case 7: return 89;
    case 30: return 90;
    case 10: return 91;
    default: return -1;
    }
  }

  private final boolean action326(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      return reduce(RULE_1, 0);
    case 132:
      return reduce(RULE_1, 0);
    case 139:
      return reduce(RULE_1, 0);
    case 175:
      return reduce(RULE_1, 0);
    case 155:
      return reduce(RULE_1, 0);
    case 106:
      return reduce(RULE_1, 0);
    case 145:
      return reduce(RULE_1, 0);
    case 160:
      return reduce(RULE_1, 0);
    case 130:
      return reduce(RULE_1, 0);
    case 102:
      return reduce(RULE_1, 0);
    case 153:
      return reduce(RULE_1, 0);
    case 174:
      return reduce(RULE_1, 0);
    case 105:
      return reduce(RULE_1, 0);
    case 166:
      return reduce(RULE_1, 0);
    case 107:
      return reduce(RULE_1, 0);
    case 179:
      return reduce(RULE_1, 0);
    case 72:
      return reduce(RULE_1, 0);
    case 116:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto326(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 15;
    case 27: return 494;
    default: return -1;
    }
  }

  private final boolean action327(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_30, 0);
    case 105:
      return reduce(RULE_30, 0);
    case 171:
      return reduce(RULE_30, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE, THROWS_KEYWORD});
    }
  }

  private final boolean action328(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(495);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action329(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto329(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 496;
    default: return -1;
    }
  }

  private final boolean action330(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(497);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_14, 1);
    case 124:
      return reduce(RULE_14, 1);
    case 105:
      return reduce(RULE_14, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE});
    }
  }

  private final boolean action331(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_50, 0);
    case 124:
      return reduce(RULE_50, 0);
    case 83:
      return reduce(RULE_50, 0);
    case 105:
      return reduce(RULE_50, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE, DOT});
    }
  }

  private final boolean action332(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_51, 1);
    case 139:
      return reduce(RULE_51, 1);
    case 137:
      return reduce(RULE_51, 1);
    case 175:
      return reduce(RULE_51, 1);
    case 157:
      return reduce(RULE_51, 1);
    case 155:
      return reduce(RULE_51, 1);
    case 106:
      return reduce(RULE_51, 1);
    case 160:
      return reduce(RULE_51, 1);
    case 130:
      return reduce(RULE_51, 1);
    case 129:
      return reduce(RULE_51, 1);
    case 102:
      return reduce(RULE_51, 1);
    case 167:
      return reduce(RULE_51, 1);
    case 153:
      return reduce(RULE_51, 1);
    case 75:
      return reduce(RULE_51, 1);
    case 174:
      return reduce(RULE_51, 1);
    case 180:
      return reduce(RULE_51, 1);
    case 166:
      return reduce(RULE_51, 1);
    case 107:
      return reduce(RULE_51, 1);
    case 143:
      return reduce(RULE_51, 1);
    case 176:
      return reduce(RULE_51, 1);
    case 132:
      return reduce(RULE_51, 1);
    case 121:
      return reduce(RULE_51, 1);
    case 156:
      return reduce(RULE_51, 1);
    case 145:
      return reduce(RULE_51, 1);
    case 162:
      return reduce(RULE_51, 1);
    case 164:
      return reduce(RULE_51, 1);
    case 105:
      return reduce(RULE_51, 1);
    case 179:
      return reduce(RULE_51, 1);
    case 177:
      return reduce(RULE_51, 1);
    case 72:
      return reduce(RULE_51, 1);
    case 116:
      return reduce(RULE_51, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action333(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      return reduce(RULE_16, 0);
    case 122:
      return reduce(RULE_16, 0);
    case 79:
      return reduce(RULE_16, 0);
    default: throw new BadTokenException(token, new Object[] {HASH, ARROW, RPAREN});
    }
  }

  private final boolean action334(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_15, 2);
    case 137:
      return reduce(RULE_15, 2);
    case 124:
      return reduce(RULE_15, 2);
    case 157:
      return reduce(RULE_15, 2);
    case 123:
      return reduce(RULE_15, 2);
    case 156:
      return reduce(RULE_15, 2);
    case 122:
      return reduce(RULE_15, 2);
    case 79:
      return reduce(RULE_15, 2);
    case 165:
      return reduce(RULE_15, 2);
    case 147:
      return reduce(RULE_15, 2);
    case 129:
      return reduce(RULE_15, 2);
    case 102:
      return reduce(RULE_15, 2);
    case 167:
      return reduce(RULE_15, 2);
    case 164:
      return reduce(RULE_15, 2);
    case 75:
      return reduce(RULE_15, 2);
    case 105:
      return reduce(RULE_15, 2);
    case 82:
      return reduce(RULE_15, 2);
    case 177:
      return reduce(RULE_15, 2);
    case 143:
      return reduce(RULE_15, 2);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, RPAREN, ARROW, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action335(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      return reduce(RULE_16, 2);
    case 122:
      return reduce(RULE_16, 2);
    case 79:
      return reduce(RULE_16, 2);
    default: throw new BadTokenException(token, new Object[] {HASH, ARROW, RPAREN});
    }
  }

  private final boolean action336(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      return reduce(RULE_16, 3);
    case 122:
      return reduce(RULE_16, 3);
    case 79:
      return reduce(RULE_16, 3);
    default: throw new BadTokenException(token, new Object[] {HASH, ARROW, RPAREN});
    }
  }

  private final boolean action337(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 102:
      return reduce(RULE_16, 1);
    case 79:
      return reduce(RULE_16, 1);
    case 122:
      return reduce(RULE_16, 1);
    default: throw new BadTokenException(token, new Object[] {HASH, RPAREN, ARROW});
    }
  }

  private final boolean action338(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_15, 3);
    case 137:
      return reduce(RULE_15, 3);
    case 124:
      return reduce(RULE_15, 3);
    case 157:
      return reduce(RULE_15, 3);
    case 123:
      return reduce(RULE_15, 3);
    case 156:
      return reduce(RULE_15, 3);
    case 79:
      return reduce(RULE_15, 3);
    case 122:
      return reduce(RULE_15, 3);
    case 165:
      return reduce(RULE_15, 3);
    case 147:
      return reduce(RULE_15, 3);
    case 129:
      return reduce(RULE_15, 3);
    case 102:
      return reduce(RULE_15, 3);
    case 167:
      return reduce(RULE_15, 3);
    case 164:
      return reduce(RULE_15, 3);
    case 75:
      return reduce(RULE_15, 3);
    case 105:
      return reduce(RULE_15, 3);
    case 82:
      return reduce(RULE_15, 3);
    case 177:
      return reduce(RULE_15, 3);
    case 143:
      return reduce(RULE_15, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, ARROW, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action339(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 27);
    case 137:
      return reduce(RULE_9, 27);
    case 110:
      return reduce(RULE_9, 27);
    case 79:
      return reduce(RULE_9, 27);
    case 106:
      return reduce(RULE_9, 27);
    case 117:
      return reduce(RULE_9, 27);
    case 102:
      return reduce(RULE_9, 27);
    case 167:
      return reduce(RULE_9, 27);
    case 152:
      return reduce(RULE_9, 27);
    case 94:
      return reduce(RULE_9, 27);
    case 80:
      return reduce(RULE_9, 27);
    case 98:
      return reduce(RULE_9, 27);
    case 171:
      return reduce(RULE_9, 27);
    case 86:
      return reduce(RULE_9, 27);
    case 83:
      return reduce(RULE_9, 27);
    case 122:
      return reduce(RULE_9, 27);
    case 108:
      return reduce(RULE_9, 27);
    case 92:
      return reduce(RULE_9, 27);
    case 128:
      return reduce(RULE_9, 27);
    case 104:
      return reduce(RULE_9, 27);
    case 82:
      return reduce(RULE_9, 27);
    case 116:
      return reduce(RULE_9, 27);
    case 85:
      return reduce(RULE_9, 27);
    case 149:
      return reduce(RULE_9, 27);
    case 157:
      return reduce(RULE_9, 27);
    case 103:
      return reduce(RULE_9, 27);
    case 147:
      return reduce(RULE_9, 27);
    case 129:
      return reduce(RULE_9, 27);
    case 119:
      return reduce(RULE_9, 27);
    case 75:
      return reduce(RULE_9, 27);
    case 100:
      return reduce(RULE_9, 27);
    case 107:
      return reduce(RULE_9, 27);
    case 143:
      return reduce(RULE_9, 27);
    case 112:
      return reduce(RULE_9, 27);
    case 120:
      return reduce(RULE_9, 27);
    case 121:
      return reduce(RULE_9, 27);
    case 124:
      return reduce(RULE_9, 27);
    case 156:
      return reduce(RULE_9, 27);
    case 123:
      return reduce(RULE_9, 27);
    case 99:
      return reduce(RULE_9, 27);
    case 125:
      return reduce(RULE_9, 27);
    case 165:
      return reduce(RULE_9, 27);
    case 77:
      return reduce(RULE_9, 27);
    case 164:
      return reduce(RULE_9, 27);
    case 84:
      return reduce(RULE_9, 27);
    case 105:
      return reduce(RULE_9, 27);
    case 114:
      return reduce(RULE_9, 27);
    case 72:
      return reduce(RULE_9, 27);
    case 177:
      return reduce(RULE_9, 27);
    case 90:
      return reduce(RULE_9, 27);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action340(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(498);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto340(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 499;
    default: return -1;
    }
  }

  private final boolean action341(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(500);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action342(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto342(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 501;
    default: return -1;
    }
  }

  private final boolean action343(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, HASH, STATIC_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto343(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 17: return 502;
    case 26: return 503;
    case 28: return 84;
    case 48: return 451;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action344(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_40, 7);
    case 149:
      return reduce(RULE_40, 7);
    case 137:
      return reduce(RULE_40, 7);
    case 110:
      return reduce(RULE_40, 7);
    case 157:
      return reduce(RULE_40, 7);
    case 103:
      return reduce(RULE_40, 7);
    case 147:
      return reduce(RULE_40, 7);
    case 129:
      return reduce(RULE_40, 7);
    case 117:
      return reduce(RULE_40, 7);
    case 167:
      return reduce(RULE_40, 7);
    case 119:
      return reduce(RULE_40, 7);
    case 75:
      return reduce(RULE_40, 7);
    case 100:
      return reduce(RULE_40, 7);
    case 152:
      return reduce(RULE_40, 7);
    case 94:
      return reduce(RULE_40, 7);
    case 80:
      return reduce(RULE_40, 7);
    case 143:
      return reduce(RULE_40, 7);
    case 98:
      return reduce(RULE_40, 7);
    case 112:
      return reduce(RULE_40, 7);
    case 86:
      return reduce(RULE_40, 7);
    case 120:
      return reduce(RULE_40, 7);
    case 121:
      return reduce(RULE_40, 7);
    case 124:
      return reduce(RULE_40, 7);
    case 123:
      return reduce(RULE_40, 7);
    case 156:
      return reduce(RULE_40, 7);
    case 83:
      return reduce(RULE_40, 7);
    case 99:
      return reduce(RULE_40, 7);
    case 122:
      return reduce(RULE_40, 7);
    case 125:
      return reduce(RULE_40, 7);
    case 165:
      return reduce(RULE_40, 7);
    case 77:
      return reduce(RULE_40, 7);
    case 108:
      return reduce(RULE_40, 7);
    case 92:
      return reduce(RULE_40, 7);
    case 164:
      return reduce(RULE_40, 7);
    case 84:
      return reduce(RULE_40, 7);
    case 104:
      return reduce(RULE_40, 7);
    case 105:
      return reduce(RULE_40, 7);
    case 114:
      return reduce(RULE_40, 7);
    case 82:
      return reduce(RULE_40, 7);
    case 177:
      return reduce(RULE_40, 7);
    case 90:
      return reduce(RULE_40, 7);
    case 116:
      return reduce(RULE_40, 7);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action345(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(397);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_26, 0);
    case 85:
      return reduce(RULE_11, 0);
    case 149:
      return reduce(RULE_26, 0);
    case 137:
      return reduce(RULE_26, 0);
    case 110:
      return reduce(RULE_26, 0);
    case 157:
      return reduce(RULE_26, 0);
    case 103:
      return reduce(RULE_26, 0);
    case 106:
      return reduce(RULE_26, 0);
    case 147:
      return reduce(RULE_26, 0);
    case 129:
      return reduce(RULE_26, 0);
    case 117:
      return reduce(RULE_26, 0);
    case 167:
      return reduce(RULE_26, 0);
    case 119:
      return reduce(RULE_26, 0);
    case 75:
      return reduce(RULE_26, 0);
    case 100:
      return reduce(RULE_26, 0);
    case 152:
      return reduce(RULE_26, 0);
    case 80:
      return reduce(RULE_26, 0);
    case 94:
      return reduce(RULE_26, 0);
    case 143:
      return reduce(RULE_26, 0);
    case 98:
      return reduce(RULE_26, 0);
    case 112:
      return reduce(RULE_26, 0);
    case 86:
      return reduce(RULE_26, 0);
    case 120:
      return reduce(RULE_26, 0);
    case 121:
      return reduce(RULE_26, 0);
    case 124:
      return reduce(RULE_26, 0);
    case 123:
      return reduce(RULE_26, 0);
    case 156:
      return reduce(RULE_26, 0);
    case 83:
      return reduce(RULE_26, 0);
    case 99:
      return reduce(RULE_26, 0);
    case 122:
      return reduce(RULE_26, 0);
    case 125:
      return reduce(RULE_26, 0);
    case 165:
      return reduce(RULE_26, 0);
    case 77:
      return reduce(RULE_26, 0);
    case 108:
      return reduce(RULE_26, 0);
    case 92:
      return reduce(RULE_26, 0);
    case 164:
      return reduce(RULE_26, 0);
    case 84:
      return reduce(RULE_26, 0);
    case 105:
      return reduce(RULE_26, 0);
    case 104:
      return reduce(RULE_26, 0);
    case 114:
      return reduce(RULE_26, 0);
    case 82:
      return reduce(RULE_26, 0);
    case 177:
      return reduce(RULE_26, 0);
    case 90:
      return reduce(RULE_26, 0);
    case 116:
      return reduce(RULE_26, 0);
    case 118:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, DOUBLE_COLON, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action346(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_40, 8);
    case 149:
      return reduce(RULE_40, 8);
    case 137:
      return reduce(RULE_40, 8);
    case 110:
      return reduce(RULE_40, 8);
    case 157:
      return reduce(RULE_40, 8);
    case 103:
      return reduce(RULE_40, 8);
    case 147:
      return reduce(RULE_40, 8);
    case 129:
      return reduce(RULE_40, 8);
    case 117:
      return reduce(RULE_40, 8);
    case 167:
      return reduce(RULE_40, 8);
    case 119:
      return reduce(RULE_40, 8);
    case 75:
      return reduce(RULE_40, 8);
    case 100:
      return reduce(RULE_40, 8);
    case 152:
      return reduce(RULE_40, 8);
    case 94:
      return reduce(RULE_40, 8);
    case 80:
      return reduce(RULE_40, 8);
    case 143:
      return reduce(RULE_40, 8);
    case 98:
      return reduce(RULE_40, 8);
    case 112:
      return reduce(RULE_40, 8);
    case 86:
      return reduce(RULE_40, 8);
    case 120:
      return reduce(RULE_40, 8);
    case 121:
      return reduce(RULE_40, 8);
    case 124:
      return reduce(RULE_40, 8);
    case 123:
      return reduce(RULE_40, 8);
    case 156:
      return reduce(RULE_40, 8);
    case 83:
      return reduce(RULE_40, 8);
    case 99:
      return reduce(RULE_40, 8);
    case 122:
      return reduce(RULE_40, 8);
    case 125:
      return reduce(RULE_40, 8);
    case 165:
      return reduce(RULE_40, 8);
    case 77:
      return reduce(RULE_40, 8);
    case 108:
      return reduce(RULE_40, 8);
    case 92:
      return reduce(RULE_40, 8);
    case 164:
      return reduce(RULE_40, 8);
    case 84:
      return reduce(RULE_40, 8);
    case 104:
      return reduce(RULE_40, 8);
    case 105:
      return reduce(RULE_40, 8);
    case 114:
      return reduce(RULE_40, 8);
    case 82:
      return reduce(RULE_40, 8);
    case 177:
      return reduce(RULE_40, 8);
    case 90:
      return reduce(RULE_40, 8);
    case 116:
      return reduce(RULE_40, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto346(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action347(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(393);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_26, 1);
    case 85:
      return reduce(RULE_11, 1);
    case 149:
      return reduce(RULE_26, 1);
    case 137:
      return reduce(RULE_26, 1);
    case 110:
      return reduce(RULE_26, 1);
    case 157:
      return reduce(RULE_26, 1);
    case 103:
      return reduce(RULE_26, 1);
    case 106:
      return reduce(RULE_26, 1);
    case 147:
      return reduce(RULE_26, 1);
    case 129:
      return reduce(RULE_26, 1);
    case 117:
      return reduce(RULE_26, 1);
    case 167:
      return reduce(RULE_26, 1);
    case 119:
      return reduce(RULE_26, 1);
    case 75:
      return reduce(RULE_26, 1);
    case 100:
      return reduce(RULE_26, 1);
    case 152:
      return reduce(RULE_26, 1);
    case 80:
      return reduce(RULE_26, 1);
    case 94:
      return reduce(RULE_26, 1);
    case 143:
      return reduce(RULE_26, 1);
    case 98:
      return reduce(RULE_26, 1);
    case 112:
      return reduce(RULE_26, 1);
    case 86:
      return reduce(RULE_26, 1);
    case 120:
      return reduce(RULE_26, 1);
    case 121:
      return reduce(RULE_26, 1);
    case 124:
      return reduce(RULE_26, 1);
    case 123:
      return reduce(RULE_26, 1);
    case 156:
      return reduce(RULE_26, 1);
    case 83:
      return reduce(RULE_26, 1);
    case 99:
      return reduce(RULE_26, 1);
    case 122:
      return reduce(RULE_26, 1);
    case 125:
      return reduce(RULE_26, 1);
    case 165:
      return reduce(RULE_26, 1);
    case 77:
      return reduce(RULE_26, 1);
    case 108:
      return reduce(RULE_26, 1);
    case 92:
      return reduce(RULE_26, 1);
    case 164:
      return reduce(RULE_26, 1);
    case 84:
      return reduce(RULE_26, 1);
    case 105:
      return reduce(RULE_26, 1);
    case 104:
      return reduce(RULE_26, 1);
    case 114:
      return reduce(RULE_26, 1);
    case 82:
      return reduce(RULE_26, 1);
    case 177:
      return reduce(RULE_26, 1);
    case 90:
      return reduce(RULE_26, 1);
    case 116:
      return reduce(RULE_26, 1);
    case 118:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, DOUBLE_COLON, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action348(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_40, 5);
    case 149:
      return reduce(RULE_40, 5);
    case 137:
      return reduce(RULE_40, 5);
    case 110:
      return reduce(RULE_40, 5);
    case 157:
      return reduce(RULE_40, 5);
    case 103:
      return reduce(RULE_40, 5);
    case 147:
      return reduce(RULE_40, 5);
    case 129:
      return reduce(RULE_40, 5);
    case 117:
      return reduce(RULE_40, 5);
    case 167:
      return reduce(RULE_40, 5);
    case 119:
      return reduce(RULE_40, 5);
    case 75:
      return reduce(RULE_40, 5);
    case 100:
      return reduce(RULE_40, 5);
    case 152:
      return reduce(RULE_40, 5);
    case 94:
      return reduce(RULE_40, 5);
    case 80:
      return reduce(RULE_40, 5);
    case 143:
      return reduce(RULE_40, 5);
    case 98:
      return reduce(RULE_40, 5);
    case 112:
      return reduce(RULE_40, 5);
    case 86:
      return reduce(RULE_40, 5);
    case 120:
      return reduce(RULE_40, 5);
    case 121:
      return reduce(RULE_40, 5);
    case 124:
      return reduce(RULE_40, 5);
    case 123:
      return reduce(RULE_40, 5);
    case 156:
      return reduce(RULE_40, 5);
    case 83:
      return reduce(RULE_40, 5);
    case 99:
      return reduce(RULE_40, 5);
    case 122:
      return reduce(RULE_40, 5);
    case 125:
      return reduce(RULE_40, 5);
    case 165:
      return reduce(RULE_40, 5);
    case 77:
      return reduce(RULE_40, 5);
    case 108:
      return reduce(RULE_40, 5);
    case 92:
      return reduce(RULE_40, 5);
    case 164:
      return reduce(RULE_40, 5);
    case 84:
      return reduce(RULE_40, 5);
    case 104:
      return reduce(RULE_40, 5);
    case 105:
      return reduce(RULE_40, 5);
    case 114:
      return reduce(RULE_40, 5);
    case 82:
      return reduce(RULE_40, 5);
    case 177:
      return reduce(RULE_40, 5);
    case 90:
      return reduce(RULE_40, 5);
    case 116:
      return reduce(RULE_40, 5);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action349(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_40, 6);
    case 149:
      return reduce(RULE_40, 6);
    case 137:
      return reduce(RULE_40, 6);
    case 110:
      return reduce(RULE_40, 6);
    case 157:
      return reduce(RULE_40, 6);
    case 103:
      return reduce(RULE_40, 6);
    case 147:
      return reduce(RULE_40, 6);
    case 129:
      return reduce(RULE_40, 6);
    case 117:
      return reduce(RULE_40, 6);
    case 167:
      return reduce(RULE_40, 6);
    case 119:
      return reduce(RULE_40, 6);
    case 75:
      return reduce(RULE_40, 6);
    case 100:
      return reduce(RULE_40, 6);
    case 152:
      return reduce(RULE_40, 6);
    case 94:
      return reduce(RULE_40, 6);
    case 80:
      return reduce(RULE_40, 6);
    case 143:
      return reduce(RULE_40, 6);
    case 98:
      return reduce(RULE_40, 6);
    case 112:
      return reduce(RULE_40, 6);
    case 86:
      return reduce(RULE_40, 6);
    case 120:
      return reduce(RULE_40, 6);
    case 121:
      return reduce(RULE_40, 6);
    case 124:
      return reduce(RULE_40, 6);
    case 123:
      return reduce(RULE_40, 6);
    case 156:
      return reduce(RULE_40, 6);
    case 83:
      return reduce(RULE_40, 6);
    case 99:
      return reduce(RULE_40, 6);
    case 122:
      return reduce(RULE_40, 6);
    case 125:
      return reduce(RULE_40, 6);
    case 165:
      return reduce(RULE_40, 6);
    case 77:
      return reduce(RULE_40, 6);
    case 108:
      return reduce(RULE_40, 6);
    case 92:
      return reduce(RULE_40, 6);
    case 164:
      return reduce(RULE_40, 6);
    case 84:
      return reduce(RULE_40, 6);
    case 104:
      return reduce(RULE_40, 6);
    case 105:
      return reduce(RULE_40, 6);
    case 114:
      return reduce(RULE_40, 6);
    case 82:
      return reduce(RULE_40, 6);
    case 177:
      return reduce(RULE_40, 6);
    case 90:
      return reduce(RULE_40, 6);
    case 116:
      return reduce(RULE_40, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto349(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action350(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto350(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 504;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action351(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_40, 3);
    case 149:
      return reduce(RULE_40, 3);
    case 137:
      return reduce(RULE_40, 3);
    case 110:
      return reduce(RULE_40, 3);
    case 157:
      return reduce(RULE_40, 3);
    case 103:
      return reduce(RULE_40, 3);
    case 147:
      return reduce(RULE_40, 3);
    case 129:
      return reduce(RULE_40, 3);
    case 117:
      return reduce(RULE_40, 3);
    case 167:
      return reduce(RULE_40, 3);
    case 119:
      return reduce(RULE_40, 3);
    case 75:
      return reduce(RULE_40, 3);
    case 100:
      return reduce(RULE_40, 3);
    case 152:
      return reduce(RULE_40, 3);
    case 94:
      return reduce(RULE_40, 3);
    case 80:
      return reduce(RULE_40, 3);
    case 143:
      return reduce(RULE_40, 3);
    case 98:
      return reduce(RULE_40, 3);
    case 112:
      return reduce(RULE_40, 3);
    case 86:
      return reduce(RULE_40, 3);
    case 120:
      return reduce(RULE_40, 3);
    case 121:
      return reduce(RULE_40, 3);
    case 124:
      return reduce(RULE_40, 3);
    case 123:
      return reduce(RULE_40, 3);
    case 156:
      return reduce(RULE_40, 3);
    case 83:
      return reduce(RULE_40, 3);
    case 99:
      return reduce(RULE_40, 3);
    case 122:
      return reduce(RULE_40, 3);
    case 125:
      return reduce(RULE_40, 3);
    case 165:
      return reduce(RULE_40, 3);
    case 77:
      return reduce(RULE_40, 3);
    case 108:
      return reduce(RULE_40, 3);
    case 92:
      return reduce(RULE_40, 3);
    case 164:
      return reduce(RULE_40, 3);
    case 84:
      return reduce(RULE_40, 3);
    case 104:
      return reduce(RULE_40, 3);
    case 105:
      return reduce(RULE_40, 3);
    case 114:
      return reduce(RULE_40, 3);
    case 82:
      return reduce(RULE_40, 3);
    case 177:
      return reduce(RULE_40, 3);
    case 90:
      return reduce(RULE_40, 3);
    case 116:
      return reduce(RULE_40, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action352(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_40, 4);
    case 149:
      return reduce(RULE_40, 4);
    case 137:
      return reduce(RULE_40, 4);
    case 110:
      return reduce(RULE_40, 4);
    case 157:
      return reduce(RULE_40, 4);
    case 103:
      return reduce(RULE_40, 4);
    case 147:
      return reduce(RULE_40, 4);
    case 129:
      return reduce(RULE_40, 4);
    case 117:
      return reduce(RULE_40, 4);
    case 167:
      return reduce(RULE_40, 4);
    case 119:
      return reduce(RULE_40, 4);
    case 75:
      return reduce(RULE_40, 4);
    case 100:
      return reduce(RULE_40, 4);
    case 152:
      return reduce(RULE_40, 4);
    case 94:
      return reduce(RULE_40, 4);
    case 80:
      return reduce(RULE_40, 4);
    case 143:
      return reduce(RULE_40, 4);
    case 98:
      return reduce(RULE_40, 4);
    case 112:
      return reduce(RULE_40, 4);
    case 86:
      return reduce(RULE_40, 4);
    case 120:
      return reduce(RULE_40, 4);
    case 121:
      return reduce(RULE_40, 4);
    case 124:
      return reduce(RULE_40, 4);
    case 123:
      return reduce(RULE_40, 4);
    case 156:
      return reduce(RULE_40, 4);
    case 83:
      return reduce(RULE_40, 4);
    case 99:
      return reduce(RULE_40, 4);
    case 122:
      return reduce(RULE_40, 4);
    case 125:
      return reduce(RULE_40, 4);
    case 165:
      return reduce(RULE_40, 4);
    case 77:
      return reduce(RULE_40, 4);
    case 108:
      return reduce(RULE_40, 4);
    case 92:
      return reduce(RULE_40, 4);
    case 164:
      return reduce(RULE_40, 4);
    case 84:
      return reduce(RULE_40, 4);
    case 104:
      return reduce(RULE_40, 4);
    case 105:
      return reduce(RULE_40, 4);
    case 114:
      return reduce(RULE_40, 4);
    case 82:
      return reduce(RULE_40, 4);
    case 177:
      return reduce(RULE_40, 4);
    case 90:
      return reduce(RULE_40, 4);
    case 116:
      return reduce(RULE_40, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto352(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action353(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto353(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 219;
    case 61: return 232;
    case 71: return 505;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 59: return 506;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action354(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto354(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 219;
    case 61: return 232;
    case 71: return 507;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 59: return 508;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action355(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto355(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 509;
    case 71: return 510;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action356(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto356(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 511;
    case 71: return 512;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action357(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto357(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 513;
    case 71: return 514;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action358(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto358(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 515;
    case 61: return 232;
    case 71: return 516;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action359(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto359(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 517;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 518;
    default: return -1;
    }
  }

  private final boolean action360(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto360(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 519;
    case 48: return 221;
    case 66: return 139;
    case 64: return 140;
    case 55: return 222;
    case 59: return 223;
    case 30: return 347;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    case 54: return 520;
    default: return -1;
    }
  }

  private final boolean action361(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto361(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 521;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 522;
    default: return -1;
    }
  }

  private final boolean action362(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto362(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 523;
    case 61: return 232;
    case 71: return 524;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action363(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto363(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 525;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action364(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto364(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 526;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 527;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action365(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto365(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 528;
    case 71: return 529;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action366(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 73:
      stateStack.addFirst(530);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL});
    }
  }

  private final boolean action367(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto367(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 531;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 532;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action368(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto368(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 533;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 534;
    default: return -1;
    }
  }

  private final boolean action369(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto369(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 535;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 536;
    default: return -1;
    }
  }

  private final boolean action370(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto370(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 537;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 538;
    default: return -1;
    }
  }

  private final boolean action371(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto371(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 539;
    case 61: return 232;
    case 71: return 540;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action372(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto372(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 541;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 542;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action373(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto373(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 543;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 544;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action374(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto374(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 219;
    case 61: return 232;
    case 71: return 545;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 59: return 546;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action375(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto375(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 547;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 548;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action376(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto376(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 549;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 550;
    default: return -1;
    }
  }

  private final boolean action377(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto377(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 219;
    case 61: return 232;
    case 71: return 551;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 59: return 552;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action378(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto378(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 553;
    case 61: return 232;
    case 71: return 554;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action379(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto379(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 555;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action380(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(556);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action381(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto381(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 557;
    case 48: return 221;
    case 66: return 139;
    case 64: return 140;
    case 55: return 222;
    case 59: return 223;
    case 30: return 347;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    case 54: return 558;
    default: return -1;
    }
  }

  private final boolean action382(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto382(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 559;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 560;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action383(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto383(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 561;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 562;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action384(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto384(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 563;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 564;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action385(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto385(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 565;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 566;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action386(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto386(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 567;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 568;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    default: return -1;
    }
  }

  private final boolean action387(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto387(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 569;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action388(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto388(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 570;
    case 61: return 232;
    case 71: return 571;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action389(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto389(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 572;
    case 61: return 232;
    case 71: return 573;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action390(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto390(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 574;
    case 61: return 232;
    case 71: return 575;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action391(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto391(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 60: return 576;
    case 61: return 232;
    case 71: return 577;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action392(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto392(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 50: return 337;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 224;
    case 65: return 225;
    case 68: return 226;
    case 53: return 578;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 231;
    case 61: return 232;
    case 63: return 233;
    case 29: return 338;
    case 49: return 234;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action393(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto393(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 579;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action394(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(580);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action395(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 16);
    case 149:
      return reduce(RULE_17, 16);
    case 137:
      return reduce(RULE_17, 16);
    case 110:
      return reduce(RULE_17, 16);
    case 157:
      return reduce(RULE_17, 16);
    case 103:
      return reduce(RULE_17, 16);
    case 96:
      return reduce(RULE_17, 16);
    case 106:
      return reduce(RULE_17, 16);
    case 147:
      return reduce(RULE_17, 16);
    case 129:
      return reduce(RULE_17, 16);
    case 117:
      return reduce(RULE_17, 16);
    case 167:
      return reduce(RULE_17, 16);
    case 119:
      return reduce(RULE_17, 16);
    case 75:
      return reduce(RULE_17, 16);
    case 100:
      return reduce(RULE_17, 16);
    case 152:
      return reduce(RULE_17, 16);
    case 80:
      return reduce(RULE_17, 16);
    case 94:
      return reduce(RULE_17, 16);
    case 107:
      return reduce(RULE_17, 16);
    case 143:
      return reduce(RULE_17, 16);
    case 98:
      return reduce(RULE_17, 16);
    case 112:
      return reduce(RULE_17, 16);
    case 86:
      return reduce(RULE_17, 16);
    case 120:
      return reduce(RULE_17, 16);
    case 121:
      return reduce(RULE_17, 16);
    case 124:
      return reduce(RULE_17, 16);
    case 123:
      return reduce(RULE_17, 16);
    case 156:
      return reduce(RULE_17, 16);
    case 83:
      return reduce(RULE_17, 16);
    case 99:
      return reduce(RULE_17, 16);
    case 122:
      return reduce(RULE_17, 16);
    case 125:
      return reduce(RULE_17, 16);
    case 165:
      return reduce(RULE_17, 16);
    case 77:
      return reduce(RULE_17, 16);
    case 92:
      return reduce(RULE_17, 16);
    case 108:
      return reduce(RULE_17, 16);
    case 164:
      return reduce(RULE_17, 16);
    case 84:
      return reduce(RULE_17, 16);
    case 105:
      return reduce(RULE_17, 16);
    case 104:
      return reduce(RULE_17, 16);
    case 114:
      return reduce(RULE_17, 16);
    case 82:
      return reduce(RULE_17, 16);
    case 177:
      return reduce(RULE_17, 16);
    case 90:
      return reduce(RULE_17, 16);
    case 116:
      return reduce(RULE_17, 16);
    case 118:
      return reduce(RULE_17, 16);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action396(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto396(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 50: return 333;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 224;
    case 65: return 225;
    case 68: return 226;
    case 53: return 581;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 231;
    case 61: return 232;
    case 63: return 233;
    case 29: return 334;
    case 49: return 234;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action397(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto397(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 582;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action398(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 73:
      stateStack.addFirst(583);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {INTEGER_LITERAL});
    }
  }

  private final boolean action399(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto399(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 584;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action400(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto400(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 585;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 586;
    default: return -1;
    }
  }

  private final boolean action401(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto401(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 587;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 588;
    default: return -1;
    }
  }

  private final boolean action402(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto402(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 589;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action403(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto403(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 590;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 591;
    default: return -1;
    }
  }

  private final boolean action404(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto404(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 592;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 593;
    default: return -1;
    }
  }

  private final boolean action405(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto405(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 594;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 595;
    default: return -1;
    }
  }

  private final boolean action406(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto406(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 596;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 30: return 347;
    case 59: return 223;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 597;
    default: return -1;
    }
  }

  private final boolean action407(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto407(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 598;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 63: return 233;
    case 29: return 599;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action408(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto408(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 600;
    default: return -1;
    }
  }

  private final boolean action409(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto409(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 578;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 63: return 233;
    case 29: return 338;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action410(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto410(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 581;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 63: return 233;
    case 29: return 334;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action411(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_43, 0);
    case 149:
      return reduce(RULE_43, 0);
    case 139:
      return reduce(RULE_43, 0);
    case 175:
      return reduce(RULE_43, 0);
    case 142:
      return reduce(RULE_43, 0);
    case 157:
      return reduce(RULE_43, 0);
    case 155:
      return reduce(RULE_43, 0);
    case 173:
      return reduce(RULE_43, 0);
    case 106:
      return reduce(RULE_43, 0);
    case 160:
      return reduce(RULE_43, 0);
    case 130:
      return reduce(RULE_43, 0);
    case 129:
      return reduce(RULE_43, 0);
    case 167:
      return reduce(RULE_43, 0);
    case 74:
      return reduce(RULE_43, 0);
    case 102:
      return reduce(RULE_43, 0);
    case 153:
      return reduce(RULE_43, 0);
    case 75:
      return reduce(RULE_43, 0);
    case 138:
      return reduce(RULE_43, 0);
    case 163:
      return reduce(RULE_43, 0);
    case 174:
      return reduce(RULE_43, 0);
    case 166:
      return reduce(RULE_43, 0);
    case 172:
      return reduce(RULE_43, 0);
    case 107:
      return reduce(RULE_43, 0);
    case 89:
      return reduce(RULE_43, 0);
    case 170:
      return reduce(RULE_43, 0);
    case 143:
      return reduce(RULE_43, 0);
    case 73:
      return reduce(RULE_43, 0);
    case 176:
      return reduce(RULE_43, 0);
    case 132:
      return reduce(RULE_43, 0);
    case 169:
      return reduce(RULE_43, 0);
    case 121:
      return reduce(RULE_43, 0);
    case 133:
      return reduce(RULE_43, 0);
    case 156:
      return reduce(RULE_43, 0);
    case 131:
      return reduce(RULE_43, 0);
    case 76:
      return reduce(RULE_43, 0);
    case 148:
      return reduce(RULE_43, 0);
    case 145:
      return reduce(RULE_43, 0);
    case 128:
      return reduce(RULE_43, 0);
    case 168:
      return reduce(RULE_43, 0);
    case 181:
      return reduce(RULE_43, 0);
    case 164:
      return reduce(RULE_43, 0);
    case 93:
      return reduce(RULE_43, 0);
    case 105:
      return reduce(RULE_43, 0);
    case 179:
      return reduce(RULE_43, 0);
    case 72:
      return reduce(RULE_43, 0);
    case 146:
      return reduce(RULE_43, 0);
    case 177:
      return reduce(RULE_43, 0);
    case 158:
      return reduce(RULE_43, 0);
    case 116:
      return reduce(RULE_43, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action412(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_52, 1);
    case 149:
      return reduce(RULE_52, 1);
    case 139:
      return reduce(RULE_52, 1);
    case 175:
      return reduce(RULE_52, 1);
    case 142:
      return reduce(RULE_52, 1);
    case 157:
      return reduce(RULE_52, 1);
    case 155:
      return reduce(RULE_52, 1);
    case 173:
      return reduce(RULE_52, 1);
    case 106:
      return reduce(RULE_52, 1);
    case 160:
      return reduce(RULE_52, 1);
    case 130:
      return reduce(RULE_52, 1);
    case 129:
      return reduce(RULE_52, 1);
    case 167:
      return reduce(RULE_52, 1);
    case 74:
      return reduce(RULE_52, 1);
    case 102:
      return reduce(RULE_52, 1);
    case 153:
      return reduce(RULE_52, 1);
    case 75:
      return reduce(RULE_52, 1);
    case 138:
      return reduce(RULE_52, 1);
    case 163:
      return reduce(RULE_52, 1);
    case 174:
      return reduce(RULE_52, 1);
    case 166:
      return reduce(RULE_52, 1);
    case 172:
      return reduce(RULE_52, 1);
    case 107:
      return reduce(RULE_52, 1);
    case 89:
      return reduce(RULE_52, 1);
    case 170:
      return reduce(RULE_52, 1);
    case 143:
      return reduce(RULE_52, 1);
    case 73:
      return reduce(RULE_52, 1);
    case 176:
      return reduce(RULE_52, 1);
    case 132:
      return reduce(RULE_52, 1);
    case 169:
      return reduce(RULE_52, 1);
    case 121:
      return reduce(RULE_52, 1);
    case 133:
      return reduce(RULE_52, 1);
    case 156:
      return reduce(RULE_52, 1);
    case 131:
      return reduce(RULE_52, 1);
    case 76:
      return reduce(RULE_52, 1);
    case 148:
      return reduce(RULE_52, 1);
    case 145:
      return reduce(RULE_52, 1);
    case 128:
      return reduce(RULE_52, 1);
    case 168:
      return reduce(RULE_52, 1);
    case 181:
      return reduce(RULE_52, 1);
    case 164:
      return reduce(RULE_52, 1);
    case 93:
      return reduce(RULE_52, 1);
    case 105:
      return reduce(RULE_52, 1);
    case 179:
      return reduce(RULE_52, 1);
    case 72:
      return reduce(RULE_52, 1);
    case 146:
      return reduce(RULE_52, 1);
    case 177:
      return reduce(RULE_52, 1);
    case 158:
      return reduce(RULE_52, 1);
    case 116:
      return reduce(RULE_52, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action413(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 17);
    case 149:
      return reduce(RULE_22, 17);
    case 139:
      return reduce(RULE_22, 17);
    case 175:
      return reduce(RULE_22, 17);
    case 142:
      return reduce(RULE_22, 17);
    case 157:
      return reduce(RULE_22, 17);
    case 155:
      return reduce(RULE_22, 17);
    case 173:
      return reduce(RULE_22, 17);
    case 106:
      return reduce(RULE_22, 17);
    case 160:
      return reduce(RULE_22, 17);
    case 130:
      return reduce(RULE_22, 17);
    case 129:
      return reduce(RULE_22, 17);
    case 167:
      return reduce(RULE_22, 17);
    case 74:
      return reduce(RULE_22, 17);
    case 102:
      return reduce(RULE_22, 17);
    case 153:
      return reduce(RULE_22, 17);
    case 75:
      return reduce(RULE_22, 17);
    case 138:
      return reduce(RULE_22, 17);
    case 163:
      return reduce(RULE_22, 17);
    case 174:
      return reduce(RULE_22, 17);
    case 166:
      return reduce(RULE_22, 17);
    case 172:
      return reduce(RULE_22, 17);
    case 107:
      return reduce(RULE_22, 17);
    case 89:
      return reduce(RULE_22, 17);
    case 170:
      return reduce(RULE_22, 17);
    case 143:
      return reduce(RULE_22, 17);
    case 73:
      return reduce(RULE_22, 17);
    case 176:
      return reduce(RULE_22, 17);
    case 132:
      return reduce(RULE_22, 17);
    case 169:
      return reduce(RULE_22, 17);
    case 121:
      return reduce(RULE_22, 17);
    case 133:
      return reduce(RULE_22, 17);
    case 156:
      return reduce(RULE_22, 17);
    case 131:
      return reduce(RULE_22, 17);
    case 76:
      return reduce(RULE_22, 17);
    case 148:
      return reduce(RULE_22, 17);
    case 145:
      return reduce(RULE_22, 17);
    case 128:
      return reduce(RULE_22, 17);
    case 168:
      return reduce(RULE_22, 17);
    case 181:
      return reduce(RULE_22, 17);
    case 164:
      return reduce(RULE_22, 17);
    case 93:
      return reduce(RULE_22, 17);
    case 105:
      return reduce(RULE_22, 17);
    case 179:
      return reduce(RULE_22, 17);
    case 72:
      return reduce(RULE_22, 17);
    case 146:
      return reduce(RULE_22, 17);
    case 177:
      return reduce(RULE_22, 17);
    case 158:
      return reduce(RULE_22, 17);
    case 116:
      return reduce(RULE_22, 17);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action414(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_53, 1);
    case 149:
      return reduce(RULE_53, 1);
    case 137:
      return reduce(RULE_53, 1);
    case 110:
      return reduce(RULE_53, 1);
    case 157:
      return reduce(RULE_53, 1);
    case 103:
      return reduce(RULE_53, 1);
    case 96:
      return reduce(RULE_53, 1);
    case 106:
      return reduce(RULE_53, 1);
    case 147:
      return reduce(RULE_53, 1);
    case 129:
      return reduce(RULE_53, 1);
    case 117:
      return reduce(RULE_53, 1);
    case 167:
      return reduce(RULE_53, 1);
    case 119:
      return reduce(RULE_53, 1);
    case 75:
      return reduce(RULE_53, 1);
    case 100:
      return reduce(RULE_53, 1);
    case 152:
      return reduce(RULE_53, 1);
    case 94:
      return reduce(RULE_53, 1);
    case 80:
      return reduce(RULE_53, 1);
    case 107:
      return reduce(RULE_53, 1);
    case 143:
      return reduce(RULE_53, 1);
    case 98:
      return reduce(RULE_53, 1);
    case 112:
      return reduce(RULE_53, 1);
    case 86:
      return reduce(RULE_53, 1);
    case 120:
      return reduce(RULE_53, 1);
    case 121:
      return reduce(RULE_53, 1);
    case 124:
      return reduce(RULE_53, 1);
    case 123:
      return reduce(RULE_53, 1);
    case 156:
      return reduce(RULE_53, 1);
    case 83:
      return reduce(RULE_53, 1);
    case 99:
      return reduce(RULE_53, 1);
    case 122:
      return reduce(RULE_53, 1);
    case 125:
      return reduce(RULE_53, 1);
    case 165:
      return reduce(RULE_53, 1);
    case 77:
      return reduce(RULE_53, 1);
    case 108:
      return reduce(RULE_53, 1);
    case 92:
      return reduce(RULE_53, 1);
    case 164:
      return reduce(RULE_53, 1);
    case 84:
      return reduce(RULE_53, 1);
    case 104:
      return reduce(RULE_53, 1);
    case 105:
      return reduce(RULE_53, 1);
    case 114:
      return reduce(RULE_53, 1);
    case 82:
      return reduce(RULE_53, 1);
    case 177:
      return reduce(RULE_53, 1);
    case 90:
      return reduce(RULE_53, 1);
    case 116:
      return reduce(RULE_53, 1);
    case 118:
      return reduce(RULE_53, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action415(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(601);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(602);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action416(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(360);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(364);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(367);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(372);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(373);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(375);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(379);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_54, 1);
    case 83:
      return reduce(RULE_54, 1);
    case 122:
      return reduce(RULE_54, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, PERCENT, LANGLE, LPAREN, QUESTION_MARK_COLON, RANGLE, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, DOUBLE_AMPERSAND, LANGLE_EQUALS, PLUS, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto416(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action417(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_54, 0);
    case 83:
      return reduce(RULE_54, 0);
    case 122:
      return reduce(RULE_54, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, COMMA, RPAREN});
    }
  }

  private final boolean action418(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 15);
    case 149:
      return reduce(RULE_22, 15);
    case 139:
      return reduce(RULE_22, 15);
    case 175:
      return reduce(RULE_22, 15);
    case 142:
      return reduce(RULE_22, 15);
    case 157:
      return reduce(RULE_22, 15);
    case 155:
      return reduce(RULE_22, 15);
    case 173:
      return reduce(RULE_22, 15);
    case 106:
      return reduce(RULE_22, 15);
    case 160:
      return reduce(RULE_22, 15);
    case 130:
      return reduce(RULE_22, 15);
    case 129:
      return reduce(RULE_22, 15);
    case 167:
      return reduce(RULE_22, 15);
    case 74:
      return reduce(RULE_22, 15);
    case 102:
      return reduce(RULE_22, 15);
    case 153:
      return reduce(RULE_22, 15);
    case 75:
      return reduce(RULE_22, 15);
    case 138:
      return reduce(RULE_22, 15);
    case 163:
      return reduce(RULE_22, 15);
    case 174:
      return reduce(RULE_22, 15);
    case 166:
      return reduce(RULE_22, 15);
    case 172:
      return reduce(RULE_22, 15);
    case 107:
      return reduce(RULE_22, 15);
    case 89:
      return reduce(RULE_22, 15);
    case 170:
      return reduce(RULE_22, 15);
    case 143:
      return reduce(RULE_22, 15);
    case 73:
      return reduce(RULE_22, 15);
    case 176:
      return reduce(RULE_22, 15);
    case 132:
      return reduce(RULE_22, 15);
    case 169:
      return reduce(RULE_22, 15);
    case 121:
      return reduce(RULE_22, 15);
    case 133:
      return reduce(RULE_22, 15);
    case 156:
      return reduce(RULE_22, 15);
    case 131:
      return reduce(RULE_22, 15);
    case 76:
      return reduce(RULE_22, 15);
    case 148:
      return reduce(RULE_22, 15);
    case 145:
      return reduce(RULE_22, 15);
    case 128:
      return reduce(RULE_22, 15);
    case 168:
      return reduce(RULE_22, 15);
    case 181:
      return reduce(RULE_22, 15);
    case 164:
      return reduce(RULE_22, 15);
    case 93:
      return reduce(RULE_22, 15);
    case 105:
      return reduce(RULE_22, 15);
    case 179:
      return reduce(RULE_22, 15);
    case 72:
      return reduce(RULE_22, 15);
    case 146:
      return reduce(RULE_22, 15);
    case 177:
      return reduce(RULE_22, 15);
    case 158:
      return reduce(RULE_22, 15);
    case 116:
      return reduce(RULE_22, 15);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action419(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 119:
      stateStack.addFirst(603);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE});
    }
  }

  private final boolean action420(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 140:
      stateStack.addFirst(604);
      tokenStack.addFirst(token);
      return true;
    case 159:
      return reduce(RULE_55, 0);
    case 149:
      return reduce(RULE_55, 0);
    case 139:
      return reduce(RULE_55, 0);
    case 175:
      return reduce(RULE_55, 0);
    case 142:
      return reduce(RULE_55, 0);
    case 157:
      return reduce(RULE_55, 0);
    case 155:
      return reduce(RULE_55, 0);
    case 173:
      return reduce(RULE_55, 0);
    case 106:
      return reduce(RULE_55, 0);
    case 160:
      return reduce(RULE_55, 0);
    case 130:
      return reduce(RULE_55, 0);
    case 129:
      return reduce(RULE_55, 0);
    case 167:
      return reduce(RULE_55, 0);
    case 74:
      return reduce(RULE_55, 0);
    case 102:
      return reduce(RULE_55, 0);
    case 153:
      return reduce(RULE_55, 0);
    case 75:
      return reduce(RULE_55, 0);
    case 138:
      return reduce(RULE_55, 0);
    case 163:
      return reduce(RULE_55, 0);
    case 174:
      return reduce(RULE_55, 0);
    case 166:
      return reduce(RULE_55, 0);
    case 172:
      return reduce(RULE_55, 0);
    case 107:
      return reduce(RULE_55, 0);
    case 89:
      return reduce(RULE_55, 0);
    case 170:
      return reduce(RULE_55, 0);
    case 143:
      return reduce(RULE_55, 0);
    case 73:
      return reduce(RULE_55, 0);
    case 176:
      return reduce(RULE_55, 0);
    case 132:
      return reduce(RULE_55, 0);
    case 169:
      return reduce(RULE_55, 0);
    case 121:
      return reduce(RULE_55, 0);
    case 133:
      return reduce(RULE_55, 0);
    case 156:
      return reduce(RULE_55, 0);
    case 131:
      return reduce(RULE_55, 0);
    case 76:
      return reduce(RULE_55, 0);
    case 148:
      return reduce(RULE_55, 0);
    case 145:
      return reduce(RULE_55, 0);
    case 128:
      return reduce(RULE_55, 0);
    case 168:
      return reduce(RULE_55, 0);
    case 181:
      return reduce(RULE_55, 0);
    case 164:
      return reduce(RULE_55, 0);
    case 93:
      return reduce(RULE_55, 0);
    case 105:
      return reduce(RULE_55, 0);
    case 179:
      return reduce(RULE_55, 0);
    case 72:
      return reduce(RULE_55, 0);
    case 146:
      return reduce(RULE_55, 0);
    case 177:
      return reduce(RULE_55, 0);
    case 158:
      return reduce(RULE_55, 0);
    case 116:
      return reduce(RULE_55, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, LSQUARE, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, ELSE_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action421(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_52, 0);
    case 149:
      return reduce(RULE_52, 0);
    case 139:
      return reduce(RULE_52, 0);
    case 175:
      return reduce(RULE_52, 0);
    case 142:
      return reduce(RULE_52, 0);
    case 157:
      return reduce(RULE_52, 0);
    case 155:
      return reduce(RULE_52, 0);
    case 173:
      return reduce(RULE_52, 0);
    case 106:
      return reduce(RULE_52, 0);
    case 160:
      return reduce(RULE_52, 0);
    case 130:
      return reduce(RULE_52, 0);
    case 129:
      return reduce(RULE_52, 0);
    case 167:
      return reduce(RULE_52, 0);
    case 74:
      return reduce(RULE_52, 0);
    case 102:
      return reduce(RULE_52, 0);
    case 153:
      return reduce(RULE_52, 0);
    case 75:
      return reduce(RULE_52, 0);
    case 138:
      return reduce(RULE_52, 0);
    case 163:
      return reduce(RULE_52, 0);
    case 174:
      return reduce(RULE_52, 0);
    case 166:
      return reduce(RULE_52, 0);
    case 172:
      return reduce(RULE_52, 0);
    case 107:
      return reduce(RULE_52, 0);
    case 89:
      return reduce(RULE_52, 0);
    case 170:
      return reduce(RULE_52, 0);
    case 143:
      return reduce(RULE_52, 0);
    case 73:
      return reduce(RULE_52, 0);
    case 176:
      return reduce(RULE_52, 0);
    case 132:
      return reduce(RULE_52, 0);
    case 169:
      return reduce(RULE_52, 0);
    case 121:
      return reduce(RULE_52, 0);
    case 133:
      return reduce(RULE_52, 0);
    case 156:
      return reduce(RULE_52, 0);
    case 131:
      return reduce(RULE_52, 0);
    case 76:
      return reduce(RULE_52, 0);
    case 148:
      return reduce(RULE_52, 0);
    case 145:
      return reduce(RULE_52, 0);
    case 128:
      return reduce(RULE_52, 0);
    case 168:
      return reduce(RULE_52, 0);
    case 181:
      return reduce(RULE_52, 0);
    case 164:
      return reduce(RULE_52, 0);
    case 93:
      return reduce(RULE_52, 0);
    case 105:
      return reduce(RULE_52, 0);
    case 179:
      return reduce(RULE_52, 0);
    case 72:
      return reduce(RULE_52, 0);
    case 146:
      return reduce(RULE_52, 0);
    case 177:
      return reduce(RULE_52, 0);
    case 158:
      return reduce(RULE_52, 0);
    case 116:
      return reduce(RULE_52, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action422(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_56, 2);
    case 139:
      return reduce(RULE_56, 2);
    case 175:
      return reduce(RULE_56, 2);
    case 142:
      return reduce(RULE_56, 2);
    case 155:
      return reduce(RULE_56, 2);
    case 106:
      return reduce(RULE_56, 2);
    case 160:
      return reduce(RULE_56, 2);
    case 130:
      return reduce(RULE_56, 2);
    case 153:
      return reduce(RULE_56, 2);
    case 102:
      return reduce(RULE_56, 2);
    case 74:
      return reduce(RULE_56, 2);
    case 127:
      return reduce(RULE_56, 2);
    case 174:
      return reduce(RULE_56, 2);
    case 166:
      return reduce(RULE_56, 2);
    case 172:
      return reduce(RULE_56, 2);
    case 107:
      return reduce(RULE_56, 2);
    case 98:
      return reduce(RULE_56, 2);
    case 73:
      return reduce(RULE_56, 2);
    case 176:
      return reduce(RULE_56, 2);
    case 132:
      return reduce(RULE_56, 2);
    case 169:
      return reduce(RULE_56, 2);
    case 124:
      return reduce(RULE_56, 2);
    case 133:
      return reduce(RULE_56, 2);
    case 76:
      return reduce(RULE_56, 2);
    case 145:
      return reduce(RULE_56, 2);
    case 108:
      return reduce(RULE_56, 2);
    case 105:
      return reduce(RULE_56, 2);
    case 179:
      return reduce(RULE_56, 2);
    case 72:
      return reduce(RULE_56, 2);
    case 158:
      return reduce(RULE_56, 2);
    case 116:
      return reduce(RULE_56, 2);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, SEMICOLON, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action423(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_56, 0);
    case 139:
      return reduce(RULE_56, 0);
    case 175:
      return reduce(RULE_56, 0);
    case 142:
      return reduce(RULE_56, 0);
    case 155:
      return reduce(RULE_56, 0);
    case 106:
      return reduce(RULE_56, 0);
    case 160:
      return reduce(RULE_56, 0);
    case 130:
      return reduce(RULE_56, 0);
    case 153:
      return reduce(RULE_56, 0);
    case 102:
      return reduce(RULE_56, 0);
    case 74:
      return reduce(RULE_56, 0);
    case 127:
      return reduce(RULE_56, 0);
    case 174:
      return reduce(RULE_56, 0);
    case 166:
      return reduce(RULE_56, 0);
    case 172:
      return reduce(RULE_56, 0);
    case 107:
      return reduce(RULE_56, 0);
    case 98:
      return reduce(RULE_56, 0);
    case 73:
      return reduce(RULE_56, 0);
    case 176:
      return reduce(RULE_56, 0);
    case 132:
      return reduce(RULE_56, 0);
    case 169:
      return reduce(RULE_56, 0);
    case 124:
      return reduce(RULE_56, 0);
    case 133:
      return reduce(RULE_56, 0);
    case 76:
      return reduce(RULE_56, 0);
    case 145:
      return reduce(RULE_56, 0);
    case 108:
      return reduce(RULE_56, 0);
    case 105:
      return reduce(RULE_56, 0);
    case 179:
      return reduce(RULE_56, 0);
    case 72:
      return reduce(RULE_56, 0);
    case 158:
      return reduce(RULE_56, 0);
    case 116:
      return reduce(RULE_56, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, SEMICOLON, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action424(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(605);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action425(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(606);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, SEMICOLON, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto425(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 607;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action426(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto426(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 608;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action427(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(609);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action428(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 18);
    case 149:
      return reduce(RULE_17, 18);
    case 137:
      return reduce(RULE_17, 18);
    case 110:
      return reduce(RULE_17, 18);
    case 157:
      return reduce(RULE_17, 18);
    case 96:
      return reduce(RULE_17, 18);
    case 103:
      return reduce(RULE_17, 18);
    case 106:
      return reduce(RULE_17, 18);
    case 147:
      return reduce(RULE_17, 18);
    case 129:
      return reduce(RULE_17, 18);
    case 117:
      return reduce(RULE_17, 18);
    case 167:
      return reduce(RULE_17, 18);
    case 119:
      return reduce(RULE_17, 18);
    case 75:
      return reduce(RULE_17, 18);
    case 100:
      return reduce(RULE_17, 18);
    case 152:
      return reduce(RULE_17, 18);
    case 80:
      return reduce(RULE_17, 18);
    case 94:
      return reduce(RULE_17, 18);
    case 107:
      return reduce(RULE_17, 18);
    case 143:
      return reduce(RULE_17, 18);
    case 98:
      return reduce(RULE_17, 18);
    case 112:
      return reduce(RULE_17, 18);
    case 86:
      return reduce(RULE_17, 18);
    case 120:
      return reduce(RULE_17, 18);
    case 121:
      return reduce(RULE_17, 18);
    case 124:
      return reduce(RULE_17, 18);
    case 123:
      return reduce(RULE_17, 18);
    case 156:
      return reduce(RULE_17, 18);
    case 83:
      return reduce(RULE_17, 18);
    case 99:
      return reduce(RULE_17, 18);
    case 122:
      return reduce(RULE_17, 18);
    case 125:
      return reduce(RULE_17, 18);
    case 165:
      return reduce(RULE_17, 18);
    case 77:
      return reduce(RULE_17, 18);
    case 108:
      return reduce(RULE_17, 18);
    case 92:
      return reduce(RULE_17, 18);
    case 164:
      return reduce(RULE_17, 18);
    case 84:
      return reduce(RULE_17, 18);
    case 104:
      return reduce(RULE_17, 18);
    case 105:
      return reduce(RULE_17, 18);
    case 114:
      return reduce(RULE_17, 18);
    case 82:
      return reduce(RULE_17, 18);
    case 177:
      return reduce(RULE_17, 18);
    case 90:
      return reduce(RULE_17, 18);
    case 116:
      return reduce(RULE_17, 18);
    case 118:
      return reduce(RULE_17, 18);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action429(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 123:
      stateStack.addFirst(109);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RSQUARE, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto429(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 610;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action430(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_24, 1);
    case 149:
      return reduce(RULE_24, 1);
    case 137:
      return reduce(RULE_24, 1);
    case 110:
      return reduce(RULE_24, 1);
    case 157:
      return reduce(RULE_24, 1);
    case 103:
      return reduce(RULE_24, 1);
    case 106:
      return reduce(RULE_24, 1);
    case 147:
      return reduce(RULE_24, 1);
    case 129:
      return reduce(RULE_24, 1);
    case 117:
      return reduce(RULE_24, 1);
    case 167:
      return reduce(RULE_24, 1);
    case 119:
      return reduce(RULE_24, 1);
    case 75:
      return reduce(RULE_24, 1);
    case 100:
      return reduce(RULE_24, 1);
    case 152:
      return reduce(RULE_24, 1);
    case 94:
      return reduce(RULE_24, 1);
    case 80:
      return reduce(RULE_24, 1);
    case 107:
      return reduce(RULE_24, 1);
    case 143:
      return reduce(RULE_24, 1);
    case 98:
      return reduce(RULE_24, 1);
    case 112:
      return reduce(RULE_24, 1);
    case 86:
      return reduce(RULE_24, 1);
    case 120:
      return reduce(RULE_24, 1);
    case 121:
      return reduce(RULE_24, 1);
    case 124:
      return reduce(RULE_24, 1);
    case 123:
      return reduce(RULE_24, 1);
    case 156:
      return reduce(RULE_24, 1);
    case 83:
      return reduce(RULE_24, 1);
    case 99:
      return reduce(RULE_24, 1);
    case 122:
      return reduce(RULE_24, 1);
    case 125:
      return reduce(RULE_24, 1);
    case 165:
      return reduce(RULE_24, 1);
    case 77:
      return reduce(RULE_24, 1);
    case 108:
      return reduce(RULE_24, 1);
    case 92:
      return reduce(RULE_24, 1);
    case 164:
      return reduce(RULE_24, 1);
    case 84:
      return reduce(RULE_24, 1);
    case 104:
      return reduce(RULE_24, 1);
    case 105:
      return reduce(RULE_24, 1);
    case 114:
      return reduce(RULE_24, 1);
    case 82:
      return reduce(RULE_24, 1);
    case 177:
      return reduce(RULE_24, 1);
    case 90:
      return reduce(RULE_24, 1);
    case 116:
      return reduce(RULE_24, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action431(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_57, 0);
    case 149:
      return reduce(RULE_57, 0);
    case 137:
      return reduce(RULE_57, 0);
    case 110:
      return reduce(RULE_57, 0);
    case 157:
      return reduce(RULE_57, 0);
    case 96:
      return reduce(RULE_57, 0);
    case 103:
      return reduce(RULE_57, 0);
    case 106:
      return reduce(RULE_57, 0);
    case 147:
      return reduce(RULE_57, 0);
    case 129:
      return reduce(RULE_57, 0);
    case 117:
      return reduce(RULE_57, 0);
    case 167:
      return reduce(RULE_57, 0);
    case 119:
      return reduce(RULE_57, 0);
    case 75:
      return reduce(RULE_57, 0);
    case 100:
      return reduce(RULE_57, 0);
    case 152:
      return reduce(RULE_57, 0);
    case 80:
      return reduce(RULE_57, 0);
    case 94:
      return reduce(RULE_57, 0);
    case 107:
      return reduce(RULE_57, 0);
    case 143:
      return reduce(RULE_57, 0);
    case 98:
      return reduce(RULE_57, 0);
    case 112:
      return reduce(RULE_57, 0);
    case 86:
      return reduce(RULE_57, 0);
    case 120:
      return reduce(RULE_57, 0);
    case 121:
      return reduce(RULE_57, 0);
    case 124:
      return reduce(RULE_57, 0);
    case 123:
      return reduce(RULE_57, 0);
    case 156:
      return reduce(RULE_57, 0);
    case 83:
      return reduce(RULE_57, 0);
    case 99:
      return reduce(RULE_57, 0);
    case 122:
      return reduce(RULE_57, 0);
    case 125:
      return reduce(RULE_57, 0);
    case 165:
      return reduce(RULE_57, 0);
    case 77:
      return reduce(RULE_57, 0);
    case 92:
      return reduce(RULE_57, 0);
    case 108:
      return reduce(RULE_57, 0);
    case 164:
      return reduce(RULE_57, 0);
    case 84:
      return reduce(RULE_57, 0);
    case 104:
      return reduce(RULE_57, 0);
    case 105:
      return reduce(RULE_57, 0);
    case 114:
      return reduce(RULE_57, 0);
    case 82:
      return reduce(RULE_57, 0);
    case 177:
      return reduce(RULE_57, 0);
    case 90:
      return reduce(RULE_57, 0);
    case 116:
      return reduce(RULE_57, 0);
    case 118:
      return reduce(RULE_57, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action432(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_45, 1);
    case 149:
      return reduce(RULE_45, 1);
    case 139:
      return reduce(RULE_45, 1);
    case 175:
      return reduce(RULE_45, 1);
    case 142:
      return reduce(RULE_45, 1);
    case 157:
      return reduce(RULE_45, 1);
    case 155:
      return reduce(RULE_45, 1);
    case 173:
      return reduce(RULE_45, 1);
    case 106:
      return reduce(RULE_45, 1);
    case 160:
      return reduce(RULE_45, 1);
    case 130:
      return reduce(RULE_45, 1);
    case 129:
      return reduce(RULE_45, 1);
    case 167:
      return reduce(RULE_45, 1);
    case 74:
      return reduce(RULE_45, 1);
    case 102:
      return reduce(RULE_45, 1);
    case 153:
      return reduce(RULE_45, 1);
    case 75:
      return reduce(RULE_45, 1);
    case 138:
      return reduce(RULE_45, 1);
    case 163:
      return reduce(RULE_45, 1);
    case 174:
      return reduce(RULE_45, 1);
    case 166:
      return reduce(RULE_45, 1);
    case 172:
      return reduce(RULE_45, 1);
    case 107:
      return reduce(RULE_45, 1);
    case 89:
      return reduce(RULE_45, 1);
    case 170:
      return reduce(RULE_45, 1);
    case 143:
      return reduce(RULE_45, 1);
    case 73:
      return reduce(RULE_45, 1);
    case 176:
      return reduce(RULE_45, 1);
    case 132:
      return reduce(RULE_45, 1);
    case 169:
      return reduce(RULE_45, 1);
    case 121:
      return reduce(RULE_45, 1);
    case 133:
      return reduce(RULE_45, 1);
    case 156:
      return reduce(RULE_45, 1);
    case 131:
      return reduce(RULE_45, 1);
    case 76:
      return reduce(RULE_45, 1);
    case 148:
      return reduce(RULE_45, 1);
    case 145:
      return reduce(RULE_45, 1);
    case 128:
      return reduce(RULE_45, 1);
    case 168:
      return reduce(RULE_45, 1);
    case 181:
      return reduce(RULE_45, 1);
    case 164:
      return reduce(RULE_45, 1);
    case 93:
      return reduce(RULE_45, 1);
    case 105:
      return reduce(RULE_45, 1);
    case 179:
      return reduce(RULE_45, 1);
    case 72:
      return reduce(RULE_45, 1);
    case 146:
      return reduce(RULE_45, 1);
    case 177:
      return reduce(RULE_45, 1);
    case 158:
      return reduce(RULE_45, 1);
    case 116:
      return reduce(RULE_45, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action433(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_46, 1);
    case 149:
      return reduce(RULE_46, 1);
    case 139:
      return reduce(RULE_46, 1);
    case 175:
      return reduce(RULE_46, 1);
    case 142:
      return reduce(RULE_46, 1);
    case 157:
      return reduce(RULE_46, 1);
    case 155:
      return reduce(RULE_46, 1);
    case 173:
      return reduce(RULE_46, 1);
    case 106:
      return reduce(RULE_46, 1);
    case 160:
      return reduce(RULE_46, 1);
    case 130:
      return reduce(RULE_46, 1);
    case 129:
      return reduce(RULE_46, 1);
    case 167:
      return reduce(RULE_46, 1);
    case 74:
      return reduce(RULE_46, 1);
    case 102:
      return reduce(RULE_46, 1);
    case 153:
      return reduce(RULE_46, 1);
    case 75:
      return reduce(RULE_46, 1);
    case 138:
      return reduce(RULE_46, 1);
    case 163:
      return reduce(RULE_46, 1);
    case 174:
      return reduce(RULE_46, 1);
    case 166:
      return reduce(RULE_46, 1);
    case 172:
      return reduce(RULE_46, 1);
    case 107:
      return reduce(RULE_46, 1);
    case 89:
      return reduce(RULE_46, 1);
    case 170:
      return reduce(RULE_46, 1);
    case 143:
      return reduce(RULE_46, 1);
    case 73:
      return reduce(RULE_46, 1);
    case 176:
      return reduce(RULE_46, 1);
    case 132:
      return reduce(RULE_46, 1);
    case 169:
      return reduce(RULE_46, 1);
    case 121:
      return reduce(RULE_46, 1);
    case 133:
      return reduce(RULE_46, 1);
    case 156:
      return reduce(RULE_46, 1);
    case 131:
      return reduce(RULE_46, 1);
    case 76:
      return reduce(RULE_46, 1);
    case 148:
      return reduce(RULE_46, 1);
    case 145:
      return reduce(RULE_46, 1);
    case 128:
      return reduce(RULE_46, 1);
    case 168:
      return reduce(RULE_46, 1);
    case 181:
      return reduce(RULE_46, 1);
    case 164:
      return reduce(RULE_46, 1);
    case 93:
      return reduce(RULE_46, 1);
    case 105:
      return reduce(RULE_46, 1);
    case 179:
      return reduce(RULE_46, 1);
    case 72:
      return reduce(RULE_46, 1);
    case 146:
      return reduce(RULE_46, 1);
    case 177:
      return reduce(RULE_46, 1);
    case 158:
      return reduce(RULE_46, 1);
    case 116:
      return reduce(RULE_46, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action434(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 16);
    case 149:
      return reduce(RULE_22, 16);
    case 139:
      return reduce(RULE_22, 16);
    case 175:
      return reduce(RULE_22, 16);
    case 142:
      return reduce(RULE_22, 16);
    case 157:
      return reduce(RULE_22, 16);
    case 155:
      return reduce(RULE_22, 16);
    case 173:
      return reduce(RULE_22, 16);
    case 106:
      return reduce(RULE_22, 16);
    case 160:
      return reduce(RULE_22, 16);
    case 130:
      return reduce(RULE_22, 16);
    case 129:
      return reduce(RULE_22, 16);
    case 167:
      return reduce(RULE_22, 16);
    case 74:
      return reduce(RULE_22, 16);
    case 102:
      return reduce(RULE_22, 16);
    case 153:
      return reduce(RULE_22, 16);
    case 75:
      return reduce(RULE_22, 16);
    case 138:
      return reduce(RULE_22, 16);
    case 163:
      return reduce(RULE_22, 16);
    case 174:
      return reduce(RULE_22, 16);
    case 166:
      return reduce(RULE_22, 16);
    case 172:
      return reduce(RULE_22, 16);
    case 107:
      return reduce(RULE_22, 16);
    case 89:
      return reduce(RULE_22, 16);
    case 170:
      return reduce(RULE_22, 16);
    case 143:
      return reduce(RULE_22, 16);
    case 73:
      return reduce(RULE_22, 16);
    case 176:
      return reduce(RULE_22, 16);
    case 132:
      return reduce(RULE_22, 16);
    case 169:
      return reduce(RULE_22, 16);
    case 121:
      return reduce(RULE_22, 16);
    case 133:
      return reduce(RULE_22, 16);
    case 156:
      return reduce(RULE_22, 16);
    case 131:
      return reduce(RULE_22, 16);
    case 76:
      return reduce(RULE_22, 16);
    case 148:
      return reduce(RULE_22, 16);
    case 145:
      return reduce(RULE_22, 16);
    case 128:
      return reduce(RULE_22, 16);
    case 168:
      return reduce(RULE_22, 16);
    case 181:
      return reduce(RULE_22, 16);
    case 164:
      return reduce(RULE_22, 16);
    case 93:
      return reduce(RULE_22, 16);
    case 105:
      return reduce(RULE_22, 16);
    case 179:
      return reduce(RULE_22, 16);
    case 72:
      return reduce(RULE_22, 16);
    case 146:
      return reduce(RULE_22, 16);
    case 177:
      return reduce(RULE_22, 16);
    case 158:
      return reduce(RULE_22, 16);
    case 116:
      return reduce(RULE_22, 16);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action435(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_58, 0);
    case 149:
      return reduce(RULE_58, 0);
    case 139:
      return reduce(RULE_58, 0);
    case 175:
      return reduce(RULE_58, 0);
    case 142:
      return reduce(RULE_58, 0);
    case 157:
      return reduce(RULE_58, 0);
    case 155:
      return reduce(RULE_58, 0);
    case 173:
      return reduce(RULE_58, 0);
    case 106:
      return reduce(RULE_58, 0);
    case 160:
      return reduce(RULE_58, 0);
    case 130:
      return reduce(RULE_58, 0);
    case 129:
      return reduce(RULE_58, 0);
    case 167:
      return reduce(RULE_58, 0);
    case 74:
      return reduce(RULE_58, 0);
    case 102:
      return reduce(RULE_58, 0);
    case 153:
      return reduce(RULE_58, 0);
    case 75:
      return reduce(RULE_58, 0);
    case 138:
      return reduce(RULE_58, 0);
    case 163:
      return reduce(RULE_58, 0);
    case 174:
      return reduce(RULE_58, 0);
    case 166:
      return reduce(RULE_58, 0);
    case 172:
      return reduce(RULE_58, 0);
    case 107:
      return reduce(RULE_58, 0);
    case 89:
      return reduce(RULE_58, 0);
    case 170:
      return reduce(RULE_58, 0);
    case 143:
      return reduce(RULE_58, 0);
    case 73:
      return reduce(RULE_58, 0);
    case 176:
      return reduce(RULE_58, 0);
    case 132:
      return reduce(RULE_58, 0);
    case 169:
      return reduce(RULE_58, 0);
    case 121:
      return reduce(RULE_58, 0);
    case 133:
      return reduce(RULE_58, 0);
    case 156:
      return reduce(RULE_58, 0);
    case 131:
      return reduce(RULE_58, 0);
    case 76:
      return reduce(RULE_58, 0);
    case 148:
      return reduce(RULE_58, 0);
    case 145:
      return reduce(RULE_58, 0);
    case 128:
      return reduce(RULE_58, 0);
    case 168:
      return reduce(RULE_58, 0);
    case 181:
      return reduce(RULE_58, 0);
    case 164:
      return reduce(RULE_58, 0);
    case 93:
      return reduce(RULE_58, 0);
    case 105:
      return reduce(RULE_58, 0);
    case 179:
      return reduce(RULE_58, 0);
    case 72:
      return reduce(RULE_58, 0);
    case 146:
      return reduce(RULE_58, 0);
    case 177:
      return reduce(RULE_58, 0);
    case 158:
      return reduce(RULE_58, 0);
    case 116:
      return reduce(RULE_58, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action436(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 13);
    case 149:
      return reduce(RULE_17, 13);
    case 137:
      return reduce(RULE_17, 13);
    case 110:
      return reduce(RULE_17, 13);
    case 157:
      return reduce(RULE_17, 13);
    case 103:
      return reduce(RULE_17, 13);
    case 96:
      return reduce(RULE_17, 13);
    case 106:
      return reduce(RULE_17, 13);
    case 147:
      return reduce(RULE_17, 13);
    case 129:
      return reduce(RULE_17, 13);
    case 117:
      return reduce(RULE_17, 13);
    case 167:
      return reduce(RULE_17, 13);
    case 119:
      return reduce(RULE_17, 13);
    case 75:
      return reduce(RULE_17, 13);
    case 100:
      return reduce(RULE_17, 13);
    case 152:
      return reduce(RULE_17, 13);
    case 80:
      return reduce(RULE_17, 13);
    case 94:
      return reduce(RULE_17, 13);
    case 107:
      return reduce(RULE_17, 13);
    case 143:
      return reduce(RULE_17, 13);
    case 98:
      return reduce(RULE_17, 13);
    case 112:
      return reduce(RULE_17, 13);
    case 86:
      return reduce(RULE_17, 13);
    case 120:
      return reduce(RULE_17, 13);
    case 121:
      return reduce(RULE_17, 13);
    case 124:
      return reduce(RULE_17, 13);
    case 123:
      return reduce(RULE_17, 13);
    case 156:
      return reduce(RULE_17, 13);
    case 83:
      return reduce(RULE_17, 13);
    case 99:
      return reduce(RULE_17, 13);
    case 122:
      return reduce(RULE_17, 13);
    case 125:
      return reduce(RULE_17, 13);
    case 165:
      return reduce(RULE_17, 13);
    case 77:
      return reduce(RULE_17, 13);
    case 92:
      return reduce(RULE_17, 13);
    case 108:
      return reduce(RULE_17, 13);
    case 164:
      return reduce(RULE_17, 13);
    case 84:
      return reduce(RULE_17, 13);
    case 105:
      return reduce(RULE_17, 13);
    case 104:
      return reduce(RULE_17, 13);
    case 114:
      return reduce(RULE_17, 13);
    case 82:
      return reduce(RULE_17, 13);
    case 177:
      return reduce(RULE_17, 13);
    case 90:
      return reduce(RULE_17, 13);
    case 116:
      return reduce(RULE_17, 13);
    case 118:
      return reduce(RULE_17, 13);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action437(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto437(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 47: return 611;
    case 28: return 84;
    case 48: return 210;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action438(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto438(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 612;
    default: return -1;
    }
  }

  private final boolean action439(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(204);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(280);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(281);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 1);
    case 102:
      return reduce(RULE_15, 1);
    case 79:
      return reduce(RULE_15, 1);
    case 106:
      return reduce(RULE_26, 1);
    case 118:
      return reduce(RULE_26, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, HASH, COMMA, ARROW, DOT, LSQUARE, LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final boolean action440(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_28, 0);
    case 126:
      return reduce(RULE_28, 0);
    case 97:
      return reduce(RULE_28, 0);
    case 111:
      return reduce(RULE_28, 0);
    case 115:
      return reduce(RULE_28, 0);
    case 78:
      return reduce(RULE_28, 0);
    case 88:
      return reduce(RULE_28, 0);
    case 91:
      return reduce(RULE_28, 0);
    case 113:
      return reduce(RULE_28, 0);
    case 101:
      return reduce(RULE_28, 0);
    case 95:
      return reduce(RULE_28, 0);
    case 81:
      return reduce(RULE_28, 0);
    default: throw new BadTokenException(token, new Object[] {MINUS_EQUALS, STAR_EQUALS, EQUALS, PERCENT_EQUALS, PLUS_EQUALS, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, AMPERSAND_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action441(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(270);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(271);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 0);
    case 126:
      return reduce(RULE_25, 0);
    case 97:
      return reduce(RULE_25, 0);
    case 111:
      return reduce(RULE_25, 0);
    case 115:
      return reduce(RULE_25, 0);
    case 79:
      return reduce(RULE_15, 0);
    case 88:
      return reduce(RULE_25, 0);
    case 113:
      return reduce(RULE_25, 0);
    case 101:
      return reduce(RULE_25, 0);
    case 95:
      return reduce(RULE_25, 0);
    case 106:
      return reduce(RULE_26, 0);
    case 81:
      return reduce(RULE_25, 0);
    case 109:
      return reduce(RULE_25, 0);
    case 102:
      return reduce(RULE_15, 0);
    case 78:
      return reduce(RULE_25, 0);
    case 91:
      return reduce(RULE_25, 0);
    case 118:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, STAR_EQUALS, EQUALS, PERCENT_EQUALS, COMMA, PLUS_EQUALS, DOT, ARROW, DOUBLE_LANGLE_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_RANGLE_EQUALS, LPAREN, CARET_EQUALS, MINUS_EQUALS, HASH, DOUBLE_PERCENT_EQUALS, AMPERSAND_EQUALS, LSQUARE, QUESTION_MARK_DOT});
    }
  }

  private final boolean action442(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(613);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action443(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto443(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 614;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action444(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 5);
    case 173:
      return reduce(RULE_59, 5);
    case 106:
      return reduce(RULE_59, 5);
    case 153:
      return reduce(RULE_59, 5);
    case 102:
      return reduce(RULE_59, 5);
    case 74:
      return reduce(RULE_59, 5);
    case 167:
      return reduce(RULE_59, 5);
    case 163:
      return reduce(RULE_59, 5);
    case 174:
      return reduce(RULE_59, 5);
    case 172:
      return reduce(RULE_59, 5);
    case 89:
      return reduce(RULE_59, 5);
    case 170:
      return reduce(RULE_59, 5);
    case 98:
      return reduce(RULE_59, 5);
    case 73:
      return reduce(RULE_59, 5);
    case 176:
      return reduce(RULE_59, 5);
    case 132:
      return reduce(RULE_59, 5);
    case 169:
      return reduce(RULE_59, 5);
    case 133:
      return reduce(RULE_59, 5);
    case 148:
      return reduce(RULE_59, 5);
    case 128:
      return reduce(RULE_59, 5);
    case 108:
      return reduce(RULE_59, 5);
    case 93:
      return reduce(RULE_59, 5);
    case 146:
      return reduce(RULE_59, 5);
    case 158:
      return reduce(RULE_59, 5);
    case 116:
      return reduce(RULE_59, 5);
    case 159:
      return reduce(RULE_59, 5);
    case 149:
      return reduce(RULE_59, 5);
    case 139:
      return reduce(RULE_59, 5);
    case 175:
      return reduce(RULE_59, 5);
    case 157:
      return reduce(RULE_59, 5);
    case 155:
      return reduce(RULE_59, 5);
    case 160:
      return reduce(RULE_59, 5);
    case 130:
      return reduce(RULE_59, 5);
    case 129:
      return reduce(RULE_59, 5);
    case 138:
      return reduce(RULE_59, 5);
    case 75:
      return reduce(RULE_59, 5);
    case 127:
      return reduce(RULE_59, 5);
    case 166:
      return reduce(RULE_59, 5);
    case 107:
      return reduce(RULE_59, 5);
    case 143:
      return reduce(RULE_59, 5);
    case 121:
      return reduce(RULE_59, 5);
    case 124:
      return reduce(RULE_59, 5);
    case 156:
      return reduce(RULE_59, 5);
    case 131:
      return reduce(RULE_59, 5);
    case 76:
      return reduce(RULE_59, 5);
    case 145:
      return reduce(RULE_59, 5);
    case 168:
      return reduce(RULE_59, 5);
    case 164:
      return reduce(RULE_59, 5);
    case 181:
      return reduce(RULE_59, 5);
    case 105:
      return reduce(RULE_59, 5);
    case 179:
      return reduce(RULE_59, 5);
    case 177:
      return reduce(RULE_59, 5);
    case 72:
      return reduce(RULE_59, 5);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final boolean action445(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(615);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(616);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, UNDERSCORE});
    }
  }

  private final boolean action446(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto446(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 617;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action447(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 1);
    case 173:
      return reduce(RULE_59, 1);
    case 106:
      return reduce(RULE_59, 1);
    case 153:
      return reduce(RULE_59, 1);
    case 102:
      return reduce(RULE_59, 1);
    case 74:
      return reduce(RULE_59, 1);
    case 167:
      return reduce(RULE_59, 1);
    case 163:
      return reduce(RULE_59, 1);
    case 174:
      return reduce(RULE_59, 1);
    case 172:
      return reduce(RULE_59, 1);
    case 89:
      return reduce(RULE_59, 1);
    case 170:
      return reduce(RULE_59, 1);
    case 98:
      return reduce(RULE_59, 1);
    case 73:
      return reduce(RULE_59, 1);
    case 176:
      return reduce(RULE_59, 1);
    case 132:
      return reduce(RULE_59, 1);
    case 169:
      return reduce(RULE_59, 1);
    case 133:
      return reduce(RULE_59, 1);
    case 148:
      return reduce(RULE_59, 1);
    case 128:
      return reduce(RULE_59, 1);
    case 108:
      return reduce(RULE_59, 1);
    case 93:
      return reduce(RULE_59, 1);
    case 146:
      return reduce(RULE_59, 1);
    case 158:
      return reduce(RULE_59, 1);
    case 116:
      return reduce(RULE_59, 1);
    case 159:
      return reduce(RULE_59, 1);
    case 149:
      return reduce(RULE_59, 1);
    case 139:
      return reduce(RULE_59, 1);
    case 175:
      return reduce(RULE_59, 1);
    case 157:
      return reduce(RULE_59, 1);
    case 155:
      return reduce(RULE_59, 1);
    case 160:
      return reduce(RULE_59, 1);
    case 130:
      return reduce(RULE_59, 1);
    case 129:
      return reduce(RULE_59, 1);
    case 138:
      return reduce(RULE_59, 1);
    case 75:
      return reduce(RULE_59, 1);
    case 127:
      return reduce(RULE_59, 1);
    case 166:
      return reduce(RULE_59, 1);
    case 107:
      return reduce(RULE_59, 1);
    case 143:
      return reduce(RULE_59, 1);
    case 121:
      return reduce(RULE_59, 1);
    case 124:
      return reduce(RULE_59, 1);
    case 156:
      return reduce(RULE_59, 1);
    case 131:
      return reduce(RULE_59, 1);
    case 76:
      return reduce(RULE_59, 1);
    case 145:
      return reduce(RULE_59, 1);
    case 168:
      return reduce(RULE_59, 1);
    case 164:
      return reduce(RULE_59, 1);
    case 181:
      return reduce(RULE_59, 1);
    case 105:
      return reduce(RULE_59, 1);
    case 179:
      return reduce(RULE_59, 1);
    case 177:
      return reduce(RULE_59, 1);
    case 72:
      return reduce(RULE_59, 1);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final boolean action448(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_60, 1);
    case 149:
      return reduce(RULE_60, 1);
    case 139:
      return reduce(RULE_60, 1);
    case 175:
      return reduce(RULE_60, 1);
    case 142:
      return reduce(RULE_60, 1);
    case 157:
      return reduce(RULE_60, 1);
    case 155:
      return reduce(RULE_60, 1);
    case 173:
      return reduce(RULE_60, 1);
    case 106:
      return reduce(RULE_60, 1);
    case 160:
      return reduce(RULE_60, 1);
    case 130:
      return reduce(RULE_60, 1);
    case 129:
      return reduce(RULE_60, 1);
    case 167:
      return reduce(RULE_60, 1);
    case 74:
      return reduce(RULE_60, 1);
    case 102:
      return reduce(RULE_60, 1);
    case 153:
      return reduce(RULE_60, 1);
    case 75:
      return reduce(RULE_60, 1);
    case 138:
      return reduce(RULE_60, 1);
    case 163:
      return reduce(RULE_60, 1);
    case 174:
      return reduce(RULE_60, 1);
    case 166:
      return reduce(RULE_60, 1);
    case 172:
      return reduce(RULE_60, 1);
    case 107:
      return reduce(RULE_60, 1);
    case 89:
      return reduce(RULE_60, 1);
    case 170:
      return reduce(RULE_60, 1);
    case 143:
      return reduce(RULE_60, 1);
    case 73:
      return reduce(RULE_60, 1);
    case 176:
      return reduce(RULE_60, 1);
    case 132:
      return reduce(RULE_60, 1);
    case 169:
      return reduce(RULE_60, 1);
    case 121:
      return reduce(RULE_60, 1);
    case 133:
      return reduce(RULE_60, 1);
    case 156:
      return reduce(RULE_60, 1);
    case 131:
      return reduce(RULE_60, 1);
    case 76:
      return reduce(RULE_60, 1);
    case 148:
      return reduce(RULE_60, 1);
    case 145:
      return reduce(RULE_60, 1);
    case 128:
      return reduce(RULE_60, 1);
    case 168:
      return reduce(RULE_60, 1);
    case 181:
      return reduce(RULE_60, 1);
    case 164:
      return reduce(RULE_60, 1);
    case 93:
      return reduce(RULE_60, 1);
    case 105:
      return reduce(RULE_60, 1);
    case 179:
      return reduce(RULE_60, 1);
    case 72:
      return reduce(RULE_60, 1);
    case 146:
      return reduce(RULE_60, 1);
    case 177:
      return reduce(RULE_60, 1);
    case 158:
      return reduce(RULE_60, 1);
    case 116:
      return reduce(RULE_60, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action449(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(618);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(619);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action450(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(24);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, HASH, STATIC_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto450(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 17: return 620;
    case 28: return 84;
    case 48: return 451;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action451(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      return reduce(RULE_61, 0);
    case 112:
      return reduce(RULE_61, 0);
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action452(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_20, 4);
    case 97:
      return reduce(RULE_20, 4);
    case 124:
      return reduce(RULE_20, 4);
    case 111:
      return reduce(RULE_20, 4);
    case 115:
      return reduce(RULE_20, 4);
    case 83:
      return reduce(RULE_20, 4);
    case 96:
      return reduce(RULE_17, 14);
    case 122:
      return reduce(RULE_20, 4);
    case 88:
      return reduce(RULE_20, 4);
    case 101:
      return reduce(RULE_20, 4);
    case 113:
      return reduce(RULE_20, 4);
    case 95:
      return reduce(RULE_20, 4);
    case 106:
      return reduce(RULE_17, 14);
    case 81:
      return reduce(RULE_20, 4);
    case 109:
      return reduce(RULE_20, 4);
    case 91:
      return reduce(RULE_20, 4);
    case 78:
      return reduce(RULE_20, 4);
    case 107:
      return reduce(RULE_17, 14);
    case 118:
      return reduce(RULE_17, 14);
    default: throw new BadTokenException(token, new Object[] {STAR_EQUALS, EQUALS, SEMICOLON, PERCENT_EQUALS, PLUS_EQUALS, COMMA, DOT, RPAREN, DOUBLE_LANGLE_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, LPAREN, CARET_EQUALS, MINUS_EQUALS, AMPERSAND_EQUALS, DOUBLE_PERCENT_EQUALS, LSQUARE, QUESTION_MARK_DOT});
    }
  }

  private final boolean action453(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 11);
    case 149:
      return reduce(RULE_17, 11);
    case 137:
      return reduce(RULE_17, 11);
    case 110:
      return reduce(RULE_17, 11);
    case 157:
      return reduce(RULE_17, 11);
    case 103:
      return reduce(RULE_17, 11);
    case 96:
      return reduce(RULE_17, 11);
    case 106:
      return reduce(RULE_17, 11);
    case 147:
      return reduce(RULE_17, 11);
    case 129:
      return reduce(RULE_17, 11);
    case 117:
      return reduce(RULE_17, 11);
    case 167:
      return reduce(RULE_17, 11);
    case 119:
      return reduce(RULE_17, 11);
    case 75:
      return reduce(RULE_17, 11);
    case 100:
      return reduce(RULE_17, 11);
    case 152:
      return reduce(RULE_17, 11);
    case 80:
      return reduce(RULE_17, 11);
    case 94:
      return reduce(RULE_17, 11);
    case 107:
      return reduce(RULE_17, 11);
    case 143:
      return reduce(RULE_17, 11);
    case 98:
      return reduce(RULE_17, 11);
    case 112:
      return reduce(RULE_17, 11);
    case 86:
      return reduce(RULE_17, 11);
    case 120:
      return reduce(RULE_17, 11);
    case 121:
      return reduce(RULE_17, 11);
    case 124:
      return reduce(RULE_17, 11);
    case 123:
      return reduce(RULE_17, 11);
    case 156:
      return reduce(RULE_17, 11);
    case 83:
      return reduce(RULE_17, 11);
    case 99:
      return reduce(RULE_17, 11);
    case 122:
      return reduce(RULE_17, 11);
    case 125:
      return reduce(RULE_17, 11);
    case 165:
      return reduce(RULE_17, 11);
    case 77:
      return reduce(RULE_17, 11);
    case 108:
      return reduce(RULE_17, 11);
    case 92:
      return reduce(RULE_17, 11);
    case 164:
      return reduce(RULE_17, 11);
    case 84:
      return reduce(RULE_17, 11);
    case 105:
      return reduce(RULE_17, 11);
    case 104:
      return reduce(RULE_17, 11);
    case 114:
      return reduce(RULE_17, 11);
    case 82:
      return reduce(RULE_17, 11);
    case 177:
      return reduce(RULE_17, 11);
    case 90:
      return reduce(RULE_17, 11);
    case 116:
      return reduce(RULE_17, 11);
    case 118:
      return reduce(RULE_17, 11);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action454(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(621);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action455(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto455(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 622;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action456(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 9);
    case 173:
      return reduce(RULE_59, 9);
    case 106:
      return reduce(RULE_59, 9);
    case 153:
      return reduce(RULE_59, 9);
    case 102:
      return reduce(RULE_59, 9);
    case 74:
      return reduce(RULE_59, 9);
    case 167:
      return reduce(RULE_59, 9);
    case 163:
      return reduce(RULE_59, 9);
    case 174:
      return reduce(RULE_59, 9);
    case 172:
      return reduce(RULE_59, 9);
    case 89:
      return reduce(RULE_59, 9);
    case 170:
      return reduce(RULE_59, 9);
    case 98:
      return reduce(RULE_59, 9);
    case 73:
      return reduce(RULE_59, 9);
    case 176:
      return reduce(RULE_59, 9);
    case 132:
      return reduce(RULE_59, 9);
    case 169:
      return reduce(RULE_59, 9);
    case 133:
      return reduce(RULE_59, 9);
    case 148:
      return reduce(RULE_59, 9);
    case 128:
      return reduce(RULE_59, 9);
    case 108:
      return reduce(RULE_59, 9);
    case 93:
      return reduce(RULE_59, 9);
    case 146:
      return reduce(RULE_59, 9);
    case 158:
      return reduce(RULE_59, 9);
    case 116:
      return reduce(RULE_59, 9);
    case 159:
      return reduce(RULE_59, 9);
    case 149:
      return reduce(RULE_59, 9);
    case 139:
      return reduce(RULE_59, 9);
    case 175:
      return reduce(RULE_59, 9);
    case 157:
      return reduce(RULE_59, 9);
    case 155:
      return reduce(RULE_59, 9);
    case 160:
      return reduce(RULE_59, 9);
    case 130:
      return reduce(RULE_59, 9);
    case 129:
      return reduce(RULE_59, 9);
    case 138:
      return reduce(RULE_59, 9);
    case 75:
      return reduce(RULE_59, 9);
    case 127:
      return reduce(RULE_59, 9);
    case 166:
      return reduce(RULE_59, 9);
    case 107:
      return reduce(RULE_59, 9);
    case 143:
      return reduce(RULE_59, 9);
    case 121:
      return reduce(RULE_59, 9);
    case 124:
      return reduce(RULE_59, 9);
    case 156:
      return reduce(RULE_59, 9);
    case 131:
      return reduce(RULE_59, 9);
    case 76:
      return reduce(RULE_59, 9);
    case 145:
      return reduce(RULE_59, 9);
    case 168:
      return reduce(RULE_59, 9);
    case 164:
      return reduce(RULE_59, 9);
    case 181:
      return reduce(RULE_59, 9);
    case 105:
      return reduce(RULE_59, 9);
    case 179:
      return reduce(RULE_59, 9);
    case 177:
      return reduce(RULE_59, 9);
    case 72:
      return reduce(RULE_59, 9);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final boolean action457(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_20, 3);
    case 97:
      return reduce(RULE_20, 3);
    case 124:
      return reduce(RULE_20, 3);
    case 111:
      return reduce(RULE_20, 3);
    case 115:
      return reduce(RULE_20, 3);
    case 83:
      return reduce(RULE_20, 3);
    case 96:
      return reduce(RULE_17, 10);
    case 122:
      return reduce(RULE_20, 3);
    case 88:
      return reduce(RULE_20, 3);
    case 101:
      return reduce(RULE_20, 3);
    case 113:
      return reduce(RULE_20, 3);
    case 95:
      return reduce(RULE_20, 3);
    case 106:
      return reduce(RULE_17, 10);
    case 81:
      return reduce(RULE_20, 3);
    case 109:
      return reduce(RULE_20, 3);
    case 91:
      return reduce(RULE_20, 3);
    case 78:
      return reduce(RULE_20, 3);
    case 107:
      return reduce(RULE_17, 10);
    case 118:
      return reduce(RULE_17, 10);
    default: throw new BadTokenException(token, new Object[] {STAR_EQUALS, EQUALS, SEMICOLON, PERCENT_EQUALS, PLUS_EQUALS, COMMA, DOT, RPAREN, DOUBLE_LANGLE_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, LPAREN, CARET_EQUALS, MINUS_EQUALS, AMPERSAND_EQUALS, DOUBLE_PERCENT_EQUALS, LSQUARE, QUESTION_MARK_DOT});
    }
  }

  private final boolean action458(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 12);
    case 149:
      return reduce(RULE_17, 12);
    case 137:
      return reduce(RULE_17, 12);
    case 110:
      return reduce(RULE_17, 12);
    case 157:
      return reduce(RULE_17, 12);
    case 103:
      return reduce(RULE_17, 12);
    case 96:
      return reduce(RULE_17, 12);
    case 106:
      return reduce(RULE_17, 12);
    case 147:
      return reduce(RULE_17, 12);
    case 129:
      return reduce(RULE_17, 12);
    case 117:
      return reduce(RULE_17, 12);
    case 167:
      return reduce(RULE_17, 12);
    case 119:
      return reduce(RULE_17, 12);
    case 75:
      return reduce(RULE_17, 12);
    case 100:
      return reduce(RULE_17, 12);
    case 152:
      return reduce(RULE_17, 12);
    case 80:
      return reduce(RULE_17, 12);
    case 94:
      return reduce(RULE_17, 12);
    case 107:
      return reduce(RULE_17, 12);
    case 143:
      return reduce(RULE_17, 12);
    case 98:
      return reduce(RULE_17, 12);
    case 112:
      return reduce(RULE_17, 12);
    case 86:
      return reduce(RULE_17, 12);
    case 120:
      return reduce(RULE_17, 12);
    case 121:
      return reduce(RULE_17, 12);
    case 124:
      return reduce(RULE_17, 12);
    case 123:
      return reduce(RULE_17, 12);
    case 156:
      return reduce(RULE_17, 12);
    case 83:
      return reduce(RULE_17, 12);
    case 99:
      return reduce(RULE_17, 12);
    case 122:
      return reduce(RULE_17, 12);
    case 125:
      return reduce(RULE_17, 12);
    case 165:
      return reduce(RULE_17, 12);
    case 77:
      return reduce(RULE_17, 12);
    case 92:
      return reduce(RULE_17, 12);
    case 108:
      return reduce(RULE_17, 12);
    case 164:
      return reduce(RULE_17, 12);
    case 84:
      return reduce(RULE_17, 12);
    case 105:
      return reduce(RULE_17, 12);
    case 104:
      return reduce(RULE_17, 12);
    case 114:
      return reduce(RULE_17, 12);
    case 82:
      return reduce(RULE_17, 12);
    case 177:
      return reduce(RULE_17, 12);
    case 90:
      return reduce(RULE_17, 12);
    case 116:
      return reduce(RULE_17, 12);
    case 118:
      return reduce(RULE_17, 12);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action459(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 1);
    case 122:
      return reduce(RULE_62, 1);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action460(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 2);
    case 122:
      return reduce(RULE_62, 2);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action461(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(623);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action462(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 4);
    case 122:
      return reduce(RULE_62, 4);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action463(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 0);
    case 122:
      return reduce(RULE_62, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action464(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 8);
    case 122:
      return reduce(RULE_62, 8);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action465(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 5);
    case 122:
      return reduce(RULE_62, 5);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action466(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 6);
    case 122:
      return reduce(RULE_62, 6);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action467(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 9);
    case 122:
      return reduce(RULE_62, 9);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action468(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 3);
    case 122:
      return reduce(RULE_62, 3);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action469(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 7);
    case 122:
      return reduce(RULE_62, 7);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action470(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      return reduce(RULE_62, 10);
    case 122:
      return reduce(RULE_62, 10);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, RPAREN});
    }
  }

  private final boolean action471(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(624);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(625);
      tokenStack.addFirst(token);
      return true;
    case 83:
      stateStack.addFirst(445);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action472(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(626);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(627);
      tokenStack.addFirst(token);
      return true;
    case 83:
      stateStack.addFirst(445);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action473(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(628);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(629);
      tokenStack.addFirst(token);
      return true;
    case 83:
      stateStack.addFirst(445);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action474(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, UNDERSCORE, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto474(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 15: return 440;
    case 67: return 230;
    case 14: return 162;
    case 28: return 476;
    case 71: return 137;
    case 13: return 163;
    case 63: return 164;
    case 48: return 152;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 247;
    case 65: return 154;
    default: return -1;
    }
  }

  private final boolean action475(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      return reduce(RULE_28, 1);
    case 126:
      return reduce(RULE_28, 1);
    case 97:
      return reduce(RULE_28, 1);
    case 111:
      return reduce(RULE_28, 1);
    case 115:
      return reduce(RULE_28, 1);
    case 78:
      return reduce(RULE_28, 1);
    case 88:
      return reduce(RULE_28, 1);
    case 91:
      return reduce(RULE_28, 1);
    case 113:
      return reduce(RULE_28, 1);
    case 101:
      return reduce(RULE_28, 1);
    case 95:
      return reduce(RULE_28, 1);
    case 81:
      return reduce(RULE_28, 1);
    default: throw new BadTokenException(token, new Object[] {MINUS_EQUALS, STAR_EQUALS, EQUALS, PERCENT_EQUALS, PLUS_EQUALS, DOUBLE_PERCENT_EQUALS, DOUBLE_LANGLE_EQUALS, AMPERSAND_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action476(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      stateStack.addFirst(474);
      tokenStack.addFirst(token);
      return true;
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(271);
      tokenStack.addFirst(token);
      return true;
    case 85:
      return reduce(RULE_11, 0);
    case 126:
      return reduce(RULE_25, 0);
    case 97:
      return reduce(RULE_25, 0);
    case 111:
      return reduce(RULE_25, 0);
    case 115:
      return reduce(RULE_25, 0);
    case 88:
      return reduce(RULE_25, 0);
    case 113:
      return reduce(RULE_25, 0);
    case 101:
      return reduce(RULE_25, 0);
    case 95:
      return reduce(RULE_25, 0);
    case 106:
      return reduce(RULE_26, 0);
    case 81:
      return reduce(RULE_25, 0);
    case 109:
      return reduce(RULE_25, 0);
    case 78:
      return reduce(RULE_25, 0);
    case 91:
      return reduce(RULE_25, 0);
    case 118:
      return reduce(RULE_26, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_COLON, STAR_EQUALS, EQUALS, PERCENT_EQUALS, COMMA, PLUS_EQUALS, DOT, DOUBLE_LANGLE_EQUALS, PIPE_EQUALS, FORWARD_SLASH_EQUALS, DOUBLE_RANGLE_EQUALS, LPAREN, CARET_EQUALS, MINUS_EQUALS, DOUBLE_PERCENT_EQUALS, AMPERSAND_EQUALS, LSQUARE, QUESTION_MARK_DOT});
    }
  }

  private final boolean action477(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(630);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action478(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 30);
    case 137:
      return reduce(RULE_9, 30);
    case 110:
      return reduce(RULE_9, 30);
    case 79:
      return reduce(RULE_9, 30);
    case 106:
      return reduce(RULE_9, 30);
    case 117:
      return reduce(RULE_9, 30);
    case 102:
      return reduce(RULE_9, 30);
    case 167:
      return reduce(RULE_9, 30);
    case 152:
      return reduce(RULE_9, 30);
    case 94:
      return reduce(RULE_9, 30);
    case 80:
      return reduce(RULE_9, 30);
    case 98:
      return reduce(RULE_9, 30);
    case 171:
      return reduce(RULE_9, 30);
    case 86:
      return reduce(RULE_9, 30);
    case 83:
      return reduce(RULE_9, 30);
    case 122:
      return reduce(RULE_9, 30);
    case 108:
      return reduce(RULE_9, 30);
    case 92:
      return reduce(RULE_9, 30);
    case 128:
      return reduce(RULE_9, 30);
    case 104:
      return reduce(RULE_9, 30);
    case 82:
      return reduce(RULE_9, 30);
    case 116:
      return reduce(RULE_9, 30);
    case 85:
      return reduce(RULE_9, 30);
    case 149:
      return reduce(RULE_9, 30);
    case 157:
      return reduce(RULE_9, 30);
    case 103:
      return reduce(RULE_9, 30);
    case 147:
      return reduce(RULE_9, 30);
    case 129:
      return reduce(RULE_9, 30);
    case 119:
      return reduce(RULE_9, 30);
    case 75:
      return reduce(RULE_9, 30);
    case 100:
      return reduce(RULE_9, 30);
    case 107:
      return reduce(RULE_9, 30);
    case 143:
      return reduce(RULE_9, 30);
    case 112:
      return reduce(RULE_9, 30);
    case 120:
      return reduce(RULE_9, 30);
    case 121:
      return reduce(RULE_9, 30);
    case 124:
      return reduce(RULE_9, 30);
    case 156:
      return reduce(RULE_9, 30);
    case 123:
      return reduce(RULE_9, 30);
    case 99:
      return reduce(RULE_9, 30);
    case 125:
      return reduce(RULE_9, 30);
    case 165:
      return reduce(RULE_9, 30);
    case 77:
      return reduce(RULE_9, 30);
    case 164:
      return reduce(RULE_9, 30);
    case 84:
      return reduce(RULE_9, 30);
    case 105:
      return reduce(RULE_9, 30);
    case 114:
      return reduce(RULE_9, 30);
    case 72:
      return reduce(RULE_9, 30);
    case 177:
      return reduce(RULE_9, 30);
    case 90:
      return reduce(RULE_9, 30);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action479(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto479(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 631;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action480(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto480(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 632;
    default: return -1;
    }
  }

  private final boolean action481(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto481(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 47: return 633;
    case 28: return 84;
    case 48: return 210;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action482(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 79:
      stateStack.addFirst(634);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ARROW});
    }
  }

  private final boolean action483(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto483(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 47: return 635;
    case 28: return 84;
    case 48: return 210;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action484(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 26);
    case 137:
      return reduce(RULE_9, 26);
    case 110:
      return reduce(RULE_9, 26);
    case 79:
      return reduce(RULE_9, 26);
    case 106:
      return reduce(RULE_9, 26);
    case 117:
      return reduce(RULE_9, 26);
    case 102:
      return reduce(RULE_9, 26);
    case 167:
      return reduce(RULE_9, 26);
    case 152:
      return reduce(RULE_9, 26);
    case 94:
      return reduce(RULE_9, 26);
    case 80:
      return reduce(RULE_9, 26);
    case 98:
      return reduce(RULE_9, 26);
    case 171:
      return reduce(RULE_9, 26);
    case 86:
      return reduce(RULE_9, 26);
    case 83:
      return reduce(RULE_9, 26);
    case 122:
      return reduce(RULE_9, 26);
    case 108:
      return reduce(RULE_9, 26);
    case 92:
      return reduce(RULE_9, 26);
    case 128:
      return reduce(RULE_9, 26);
    case 104:
      return reduce(RULE_9, 26);
    case 82:
      return reduce(RULE_9, 26);
    case 116:
      return reduce(RULE_9, 26);
    case 85:
      return reduce(RULE_9, 26);
    case 149:
      return reduce(RULE_9, 26);
    case 157:
      return reduce(RULE_9, 26);
    case 103:
      return reduce(RULE_9, 26);
    case 147:
      return reduce(RULE_9, 26);
    case 129:
      return reduce(RULE_9, 26);
    case 119:
      return reduce(RULE_9, 26);
    case 75:
      return reduce(RULE_9, 26);
    case 100:
      return reduce(RULE_9, 26);
    case 107:
      return reduce(RULE_9, 26);
    case 143:
      return reduce(RULE_9, 26);
    case 112:
      return reduce(RULE_9, 26);
    case 120:
      return reduce(RULE_9, 26);
    case 121:
      return reduce(RULE_9, 26);
    case 124:
      return reduce(RULE_9, 26);
    case 156:
      return reduce(RULE_9, 26);
    case 123:
      return reduce(RULE_9, 26);
    case 99:
      return reduce(RULE_9, 26);
    case 125:
      return reduce(RULE_9, 26);
    case 165:
      return reduce(RULE_9, 26);
    case 77:
      return reduce(RULE_9, 26);
    case 164:
      return reduce(RULE_9, 26);
    case 84:
      return reduce(RULE_9, 26);
    case 105:
      return reduce(RULE_9, 26);
    case 114:
      return reduce(RULE_9, 26);
    case 72:
      return reduce(RULE_9, 26);
    case 177:
      return reduce(RULE_9, 26);
    case 90:
      return reduce(RULE_9, 26);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action485(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto485(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 636;
    default: return -1;
    }
  }

  private final boolean action486(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 124:
      return reduce(RULE_14, 0);
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto486(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 637;
    default: return -1;
    }
  }

  private final boolean action487(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto487(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 638;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action488(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_49, 2);
    case 139:
      return reduce(RULE_49, 2);
    case 137:
      return reduce(RULE_49, 2);
    case 175:
      return reduce(RULE_49, 2);
    case 157:
      return reduce(RULE_49, 2);
    case 155:
      return reduce(RULE_49, 2);
    case 106:
      return reduce(RULE_49, 2);
    case 160:
      return reduce(RULE_49, 2);
    case 130:
      return reduce(RULE_49, 2);
    case 129:
      return reduce(RULE_49, 2);
    case 102:
      return reduce(RULE_49, 2);
    case 167:
      return reduce(RULE_49, 2);
    case 153:
      return reduce(RULE_49, 2);
    case 75:
      return reduce(RULE_49, 2);
    case 174:
      return reduce(RULE_49, 2);
    case 180:
      return reduce(RULE_49, 2);
    case 166:
      return reduce(RULE_49, 2);
    case 107:
      return reduce(RULE_49, 2);
    case 143:
      return reduce(RULE_49, 2);
    case 176:
      return reduce(RULE_49, 2);
    case 132:
      return reduce(RULE_49, 2);
    case 121:
      return reduce(RULE_49, 2);
    case 156:
      return reduce(RULE_49, 2);
    case 145:
      return reduce(RULE_49, 2);
    case 162:
      return reduce(RULE_49, 2);
    case 164:
      return reduce(RULE_49, 2);
    case 105:
      return reduce(RULE_49, 2);
    case 179:
      return reduce(RULE_49, 2);
    case 177:
      return reduce(RULE_49, 2);
    case 72:
      return reduce(RULE_49, 2);
    case 116:
      return reduce(RULE_49, 2);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action489(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 124:
      return reduce(RULE_14, 0);
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto489(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 639;
    default: return -1;
    }
  }

  private final boolean action490(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      stateStack.addFirst(640);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_63, 0);
    case 137:
      return reduce(RULE_63, 0);
    case 124:
      return reduce(RULE_63, 0);
    case 157:
      return reduce(RULE_63, 0);
    case 156:
      return reduce(RULE_63, 0);
    case 165:
      return reduce(RULE_63, 0);
    case 147:
      return reduce(RULE_63, 0);
    case 129:
      return reduce(RULE_63, 0);
    case 167:
      return reduce(RULE_63, 0);
    case 164:
      return reduce(RULE_63, 0);
    case 75:
      return reduce(RULE_63, 0);
    case 177:
      return reduce(RULE_63, 0);
    case 143:
      return reduce(RULE_63, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, EQUALS, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto490(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 641;
    default: return -1;
    }
  }

  private final boolean action491(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(642);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action492(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(643);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto492(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 644;
    default: return -1;
    }
  }

  private final boolean action493(Token<ParseType> token) throws ParseException, BadTokenException
  {
    if (token.getType() == null)
    {
      return reduce(RULE_29, 1);
    }
    switch (token.getType().ordinal())
    {
    case 129:
      return reduce(RULE_29, 1);
    case 136:
      return reduce(RULE_29, 1);
    case 149:
      return reduce(RULE_29, 1);
    case 167:
      return reduce(RULE_29, 1);
    case 164:
      return reduce(RULE_29, 1);
    case 75:
      return reduce(RULE_29, 1);
    case 154:
      return reduce(RULE_29, 1);
    case 157:
      return reduce(RULE_29, 1);
    case 156:
      return reduce(RULE_29, 1);
    case 135:
      return reduce(RULE_29, 1);
    case 177:
      return reduce(RULE_29, 1);
    case 143:
      return reduce(RULE_29, 1);
    default: throw new BadTokenException(token, new Object[] {null, COMPOUND_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, IMMUTABLE_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, NATIVE_KEYWORD, INTERFACE_KEYWORD, CLASS_KEYWORD, MUTABLE_KEYWORD, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action494(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, HASH, INT_KEYWORD, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto494(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 645;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action495(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      return reduce(RULE_64, 0);
    case 122:
      return reduce(RULE_64, 0);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action496(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_50, 1);
    case 124:
      return reduce(RULE_50, 1);
    case 83:
      return reduce(RULE_50, 1);
    case 105:
      return reduce(RULE_50, 1);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE, DOT});
    }
  }

  private final boolean action497(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 178:
      stateStack.addFirst(646);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {UNCHECKED_KEYWORD, NAME});
    }
  }

  private final int goto497(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 647;
    default: return -1;
    }
  }

  private final boolean action498(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_65, 5);
    case 137:
      return reduce(RULE_65, 5);
    case 139:
      return reduce(RULE_65, 5);
    case 175:
      return reduce(RULE_65, 5);
    case 157:
      return reduce(RULE_65, 5);
    case 155:
      return reduce(RULE_65, 5);
    case 106:
      return reduce(RULE_65, 5);
    case 160:
      return reduce(RULE_65, 5);
    case 130:
      return reduce(RULE_65, 5);
    case 129:
      return reduce(RULE_65, 5);
    case 167:
      return reduce(RULE_65, 5);
    case 102:
      return reduce(RULE_65, 5);
    case 153:
      return reduce(RULE_65, 5);
    case 75:
      return reduce(RULE_65, 5);
    case 174:
      return reduce(RULE_65, 5);
    case 180:
      return reduce(RULE_65, 5);
    case 166:
      return reduce(RULE_65, 5);
    case 107:
      return reduce(RULE_65, 5);
    case 143:
      return reduce(RULE_65, 5);
    case 176:
      return reduce(RULE_65, 5);
    case 132:
      return reduce(RULE_65, 5);
    case 121:
      return reduce(RULE_65, 5);
    case 156:
      return reduce(RULE_65, 5);
    case 145:
      return reduce(RULE_65, 5);
    case 162:
      return reduce(RULE_65, 5);
    case 164:
      return reduce(RULE_65, 5);
    case 105:
      return reduce(RULE_65, 5);
    case 179:
      return reduce(RULE_65, 5);
    case 72:
      return reduce(RULE_65, 5);
    case 177:
      return reduce(RULE_65, 5);
    case 116:
      return reduce(RULE_65, 5);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, HASH, STATIC_KEYWORD, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final boolean action499(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_65, 1);
    case 137:
      return reduce(RULE_65, 1);
    case 139:
      return reduce(RULE_65, 1);
    case 175:
      return reduce(RULE_65, 1);
    case 157:
      return reduce(RULE_65, 1);
    case 155:
      return reduce(RULE_65, 1);
    case 106:
      return reduce(RULE_65, 1);
    case 160:
      return reduce(RULE_65, 1);
    case 130:
      return reduce(RULE_65, 1);
    case 129:
      return reduce(RULE_65, 1);
    case 167:
      return reduce(RULE_65, 1);
    case 102:
      return reduce(RULE_65, 1);
    case 153:
      return reduce(RULE_65, 1);
    case 75:
      return reduce(RULE_65, 1);
    case 174:
      return reduce(RULE_65, 1);
    case 180:
      return reduce(RULE_65, 1);
    case 166:
      return reduce(RULE_65, 1);
    case 107:
      return reduce(RULE_65, 1);
    case 143:
      return reduce(RULE_65, 1);
    case 176:
      return reduce(RULE_65, 1);
    case 132:
      return reduce(RULE_65, 1);
    case 121:
      return reduce(RULE_65, 1);
    case 156:
      return reduce(RULE_65, 1);
    case 145:
      return reduce(RULE_65, 1);
    case 162:
      return reduce(RULE_65, 1);
    case 164:
      return reduce(RULE_65, 1);
    case 105:
      return reduce(RULE_65, 1);
    case 179:
      return reduce(RULE_65, 1);
    case 72:
      return reduce(RULE_65, 1);
    case 177:
      return reduce(RULE_65, 1);
    case 116:
      return reduce(RULE_65, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, HASH, STATIC_KEYWORD, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final boolean action500(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 36);
    case 137:
      return reduce(RULE_9, 36);
    case 110:
      return reduce(RULE_9, 36);
    case 79:
      return reduce(RULE_9, 36);
    case 106:
      return reduce(RULE_9, 36);
    case 117:
      return reduce(RULE_9, 36);
    case 102:
      return reduce(RULE_9, 36);
    case 167:
      return reduce(RULE_9, 36);
    case 152:
      return reduce(RULE_9, 36);
    case 94:
      return reduce(RULE_9, 36);
    case 80:
      return reduce(RULE_9, 36);
    case 98:
      return reduce(RULE_9, 36);
    case 171:
      return reduce(RULE_9, 36);
    case 86:
      return reduce(RULE_9, 36);
    case 83:
      return reduce(RULE_9, 36);
    case 122:
      return reduce(RULE_9, 36);
    case 108:
      return reduce(RULE_9, 36);
    case 92:
      return reduce(RULE_9, 36);
    case 128:
      return reduce(RULE_9, 36);
    case 104:
      return reduce(RULE_9, 36);
    case 82:
      return reduce(RULE_9, 36);
    case 116:
      return reduce(RULE_9, 36);
    case 85:
      return reduce(RULE_9, 36);
    case 149:
      return reduce(RULE_9, 36);
    case 157:
      return reduce(RULE_9, 36);
    case 103:
      return reduce(RULE_9, 36);
    case 147:
      return reduce(RULE_9, 36);
    case 129:
      return reduce(RULE_9, 36);
    case 119:
      return reduce(RULE_9, 36);
    case 75:
      return reduce(RULE_9, 36);
    case 100:
      return reduce(RULE_9, 36);
    case 107:
      return reduce(RULE_9, 36);
    case 143:
      return reduce(RULE_9, 36);
    case 112:
      return reduce(RULE_9, 36);
    case 120:
      return reduce(RULE_9, 36);
    case 121:
      return reduce(RULE_9, 36);
    case 124:
      return reduce(RULE_9, 36);
    case 156:
      return reduce(RULE_9, 36);
    case 123:
      return reduce(RULE_9, 36);
    case 99:
      return reduce(RULE_9, 36);
    case 125:
      return reduce(RULE_9, 36);
    case 165:
      return reduce(RULE_9, 36);
    case 77:
      return reduce(RULE_9, 36);
    case 164:
      return reduce(RULE_9, 36);
    case 84:
      return reduce(RULE_9, 36);
    case 105:
      return reduce(RULE_9, 36);
    case 114:
      return reduce(RULE_9, 36);
    case 72:
      return reduce(RULE_9, 36);
    case 177:
      return reduce(RULE_9, 36);
    case 90:
      return reduce(RULE_9, 36);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action501(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_60, 0);
    case 149:
      return reduce(RULE_60, 0);
    case 139:
      return reduce(RULE_60, 0);
    case 175:
      return reduce(RULE_60, 0);
    case 157:
      return reduce(RULE_60, 0);
    case 142:
      return reduce(RULE_60, 0);
    case 155:
      return reduce(RULE_60, 0);
    case 173:
      return reduce(RULE_60, 0);
    case 106:
      return reduce(RULE_60, 0);
    case 160:
      return reduce(RULE_60, 0);
    case 130:
      return reduce(RULE_60, 0);
    case 129:
      return reduce(RULE_60, 0);
    case 167:
      return reduce(RULE_60, 0);
    case 74:
      return reduce(RULE_60, 0);
    case 102:
      return reduce(RULE_60, 0);
    case 153:
      return reduce(RULE_60, 0);
    case 75:
      return reduce(RULE_60, 0);
    case 138:
      return reduce(RULE_60, 0);
    case 163:
      return reduce(RULE_60, 0);
    case 174:
      return reduce(RULE_60, 0);
    case 166:
      return reduce(RULE_60, 0);
    case 172:
      return reduce(RULE_60, 0);
    case 107:
      return reduce(RULE_60, 0);
    case 89:
      return reduce(RULE_60, 0);
    case 170:
      return reduce(RULE_60, 0);
    case 143:
      return reduce(RULE_60, 0);
    case 73:
      return reduce(RULE_60, 0);
    case 176:
      return reduce(RULE_60, 0);
    case 132:
      return reduce(RULE_60, 0);
    case 169:
      return reduce(RULE_60, 0);
    case 121:
      return reduce(RULE_60, 0);
    case 156:
      return reduce(RULE_60, 0);
    case 133:
      return reduce(RULE_60, 0);
    case 131:
      return reduce(RULE_60, 0);
    case 148:
      return reduce(RULE_60, 0);
    case 76:
      return reduce(RULE_60, 0);
    case 128:
      return reduce(RULE_60, 0);
    case 145:
      return reduce(RULE_60, 0);
    case 168:
      return reduce(RULE_60, 0);
    case 164:
      return reduce(RULE_60, 0);
    case 181:
      return reduce(RULE_60, 0);
    case 93:
      return reduce(RULE_60, 0);
    case 105:
      return reduce(RULE_60, 0);
    case 179:
      return reduce(RULE_60, 0);
    case 177:
      return reduce(RULE_60, 0);
    case 146:
      return reduce(RULE_60, 0);
    case 72:
      return reduce(RULE_60, 0);
    case 158:
      return reduce(RULE_60, 0);
    case 116:
      return reduce(RULE_60, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action502(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(648);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(619);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action503(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      stateStack.addFirst(26);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(29);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 129:
      stateStack.addFirst(24);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(25);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(28);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(32);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(30);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(27);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(31);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, INT_KEYWORD, HASH, STATIC_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto503(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 17: return 649;
    case 28: return 84;
    case 48: return 451;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action504(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 119:
      stateStack.addFirst(650);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RANGLE});
    }
  }

  private final boolean action505(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_36, 2);
    case 137:
      return reduce(RULE_36, 2);
    case 157:
      return reduce(RULE_36, 2);
    case 103:
      return reduce(RULE_36, 2);
    case 147:
      return reduce(RULE_36, 2);
    case 129:
      return reduce(RULE_36, 2);
    case 117:
      return reduce(RULE_36, 2);
    case 167:
      return reduce(RULE_36, 2);
    case 119:
      return reduce(RULE_36, 2);
    case 75:
      return reduce(RULE_36, 2);
    case 152:
      return reduce(RULE_36, 2);
    case 80:
      return reduce(RULE_36, 2);
    case 143:
      return reduce(RULE_36, 2);
    case 112:
      return reduce(RULE_36, 2);
    case 86:
      return reduce(RULE_36, 2);
    case 120:
      return reduce(RULE_36, 2);
    case 121:
      return reduce(RULE_36, 2);
    case 124:
      return reduce(RULE_36, 2);
    case 123:
      return reduce(RULE_36, 2);
    case 156:
      return reduce(RULE_36, 2);
    case 83:
      return reduce(RULE_36, 2);
    case 122:
      return reduce(RULE_36, 2);
    case 99:
      return reduce(RULE_36, 2);
    case 165:
      return reduce(RULE_36, 2);
    case 77:
      return reduce(RULE_36, 2);
    case 92:
      return reduce(RULE_36, 2);
    case 108:
      return reduce(RULE_36, 2);
    case 164:
      return reduce(RULE_36, 2);
    case 84:
      return reduce(RULE_36, 2);
    case 105:
      return reduce(RULE_36, 2);
    case 104:
      return reduce(RULE_36, 2);
    case 114:
      return reduce(RULE_36, 2);
    case 82:
      return reduce(RULE_36, 2);
    case 177:
      return reduce(RULE_36, 2);
    case 116:
      return reduce(RULE_36, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto505(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action506(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(389);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(390);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_36, 1);
    case 137:
      return reduce(RULE_36, 1);
    case 157:
      return reduce(RULE_36, 1);
    case 103:
      return reduce(RULE_36, 1);
    case 147:
      return reduce(RULE_36, 1);
    case 129:
      return reduce(RULE_36, 1);
    case 117:
      return reduce(RULE_36, 1);
    case 167:
      return reduce(RULE_36, 1);
    case 119:
      return reduce(RULE_36, 1);
    case 75:
      return reduce(RULE_36, 1);
    case 152:
      return reduce(RULE_36, 1);
    case 80:
      return reduce(RULE_36, 1);
    case 143:
      return reduce(RULE_36, 1);
    case 112:
      return reduce(RULE_36, 1);
    case 86:
      return reduce(RULE_36, 1);
    case 120:
      return reduce(RULE_36, 1);
    case 121:
      return reduce(RULE_36, 1);
    case 124:
      return reduce(RULE_36, 1);
    case 123:
      return reduce(RULE_36, 1);
    case 156:
      return reduce(RULE_36, 1);
    case 83:
      return reduce(RULE_36, 1);
    case 122:
      return reduce(RULE_36, 1);
    case 99:
      return reduce(RULE_36, 1);
    case 165:
      return reduce(RULE_36, 1);
    case 77:
      return reduce(RULE_36, 1);
    case 92:
      return reduce(RULE_36, 1);
    case 108:
      return reduce(RULE_36, 1);
    case 164:
      return reduce(RULE_36, 1);
    case 84:
      return reduce(RULE_36, 1);
    case 105:
      return reduce(RULE_36, 1);
    case 104:
      return reduce(RULE_36, 1);
    case 114:
      return reduce(RULE_36, 1);
    case 82:
      return reduce(RULE_36, 1);
    case 177:
      return reduce(RULE_36, 1);
    case 116:
      return reduce(RULE_36, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action507(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_36, 6);
    case 137:
      return reduce(RULE_36, 6);
    case 157:
      return reduce(RULE_36, 6);
    case 103:
      return reduce(RULE_36, 6);
    case 147:
      return reduce(RULE_36, 6);
    case 129:
      return reduce(RULE_36, 6);
    case 117:
      return reduce(RULE_36, 6);
    case 167:
      return reduce(RULE_36, 6);
    case 119:
      return reduce(RULE_36, 6);
    case 75:
      return reduce(RULE_36, 6);
    case 152:
      return reduce(RULE_36, 6);
    case 80:
      return reduce(RULE_36, 6);
    case 143:
      return reduce(RULE_36, 6);
    case 112:
      return reduce(RULE_36, 6);
    case 86:
      return reduce(RULE_36, 6);
    case 120:
      return reduce(RULE_36, 6);
    case 121:
      return reduce(RULE_36, 6);
    case 124:
      return reduce(RULE_36, 6);
    case 123:
      return reduce(RULE_36, 6);
    case 156:
      return reduce(RULE_36, 6);
    case 83:
      return reduce(RULE_36, 6);
    case 122:
      return reduce(RULE_36, 6);
    case 99:
      return reduce(RULE_36, 6);
    case 165:
      return reduce(RULE_36, 6);
    case 77:
      return reduce(RULE_36, 6);
    case 92:
      return reduce(RULE_36, 6);
    case 108:
      return reduce(RULE_36, 6);
    case 164:
      return reduce(RULE_36, 6);
    case 84:
      return reduce(RULE_36, 6);
    case 105:
      return reduce(RULE_36, 6);
    case 104:
      return reduce(RULE_36, 6);
    case 114:
      return reduce(RULE_36, 6);
    case 82:
      return reduce(RULE_36, 6);
    case 177:
      return reduce(RULE_36, 6);
    case 116:
      return reduce(RULE_36, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto507(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action508(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(389);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(390);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_36, 5);
    case 137:
      return reduce(RULE_36, 5);
    case 157:
      return reduce(RULE_36, 5);
    case 103:
      return reduce(RULE_36, 5);
    case 147:
      return reduce(RULE_36, 5);
    case 129:
      return reduce(RULE_36, 5);
    case 117:
      return reduce(RULE_36, 5);
    case 167:
      return reduce(RULE_36, 5);
    case 119:
      return reduce(RULE_36, 5);
    case 75:
      return reduce(RULE_36, 5);
    case 152:
      return reduce(RULE_36, 5);
    case 80:
      return reduce(RULE_36, 5);
    case 143:
      return reduce(RULE_36, 5);
    case 112:
      return reduce(RULE_36, 5);
    case 86:
      return reduce(RULE_36, 5);
    case 120:
      return reduce(RULE_36, 5);
    case 121:
      return reduce(RULE_36, 5);
    case 124:
      return reduce(RULE_36, 5);
    case 123:
      return reduce(RULE_36, 5);
    case 156:
      return reduce(RULE_36, 5);
    case 83:
      return reduce(RULE_36, 5);
    case 122:
      return reduce(RULE_36, 5);
    case 99:
      return reduce(RULE_36, 5);
    case 165:
      return reduce(RULE_36, 5);
    case 77:
      return reduce(RULE_36, 5);
    case 92:
      return reduce(RULE_36, 5);
    case 108:
      return reduce(RULE_36, 5);
    case 164:
      return reduce(RULE_36, 5);
    case 84:
      return reduce(RULE_36, 5);
    case 105:
      return reduce(RULE_36, 5);
    case 104:
      return reduce(RULE_36, 5);
    case 114:
      return reduce(RULE_36, 5);
    case 82:
      return reduce(RULE_36, 5);
    case 177:
      return reduce(RULE_36, 5);
    case 116:
      return reduce(RULE_36, 5);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action509(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(398);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_39, 1);
    case 149:
      return reduce(RULE_39, 1);
    case 137:
      return reduce(RULE_39, 1);
    case 110:
      return reduce(RULE_39, 1);
    case 157:
      return reduce(RULE_39, 1);
    case 103:
      return reduce(RULE_39, 1);
    case 147:
      return reduce(RULE_39, 1);
    case 129:
      return reduce(RULE_39, 1);
    case 117:
      return reduce(RULE_39, 1);
    case 167:
      return reduce(RULE_39, 1);
    case 119:
      return reduce(RULE_39, 1);
    case 75:
      return reduce(RULE_39, 1);
    case 100:
      return reduce(RULE_39, 1);
    case 152:
      return reduce(RULE_39, 1);
    case 80:
      return reduce(RULE_39, 1);
    case 94:
      return reduce(RULE_39, 1);
    case 143:
      return reduce(RULE_39, 1);
    case 112:
      return reduce(RULE_39, 1);
    case 86:
      return reduce(RULE_39, 1);
    case 120:
      return reduce(RULE_39, 1);
    case 121:
      return reduce(RULE_39, 1);
    case 124:
      return reduce(RULE_39, 1);
    case 123:
      return reduce(RULE_39, 1);
    case 156:
      return reduce(RULE_39, 1);
    case 83:
      return reduce(RULE_39, 1);
    case 99:
      return reduce(RULE_39, 1);
    case 122:
      return reduce(RULE_39, 1);
    case 125:
      return reduce(RULE_39, 1);
    case 165:
      return reduce(RULE_39, 1);
    case 77:
      return reduce(RULE_39, 1);
    case 92:
      return reduce(RULE_39, 1);
    case 108:
      return reduce(RULE_39, 1);
    case 164:
      return reduce(RULE_39, 1);
    case 84:
      return reduce(RULE_39, 1);
    case 104:
      return reduce(RULE_39, 1);
    case 105:
      return reduce(RULE_39, 1);
    case 114:
      return reduce(RULE_39, 1);
    case 82:
      return reduce(RULE_39, 1);
    case 177:
      return reduce(RULE_39, 1);
    case 90:
      return reduce(RULE_39, 1);
    case 116:
      return reduce(RULE_39, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action510(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_39, 2);
    case 149:
      return reduce(RULE_39, 2);
    case 137:
      return reduce(RULE_39, 2);
    case 110:
      return reduce(RULE_39, 2);
    case 157:
      return reduce(RULE_39, 2);
    case 103:
      return reduce(RULE_39, 2);
    case 147:
      return reduce(RULE_39, 2);
    case 129:
      return reduce(RULE_39, 2);
    case 117:
      return reduce(RULE_39, 2);
    case 167:
      return reduce(RULE_39, 2);
    case 119:
      return reduce(RULE_39, 2);
    case 75:
      return reduce(RULE_39, 2);
    case 100:
      return reduce(RULE_39, 2);
    case 152:
      return reduce(RULE_39, 2);
    case 80:
      return reduce(RULE_39, 2);
    case 94:
      return reduce(RULE_39, 2);
    case 143:
      return reduce(RULE_39, 2);
    case 112:
      return reduce(RULE_39, 2);
    case 86:
      return reduce(RULE_39, 2);
    case 120:
      return reduce(RULE_39, 2);
    case 121:
      return reduce(RULE_39, 2);
    case 124:
      return reduce(RULE_39, 2);
    case 123:
      return reduce(RULE_39, 2);
    case 156:
      return reduce(RULE_39, 2);
    case 83:
      return reduce(RULE_39, 2);
    case 99:
      return reduce(RULE_39, 2);
    case 122:
      return reduce(RULE_39, 2);
    case 125:
      return reduce(RULE_39, 2);
    case 165:
      return reduce(RULE_39, 2);
    case 77:
      return reduce(RULE_39, 2);
    case 92:
      return reduce(RULE_39, 2);
    case 108:
      return reduce(RULE_39, 2);
    case 164:
      return reduce(RULE_39, 2);
    case 84:
      return reduce(RULE_39, 2);
    case 104:
      return reduce(RULE_39, 2);
    case 105:
      return reduce(RULE_39, 2);
    case 114:
      return reduce(RULE_39, 2);
    case 82:
      return reduce(RULE_39, 2);
    case 177:
      return reduce(RULE_39, 2);
    case 90:
      return reduce(RULE_39, 2);
    case 116:
      return reduce(RULE_39, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto510(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action511(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(398);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_39, 5);
    case 149:
      return reduce(RULE_39, 5);
    case 137:
      return reduce(RULE_39, 5);
    case 110:
      return reduce(RULE_39, 5);
    case 157:
      return reduce(RULE_39, 5);
    case 103:
      return reduce(RULE_39, 5);
    case 147:
      return reduce(RULE_39, 5);
    case 129:
      return reduce(RULE_39, 5);
    case 117:
      return reduce(RULE_39, 5);
    case 167:
      return reduce(RULE_39, 5);
    case 119:
      return reduce(RULE_39, 5);
    case 75:
      return reduce(RULE_39, 5);
    case 100:
      return reduce(RULE_39, 5);
    case 152:
      return reduce(RULE_39, 5);
    case 80:
      return reduce(RULE_39, 5);
    case 94:
      return reduce(RULE_39, 5);
    case 143:
      return reduce(RULE_39, 5);
    case 112:
      return reduce(RULE_39, 5);
    case 86:
      return reduce(RULE_39, 5);
    case 120:
      return reduce(RULE_39, 5);
    case 121:
      return reduce(RULE_39, 5);
    case 124:
      return reduce(RULE_39, 5);
    case 123:
      return reduce(RULE_39, 5);
    case 156:
      return reduce(RULE_39, 5);
    case 83:
      return reduce(RULE_39, 5);
    case 99:
      return reduce(RULE_39, 5);
    case 122:
      return reduce(RULE_39, 5);
    case 125:
      return reduce(RULE_39, 5);
    case 165:
      return reduce(RULE_39, 5);
    case 77:
      return reduce(RULE_39, 5);
    case 92:
      return reduce(RULE_39, 5);
    case 108:
      return reduce(RULE_39, 5);
    case 164:
      return reduce(RULE_39, 5);
    case 84:
      return reduce(RULE_39, 5);
    case 104:
      return reduce(RULE_39, 5);
    case 105:
      return reduce(RULE_39, 5);
    case 114:
      return reduce(RULE_39, 5);
    case 82:
      return reduce(RULE_39, 5);
    case 177:
      return reduce(RULE_39, 5);
    case 90:
      return reduce(RULE_39, 5);
    case 116:
      return reduce(RULE_39, 5);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action512(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_39, 6);
    case 149:
      return reduce(RULE_39, 6);
    case 137:
      return reduce(RULE_39, 6);
    case 110:
      return reduce(RULE_39, 6);
    case 157:
      return reduce(RULE_39, 6);
    case 103:
      return reduce(RULE_39, 6);
    case 147:
      return reduce(RULE_39, 6);
    case 129:
      return reduce(RULE_39, 6);
    case 117:
      return reduce(RULE_39, 6);
    case 167:
      return reduce(RULE_39, 6);
    case 119:
      return reduce(RULE_39, 6);
    case 75:
      return reduce(RULE_39, 6);
    case 100:
      return reduce(RULE_39, 6);
    case 152:
      return reduce(RULE_39, 6);
    case 80:
      return reduce(RULE_39, 6);
    case 94:
      return reduce(RULE_39, 6);
    case 143:
      return reduce(RULE_39, 6);
    case 112:
      return reduce(RULE_39, 6);
    case 86:
      return reduce(RULE_39, 6);
    case 120:
      return reduce(RULE_39, 6);
    case 121:
      return reduce(RULE_39, 6);
    case 124:
      return reduce(RULE_39, 6);
    case 123:
      return reduce(RULE_39, 6);
    case 156:
      return reduce(RULE_39, 6);
    case 83:
      return reduce(RULE_39, 6);
    case 99:
      return reduce(RULE_39, 6);
    case 122:
      return reduce(RULE_39, 6);
    case 125:
      return reduce(RULE_39, 6);
    case 165:
      return reduce(RULE_39, 6);
    case 77:
      return reduce(RULE_39, 6);
    case 92:
      return reduce(RULE_39, 6);
    case 108:
      return reduce(RULE_39, 6);
    case 164:
      return reduce(RULE_39, 6);
    case 84:
      return reduce(RULE_39, 6);
    case 104:
      return reduce(RULE_39, 6);
    case 105:
      return reduce(RULE_39, 6);
    case 114:
      return reduce(RULE_39, 6);
    case 82:
      return reduce(RULE_39, 6);
    case 177:
      return reduce(RULE_39, 6);
    case 90:
      return reduce(RULE_39, 6);
    case 116:
      return reduce(RULE_39, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto512(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action513(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(398);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_39, 3);
    case 149:
      return reduce(RULE_39, 3);
    case 137:
      return reduce(RULE_39, 3);
    case 110:
      return reduce(RULE_39, 3);
    case 157:
      return reduce(RULE_39, 3);
    case 103:
      return reduce(RULE_39, 3);
    case 147:
      return reduce(RULE_39, 3);
    case 129:
      return reduce(RULE_39, 3);
    case 117:
      return reduce(RULE_39, 3);
    case 167:
      return reduce(RULE_39, 3);
    case 119:
      return reduce(RULE_39, 3);
    case 75:
      return reduce(RULE_39, 3);
    case 100:
      return reduce(RULE_39, 3);
    case 152:
      return reduce(RULE_39, 3);
    case 80:
      return reduce(RULE_39, 3);
    case 94:
      return reduce(RULE_39, 3);
    case 143:
      return reduce(RULE_39, 3);
    case 112:
      return reduce(RULE_39, 3);
    case 86:
      return reduce(RULE_39, 3);
    case 120:
      return reduce(RULE_39, 3);
    case 121:
      return reduce(RULE_39, 3);
    case 124:
      return reduce(RULE_39, 3);
    case 123:
      return reduce(RULE_39, 3);
    case 156:
      return reduce(RULE_39, 3);
    case 83:
      return reduce(RULE_39, 3);
    case 99:
      return reduce(RULE_39, 3);
    case 122:
      return reduce(RULE_39, 3);
    case 125:
      return reduce(RULE_39, 3);
    case 165:
      return reduce(RULE_39, 3);
    case 77:
      return reduce(RULE_39, 3);
    case 92:
      return reduce(RULE_39, 3);
    case 108:
      return reduce(RULE_39, 3);
    case 164:
      return reduce(RULE_39, 3);
    case 84:
      return reduce(RULE_39, 3);
    case 104:
      return reduce(RULE_39, 3);
    case 105:
      return reduce(RULE_39, 3);
    case 114:
      return reduce(RULE_39, 3);
    case 82:
      return reduce(RULE_39, 3);
    case 177:
      return reduce(RULE_39, 3);
    case 90:
      return reduce(RULE_39, 3);
    case 116:
      return reduce(RULE_39, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action514(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_39, 4);
    case 149:
      return reduce(RULE_39, 4);
    case 137:
      return reduce(RULE_39, 4);
    case 110:
      return reduce(RULE_39, 4);
    case 157:
      return reduce(RULE_39, 4);
    case 103:
      return reduce(RULE_39, 4);
    case 147:
      return reduce(RULE_39, 4);
    case 129:
      return reduce(RULE_39, 4);
    case 117:
      return reduce(RULE_39, 4);
    case 167:
      return reduce(RULE_39, 4);
    case 119:
      return reduce(RULE_39, 4);
    case 75:
      return reduce(RULE_39, 4);
    case 100:
      return reduce(RULE_39, 4);
    case 152:
      return reduce(RULE_39, 4);
    case 80:
      return reduce(RULE_39, 4);
    case 94:
      return reduce(RULE_39, 4);
    case 143:
      return reduce(RULE_39, 4);
    case 112:
      return reduce(RULE_39, 4);
    case 86:
      return reduce(RULE_39, 4);
    case 120:
      return reduce(RULE_39, 4);
    case 121:
      return reduce(RULE_39, 4);
    case 124:
      return reduce(RULE_39, 4);
    case 123:
      return reduce(RULE_39, 4);
    case 156:
      return reduce(RULE_39, 4);
    case 83:
      return reduce(RULE_39, 4);
    case 99:
      return reduce(RULE_39, 4);
    case 122:
      return reduce(RULE_39, 4);
    case 125:
      return reduce(RULE_39, 4);
    case 165:
      return reduce(RULE_39, 4);
    case 77:
      return reduce(RULE_39, 4);
    case 92:
      return reduce(RULE_39, 4);
    case 108:
      return reduce(RULE_39, 4);
    case 164:
      return reduce(RULE_39, 4);
    case 84:
      return reduce(RULE_39, 4);
    case 104:
      return reduce(RULE_39, 4);
    case 105:
      return reduce(RULE_39, 4);
    case 114:
      return reduce(RULE_39, 4);
    case 82:
      return reduce(RULE_39, 4);
    case 177:
      return reduce(RULE_39, 4);
    case 90:
      return reduce(RULE_39, 4);
    case 116:
      return reduce(RULE_39, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto514(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action515(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(355);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 11);
    case 137:
      return reduce(RULE_34, 11);
    case 110:
      return reduce(RULE_34, 11);
    case 157:
      return reduce(RULE_34, 11);
    case 103:
      return reduce(RULE_34, 11);
    case 147:
      return reduce(RULE_34, 11);
    case 129:
      return reduce(RULE_34, 11);
    case 117:
      return reduce(RULE_34, 11);
    case 167:
      return reduce(RULE_34, 11);
    case 119:
      return reduce(RULE_34, 11);
    case 75:
      return reduce(RULE_34, 11);
    case 100:
      return reduce(RULE_34, 11);
    case 152:
      return reduce(RULE_34, 11);
    case 80:
      return reduce(RULE_34, 11);
    case 143:
      return reduce(RULE_34, 11);
    case 112:
      return reduce(RULE_34, 11);
    case 86:
      return reduce(RULE_34, 11);
    case 120:
      return reduce(RULE_34, 11);
    case 121:
      return reduce(RULE_34, 11);
    case 124:
      return reduce(RULE_34, 11);
    case 123:
      return reduce(RULE_34, 11);
    case 156:
      return reduce(RULE_34, 11);
    case 83:
      return reduce(RULE_34, 11);
    case 99:
      return reduce(RULE_34, 11);
    case 122:
      return reduce(RULE_34, 11);
    case 125:
      return reduce(RULE_34, 11);
    case 165:
      return reduce(RULE_34, 11);
    case 77:
      return reduce(RULE_34, 11);
    case 92:
      return reduce(RULE_34, 11);
    case 108:
      return reduce(RULE_34, 11);
    case 164:
      return reduce(RULE_34, 11);
    case 84:
      return reduce(RULE_34, 11);
    case 105:
      return reduce(RULE_34, 11);
    case 104:
      return reduce(RULE_34, 11);
    case 114:
      return reduce(RULE_34, 11);
    case 82:
      return reduce(RULE_34, 11);
    case 177:
      return reduce(RULE_34, 11);
    case 90:
      return reduce(RULE_34, 11);
    case 116:
      return reduce(RULE_34, 11);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action516(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 12);
    case 137:
      return reduce(RULE_34, 12);
    case 110:
      return reduce(RULE_34, 12);
    case 157:
      return reduce(RULE_34, 12);
    case 103:
      return reduce(RULE_34, 12);
    case 147:
      return reduce(RULE_34, 12);
    case 129:
      return reduce(RULE_34, 12);
    case 117:
      return reduce(RULE_34, 12);
    case 167:
      return reduce(RULE_34, 12);
    case 119:
      return reduce(RULE_34, 12);
    case 75:
      return reduce(RULE_34, 12);
    case 100:
      return reduce(RULE_34, 12);
    case 152:
      return reduce(RULE_34, 12);
    case 80:
      return reduce(RULE_34, 12);
    case 143:
      return reduce(RULE_34, 12);
    case 112:
      return reduce(RULE_34, 12);
    case 86:
      return reduce(RULE_34, 12);
    case 120:
      return reduce(RULE_34, 12);
    case 121:
      return reduce(RULE_34, 12);
    case 124:
      return reduce(RULE_34, 12);
    case 123:
      return reduce(RULE_34, 12);
    case 156:
      return reduce(RULE_34, 12);
    case 83:
      return reduce(RULE_34, 12);
    case 99:
      return reduce(RULE_34, 12);
    case 122:
      return reduce(RULE_34, 12);
    case 125:
      return reduce(RULE_34, 12);
    case 165:
      return reduce(RULE_34, 12);
    case 77:
      return reduce(RULE_34, 12);
    case 92:
      return reduce(RULE_34, 12);
    case 108:
      return reduce(RULE_34, 12);
    case 164:
      return reduce(RULE_34, 12);
    case 84:
      return reduce(RULE_34, 12);
    case 105:
      return reduce(RULE_34, 12);
    case 104:
      return reduce(RULE_34, 12);
    case 114:
      return reduce(RULE_34, 12);
    case 82:
      return reduce(RULE_34, 12);
    case 177:
      return reduce(RULE_34, 12);
    case 90:
      return reduce(RULE_34, 12);
    case 116:
      return reduce(RULE_34, 12);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto516(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action517(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 12);
    case 137:
      return reduce(RULE_41, 12);
    case 157:
      return reduce(RULE_41, 12);
    case 147:
      return reduce(RULE_41, 12);
    case 129:
      return reduce(RULE_41, 12);
    case 167:
      return reduce(RULE_41, 12);
    case 117:
      return reduce(RULE_41, 12);
    case 75:
      return reduce(RULE_41, 12);
    case 80:
      return reduce(RULE_41, 12);
    case 143:
      return reduce(RULE_41, 12);
    case 112:
      return reduce(RULE_41, 12);
    case 121:
      return reduce(RULE_41, 12);
    case 124:
      return reduce(RULE_41, 12);
    case 123:
      return reduce(RULE_41, 12);
    case 156:
      return reduce(RULE_41, 12);
    case 83:
      return reduce(RULE_41, 12);
    case 122:
      return reduce(RULE_41, 12);
    case 165:
      return reduce(RULE_41, 12);
    case 77:
      return reduce(RULE_41, 12);
    case 92:
      return reduce(RULE_41, 12);
    case 164:
      return reduce(RULE_41, 12);
    case 84:
      return reduce(RULE_41, 12);
    case 105:
      return reduce(RULE_41, 12);
    case 177:
      return reduce(RULE_41, 12);
    case 82:
      return reduce(RULE_41, 12);
    case 116:
      return reduce(RULE_41, 12);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto517(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action518(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 11);
    case 137:
      return reduce(RULE_41, 11);
    case 157:
      return reduce(RULE_41, 11);
    case 147:
      return reduce(RULE_41, 11);
    case 129:
      return reduce(RULE_41, 11);
    case 167:
      return reduce(RULE_41, 11);
    case 117:
      return reduce(RULE_41, 11);
    case 75:
      return reduce(RULE_41, 11);
    case 80:
      return reduce(RULE_41, 11);
    case 143:
      return reduce(RULE_41, 11);
    case 112:
      return reduce(RULE_41, 11);
    case 121:
      return reduce(RULE_41, 11);
    case 124:
      return reduce(RULE_41, 11);
    case 123:
      return reduce(RULE_41, 11);
    case 156:
      return reduce(RULE_41, 11);
    case 83:
      return reduce(RULE_41, 11);
    case 122:
      return reduce(RULE_41, 11);
    case 165:
      return reduce(RULE_41, 11);
    case 77:
      return reduce(RULE_41, 11);
    case 92:
      return reduce(RULE_41, 11);
    case 164:
      return reduce(RULE_41, 11);
    case 84:
      return reduce(RULE_41, 11);
    case 105:
      return reduce(RULE_41, 11);
    case 177:
      return reduce(RULE_41, 11);
    case 82:
      return reduce(RULE_41, 11);
    case 116:
      return reduce(RULE_41, 11);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action519(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(360);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(364);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(367);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(372);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(373);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(375);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(379);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_35, 8);
    case 137:
      return reduce(RULE_35, 8);
    case 121:
      return reduce(RULE_35, 8);
    case 124:
      return reduce(RULE_35, 8);
    case 157:
      return reduce(RULE_35, 8);
    case 123:
      return reduce(RULE_35, 8);
    case 156:
      return reduce(RULE_35, 8);
    case 83:
      return reduce(RULE_35, 8);
    case 122:
      return reduce(RULE_35, 8);
    case 165:
      return reduce(RULE_35, 8);
    case 147:
      return reduce(RULE_35, 8);
    case 129:
      return reduce(RULE_35, 8);
    case 167:
      return reduce(RULE_35, 8);
    case 164:
      return reduce(RULE_35, 8);
    case 75:
      return reduce(RULE_35, 8);
    case 105:
      return reduce(RULE_35, 8);
    case 82:
      return reduce(RULE_35, 8);
    case 177:
      return reduce(RULE_35, 8);
    case 143:
      return reduce(RULE_35, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto519(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action520(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_35, 7);
    case 137:
      return reduce(RULE_35, 7);
    case 121:
      return reduce(RULE_35, 7);
    case 124:
      return reduce(RULE_35, 7);
    case 157:
      return reduce(RULE_35, 7);
    case 123:
      return reduce(RULE_35, 7);
    case 156:
      return reduce(RULE_35, 7);
    case 83:
      return reduce(RULE_35, 7);
    case 122:
      return reduce(RULE_35, 7);
    case 165:
      return reduce(RULE_35, 7);
    case 147:
      return reduce(RULE_35, 7);
    case 129:
      return reduce(RULE_35, 7);
    case 167:
      return reduce(RULE_35, 7);
    case 164:
      return reduce(RULE_35, 7);
    case 75:
      return reduce(RULE_35, 7);
    case 105:
      return reduce(RULE_35, 7);
    case 82:
      return reduce(RULE_35, 7);
    case 177:
      return reduce(RULE_35, 7);
    case 143:
      return reduce(RULE_35, 7);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, RBRACE, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action521(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 20);
    case 137:
      return reduce(RULE_41, 20);
    case 157:
      return reduce(RULE_41, 20);
    case 147:
      return reduce(RULE_41, 20);
    case 129:
      return reduce(RULE_41, 20);
    case 167:
      return reduce(RULE_41, 20);
    case 117:
      return reduce(RULE_41, 20);
    case 75:
      return reduce(RULE_41, 20);
    case 80:
      return reduce(RULE_41, 20);
    case 143:
      return reduce(RULE_41, 20);
    case 112:
      return reduce(RULE_41, 20);
    case 121:
      return reduce(RULE_41, 20);
    case 124:
      return reduce(RULE_41, 20);
    case 123:
      return reduce(RULE_41, 20);
    case 156:
      return reduce(RULE_41, 20);
    case 83:
      return reduce(RULE_41, 20);
    case 122:
      return reduce(RULE_41, 20);
    case 165:
      return reduce(RULE_41, 20);
    case 77:
      return reduce(RULE_41, 20);
    case 92:
      return reduce(RULE_41, 20);
    case 164:
      return reduce(RULE_41, 20);
    case 84:
      return reduce(RULE_41, 20);
    case 105:
      return reduce(RULE_41, 20);
    case 177:
      return reduce(RULE_41, 20);
    case 82:
      return reduce(RULE_41, 20);
    case 116:
      return reduce(RULE_41, 20);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto521(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action522(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 19);
    case 137:
      return reduce(RULE_41, 19);
    case 157:
      return reduce(RULE_41, 19);
    case 147:
      return reduce(RULE_41, 19);
    case 129:
      return reduce(RULE_41, 19);
    case 167:
      return reduce(RULE_41, 19);
    case 117:
      return reduce(RULE_41, 19);
    case 75:
      return reduce(RULE_41, 19);
    case 80:
      return reduce(RULE_41, 19);
    case 143:
      return reduce(RULE_41, 19);
    case 112:
      return reduce(RULE_41, 19);
    case 121:
      return reduce(RULE_41, 19);
    case 124:
      return reduce(RULE_41, 19);
    case 123:
      return reduce(RULE_41, 19);
    case 156:
      return reduce(RULE_41, 19);
    case 83:
      return reduce(RULE_41, 19);
    case 122:
      return reduce(RULE_41, 19);
    case 165:
      return reduce(RULE_41, 19);
    case 77:
      return reduce(RULE_41, 19);
    case 92:
      return reduce(RULE_41, 19);
    case 164:
      return reduce(RULE_41, 19);
    case 84:
      return reduce(RULE_41, 19);
    case 105:
      return reduce(RULE_41, 19);
    case 177:
      return reduce(RULE_41, 19);
    case 82:
      return reduce(RULE_41, 19);
    case 116:
      return reduce(RULE_41, 19);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action523(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(355);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 7);
    case 137:
      return reduce(RULE_34, 7);
    case 110:
      return reduce(RULE_34, 7);
    case 157:
      return reduce(RULE_34, 7);
    case 103:
      return reduce(RULE_34, 7);
    case 147:
      return reduce(RULE_34, 7);
    case 129:
      return reduce(RULE_34, 7);
    case 117:
      return reduce(RULE_34, 7);
    case 167:
      return reduce(RULE_34, 7);
    case 119:
      return reduce(RULE_34, 7);
    case 75:
      return reduce(RULE_34, 7);
    case 100:
      return reduce(RULE_34, 7);
    case 152:
      return reduce(RULE_34, 7);
    case 80:
      return reduce(RULE_34, 7);
    case 143:
      return reduce(RULE_34, 7);
    case 112:
      return reduce(RULE_34, 7);
    case 86:
      return reduce(RULE_34, 7);
    case 120:
      return reduce(RULE_34, 7);
    case 121:
      return reduce(RULE_34, 7);
    case 124:
      return reduce(RULE_34, 7);
    case 123:
      return reduce(RULE_34, 7);
    case 156:
      return reduce(RULE_34, 7);
    case 83:
      return reduce(RULE_34, 7);
    case 99:
      return reduce(RULE_34, 7);
    case 122:
      return reduce(RULE_34, 7);
    case 125:
      return reduce(RULE_34, 7);
    case 165:
      return reduce(RULE_34, 7);
    case 77:
      return reduce(RULE_34, 7);
    case 92:
      return reduce(RULE_34, 7);
    case 108:
      return reduce(RULE_34, 7);
    case 164:
      return reduce(RULE_34, 7);
    case 84:
      return reduce(RULE_34, 7);
    case 105:
      return reduce(RULE_34, 7);
    case 104:
      return reduce(RULE_34, 7);
    case 114:
      return reduce(RULE_34, 7);
    case 82:
      return reduce(RULE_34, 7);
    case 177:
      return reduce(RULE_34, 7);
    case 90:
      return reduce(RULE_34, 7);
    case 116:
      return reduce(RULE_34, 7);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action524(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 8);
    case 137:
      return reduce(RULE_34, 8);
    case 110:
      return reduce(RULE_34, 8);
    case 157:
      return reduce(RULE_34, 8);
    case 103:
      return reduce(RULE_34, 8);
    case 147:
      return reduce(RULE_34, 8);
    case 129:
      return reduce(RULE_34, 8);
    case 117:
      return reduce(RULE_34, 8);
    case 167:
      return reduce(RULE_34, 8);
    case 119:
      return reduce(RULE_34, 8);
    case 75:
      return reduce(RULE_34, 8);
    case 100:
      return reduce(RULE_34, 8);
    case 152:
      return reduce(RULE_34, 8);
    case 80:
      return reduce(RULE_34, 8);
    case 143:
      return reduce(RULE_34, 8);
    case 112:
      return reduce(RULE_34, 8);
    case 86:
      return reduce(RULE_34, 8);
    case 120:
      return reduce(RULE_34, 8);
    case 121:
      return reduce(RULE_34, 8);
    case 124:
      return reduce(RULE_34, 8);
    case 123:
      return reduce(RULE_34, 8);
    case 156:
      return reduce(RULE_34, 8);
    case 83:
      return reduce(RULE_34, 8);
    case 99:
      return reduce(RULE_34, 8);
    case 122:
      return reduce(RULE_34, 8);
    case 125:
      return reduce(RULE_34, 8);
    case 165:
      return reduce(RULE_34, 8);
    case 77:
      return reduce(RULE_34, 8);
    case 92:
      return reduce(RULE_34, 8);
    case 108:
      return reduce(RULE_34, 8);
    case 164:
      return reduce(RULE_34, 8);
    case 84:
      return reduce(RULE_34, 8);
    case 105:
      return reduce(RULE_34, 8);
    case 104:
      return reduce(RULE_34, 8);
    case 114:
      return reduce(RULE_34, 8);
    case 82:
      return reduce(RULE_34, 8);
    case 177:
      return reduce(RULE_34, 8);
    case 90:
      return reduce(RULE_34, 8);
    case 116:
      return reduce(RULE_34, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto524(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action525(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_33, 2);
    case 137:
      return reduce(RULE_33, 2);
    case 157:
      return reduce(RULE_33, 2);
    case 103:
      return reduce(RULE_33, 2);
    case 147:
      return reduce(RULE_33, 2);
    case 129:
      return reduce(RULE_33, 2);
    case 167:
      return reduce(RULE_33, 2);
    case 117:
      return reduce(RULE_33, 2);
    case 119:
      return reduce(RULE_33, 2);
    case 75:
      return reduce(RULE_33, 2);
    case 152:
      return reduce(RULE_33, 2);
    case 80:
      return reduce(RULE_33, 2);
    case 143:
      return reduce(RULE_33, 2);
    case 112:
      return reduce(RULE_33, 2);
    case 86:
      return reduce(RULE_33, 2);
    case 120:
      return reduce(RULE_33, 2);
    case 121:
      return reduce(RULE_33, 2);
    case 124:
      return reduce(RULE_33, 2);
    case 123:
      return reduce(RULE_33, 2);
    case 156:
      return reduce(RULE_33, 2);
    case 83:
      return reduce(RULE_33, 2);
    case 122:
      return reduce(RULE_33, 2);
    case 99:
      return reduce(RULE_33, 2);
    case 165:
      return reduce(RULE_33, 2);
    case 77:
      return reduce(RULE_33, 2);
    case 92:
      return reduce(RULE_33, 2);
    case 164:
      return reduce(RULE_33, 2);
    case 84:
      return reduce(RULE_33, 2);
    case 105:
      return reduce(RULE_33, 2);
    case 104:
      return reduce(RULE_33, 2);
    case 82:
      return reduce(RULE_33, 2);
    case 177:
      return reduce(RULE_33, 2);
    case 116:
      return reduce(RULE_33, 2);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, UNBACKED_KEYWORD, COLON, QUESTION_MARK});
    }
  }

  private final boolean action526(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 12);
    case 137:
      return reduce(RULE_38, 12);
    case 157:
      return reduce(RULE_38, 12);
    case 147:
      return reduce(RULE_38, 12);
    case 129:
      return reduce(RULE_38, 12);
    case 167:
      return reduce(RULE_38, 12);
    case 117:
      return reduce(RULE_38, 12);
    case 75:
      return reduce(RULE_38, 12);
    case 80:
      return reduce(RULE_38, 12);
    case 143:
      return reduce(RULE_38, 12);
    case 112:
      return reduce(RULE_38, 12);
    case 121:
      return reduce(RULE_38, 12);
    case 124:
      return reduce(RULE_38, 12);
    case 123:
      return reduce(RULE_38, 12);
    case 156:
      return reduce(RULE_38, 12);
    case 83:
      return reduce(RULE_38, 12);
    case 122:
      return reduce(RULE_38, 12);
    case 165:
      return reduce(RULE_38, 12);
    case 77:
      return reduce(RULE_38, 12);
    case 92:
      return reduce(RULE_38, 12);
    case 164:
      return reduce(RULE_38, 12);
    case 84:
      return reduce(RULE_38, 12);
    case 105:
      return reduce(RULE_38, 12);
    case 177:
      return reduce(RULE_38, 12);
    case 82:
      return reduce(RULE_38, 12);
    case 116:
      return reduce(RULE_38, 12);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto526(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action527(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 11);
    case 137:
      return reduce(RULE_38, 11);
    case 157:
      return reduce(RULE_38, 11);
    case 147:
      return reduce(RULE_38, 11);
    case 129:
      return reduce(RULE_38, 11);
    case 167:
      return reduce(RULE_38, 11);
    case 117:
      return reduce(RULE_38, 11);
    case 75:
      return reduce(RULE_38, 11);
    case 80:
      return reduce(RULE_38, 11);
    case 143:
      return reduce(RULE_38, 11);
    case 112:
      return reduce(RULE_38, 11);
    case 121:
      return reduce(RULE_38, 11);
    case 124:
      return reduce(RULE_38, 11);
    case 123:
      return reduce(RULE_38, 11);
    case 156:
      return reduce(RULE_38, 11);
    case 83:
      return reduce(RULE_38, 11);
    case 122:
      return reduce(RULE_38, 11);
    case 165:
      return reduce(RULE_38, 11);
    case 77:
      return reduce(RULE_38, 11);
    case 92:
      return reduce(RULE_38, 11);
    case 164:
      return reduce(RULE_38, 11);
    case 84:
      return reduce(RULE_38, 11);
    case 105:
      return reduce(RULE_38, 11);
    case 177:
      return reduce(RULE_38, 11);
    case 82:
      return reduce(RULE_38, 11);
    case 116:
      return reduce(RULE_38, 11);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action528(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 98:
      stateStack.addFirst(398);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_39, 7);
    case 149:
      return reduce(RULE_39, 7);
    case 137:
      return reduce(RULE_39, 7);
    case 110:
      return reduce(RULE_39, 7);
    case 157:
      return reduce(RULE_39, 7);
    case 103:
      return reduce(RULE_39, 7);
    case 147:
      return reduce(RULE_39, 7);
    case 129:
      return reduce(RULE_39, 7);
    case 117:
      return reduce(RULE_39, 7);
    case 167:
      return reduce(RULE_39, 7);
    case 119:
      return reduce(RULE_39, 7);
    case 75:
      return reduce(RULE_39, 7);
    case 100:
      return reduce(RULE_39, 7);
    case 152:
      return reduce(RULE_39, 7);
    case 80:
      return reduce(RULE_39, 7);
    case 94:
      return reduce(RULE_39, 7);
    case 143:
      return reduce(RULE_39, 7);
    case 112:
      return reduce(RULE_39, 7);
    case 86:
      return reduce(RULE_39, 7);
    case 120:
      return reduce(RULE_39, 7);
    case 121:
      return reduce(RULE_39, 7);
    case 124:
      return reduce(RULE_39, 7);
    case 123:
      return reduce(RULE_39, 7);
    case 156:
      return reduce(RULE_39, 7);
    case 83:
      return reduce(RULE_39, 7);
    case 99:
      return reduce(RULE_39, 7);
    case 122:
      return reduce(RULE_39, 7);
    case 125:
      return reduce(RULE_39, 7);
    case 165:
      return reduce(RULE_39, 7);
    case 77:
      return reduce(RULE_39, 7);
    case 92:
      return reduce(RULE_39, 7);
    case 108:
      return reduce(RULE_39, 7);
    case 164:
      return reduce(RULE_39, 7);
    case 84:
      return reduce(RULE_39, 7);
    case 104:
      return reduce(RULE_39, 7);
    case 105:
      return reduce(RULE_39, 7);
    case 114:
      return reduce(RULE_39, 7);
    case 82:
      return reduce(RULE_39, 7);
    case 177:
      return reduce(RULE_39, 7);
    case 90:
      return reduce(RULE_39, 7);
    case 116:
      return reduce(RULE_39, 7);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action529(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_39, 8);
    case 149:
      return reduce(RULE_39, 8);
    case 137:
      return reduce(RULE_39, 8);
    case 110:
      return reduce(RULE_39, 8);
    case 157:
      return reduce(RULE_39, 8);
    case 103:
      return reduce(RULE_39, 8);
    case 147:
      return reduce(RULE_39, 8);
    case 129:
      return reduce(RULE_39, 8);
    case 117:
      return reduce(RULE_39, 8);
    case 167:
      return reduce(RULE_39, 8);
    case 119:
      return reduce(RULE_39, 8);
    case 75:
      return reduce(RULE_39, 8);
    case 100:
      return reduce(RULE_39, 8);
    case 152:
      return reduce(RULE_39, 8);
    case 80:
      return reduce(RULE_39, 8);
    case 94:
      return reduce(RULE_39, 8);
    case 143:
      return reduce(RULE_39, 8);
    case 112:
      return reduce(RULE_39, 8);
    case 86:
      return reduce(RULE_39, 8);
    case 120:
      return reduce(RULE_39, 8);
    case 121:
      return reduce(RULE_39, 8);
    case 124:
      return reduce(RULE_39, 8);
    case 123:
      return reduce(RULE_39, 8);
    case 156:
      return reduce(RULE_39, 8);
    case 83:
      return reduce(RULE_39, 8);
    case 99:
      return reduce(RULE_39, 8);
    case 122:
      return reduce(RULE_39, 8);
    case 125:
      return reduce(RULE_39, 8);
    case 165:
      return reduce(RULE_39, 8);
    case 77:
      return reduce(RULE_39, 8);
    case 92:
      return reduce(RULE_39, 8);
    case 108:
      return reduce(RULE_39, 8);
    case 164:
      return reduce(RULE_39, 8);
    case 84:
      return reduce(RULE_39, 8);
    case 104:
      return reduce(RULE_39, 8);
    case 105:
      return reduce(RULE_39, 8);
    case 114:
      return reduce(RULE_39, 8);
    case 82:
      return reduce(RULE_39, 8);
    case 177:
      return reduce(RULE_39, 8);
    case 90:
      return reduce(RULE_39, 8);
    case 116:
      return reduce(RULE_39, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto529(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action530(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_37, 2);
    case 149:
      return reduce(RULE_37, 2);
    case 137:
      return reduce(RULE_37, 2);
    case 110:
      return reduce(RULE_37, 2);
    case 157:
      return reduce(RULE_37, 2);
    case 103:
      return reduce(RULE_37, 2);
    case 147:
      return reduce(RULE_37, 2);
    case 129:
      return reduce(RULE_37, 2);
    case 117:
      return reduce(RULE_37, 2);
    case 167:
      return reduce(RULE_37, 2);
    case 119:
      return reduce(RULE_37, 2);
    case 75:
      return reduce(RULE_37, 2);
    case 100:
      return reduce(RULE_37, 2);
    case 152:
      return reduce(RULE_37, 2);
    case 80:
      return reduce(RULE_37, 2);
    case 94:
      return reduce(RULE_37, 2);
    case 143:
      return reduce(RULE_37, 2);
    case 98:
      return reduce(RULE_37, 2);
    case 112:
      return reduce(RULE_37, 2);
    case 86:
      return reduce(RULE_37, 2);
    case 120:
      return reduce(RULE_37, 2);
    case 121:
      return reduce(RULE_37, 2);
    case 124:
      return reduce(RULE_37, 2);
    case 156:
      return reduce(RULE_37, 2);
    case 123:
      return reduce(RULE_37, 2);
    case 83:
      return reduce(RULE_37, 2);
    case 99:
      return reduce(RULE_37, 2);
    case 122:
      return reduce(RULE_37, 2);
    case 125:
      return reduce(RULE_37, 2);
    case 165:
      return reduce(RULE_37, 2);
    case 77:
      return reduce(RULE_37, 2);
    case 108:
      return reduce(RULE_37, 2);
    case 92:
      return reduce(RULE_37, 2);
    case 164:
      return reduce(RULE_37, 2);
    case 84:
      return reduce(RULE_37, 2);
    case 104:
      return reduce(RULE_37, 2);
    case 105:
      return reduce(RULE_37, 2);
    case 114:
      return reduce(RULE_37, 2);
    case 82:
      return reduce(RULE_37, 2);
    case 177:
      return reduce(RULE_37, 2);
    case 90:
      return reduce(RULE_37, 2);
    case 116:
      return reduce(RULE_37, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action531(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 8);
    case 137:
      return reduce(RULE_38, 8);
    case 157:
      return reduce(RULE_38, 8);
    case 147:
      return reduce(RULE_38, 8);
    case 129:
      return reduce(RULE_38, 8);
    case 167:
      return reduce(RULE_38, 8);
    case 117:
      return reduce(RULE_38, 8);
    case 75:
      return reduce(RULE_38, 8);
    case 80:
      return reduce(RULE_38, 8);
    case 143:
      return reduce(RULE_38, 8);
    case 112:
      return reduce(RULE_38, 8);
    case 121:
      return reduce(RULE_38, 8);
    case 124:
      return reduce(RULE_38, 8);
    case 123:
      return reduce(RULE_38, 8);
    case 156:
      return reduce(RULE_38, 8);
    case 83:
      return reduce(RULE_38, 8);
    case 122:
      return reduce(RULE_38, 8);
    case 165:
      return reduce(RULE_38, 8);
    case 77:
      return reduce(RULE_38, 8);
    case 92:
      return reduce(RULE_38, 8);
    case 164:
      return reduce(RULE_38, 8);
    case 84:
      return reduce(RULE_38, 8);
    case 105:
      return reduce(RULE_38, 8);
    case 177:
      return reduce(RULE_38, 8);
    case 82:
      return reduce(RULE_38, 8);
    case 116:
      return reduce(RULE_38, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto531(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action532(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 7);
    case 137:
      return reduce(RULE_38, 7);
    case 157:
      return reduce(RULE_38, 7);
    case 147:
      return reduce(RULE_38, 7);
    case 129:
      return reduce(RULE_38, 7);
    case 167:
      return reduce(RULE_38, 7);
    case 117:
      return reduce(RULE_38, 7);
    case 75:
      return reduce(RULE_38, 7);
    case 80:
      return reduce(RULE_38, 7);
    case 143:
      return reduce(RULE_38, 7);
    case 112:
      return reduce(RULE_38, 7);
    case 121:
      return reduce(RULE_38, 7);
    case 124:
      return reduce(RULE_38, 7);
    case 123:
      return reduce(RULE_38, 7);
    case 156:
      return reduce(RULE_38, 7);
    case 83:
      return reduce(RULE_38, 7);
    case 122:
      return reduce(RULE_38, 7);
    case 165:
      return reduce(RULE_38, 7);
    case 77:
      return reduce(RULE_38, 7);
    case 92:
      return reduce(RULE_38, 7);
    case 164:
      return reduce(RULE_38, 7);
    case 84:
      return reduce(RULE_38, 7);
    case 105:
      return reduce(RULE_38, 7);
    case 177:
      return reduce(RULE_38, 7);
    case 82:
      return reduce(RULE_38, 7);
    case 116:
      return reduce(RULE_38, 7);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action533(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 4);
    case 137:
      return reduce(RULE_41, 4);
    case 157:
      return reduce(RULE_41, 4);
    case 147:
      return reduce(RULE_41, 4);
    case 129:
      return reduce(RULE_41, 4);
    case 167:
      return reduce(RULE_41, 4);
    case 117:
      return reduce(RULE_41, 4);
    case 75:
      return reduce(RULE_41, 4);
    case 80:
      return reduce(RULE_41, 4);
    case 143:
      return reduce(RULE_41, 4);
    case 112:
      return reduce(RULE_41, 4);
    case 121:
      return reduce(RULE_41, 4);
    case 124:
      return reduce(RULE_41, 4);
    case 123:
      return reduce(RULE_41, 4);
    case 156:
      return reduce(RULE_41, 4);
    case 83:
      return reduce(RULE_41, 4);
    case 122:
      return reduce(RULE_41, 4);
    case 165:
      return reduce(RULE_41, 4);
    case 77:
      return reduce(RULE_41, 4);
    case 92:
      return reduce(RULE_41, 4);
    case 164:
      return reduce(RULE_41, 4);
    case 84:
      return reduce(RULE_41, 4);
    case 105:
      return reduce(RULE_41, 4);
    case 177:
      return reduce(RULE_41, 4);
    case 82:
      return reduce(RULE_41, 4);
    case 116:
      return reduce(RULE_41, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto533(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action534(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 3);
    case 137:
      return reduce(RULE_41, 3);
    case 157:
      return reduce(RULE_41, 3);
    case 147:
      return reduce(RULE_41, 3);
    case 129:
      return reduce(RULE_41, 3);
    case 167:
      return reduce(RULE_41, 3);
    case 117:
      return reduce(RULE_41, 3);
    case 75:
      return reduce(RULE_41, 3);
    case 80:
      return reduce(RULE_41, 3);
    case 143:
      return reduce(RULE_41, 3);
    case 112:
      return reduce(RULE_41, 3);
    case 121:
      return reduce(RULE_41, 3);
    case 124:
      return reduce(RULE_41, 3);
    case 123:
      return reduce(RULE_41, 3);
    case 156:
      return reduce(RULE_41, 3);
    case 83:
      return reduce(RULE_41, 3);
    case 122:
      return reduce(RULE_41, 3);
    case 165:
      return reduce(RULE_41, 3);
    case 77:
      return reduce(RULE_41, 3);
    case 92:
      return reduce(RULE_41, 3);
    case 164:
      return reduce(RULE_41, 3);
    case 84:
      return reduce(RULE_41, 3);
    case 105:
      return reduce(RULE_41, 3);
    case 177:
      return reduce(RULE_41, 3);
    case 82:
      return reduce(RULE_41, 3);
    case 116:
      return reduce(RULE_41, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action535(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 24);
    case 137:
      return reduce(RULE_41, 24);
    case 157:
      return reduce(RULE_41, 24);
    case 147:
      return reduce(RULE_41, 24);
    case 129:
      return reduce(RULE_41, 24);
    case 167:
      return reduce(RULE_41, 24);
    case 117:
      return reduce(RULE_41, 24);
    case 75:
      return reduce(RULE_41, 24);
    case 80:
      return reduce(RULE_41, 24);
    case 143:
      return reduce(RULE_41, 24);
    case 112:
      return reduce(RULE_41, 24);
    case 121:
      return reduce(RULE_41, 24);
    case 124:
      return reduce(RULE_41, 24);
    case 123:
      return reduce(RULE_41, 24);
    case 156:
      return reduce(RULE_41, 24);
    case 83:
      return reduce(RULE_41, 24);
    case 122:
      return reduce(RULE_41, 24);
    case 165:
      return reduce(RULE_41, 24);
    case 77:
      return reduce(RULE_41, 24);
    case 92:
      return reduce(RULE_41, 24);
    case 164:
      return reduce(RULE_41, 24);
    case 84:
      return reduce(RULE_41, 24);
    case 105:
      return reduce(RULE_41, 24);
    case 177:
      return reduce(RULE_41, 24);
    case 82:
      return reduce(RULE_41, 24);
    case 116:
      return reduce(RULE_41, 24);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto535(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action536(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 23);
    case 137:
      return reduce(RULE_41, 23);
    case 157:
      return reduce(RULE_41, 23);
    case 147:
      return reduce(RULE_41, 23);
    case 129:
      return reduce(RULE_41, 23);
    case 167:
      return reduce(RULE_41, 23);
    case 117:
      return reduce(RULE_41, 23);
    case 75:
      return reduce(RULE_41, 23);
    case 80:
      return reduce(RULE_41, 23);
    case 143:
      return reduce(RULE_41, 23);
    case 112:
      return reduce(RULE_41, 23);
    case 121:
      return reduce(RULE_41, 23);
    case 124:
      return reduce(RULE_41, 23);
    case 123:
      return reduce(RULE_41, 23);
    case 156:
      return reduce(RULE_41, 23);
    case 83:
      return reduce(RULE_41, 23);
    case 122:
      return reduce(RULE_41, 23);
    case 165:
      return reduce(RULE_41, 23);
    case 77:
      return reduce(RULE_41, 23);
    case 92:
      return reduce(RULE_41, 23);
    case 164:
      return reduce(RULE_41, 23);
    case 84:
      return reduce(RULE_41, 23);
    case 105:
      return reduce(RULE_41, 23);
    case 177:
      return reduce(RULE_41, 23);
    case 82:
      return reduce(RULE_41, 23);
    case 116:
      return reduce(RULE_41, 23);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action537(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 8);
    case 137:
      return reduce(RULE_41, 8);
    case 157:
      return reduce(RULE_41, 8);
    case 147:
      return reduce(RULE_41, 8);
    case 129:
      return reduce(RULE_41, 8);
    case 167:
      return reduce(RULE_41, 8);
    case 117:
      return reduce(RULE_41, 8);
    case 75:
      return reduce(RULE_41, 8);
    case 80:
      return reduce(RULE_41, 8);
    case 143:
      return reduce(RULE_41, 8);
    case 112:
      return reduce(RULE_41, 8);
    case 121:
      return reduce(RULE_41, 8);
    case 124:
      return reduce(RULE_41, 8);
    case 123:
      return reduce(RULE_41, 8);
    case 156:
      return reduce(RULE_41, 8);
    case 83:
      return reduce(RULE_41, 8);
    case 122:
      return reduce(RULE_41, 8);
    case 165:
      return reduce(RULE_41, 8);
    case 77:
      return reduce(RULE_41, 8);
    case 92:
      return reduce(RULE_41, 8);
    case 164:
      return reduce(RULE_41, 8);
    case 84:
      return reduce(RULE_41, 8);
    case 105:
      return reduce(RULE_41, 8);
    case 177:
      return reduce(RULE_41, 8);
    case 82:
      return reduce(RULE_41, 8);
    case 116:
      return reduce(RULE_41, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto537(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action538(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 7);
    case 137:
      return reduce(RULE_41, 7);
    case 157:
      return reduce(RULE_41, 7);
    case 147:
      return reduce(RULE_41, 7);
    case 129:
      return reduce(RULE_41, 7);
    case 167:
      return reduce(RULE_41, 7);
    case 117:
      return reduce(RULE_41, 7);
    case 75:
      return reduce(RULE_41, 7);
    case 80:
      return reduce(RULE_41, 7);
    case 143:
      return reduce(RULE_41, 7);
    case 112:
      return reduce(RULE_41, 7);
    case 121:
      return reduce(RULE_41, 7);
    case 124:
      return reduce(RULE_41, 7);
    case 123:
      return reduce(RULE_41, 7);
    case 156:
      return reduce(RULE_41, 7);
    case 83:
      return reduce(RULE_41, 7);
    case 122:
      return reduce(RULE_41, 7);
    case 165:
      return reduce(RULE_41, 7);
    case 77:
      return reduce(RULE_41, 7);
    case 92:
      return reduce(RULE_41, 7);
    case 164:
      return reduce(RULE_41, 7);
    case 84:
      return reduce(RULE_41, 7);
    case 105:
      return reduce(RULE_41, 7);
    case 177:
      return reduce(RULE_41, 7);
    case 82:
      return reduce(RULE_41, 7);
    case 116:
      return reduce(RULE_41, 7);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action539(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(355);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 3);
    case 137:
      return reduce(RULE_34, 3);
    case 110:
      return reduce(RULE_34, 3);
    case 157:
      return reduce(RULE_34, 3);
    case 103:
      return reduce(RULE_34, 3);
    case 147:
      return reduce(RULE_34, 3);
    case 129:
      return reduce(RULE_34, 3);
    case 117:
      return reduce(RULE_34, 3);
    case 167:
      return reduce(RULE_34, 3);
    case 119:
      return reduce(RULE_34, 3);
    case 75:
      return reduce(RULE_34, 3);
    case 100:
      return reduce(RULE_34, 3);
    case 152:
      return reduce(RULE_34, 3);
    case 80:
      return reduce(RULE_34, 3);
    case 143:
      return reduce(RULE_34, 3);
    case 112:
      return reduce(RULE_34, 3);
    case 86:
      return reduce(RULE_34, 3);
    case 120:
      return reduce(RULE_34, 3);
    case 121:
      return reduce(RULE_34, 3);
    case 124:
      return reduce(RULE_34, 3);
    case 123:
      return reduce(RULE_34, 3);
    case 156:
      return reduce(RULE_34, 3);
    case 83:
      return reduce(RULE_34, 3);
    case 99:
      return reduce(RULE_34, 3);
    case 122:
      return reduce(RULE_34, 3);
    case 125:
      return reduce(RULE_34, 3);
    case 165:
      return reduce(RULE_34, 3);
    case 77:
      return reduce(RULE_34, 3);
    case 92:
      return reduce(RULE_34, 3);
    case 108:
      return reduce(RULE_34, 3);
    case 164:
      return reduce(RULE_34, 3);
    case 84:
      return reduce(RULE_34, 3);
    case 105:
      return reduce(RULE_34, 3);
    case 104:
      return reduce(RULE_34, 3);
    case 114:
      return reduce(RULE_34, 3);
    case 82:
      return reduce(RULE_34, 3);
    case 177:
      return reduce(RULE_34, 3);
    case 90:
      return reduce(RULE_34, 3);
    case 116:
      return reduce(RULE_34, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action540(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 4);
    case 137:
      return reduce(RULE_34, 4);
    case 110:
      return reduce(RULE_34, 4);
    case 157:
      return reduce(RULE_34, 4);
    case 103:
      return reduce(RULE_34, 4);
    case 147:
      return reduce(RULE_34, 4);
    case 129:
      return reduce(RULE_34, 4);
    case 117:
      return reduce(RULE_34, 4);
    case 167:
      return reduce(RULE_34, 4);
    case 119:
      return reduce(RULE_34, 4);
    case 75:
      return reduce(RULE_34, 4);
    case 100:
      return reduce(RULE_34, 4);
    case 152:
      return reduce(RULE_34, 4);
    case 80:
      return reduce(RULE_34, 4);
    case 143:
      return reduce(RULE_34, 4);
    case 112:
      return reduce(RULE_34, 4);
    case 86:
      return reduce(RULE_34, 4);
    case 120:
      return reduce(RULE_34, 4);
    case 121:
      return reduce(RULE_34, 4);
    case 124:
      return reduce(RULE_34, 4);
    case 123:
      return reduce(RULE_34, 4);
    case 156:
      return reduce(RULE_34, 4);
    case 83:
      return reduce(RULE_34, 4);
    case 99:
      return reduce(RULE_34, 4);
    case 122:
      return reduce(RULE_34, 4);
    case 125:
      return reduce(RULE_34, 4);
    case 165:
      return reduce(RULE_34, 4);
    case 77:
      return reduce(RULE_34, 4);
    case 92:
      return reduce(RULE_34, 4);
    case 108:
      return reduce(RULE_34, 4);
    case 164:
      return reduce(RULE_34, 4);
    case 84:
      return reduce(RULE_34, 4);
    case 105:
      return reduce(RULE_34, 4);
    case 104:
      return reduce(RULE_34, 4);
    case 114:
      return reduce(RULE_34, 4);
    case 82:
      return reduce(RULE_34, 4);
    case 177:
      return reduce(RULE_34, 4);
    case 90:
      return reduce(RULE_34, 4);
    case 116:
      return reduce(RULE_34, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto540(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action541(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 4);
    case 137:
      return reduce(RULE_38, 4);
    case 157:
      return reduce(RULE_38, 4);
    case 147:
      return reduce(RULE_38, 4);
    case 129:
      return reduce(RULE_38, 4);
    case 167:
      return reduce(RULE_38, 4);
    case 117:
      return reduce(RULE_38, 4);
    case 75:
      return reduce(RULE_38, 4);
    case 80:
      return reduce(RULE_38, 4);
    case 143:
      return reduce(RULE_38, 4);
    case 112:
      return reduce(RULE_38, 4);
    case 121:
      return reduce(RULE_38, 4);
    case 124:
      return reduce(RULE_38, 4);
    case 123:
      return reduce(RULE_38, 4);
    case 156:
      return reduce(RULE_38, 4);
    case 83:
      return reduce(RULE_38, 4);
    case 122:
      return reduce(RULE_38, 4);
    case 165:
      return reduce(RULE_38, 4);
    case 77:
      return reduce(RULE_38, 4);
    case 92:
      return reduce(RULE_38, 4);
    case 164:
      return reduce(RULE_38, 4);
    case 84:
      return reduce(RULE_38, 4);
    case 105:
      return reduce(RULE_38, 4);
    case 177:
      return reduce(RULE_38, 4);
    case 82:
      return reduce(RULE_38, 4);
    case 116:
      return reduce(RULE_38, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto541(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action542(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 3);
    case 137:
      return reduce(RULE_38, 3);
    case 157:
      return reduce(RULE_38, 3);
    case 147:
      return reduce(RULE_38, 3);
    case 129:
      return reduce(RULE_38, 3);
    case 167:
      return reduce(RULE_38, 3);
    case 117:
      return reduce(RULE_38, 3);
    case 75:
      return reduce(RULE_38, 3);
    case 80:
      return reduce(RULE_38, 3);
    case 143:
      return reduce(RULE_38, 3);
    case 112:
      return reduce(RULE_38, 3);
    case 121:
      return reduce(RULE_38, 3);
    case 124:
      return reduce(RULE_38, 3);
    case 123:
      return reduce(RULE_38, 3);
    case 156:
      return reduce(RULE_38, 3);
    case 83:
      return reduce(RULE_38, 3);
    case 122:
      return reduce(RULE_38, 3);
    case 165:
      return reduce(RULE_38, 3);
    case 77:
      return reduce(RULE_38, 3);
    case 92:
      return reduce(RULE_38, 3);
    case 164:
      return reduce(RULE_38, 3);
    case 84:
      return reduce(RULE_38, 3);
    case 105:
      return reduce(RULE_38, 3);
    case 177:
      return reduce(RULE_38, 3);
    case 82:
      return reduce(RULE_38, 3);
    case 116:
      return reduce(RULE_38, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action543(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 20);
    case 137:
      return reduce(RULE_38, 20);
    case 157:
      return reduce(RULE_38, 20);
    case 147:
      return reduce(RULE_38, 20);
    case 129:
      return reduce(RULE_38, 20);
    case 167:
      return reduce(RULE_38, 20);
    case 117:
      return reduce(RULE_38, 20);
    case 75:
      return reduce(RULE_38, 20);
    case 80:
      return reduce(RULE_38, 20);
    case 143:
      return reduce(RULE_38, 20);
    case 112:
      return reduce(RULE_38, 20);
    case 121:
      return reduce(RULE_38, 20);
    case 124:
      return reduce(RULE_38, 20);
    case 123:
      return reduce(RULE_38, 20);
    case 156:
      return reduce(RULE_38, 20);
    case 83:
      return reduce(RULE_38, 20);
    case 122:
      return reduce(RULE_38, 20);
    case 165:
      return reduce(RULE_38, 20);
    case 77:
      return reduce(RULE_38, 20);
    case 92:
      return reduce(RULE_38, 20);
    case 164:
      return reduce(RULE_38, 20);
    case 84:
      return reduce(RULE_38, 20);
    case 105:
      return reduce(RULE_38, 20);
    case 177:
      return reduce(RULE_38, 20);
    case 82:
      return reduce(RULE_38, 20);
    case 116:
      return reduce(RULE_38, 20);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto543(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action544(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 19);
    case 137:
      return reduce(RULE_38, 19);
    case 157:
      return reduce(RULE_38, 19);
    case 147:
      return reduce(RULE_38, 19);
    case 129:
      return reduce(RULE_38, 19);
    case 167:
      return reduce(RULE_38, 19);
    case 117:
      return reduce(RULE_38, 19);
    case 75:
      return reduce(RULE_38, 19);
    case 80:
      return reduce(RULE_38, 19);
    case 143:
      return reduce(RULE_38, 19);
    case 112:
      return reduce(RULE_38, 19);
    case 121:
      return reduce(RULE_38, 19);
    case 124:
      return reduce(RULE_38, 19);
    case 123:
      return reduce(RULE_38, 19);
    case 156:
      return reduce(RULE_38, 19);
    case 83:
      return reduce(RULE_38, 19);
    case 122:
      return reduce(RULE_38, 19);
    case 165:
      return reduce(RULE_38, 19);
    case 77:
      return reduce(RULE_38, 19);
    case 92:
      return reduce(RULE_38, 19);
    case 164:
      return reduce(RULE_38, 19);
    case 84:
      return reduce(RULE_38, 19);
    case 105:
      return reduce(RULE_38, 19);
    case 177:
      return reduce(RULE_38, 19);
    case 82:
      return reduce(RULE_38, 19);
    case 116:
      return reduce(RULE_38, 19);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action545(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_36, 8);
    case 137:
      return reduce(RULE_36, 8);
    case 157:
      return reduce(RULE_36, 8);
    case 103:
      return reduce(RULE_36, 8);
    case 147:
      return reduce(RULE_36, 8);
    case 129:
      return reduce(RULE_36, 8);
    case 117:
      return reduce(RULE_36, 8);
    case 167:
      return reduce(RULE_36, 8);
    case 119:
      return reduce(RULE_36, 8);
    case 75:
      return reduce(RULE_36, 8);
    case 152:
      return reduce(RULE_36, 8);
    case 80:
      return reduce(RULE_36, 8);
    case 143:
      return reduce(RULE_36, 8);
    case 112:
      return reduce(RULE_36, 8);
    case 86:
      return reduce(RULE_36, 8);
    case 120:
      return reduce(RULE_36, 8);
    case 121:
      return reduce(RULE_36, 8);
    case 124:
      return reduce(RULE_36, 8);
    case 123:
      return reduce(RULE_36, 8);
    case 156:
      return reduce(RULE_36, 8);
    case 83:
      return reduce(RULE_36, 8);
    case 122:
      return reduce(RULE_36, 8);
    case 99:
      return reduce(RULE_36, 8);
    case 165:
      return reduce(RULE_36, 8);
    case 77:
      return reduce(RULE_36, 8);
    case 92:
      return reduce(RULE_36, 8);
    case 108:
      return reduce(RULE_36, 8);
    case 164:
      return reduce(RULE_36, 8);
    case 84:
      return reduce(RULE_36, 8);
    case 105:
      return reduce(RULE_36, 8);
    case 104:
      return reduce(RULE_36, 8);
    case 114:
      return reduce(RULE_36, 8);
    case 82:
      return reduce(RULE_36, 8);
    case 177:
      return reduce(RULE_36, 8);
    case 116:
      return reduce(RULE_36, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto545(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action546(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(389);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(390);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_36, 7);
    case 137:
      return reduce(RULE_36, 7);
    case 157:
      return reduce(RULE_36, 7);
    case 103:
      return reduce(RULE_36, 7);
    case 147:
      return reduce(RULE_36, 7);
    case 129:
      return reduce(RULE_36, 7);
    case 117:
      return reduce(RULE_36, 7);
    case 167:
      return reduce(RULE_36, 7);
    case 119:
      return reduce(RULE_36, 7);
    case 75:
      return reduce(RULE_36, 7);
    case 152:
      return reduce(RULE_36, 7);
    case 80:
      return reduce(RULE_36, 7);
    case 143:
      return reduce(RULE_36, 7);
    case 112:
      return reduce(RULE_36, 7);
    case 86:
      return reduce(RULE_36, 7);
    case 120:
      return reduce(RULE_36, 7);
    case 121:
      return reduce(RULE_36, 7);
    case 124:
      return reduce(RULE_36, 7);
    case 123:
      return reduce(RULE_36, 7);
    case 156:
      return reduce(RULE_36, 7);
    case 83:
      return reduce(RULE_36, 7);
    case 122:
      return reduce(RULE_36, 7);
    case 99:
      return reduce(RULE_36, 7);
    case 165:
      return reduce(RULE_36, 7);
    case 77:
      return reduce(RULE_36, 7);
    case 92:
      return reduce(RULE_36, 7);
    case 108:
      return reduce(RULE_36, 7);
    case 164:
      return reduce(RULE_36, 7);
    case 84:
      return reduce(RULE_36, 7);
    case 105:
      return reduce(RULE_36, 7);
    case 104:
      return reduce(RULE_36, 7);
    case 114:
      return reduce(RULE_36, 7);
    case 82:
      return reduce(RULE_36, 7);
    case 177:
      return reduce(RULE_36, 7);
    case 116:
      return reduce(RULE_36, 7);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action547(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 16);
    case 137:
      return reduce(RULE_38, 16);
    case 157:
      return reduce(RULE_38, 16);
    case 147:
      return reduce(RULE_38, 16);
    case 129:
      return reduce(RULE_38, 16);
    case 167:
      return reduce(RULE_38, 16);
    case 117:
      return reduce(RULE_38, 16);
    case 75:
      return reduce(RULE_38, 16);
    case 80:
      return reduce(RULE_38, 16);
    case 143:
      return reduce(RULE_38, 16);
    case 112:
      return reduce(RULE_38, 16);
    case 121:
      return reduce(RULE_38, 16);
    case 124:
      return reduce(RULE_38, 16);
    case 123:
      return reduce(RULE_38, 16);
    case 156:
      return reduce(RULE_38, 16);
    case 83:
      return reduce(RULE_38, 16);
    case 122:
      return reduce(RULE_38, 16);
    case 165:
      return reduce(RULE_38, 16);
    case 77:
      return reduce(RULE_38, 16);
    case 92:
      return reduce(RULE_38, 16);
    case 164:
      return reduce(RULE_38, 16);
    case 84:
      return reduce(RULE_38, 16);
    case 105:
      return reduce(RULE_38, 16);
    case 177:
      return reduce(RULE_38, 16);
    case 82:
      return reduce(RULE_38, 16);
    case 116:
      return reduce(RULE_38, 16);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto547(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action548(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 15);
    case 137:
      return reduce(RULE_38, 15);
    case 157:
      return reduce(RULE_38, 15);
    case 147:
      return reduce(RULE_38, 15);
    case 129:
      return reduce(RULE_38, 15);
    case 167:
      return reduce(RULE_38, 15);
    case 117:
      return reduce(RULE_38, 15);
    case 75:
      return reduce(RULE_38, 15);
    case 80:
      return reduce(RULE_38, 15);
    case 143:
      return reduce(RULE_38, 15);
    case 112:
      return reduce(RULE_38, 15);
    case 121:
      return reduce(RULE_38, 15);
    case 124:
      return reduce(RULE_38, 15);
    case 123:
      return reduce(RULE_38, 15);
    case 156:
      return reduce(RULE_38, 15);
    case 83:
      return reduce(RULE_38, 15);
    case 122:
      return reduce(RULE_38, 15);
    case 165:
      return reduce(RULE_38, 15);
    case 77:
      return reduce(RULE_38, 15);
    case 92:
      return reduce(RULE_38, 15);
    case 164:
      return reduce(RULE_38, 15);
    case 84:
      return reduce(RULE_38, 15);
    case 105:
      return reduce(RULE_38, 15);
    case 177:
      return reduce(RULE_38, 15);
    case 82:
      return reduce(RULE_38, 15);
    case 116:
      return reduce(RULE_38, 15);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action549(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 16);
    case 137:
      return reduce(RULE_41, 16);
    case 157:
      return reduce(RULE_41, 16);
    case 147:
      return reduce(RULE_41, 16);
    case 129:
      return reduce(RULE_41, 16);
    case 167:
      return reduce(RULE_41, 16);
    case 117:
      return reduce(RULE_41, 16);
    case 75:
      return reduce(RULE_41, 16);
    case 80:
      return reduce(RULE_41, 16);
    case 143:
      return reduce(RULE_41, 16);
    case 112:
      return reduce(RULE_41, 16);
    case 121:
      return reduce(RULE_41, 16);
    case 124:
      return reduce(RULE_41, 16);
    case 123:
      return reduce(RULE_41, 16);
    case 156:
      return reduce(RULE_41, 16);
    case 83:
      return reduce(RULE_41, 16);
    case 122:
      return reduce(RULE_41, 16);
    case 165:
      return reduce(RULE_41, 16);
    case 77:
      return reduce(RULE_41, 16);
    case 92:
      return reduce(RULE_41, 16);
    case 164:
      return reduce(RULE_41, 16);
    case 84:
      return reduce(RULE_41, 16);
    case 105:
      return reduce(RULE_41, 16);
    case 177:
      return reduce(RULE_41, 16);
    case 82:
      return reduce(RULE_41, 16);
    case 116:
      return reduce(RULE_41, 16);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto549(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action550(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 15);
    case 137:
      return reduce(RULE_41, 15);
    case 157:
      return reduce(RULE_41, 15);
    case 147:
      return reduce(RULE_41, 15);
    case 129:
      return reduce(RULE_41, 15);
    case 167:
      return reduce(RULE_41, 15);
    case 117:
      return reduce(RULE_41, 15);
    case 75:
      return reduce(RULE_41, 15);
    case 80:
      return reduce(RULE_41, 15);
    case 143:
      return reduce(RULE_41, 15);
    case 112:
      return reduce(RULE_41, 15);
    case 121:
      return reduce(RULE_41, 15);
    case 124:
      return reduce(RULE_41, 15);
    case 123:
      return reduce(RULE_41, 15);
    case 156:
      return reduce(RULE_41, 15);
    case 83:
      return reduce(RULE_41, 15);
    case 122:
      return reduce(RULE_41, 15);
    case 165:
      return reduce(RULE_41, 15);
    case 77:
      return reduce(RULE_41, 15);
    case 92:
      return reduce(RULE_41, 15);
    case 164:
      return reduce(RULE_41, 15);
    case 84:
      return reduce(RULE_41, 15);
    case 105:
      return reduce(RULE_41, 15);
    case 177:
      return reduce(RULE_41, 15);
    case 82:
      return reduce(RULE_41, 15);
    case 116:
      return reduce(RULE_41, 15);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action551(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_36, 4);
    case 137:
      return reduce(RULE_36, 4);
    case 157:
      return reduce(RULE_36, 4);
    case 103:
      return reduce(RULE_36, 4);
    case 147:
      return reduce(RULE_36, 4);
    case 129:
      return reduce(RULE_36, 4);
    case 117:
      return reduce(RULE_36, 4);
    case 167:
      return reduce(RULE_36, 4);
    case 119:
      return reduce(RULE_36, 4);
    case 75:
      return reduce(RULE_36, 4);
    case 152:
      return reduce(RULE_36, 4);
    case 80:
      return reduce(RULE_36, 4);
    case 143:
      return reduce(RULE_36, 4);
    case 112:
      return reduce(RULE_36, 4);
    case 86:
      return reduce(RULE_36, 4);
    case 120:
      return reduce(RULE_36, 4);
    case 121:
      return reduce(RULE_36, 4);
    case 124:
      return reduce(RULE_36, 4);
    case 123:
      return reduce(RULE_36, 4);
    case 156:
      return reduce(RULE_36, 4);
    case 83:
      return reduce(RULE_36, 4);
    case 122:
      return reduce(RULE_36, 4);
    case 99:
      return reduce(RULE_36, 4);
    case 165:
      return reduce(RULE_36, 4);
    case 77:
      return reduce(RULE_36, 4);
    case 92:
      return reduce(RULE_36, 4);
    case 108:
      return reduce(RULE_36, 4);
    case 164:
      return reduce(RULE_36, 4);
    case 84:
      return reduce(RULE_36, 4);
    case 105:
      return reduce(RULE_36, 4);
    case 104:
      return reduce(RULE_36, 4);
    case 114:
      return reduce(RULE_36, 4);
    case 82:
      return reduce(RULE_36, 4);
    case 177:
      return reduce(RULE_36, 4);
    case 116:
      return reduce(RULE_36, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto551(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action552(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 110:
      stateStack.addFirst(388);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(389);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(390);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(391);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_36, 3);
    case 137:
      return reduce(RULE_36, 3);
    case 157:
      return reduce(RULE_36, 3);
    case 103:
      return reduce(RULE_36, 3);
    case 147:
      return reduce(RULE_36, 3);
    case 129:
      return reduce(RULE_36, 3);
    case 117:
      return reduce(RULE_36, 3);
    case 167:
      return reduce(RULE_36, 3);
    case 119:
      return reduce(RULE_36, 3);
    case 75:
      return reduce(RULE_36, 3);
    case 152:
      return reduce(RULE_36, 3);
    case 80:
      return reduce(RULE_36, 3);
    case 143:
      return reduce(RULE_36, 3);
    case 112:
      return reduce(RULE_36, 3);
    case 86:
      return reduce(RULE_36, 3);
    case 120:
      return reduce(RULE_36, 3);
    case 121:
      return reduce(RULE_36, 3);
    case 124:
      return reduce(RULE_36, 3);
    case 123:
      return reduce(RULE_36, 3);
    case 156:
      return reduce(RULE_36, 3);
    case 83:
      return reduce(RULE_36, 3);
    case 122:
      return reduce(RULE_36, 3);
    case 99:
      return reduce(RULE_36, 3);
    case 165:
      return reduce(RULE_36, 3);
    case 77:
      return reduce(RULE_36, 3);
    case 92:
      return reduce(RULE_36, 3);
    case 108:
      return reduce(RULE_36, 3);
    case 164:
      return reduce(RULE_36, 3);
    case 84:
      return reduce(RULE_36, 3);
    case 105:
      return reduce(RULE_36, 3);
    case 104:
      return reduce(RULE_36, 3);
    case 114:
      return reduce(RULE_36, 3);
    case 82:
      return reduce(RULE_36, 3);
    case 177:
      return reduce(RULE_36, 3);
    case 116:
      return reduce(RULE_36, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, EXCLAIMATION_MARK_EQUALS, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action553(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(355);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 15);
    case 137:
      return reduce(RULE_34, 15);
    case 110:
      return reduce(RULE_34, 15);
    case 157:
      return reduce(RULE_34, 15);
    case 103:
      return reduce(RULE_34, 15);
    case 147:
      return reduce(RULE_34, 15);
    case 129:
      return reduce(RULE_34, 15);
    case 117:
      return reduce(RULE_34, 15);
    case 167:
      return reduce(RULE_34, 15);
    case 119:
      return reduce(RULE_34, 15);
    case 75:
      return reduce(RULE_34, 15);
    case 100:
      return reduce(RULE_34, 15);
    case 152:
      return reduce(RULE_34, 15);
    case 80:
      return reduce(RULE_34, 15);
    case 143:
      return reduce(RULE_34, 15);
    case 112:
      return reduce(RULE_34, 15);
    case 86:
      return reduce(RULE_34, 15);
    case 120:
      return reduce(RULE_34, 15);
    case 121:
      return reduce(RULE_34, 15);
    case 124:
      return reduce(RULE_34, 15);
    case 123:
      return reduce(RULE_34, 15);
    case 156:
      return reduce(RULE_34, 15);
    case 83:
      return reduce(RULE_34, 15);
    case 99:
      return reduce(RULE_34, 15);
    case 122:
      return reduce(RULE_34, 15);
    case 125:
      return reduce(RULE_34, 15);
    case 165:
      return reduce(RULE_34, 15);
    case 77:
      return reduce(RULE_34, 15);
    case 92:
      return reduce(RULE_34, 15);
    case 108:
      return reduce(RULE_34, 15);
    case 164:
      return reduce(RULE_34, 15);
    case 84:
      return reduce(RULE_34, 15);
    case 105:
      return reduce(RULE_34, 15);
    case 104:
      return reduce(RULE_34, 15);
    case 114:
      return reduce(RULE_34, 15);
    case 82:
      return reduce(RULE_34, 15);
    case 177:
      return reduce(RULE_34, 15);
    case 90:
      return reduce(RULE_34, 15);
    case 116:
      return reduce(RULE_34, 15);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action554(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 16);
    case 137:
      return reduce(RULE_34, 16);
    case 110:
      return reduce(RULE_34, 16);
    case 157:
      return reduce(RULE_34, 16);
    case 103:
      return reduce(RULE_34, 16);
    case 147:
      return reduce(RULE_34, 16);
    case 129:
      return reduce(RULE_34, 16);
    case 117:
      return reduce(RULE_34, 16);
    case 167:
      return reduce(RULE_34, 16);
    case 119:
      return reduce(RULE_34, 16);
    case 75:
      return reduce(RULE_34, 16);
    case 100:
      return reduce(RULE_34, 16);
    case 152:
      return reduce(RULE_34, 16);
    case 80:
      return reduce(RULE_34, 16);
    case 143:
      return reduce(RULE_34, 16);
    case 112:
      return reduce(RULE_34, 16);
    case 86:
      return reduce(RULE_34, 16);
    case 120:
      return reduce(RULE_34, 16);
    case 121:
      return reduce(RULE_34, 16);
    case 124:
      return reduce(RULE_34, 16);
    case 123:
      return reduce(RULE_34, 16);
    case 156:
      return reduce(RULE_34, 16);
    case 83:
      return reduce(RULE_34, 16);
    case 99:
      return reduce(RULE_34, 16);
    case 122:
      return reduce(RULE_34, 16);
    case 125:
      return reduce(RULE_34, 16);
    case 165:
      return reduce(RULE_34, 16);
    case 77:
      return reduce(RULE_34, 16);
    case 92:
      return reduce(RULE_34, 16);
    case 108:
      return reduce(RULE_34, 16);
    case 164:
      return reduce(RULE_34, 16);
    case 84:
      return reduce(RULE_34, 16);
    case 105:
      return reduce(RULE_34, 16);
    case 104:
      return reduce(RULE_34, 16);
    case 114:
      return reduce(RULE_34, 16);
    case 82:
      return reduce(RULE_34, 16);
    case 177:
      return reduce(RULE_34, 16);
    case 90:
      return reduce(RULE_34, 16);
    case 116:
      return reduce(RULE_34, 16);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto554(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action555(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 82:
      stateStack.addFirst(651);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COLON});
    }
  }

  private final boolean action556(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 14);
    case 149:
      return reduce(RULE_17, 14);
    case 137:
      return reduce(RULE_17, 14);
    case 110:
      return reduce(RULE_17, 14);
    case 157:
      return reduce(RULE_17, 14);
    case 96:
      return reduce(RULE_17, 14);
    case 103:
      return reduce(RULE_17, 14);
    case 106:
      return reduce(RULE_17, 14);
    case 147:
      return reduce(RULE_17, 14);
    case 129:
      return reduce(RULE_17, 14);
    case 117:
      return reduce(RULE_17, 14);
    case 167:
      return reduce(RULE_17, 14);
    case 119:
      return reduce(RULE_17, 14);
    case 75:
      return reduce(RULE_17, 14);
    case 100:
      return reduce(RULE_17, 14);
    case 152:
      return reduce(RULE_17, 14);
    case 80:
      return reduce(RULE_17, 14);
    case 94:
      return reduce(RULE_17, 14);
    case 107:
      return reduce(RULE_17, 14);
    case 143:
      return reduce(RULE_17, 14);
    case 98:
      return reduce(RULE_17, 14);
    case 112:
      return reduce(RULE_17, 14);
    case 86:
      return reduce(RULE_17, 14);
    case 120:
      return reduce(RULE_17, 14);
    case 121:
      return reduce(RULE_17, 14);
    case 124:
      return reduce(RULE_17, 14);
    case 123:
      return reduce(RULE_17, 14);
    case 156:
      return reduce(RULE_17, 14);
    case 83:
      return reduce(RULE_17, 14);
    case 99:
      return reduce(RULE_17, 14);
    case 122:
      return reduce(RULE_17, 14);
    case 125:
      return reduce(RULE_17, 14);
    case 165:
      return reduce(RULE_17, 14);
    case 77:
      return reduce(RULE_17, 14);
    case 108:
      return reduce(RULE_17, 14);
    case 92:
      return reduce(RULE_17, 14);
    case 164:
      return reduce(RULE_17, 14);
    case 84:
      return reduce(RULE_17, 14);
    case 104:
      return reduce(RULE_17, 14);
    case 105:
      return reduce(RULE_17, 14);
    case 114:
      return reduce(RULE_17, 14);
    case 82:
      return reduce(RULE_17, 14);
    case 177:
      return reduce(RULE_17, 14);
    case 90:
      return reduce(RULE_17, 14);
    case 116:
      return reduce(RULE_17, 14);
    case 118:
      return reduce(RULE_17, 14);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action557(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(360);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(364);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(367);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(372);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(373);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(375);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(379);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_35, 6);
    case 137:
      return reduce(RULE_35, 6);
    case 121:
      return reduce(RULE_35, 6);
    case 124:
      return reduce(RULE_35, 6);
    case 157:
      return reduce(RULE_35, 6);
    case 123:
      return reduce(RULE_35, 6);
    case 156:
      return reduce(RULE_35, 6);
    case 83:
      return reduce(RULE_35, 6);
    case 122:
      return reduce(RULE_35, 6);
    case 165:
      return reduce(RULE_35, 6);
    case 147:
      return reduce(RULE_35, 6);
    case 129:
      return reduce(RULE_35, 6);
    case 167:
      return reduce(RULE_35, 6);
    case 164:
      return reduce(RULE_35, 6);
    case 75:
      return reduce(RULE_35, 6);
    case 105:
      return reduce(RULE_35, 6);
    case 82:
      return reduce(RULE_35, 6);
    case 177:
      return reduce(RULE_35, 6);
    case 143:
      return reduce(RULE_35, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto557(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action558(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_35, 5);
    case 137:
      return reduce(RULE_35, 5);
    case 121:
      return reduce(RULE_35, 5);
    case 124:
      return reduce(RULE_35, 5);
    case 157:
      return reduce(RULE_35, 5);
    case 123:
      return reduce(RULE_35, 5);
    case 156:
      return reduce(RULE_35, 5);
    case 83:
      return reduce(RULE_35, 5);
    case 122:
      return reduce(RULE_35, 5);
    case 165:
      return reduce(RULE_35, 5);
    case 147:
      return reduce(RULE_35, 5);
    case 129:
      return reduce(RULE_35, 5);
    case 167:
      return reduce(RULE_35, 5);
    case 164:
      return reduce(RULE_35, 5);
    case 75:
      return reduce(RULE_35, 5);
    case 105:
      return reduce(RULE_35, 5);
    case 82:
      return reduce(RULE_35, 5);
    case 177:
      return reduce(RULE_35, 5);
    case 143:
      return reduce(RULE_35, 5);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, RBRACE, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action559(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 14);
    case 137:
      return reduce(RULE_38, 14);
    case 157:
      return reduce(RULE_38, 14);
    case 147:
      return reduce(RULE_38, 14);
    case 129:
      return reduce(RULE_38, 14);
    case 167:
      return reduce(RULE_38, 14);
    case 117:
      return reduce(RULE_38, 14);
    case 75:
      return reduce(RULE_38, 14);
    case 80:
      return reduce(RULE_38, 14);
    case 143:
      return reduce(RULE_38, 14);
    case 112:
      return reduce(RULE_38, 14);
    case 121:
      return reduce(RULE_38, 14);
    case 124:
      return reduce(RULE_38, 14);
    case 123:
      return reduce(RULE_38, 14);
    case 156:
      return reduce(RULE_38, 14);
    case 83:
      return reduce(RULE_38, 14);
    case 122:
      return reduce(RULE_38, 14);
    case 165:
      return reduce(RULE_38, 14);
    case 77:
      return reduce(RULE_38, 14);
    case 92:
      return reduce(RULE_38, 14);
    case 164:
      return reduce(RULE_38, 14);
    case 84:
      return reduce(RULE_38, 14);
    case 105:
      return reduce(RULE_38, 14);
    case 177:
      return reduce(RULE_38, 14);
    case 82:
      return reduce(RULE_38, 14);
    case 116:
      return reduce(RULE_38, 14);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto559(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action560(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 13);
    case 137:
      return reduce(RULE_38, 13);
    case 157:
      return reduce(RULE_38, 13);
    case 147:
      return reduce(RULE_38, 13);
    case 129:
      return reduce(RULE_38, 13);
    case 167:
      return reduce(RULE_38, 13);
    case 117:
      return reduce(RULE_38, 13);
    case 75:
      return reduce(RULE_38, 13);
    case 80:
      return reduce(RULE_38, 13);
    case 143:
      return reduce(RULE_38, 13);
    case 112:
      return reduce(RULE_38, 13);
    case 121:
      return reduce(RULE_38, 13);
    case 124:
      return reduce(RULE_38, 13);
    case 123:
      return reduce(RULE_38, 13);
    case 156:
      return reduce(RULE_38, 13);
    case 83:
      return reduce(RULE_38, 13);
    case 122:
      return reduce(RULE_38, 13);
    case 165:
      return reduce(RULE_38, 13);
    case 77:
      return reduce(RULE_38, 13);
    case 92:
      return reduce(RULE_38, 13);
    case 164:
      return reduce(RULE_38, 13);
    case 84:
      return reduce(RULE_38, 13);
    case 105:
      return reduce(RULE_38, 13);
    case 177:
      return reduce(RULE_38, 13);
    case 82:
      return reduce(RULE_38, 13);
    case 116:
      return reduce(RULE_38, 13);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action561(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 10);
    case 137:
      return reduce(RULE_38, 10);
    case 157:
      return reduce(RULE_38, 10);
    case 147:
      return reduce(RULE_38, 10);
    case 129:
      return reduce(RULE_38, 10);
    case 167:
      return reduce(RULE_38, 10);
    case 117:
      return reduce(RULE_38, 10);
    case 75:
      return reduce(RULE_38, 10);
    case 80:
      return reduce(RULE_38, 10);
    case 143:
      return reduce(RULE_38, 10);
    case 112:
      return reduce(RULE_38, 10);
    case 121:
      return reduce(RULE_38, 10);
    case 124:
      return reduce(RULE_38, 10);
    case 123:
      return reduce(RULE_38, 10);
    case 156:
      return reduce(RULE_38, 10);
    case 83:
      return reduce(RULE_38, 10);
    case 122:
      return reduce(RULE_38, 10);
    case 165:
      return reduce(RULE_38, 10);
    case 77:
      return reduce(RULE_38, 10);
    case 92:
      return reduce(RULE_38, 10);
    case 164:
      return reduce(RULE_38, 10);
    case 84:
      return reduce(RULE_38, 10);
    case 105:
      return reduce(RULE_38, 10);
    case 177:
      return reduce(RULE_38, 10);
    case 82:
      return reduce(RULE_38, 10);
    case 116:
      return reduce(RULE_38, 10);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto561(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action562(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 9);
    case 137:
      return reduce(RULE_38, 9);
    case 157:
      return reduce(RULE_38, 9);
    case 147:
      return reduce(RULE_38, 9);
    case 129:
      return reduce(RULE_38, 9);
    case 167:
      return reduce(RULE_38, 9);
    case 117:
      return reduce(RULE_38, 9);
    case 75:
      return reduce(RULE_38, 9);
    case 80:
      return reduce(RULE_38, 9);
    case 143:
      return reduce(RULE_38, 9);
    case 112:
      return reduce(RULE_38, 9);
    case 121:
      return reduce(RULE_38, 9);
    case 124:
      return reduce(RULE_38, 9);
    case 123:
      return reduce(RULE_38, 9);
    case 156:
      return reduce(RULE_38, 9);
    case 83:
      return reduce(RULE_38, 9);
    case 122:
      return reduce(RULE_38, 9);
    case 165:
      return reduce(RULE_38, 9);
    case 77:
      return reduce(RULE_38, 9);
    case 92:
      return reduce(RULE_38, 9);
    case 164:
      return reduce(RULE_38, 9);
    case 84:
      return reduce(RULE_38, 9);
    case 105:
      return reduce(RULE_38, 9);
    case 177:
      return reduce(RULE_38, 9);
    case 82:
      return reduce(RULE_38, 9);
    case 116:
      return reduce(RULE_38, 9);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action563(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 2);
    case 137:
      return reduce(RULE_38, 2);
    case 157:
      return reduce(RULE_38, 2);
    case 147:
      return reduce(RULE_38, 2);
    case 129:
      return reduce(RULE_38, 2);
    case 167:
      return reduce(RULE_38, 2);
    case 117:
      return reduce(RULE_38, 2);
    case 75:
      return reduce(RULE_38, 2);
    case 80:
      return reduce(RULE_38, 2);
    case 143:
      return reduce(RULE_38, 2);
    case 112:
      return reduce(RULE_38, 2);
    case 121:
      return reduce(RULE_38, 2);
    case 124:
      return reduce(RULE_38, 2);
    case 123:
      return reduce(RULE_38, 2);
    case 156:
      return reduce(RULE_38, 2);
    case 83:
      return reduce(RULE_38, 2);
    case 122:
      return reduce(RULE_38, 2);
    case 165:
      return reduce(RULE_38, 2);
    case 77:
      return reduce(RULE_38, 2);
    case 92:
      return reduce(RULE_38, 2);
    case 164:
      return reduce(RULE_38, 2);
    case 84:
      return reduce(RULE_38, 2);
    case 105:
      return reduce(RULE_38, 2);
    case 177:
      return reduce(RULE_38, 2);
    case 82:
      return reduce(RULE_38, 2);
    case 116:
      return reduce(RULE_38, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto563(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action564(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 1);
    case 137:
      return reduce(RULE_38, 1);
    case 157:
      return reduce(RULE_38, 1);
    case 147:
      return reduce(RULE_38, 1);
    case 129:
      return reduce(RULE_38, 1);
    case 167:
      return reduce(RULE_38, 1);
    case 117:
      return reduce(RULE_38, 1);
    case 75:
      return reduce(RULE_38, 1);
    case 80:
      return reduce(RULE_38, 1);
    case 143:
      return reduce(RULE_38, 1);
    case 112:
      return reduce(RULE_38, 1);
    case 121:
      return reduce(RULE_38, 1);
    case 124:
      return reduce(RULE_38, 1);
    case 123:
      return reduce(RULE_38, 1);
    case 156:
      return reduce(RULE_38, 1);
    case 83:
      return reduce(RULE_38, 1);
    case 122:
      return reduce(RULE_38, 1);
    case 165:
      return reduce(RULE_38, 1);
    case 77:
      return reduce(RULE_38, 1);
    case 92:
      return reduce(RULE_38, 1);
    case 164:
      return reduce(RULE_38, 1);
    case 84:
      return reduce(RULE_38, 1);
    case 105:
      return reduce(RULE_38, 1);
    case 177:
      return reduce(RULE_38, 1);
    case 82:
      return reduce(RULE_38, 1);
    case 116:
      return reduce(RULE_38, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action565(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 18);
    case 137:
      return reduce(RULE_38, 18);
    case 157:
      return reduce(RULE_38, 18);
    case 147:
      return reduce(RULE_38, 18);
    case 129:
      return reduce(RULE_38, 18);
    case 167:
      return reduce(RULE_38, 18);
    case 117:
      return reduce(RULE_38, 18);
    case 75:
      return reduce(RULE_38, 18);
    case 80:
      return reduce(RULE_38, 18);
    case 143:
      return reduce(RULE_38, 18);
    case 112:
      return reduce(RULE_38, 18);
    case 121:
      return reduce(RULE_38, 18);
    case 124:
      return reduce(RULE_38, 18);
    case 123:
      return reduce(RULE_38, 18);
    case 156:
      return reduce(RULE_38, 18);
    case 83:
      return reduce(RULE_38, 18);
    case 122:
      return reduce(RULE_38, 18);
    case 165:
      return reduce(RULE_38, 18);
    case 77:
      return reduce(RULE_38, 18);
    case 92:
      return reduce(RULE_38, 18);
    case 164:
      return reduce(RULE_38, 18);
    case 84:
      return reduce(RULE_38, 18);
    case 105:
      return reduce(RULE_38, 18);
    case 177:
      return reduce(RULE_38, 18);
    case 82:
      return reduce(RULE_38, 18);
    case 116:
      return reduce(RULE_38, 18);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto565(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action566(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 17);
    case 137:
      return reduce(RULE_38, 17);
    case 157:
      return reduce(RULE_38, 17);
    case 147:
      return reduce(RULE_38, 17);
    case 129:
      return reduce(RULE_38, 17);
    case 167:
      return reduce(RULE_38, 17);
    case 117:
      return reduce(RULE_38, 17);
    case 75:
      return reduce(RULE_38, 17);
    case 80:
      return reduce(RULE_38, 17);
    case 143:
      return reduce(RULE_38, 17);
    case 112:
      return reduce(RULE_38, 17);
    case 121:
      return reduce(RULE_38, 17);
    case 124:
      return reduce(RULE_38, 17);
    case 123:
      return reduce(RULE_38, 17);
    case 156:
      return reduce(RULE_38, 17);
    case 83:
      return reduce(RULE_38, 17);
    case 122:
      return reduce(RULE_38, 17);
    case 165:
      return reduce(RULE_38, 17);
    case 77:
      return reduce(RULE_38, 17);
    case 92:
      return reduce(RULE_38, 17);
    case 164:
      return reduce(RULE_38, 17);
    case 84:
      return reduce(RULE_38, 17);
    case 105:
      return reduce(RULE_38, 17);
    case 177:
      return reduce(RULE_38, 17);
    case 82:
      return reduce(RULE_38, 17);
    case 116:
      return reduce(RULE_38, 17);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action567(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_38, 6);
    case 137:
      return reduce(RULE_38, 6);
    case 157:
      return reduce(RULE_38, 6);
    case 147:
      return reduce(RULE_38, 6);
    case 129:
      return reduce(RULE_38, 6);
    case 167:
      return reduce(RULE_38, 6);
    case 117:
      return reduce(RULE_38, 6);
    case 75:
      return reduce(RULE_38, 6);
    case 80:
      return reduce(RULE_38, 6);
    case 143:
      return reduce(RULE_38, 6);
    case 112:
      return reduce(RULE_38, 6);
    case 121:
      return reduce(RULE_38, 6);
    case 124:
      return reduce(RULE_38, 6);
    case 123:
      return reduce(RULE_38, 6);
    case 156:
      return reduce(RULE_38, 6);
    case 83:
      return reduce(RULE_38, 6);
    case 122:
      return reduce(RULE_38, 6);
    case 165:
      return reduce(RULE_38, 6);
    case 77:
      return reduce(RULE_38, 6);
    case 92:
      return reduce(RULE_38, 6);
    case 164:
      return reduce(RULE_38, 6);
    case 84:
      return reduce(RULE_38, 6);
    case 105:
      return reduce(RULE_38, 6);
    case 177:
      return reduce(RULE_38, 6);
    case 82:
      return reduce(RULE_38, 6);
    case 116:
      return reduce(RULE_38, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto567(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action568(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_38, 5);
    case 137:
      return reduce(RULE_38, 5);
    case 157:
      return reduce(RULE_38, 5);
    case 147:
      return reduce(RULE_38, 5);
    case 129:
      return reduce(RULE_38, 5);
    case 167:
      return reduce(RULE_38, 5);
    case 117:
      return reduce(RULE_38, 5);
    case 75:
      return reduce(RULE_38, 5);
    case 80:
      return reduce(RULE_38, 5);
    case 143:
      return reduce(RULE_38, 5);
    case 112:
      return reduce(RULE_38, 5);
    case 121:
      return reduce(RULE_38, 5);
    case 124:
      return reduce(RULE_38, 5);
    case 123:
      return reduce(RULE_38, 5);
    case 156:
      return reduce(RULE_38, 5);
    case 83:
      return reduce(RULE_38, 5);
    case 122:
      return reduce(RULE_38, 5);
    case 165:
      return reduce(RULE_38, 5);
    case 77:
      return reduce(RULE_38, 5);
    case 92:
      return reduce(RULE_38, 5);
    case 164:
      return reduce(RULE_38, 5);
    case 84:
      return reduce(RULE_38, 5);
    case 105:
      return reduce(RULE_38, 5);
    case 177:
      return reduce(RULE_38, 5);
    case 82:
      return reduce(RULE_38, 5);
    case 116:
      return reduce(RULE_38, 5);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action569(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 82:
      stateStack.addFirst(652);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {COLON});
    }
  }

  private final boolean action570(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(355);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 9);
    case 137:
      return reduce(RULE_34, 9);
    case 110:
      return reduce(RULE_34, 9);
    case 157:
      return reduce(RULE_34, 9);
    case 103:
      return reduce(RULE_34, 9);
    case 147:
      return reduce(RULE_34, 9);
    case 129:
      return reduce(RULE_34, 9);
    case 117:
      return reduce(RULE_34, 9);
    case 167:
      return reduce(RULE_34, 9);
    case 119:
      return reduce(RULE_34, 9);
    case 75:
      return reduce(RULE_34, 9);
    case 100:
      return reduce(RULE_34, 9);
    case 152:
      return reduce(RULE_34, 9);
    case 80:
      return reduce(RULE_34, 9);
    case 143:
      return reduce(RULE_34, 9);
    case 112:
      return reduce(RULE_34, 9);
    case 86:
      return reduce(RULE_34, 9);
    case 120:
      return reduce(RULE_34, 9);
    case 121:
      return reduce(RULE_34, 9);
    case 124:
      return reduce(RULE_34, 9);
    case 123:
      return reduce(RULE_34, 9);
    case 156:
      return reduce(RULE_34, 9);
    case 83:
      return reduce(RULE_34, 9);
    case 99:
      return reduce(RULE_34, 9);
    case 122:
      return reduce(RULE_34, 9);
    case 125:
      return reduce(RULE_34, 9);
    case 165:
      return reduce(RULE_34, 9);
    case 77:
      return reduce(RULE_34, 9);
    case 92:
      return reduce(RULE_34, 9);
    case 108:
      return reduce(RULE_34, 9);
    case 164:
      return reduce(RULE_34, 9);
    case 84:
      return reduce(RULE_34, 9);
    case 105:
      return reduce(RULE_34, 9);
    case 104:
      return reduce(RULE_34, 9);
    case 114:
      return reduce(RULE_34, 9);
    case 82:
      return reduce(RULE_34, 9);
    case 177:
      return reduce(RULE_34, 9);
    case 90:
      return reduce(RULE_34, 9);
    case 116:
      return reduce(RULE_34, 9);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action571(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 10);
    case 137:
      return reduce(RULE_34, 10);
    case 110:
      return reduce(RULE_34, 10);
    case 157:
      return reduce(RULE_34, 10);
    case 103:
      return reduce(RULE_34, 10);
    case 147:
      return reduce(RULE_34, 10);
    case 129:
      return reduce(RULE_34, 10);
    case 117:
      return reduce(RULE_34, 10);
    case 167:
      return reduce(RULE_34, 10);
    case 119:
      return reduce(RULE_34, 10);
    case 75:
      return reduce(RULE_34, 10);
    case 100:
      return reduce(RULE_34, 10);
    case 152:
      return reduce(RULE_34, 10);
    case 80:
      return reduce(RULE_34, 10);
    case 143:
      return reduce(RULE_34, 10);
    case 112:
      return reduce(RULE_34, 10);
    case 86:
      return reduce(RULE_34, 10);
    case 120:
      return reduce(RULE_34, 10);
    case 121:
      return reduce(RULE_34, 10);
    case 124:
      return reduce(RULE_34, 10);
    case 123:
      return reduce(RULE_34, 10);
    case 156:
      return reduce(RULE_34, 10);
    case 83:
      return reduce(RULE_34, 10);
    case 99:
      return reduce(RULE_34, 10);
    case 122:
      return reduce(RULE_34, 10);
    case 125:
      return reduce(RULE_34, 10);
    case 165:
      return reduce(RULE_34, 10);
    case 77:
      return reduce(RULE_34, 10);
    case 92:
      return reduce(RULE_34, 10);
    case 108:
      return reduce(RULE_34, 10);
    case 164:
      return reduce(RULE_34, 10);
    case 84:
      return reduce(RULE_34, 10);
    case 105:
      return reduce(RULE_34, 10);
    case 104:
      return reduce(RULE_34, 10);
    case 114:
      return reduce(RULE_34, 10);
    case 82:
      return reduce(RULE_34, 10);
    case 177:
      return reduce(RULE_34, 10);
    case 90:
      return reduce(RULE_34, 10);
    case 116:
      return reduce(RULE_34, 10);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto571(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action572(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(355);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 5);
    case 137:
      return reduce(RULE_34, 5);
    case 110:
      return reduce(RULE_34, 5);
    case 157:
      return reduce(RULE_34, 5);
    case 103:
      return reduce(RULE_34, 5);
    case 147:
      return reduce(RULE_34, 5);
    case 129:
      return reduce(RULE_34, 5);
    case 117:
      return reduce(RULE_34, 5);
    case 167:
      return reduce(RULE_34, 5);
    case 119:
      return reduce(RULE_34, 5);
    case 75:
      return reduce(RULE_34, 5);
    case 100:
      return reduce(RULE_34, 5);
    case 152:
      return reduce(RULE_34, 5);
    case 80:
      return reduce(RULE_34, 5);
    case 143:
      return reduce(RULE_34, 5);
    case 112:
      return reduce(RULE_34, 5);
    case 86:
      return reduce(RULE_34, 5);
    case 120:
      return reduce(RULE_34, 5);
    case 121:
      return reduce(RULE_34, 5);
    case 124:
      return reduce(RULE_34, 5);
    case 123:
      return reduce(RULE_34, 5);
    case 156:
      return reduce(RULE_34, 5);
    case 83:
      return reduce(RULE_34, 5);
    case 99:
      return reduce(RULE_34, 5);
    case 122:
      return reduce(RULE_34, 5);
    case 125:
      return reduce(RULE_34, 5);
    case 165:
      return reduce(RULE_34, 5);
    case 77:
      return reduce(RULE_34, 5);
    case 92:
      return reduce(RULE_34, 5);
    case 108:
      return reduce(RULE_34, 5);
    case 164:
      return reduce(RULE_34, 5);
    case 84:
      return reduce(RULE_34, 5);
    case 105:
      return reduce(RULE_34, 5);
    case 104:
      return reduce(RULE_34, 5);
    case 114:
      return reduce(RULE_34, 5);
    case 82:
      return reduce(RULE_34, 5);
    case 177:
      return reduce(RULE_34, 5);
    case 90:
      return reduce(RULE_34, 5);
    case 116:
      return reduce(RULE_34, 5);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action573(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 6);
    case 137:
      return reduce(RULE_34, 6);
    case 110:
      return reduce(RULE_34, 6);
    case 157:
      return reduce(RULE_34, 6);
    case 103:
      return reduce(RULE_34, 6);
    case 147:
      return reduce(RULE_34, 6);
    case 129:
      return reduce(RULE_34, 6);
    case 117:
      return reduce(RULE_34, 6);
    case 167:
      return reduce(RULE_34, 6);
    case 119:
      return reduce(RULE_34, 6);
    case 75:
      return reduce(RULE_34, 6);
    case 100:
      return reduce(RULE_34, 6);
    case 152:
      return reduce(RULE_34, 6);
    case 80:
      return reduce(RULE_34, 6);
    case 143:
      return reduce(RULE_34, 6);
    case 112:
      return reduce(RULE_34, 6);
    case 86:
      return reduce(RULE_34, 6);
    case 120:
      return reduce(RULE_34, 6);
    case 121:
      return reduce(RULE_34, 6);
    case 124:
      return reduce(RULE_34, 6);
    case 123:
      return reduce(RULE_34, 6);
    case 156:
      return reduce(RULE_34, 6);
    case 83:
      return reduce(RULE_34, 6);
    case 99:
      return reduce(RULE_34, 6);
    case 122:
      return reduce(RULE_34, 6);
    case 125:
      return reduce(RULE_34, 6);
    case 165:
      return reduce(RULE_34, 6);
    case 77:
      return reduce(RULE_34, 6);
    case 92:
      return reduce(RULE_34, 6);
    case 108:
      return reduce(RULE_34, 6);
    case 164:
      return reduce(RULE_34, 6);
    case 84:
      return reduce(RULE_34, 6);
    case 105:
      return reduce(RULE_34, 6);
    case 104:
      return reduce(RULE_34, 6);
    case 114:
      return reduce(RULE_34, 6);
    case 82:
      return reduce(RULE_34, 6);
    case 177:
      return reduce(RULE_34, 6);
    case 90:
      return reduce(RULE_34, 6);
    case 116:
      return reduce(RULE_34, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto573(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action574(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(355);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 1);
    case 137:
      return reduce(RULE_34, 1);
    case 110:
      return reduce(RULE_34, 1);
    case 157:
      return reduce(RULE_34, 1);
    case 103:
      return reduce(RULE_34, 1);
    case 147:
      return reduce(RULE_34, 1);
    case 129:
      return reduce(RULE_34, 1);
    case 117:
      return reduce(RULE_34, 1);
    case 167:
      return reduce(RULE_34, 1);
    case 119:
      return reduce(RULE_34, 1);
    case 75:
      return reduce(RULE_34, 1);
    case 100:
      return reduce(RULE_34, 1);
    case 152:
      return reduce(RULE_34, 1);
    case 80:
      return reduce(RULE_34, 1);
    case 143:
      return reduce(RULE_34, 1);
    case 112:
      return reduce(RULE_34, 1);
    case 86:
      return reduce(RULE_34, 1);
    case 120:
      return reduce(RULE_34, 1);
    case 121:
      return reduce(RULE_34, 1);
    case 124:
      return reduce(RULE_34, 1);
    case 123:
      return reduce(RULE_34, 1);
    case 156:
      return reduce(RULE_34, 1);
    case 83:
      return reduce(RULE_34, 1);
    case 99:
      return reduce(RULE_34, 1);
    case 122:
      return reduce(RULE_34, 1);
    case 125:
      return reduce(RULE_34, 1);
    case 165:
      return reduce(RULE_34, 1);
    case 77:
      return reduce(RULE_34, 1);
    case 92:
      return reduce(RULE_34, 1);
    case 108:
      return reduce(RULE_34, 1);
    case 164:
      return reduce(RULE_34, 1);
    case 84:
      return reduce(RULE_34, 1);
    case 105:
      return reduce(RULE_34, 1);
    case 104:
      return reduce(RULE_34, 1);
    case 114:
      return reduce(RULE_34, 1);
    case 82:
      return reduce(RULE_34, 1);
    case 177:
      return reduce(RULE_34, 1);
    case 90:
      return reduce(RULE_34, 1);
    case 116:
      return reduce(RULE_34, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action575(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 2);
    case 137:
      return reduce(RULE_34, 2);
    case 110:
      return reduce(RULE_34, 2);
    case 157:
      return reduce(RULE_34, 2);
    case 103:
      return reduce(RULE_34, 2);
    case 147:
      return reduce(RULE_34, 2);
    case 129:
      return reduce(RULE_34, 2);
    case 117:
      return reduce(RULE_34, 2);
    case 167:
      return reduce(RULE_34, 2);
    case 119:
      return reduce(RULE_34, 2);
    case 75:
      return reduce(RULE_34, 2);
    case 100:
      return reduce(RULE_34, 2);
    case 152:
      return reduce(RULE_34, 2);
    case 80:
      return reduce(RULE_34, 2);
    case 143:
      return reduce(RULE_34, 2);
    case 112:
      return reduce(RULE_34, 2);
    case 86:
      return reduce(RULE_34, 2);
    case 120:
      return reduce(RULE_34, 2);
    case 121:
      return reduce(RULE_34, 2);
    case 124:
      return reduce(RULE_34, 2);
    case 123:
      return reduce(RULE_34, 2);
    case 156:
      return reduce(RULE_34, 2);
    case 83:
      return reduce(RULE_34, 2);
    case 99:
      return reduce(RULE_34, 2);
    case 122:
      return reduce(RULE_34, 2);
    case 125:
      return reduce(RULE_34, 2);
    case 165:
      return reduce(RULE_34, 2);
    case 77:
      return reduce(RULE_34, 2);
    case 92:
      return reduce(RULE_34, 2);
    case 108:
      return reduce(RULE_34, 2);
    case 164:
      return reduce(RULE_34, 2);
    case 84:
      return reduce(RULE_34, 2);
    case 105:
      return reduce(RULE_34, 2);
    case 104:
      return reduce(RULE_34, 2);
    case 114:
      return reduce(RULE_34, 2);
    case 82:
      return reduce(RULE_34, 2);
    case 177:
      return reduce(RULE_34, 2);
    case 90:
      return reduce(RULE_34, 2);
    case 116:
      return reduce(RULE_34, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto575(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action576(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(355);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(356);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 13);
    case 137:
      return reduce(RULE_34, 13);
    case 110:
      return reduce(RULE_34, 13);
    case 157:
      return reduce(RULE_34, 13);
    case 103:
      return reduce(RULE_34, 13);
    case 147:
      return reduce(RULE_34, 13);
    case 129:
      return reduce(RULE_34, 13);
    case 117:
      return reduce(RULE_34, 13);
    case 167:
      return reduce(RULE_34, 13);
    case 119:
      return reduce(RULE_34, 13);
    case 75:
      return reduce(RULE_34, 13);
    case 100:
      return reduce(RULE_34, 13);
    case 152:
      return reduce(RULE_34, 13);
    case 80:
      return reduce(RULE_34, 13);
    case 143:
      return reduce(RULE_34, 13);
    case 112:
      return reduce(RULE_34, 13);
    case 86:
      return reduce(RULE_34, 13);
    case 120:
      return reduce(RULE_34, 13);
    case 121:
      return reduce(RULE_34, 13);
    case 124:
      return reduce(RULE_34, 13);
    case 123:
      return reduce(RULE_34, 13);
    case 156:
      return reduce(RULE_34, 13);
    case 83:
      return reduce(RULE_34, 13);
    case 99:
      return reduce(RULE_34, 13);
    case 122:
      return reduce(RULE_34, 13);
    case 125:
      return reduce(RULE_34, 13);
    case 165:
      return reduce(RULE_34, 13);
    case 77:
      return reduce(RULE_34, 13);
    case 92:
      return reduce(RULE_34, 13);
    case 108:
      return reduce(RULE_34, 13);
    case 164:
      return reduce(RULE_34, 13);
    case 84:
      return reduce(RULE_34, 13);
    case 105:
      return reduce(RULE_34, 13);
    case 104:
      return reduce(RULE_34, 13);
    case 114:
      return reduce(RULE_34, 13);
    case 82:
      return reduce(RULE_34, 13);
    case 177:
      return reduce(RULE_34, 13);
    case 90:
      return reduce(RULE_34, 13);
    case 116:
      return reduce(RULE_34, 13);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action577(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_34, 14);
    case 137:
      return reduce(RULE_34, 14);
    case 110:
      return reduce(RULE_34, 14);
    case 157:
      return reduce(RULE_34, 14);
    case 103:
      return reduce(RULE_34, 14);
    case 147:
      return reduce(RULE_34, 14);
    case 129:
      return reduce(RULE_34, 14);
    case 117:
      return reduce(RULE_34, 14);
    case 167:
      return reduce(RULE_34, 14);
    case 119:
      return reduce(RULE_34, 14);
    case 75:
      return reduce(RULE_34, 14);
    case 100:
      return reduce(RULE_34, 14);
    case 152:
      return reduce(RULE_34, 14);
    case 80:
      return reduce(RULE_34, 14);
    case 143:
      return reduce(RULE_34, 14);
    case 112:
      return reduce(RULE_34, 14);
    case 86:
      return reduce(RULE_34, 14);
    case 120:
      return reduce(RULE_34, 14);
    case 121:
      return reduce(RULE_34, 14);
    case 124:
      return reduce(RULE_34, 14);
    case 123:
      return reduce(RULE_34, 14);
    case 156:
      return reduce(RULE_34, 14);
    case 83:
      return reduce(RULE_34, 14);
    case 99:
      return reduce(RULE_34, 14);
    case 122:
      return reduce(RULE_34, 14);
    case 125:
      return reduce(RULE_34, 14);
    case 165:
      return reduce(RULE_34, 14);
    case 77:
      return reduce(RULE_34, 14);
    case 92:
      return reduce(RULE_34, 14);
    case 108:
      return reduce(RULE_34, 14);
    case 164:
      return reduce(RULE_34, 14);
    case 84:
      return reduce(RULE_34, 14);
    case 105:
      return reduce(RULE_34, 14);
    case 104:
      return reduce(RULE_34, 14);
    case 114:
      return reduce(RULE_34, 14);
    case 82:
      return reduce(RULE_34, 14);
    case 177:
      return reduce(RULE_34, 14);
    case 90:
      return reduce(RULE_34, 14);
    case 116:
      return reduce(RULE_34, 14);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, MINUS, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto577(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action578(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_42, 1);
    case 137:
      return reduce(RULE_42, 1);
    case 124:
      return reduce(RULE_42, 1);
    case 157:
      return reduce(RULE_42, 1);
    case 123:
      return reduce(RULE_42, 1);
    case 156:
      return reduce(RULE_42, 1);
    case 122:
      return reduce(RULE_42, 1);
    case 165:
      return reduce(RULE_42, 1);
    case 147:
      return reduce(RULE_42, 1);
    case 129:
      return reduce(RULE_42, 1);
    case 167:
      return reduce(RULE_42, 1);
    case 164:
      return reduce(RULE_42, 1);
    case 75:
      return reduce(RULE_42, 1);
    case 105:
      return reduce(RULE_42, 1);
    case 82:
      return reduce(RULE_42, 1);
    case 177:
      return reduce(RULE_42, 1);
    case 143:
      return reduce(RULE_42, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action579(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(653);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action580(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 10);
    case 149:
      return reduce(RULE_17, 10);
    case 137:
      return reduce(RULE_17, 10);
    case 110:
      return reduce(RULE_17, 10);
    case 157:
      return reduce(RULE_17, 10);
    case 96:
      return reduce(RULE_17, 10);
    case 103:
      return reduce(RULE_17, 10);
    case 106:
      return reduce(RULE_17, 10);
    case 147:
      return reduce(RULE_17, 10);
    case 129:
      return reduce(RULE_17, 10);
    case 117:
      return reduce(RULE_17, 10);
    case 167:
      return reduce(RULE_17, 10);
    case 119:
      return reduce(RULE_17, 10);
    case 75:
      return reduce(RULE_17, 10);
    case 100:
      return reduce(RULE_17, 10);
    case 152:
      return reduce(RULE_17, 10);
    case 80:
      return reduce(RULE_17, 10);
    case 94:
      return reduce(RULE_17, 10);
    case 107:
      return reduce(RULE_17, 10);
    case 143:
      return reduce(RULE_17, 10);
    case 98:
      return reduce(RULE_17, 10);
    case 112:
      return reduce(RULE_17, 10);
    case 86:
      return reduce(RULE_17, 10);
    case 120:
      return reduce(RULE_17, 10);
    case 121:
      return reduce(RULE_17, 10);
    case 124:
      return reduce(RULE_17, 10);
    case 123:
      return reduce(RULE_17, 10);
    case 156:
      return reduce(RULE_17, 10);
    case 83:
      return reduce(RULE_17, 10);
    case 99:
      return reduce(RULE_17, 10);
    case 122:
      return reduce(RULE_17, 10);
    case 125:
      return reduce(RULE_17, 10);
    case 165:
      return reduce(RULE_17, 10);
    case 77:
      return reduce(RULE_17, 10);
    case 108:
      return reduce(RULE_17, 10);
    case 92:
      return reduce(RULE_17, 10);
    case 164:
      return reduce(RULE_17, 10);
    case 84:
      return reduce(RULE_17, 10);
    case 104:
      return reduce(RULE_17, 10);
    case 105:
      return reduce(RULE_17, 10);
    case 114:
      return reduce(RULE_17, 10);
    case 82:
      return reduce(RULE_17, 10);
    case 177:
      return reduce(RULE_17, 10);
    case 90:
      return reduce(RULE_17, 10);
    case 116:
      return reduce(RULE_17, 10);
    case 118:
      return reduce(RULE_17, 10);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action581(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_42, 0);
    case 137:
      return reduce(RULE_42, 0);
    case 124:
      return reduce(RULE_42, 0);
    case 157:
      return reduce(RULE_42, 0);
    case 123:
      return reduce(RULE_42, 0);
    case 156:
      return reduce(RULE_42, 0);
    case 122:
      return reduce(RULE_42, 0);
    case 165:
      return reduce(RULE_42, 0);
    case 147:
      return reduce(RULE_42, 0);
    case 129:
      return reduce(RULE_42, 0);
    case 167:
      return reduce(RULE_42, 0);
    case 164:
      return reduce(RULE_42, 0);
    case 75:
      return reduce(RULE_42, 0);
    case 105:
      return reduce(RULE_42, 0);
    case 82:
      return reduce(RULE_42, 0);
    case 177:
      return reduce(RULE_42, 0);
    case 143:
      return reduce(RULE_42, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action582(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(654);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action583(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_37, 1);
    case 149:
      return reduce(RULE_37, 1);
    case 137:
      return reduce(RULE_37, 1);
    case 110:
      return reduce(RULE_37, 1);
    case 157:
      return reduce(RULE_37, 1);
    case 103:
      return reduce(RULE_37, 1);
    case 147:
      return reduce(RULE_37, 1);
    case 129:
      return reduce(RULE_37, 1);
    case 117:
      return reduce(RULE_37, 1);
    case 167:
      return reduce(RULE_37, 1);
    case 119:
      return reduce(RULE_37, 1);
    case 75:
      return reduce(RULE_37, 1);
    case 100:
      return reduce(RULE_37, 1);
    case 152:
      return reduce(RULE_37, 1);
    case 80:
      return reduce(RULE_37, 1);
    case 94:
      return reduce(RULE_37, 1);
    case 143:
      return reduce(RULE_37, 1);
    case 98:
      return reduce(RULE_37, 1);
    case 112:
      return reduce(RULE_37, 1);
    case 86:
      return reduce(RULE_37, 1);
    case 120:
      return reduce(RULE_37, 1);
    case 121:
      return reduce(RULE_37, 1);
    case 124:
      return reduce(RULE_37, 1);
    case 156:
      return reduce(RULE_37, 1);
    case 123:
      return reduce(RULE_37, 1);
    case 83:
      return reduce(RULE_37, 1);
    case 99:
      return reduce(RULE_37, 1);
    case 122:
      return reduce(RULE_37, 1);
    case 125:
      return reduce(RULE_37, 1);
    case 165:
      return reduce(RULE_37, 1);
    case 77:
      return reduce(RULE_37, 1);
    case 108:
      return reduce(RULE_37, 1);
    case 92:
      return reduce(RULE_37, 1);
    case 164:
      return reduce(RULE_37, 1);
    case 84:
      return reduce(RULE_37, 1);
    case 104:
      return reduce(RULE_37, 1);
    case 105:
      return reduce(RULE_37, 1);
    case 114:
      return reduce(RULE_37, 1);
    case 82:
      return reduce(RULE_37, 1);
    case 177:
      return reduce(RULE_37, 1);
    case 90:
      return reduce(RULE_37, 1);
    case 116:
      return reduce(RULE_37, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action584(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(655);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action585(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 22);
    case 137:
      return reduce(RULE_41, 22);
    case 157:
      return reduce(RULE_41, 22);
    case 147:
      return reduce(RULE_41, 22);
    case 129:
      return reduce(RULE_41, 22);
    case 167:
      return reduce(RULE_41, 22);
    case 117:
      return reduce(RULE_41, 22);
    case 75:
      return reduce(RULE_41, 22);
    case 80:
      return reduce(RULE_41, 22);
    case 143:
      return reduce(RULE_41, 22);
    case 112:
      return reduce(RULE_41, 22);
    case 121:
      return reduce(RULE_41, 22);
    case 124:
      return reduce(RULE_41, 22);
    case 123:
      return reduce(RULE_41, 22);
    case 156:
      return reduce(RULE_41, 22);
    case 83:
      return reduce(RULE_41, 22);
    case 122:
      return reduce(RULE_41, 22);
    case 165:
      return reduce(RULE_41, 22);
    case 77:
      return reduce(RULE_41, 22);
    case 92:
      return reduce(RULE_41, 22);
    case 164:
      return reduce(RULE_41, 22);
    case 84:
      return reduce(RULE_41, 22);
    case 105:
      return reduce(RULE_41, 22);
    case 177:
      return reduce(RULE_41, 22);
    case 82:
      return reduce(RULE_41, 22);
    case 116:
      return reduce(RULE_41, 22);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto585(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action586(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 21);
    case 137:
      return reduce(RULE_41, 21);
    case 157:
      return reduce(RULE_41, 21);
    case 147:
      return reduce(RULE_41, 21);
    case 129:
      return reduce(RULE_41, 21);
    case 167:
      return reduce(RULE_41, 21);
    case 117:
      return reduce(RULE_41, 21);
    case 75:
      return reduce(RULE_41, 21);
    case 80:
      return reduce(RULE_41, 21);
    case 143:
      return reduce(RULE_41, 21);
    case 112:
      return reduce(RULE_41, 21);
    case 121:
      return reduce(RULE_41, 21);
    case 124:
      return reduce(RULE_41, 21);
    case 123:
      return reduce(RULE_41, 21);
    case 156:
      return reduce(RULE_41, 21);
    case 83:
      return reduce(RULE_41, 21);
    case 122:
      return reduce(RULE_41, 21);
    case 165:
      return reduce(RULE_41, 21);
    case 77:
      return reduce(RULE_41, 21);
    case 92:
      return reduce(RULE_41, 21);
    case 164:
      return reduce(RULE_41, 21);
    case 84:
      return reduce(RULE_41, 21);
    case 105:
      return reduce(RULE_41, 21);
    case 177:
      return reduce(RULE_41, 21);
    case 82:
      return reduce(RULE_41, 21);
    case 116:
      return reduce(RULE_41, 21);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action587(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 18);
    case 137:
      return reduce(RULE_41, 18);
    case 157:
      return reduce(RULE_41, 18);
    case 147:
      return reduce(RULE_41, 18);
    case 129:
      return reduce(RULE_41, 18);
    case 167:
      return reduce(RULE_41, 18);
    case 117:
      return reduce(RULE_41, 18);
    case 75:
      return reduce(RULE_41, 18);
    case 80:
      return reduce(RULE_41, 18);
    case 143:
      return reduce(RULE_41, 18);
    case 112:
      return reduce(RULE_41, 18);
    case 121:
      return reduce(RULE_41, 18);
    case 124:
      return reduce(RULE_41, 18);
    case 123:
      return reduce(RULE_41, 18);
    case 156:
      return reduce(RULE_41, 18);
    case 83:
      return reduce(RULE_41, 18);
    case 122:
      return reduce(RULE_41, 18);
    case 165:
      return reduce(RULE_41, 18);
    case 77:
      return reduce(RULE_41, 18);
    case 92:
      return reduce(RULE_41, 18);
    case 164:
      return reduce(RULE_41, 18);
    case 84:
      return reduce(RULE_41, 18);
    case 105:
      return reduce(RULE_41, 18);
    case 177:
      return reduce(RULE_41, 18);
    case 82:
      return reduce(RULE_41, 18);
    case 116:
      return reduce(RULE_41, 18);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto587(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action588(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 17);
    case 137:
      return reduce(RULE_41, 17);
    case 157:
      return reduce(RULE_41, 17);
    case 147:
      return reduce(RULE_41, 17);
    case 129:
      return reduce(RULE_41, 17);
    case 167:
      return reduce(RULE_41, 17);
    case 117:
      return reduce(RULE_41, 17);
    case 75:
      return reduce(RULE_41, 17);
    case 80:
      return reduce(RULE_41, 17);
    case 143:
      return reduce(RULE_41, 17);
    case 112:
      return reduce(RULE_41, 17);
    case 121:
      return reduce(RULE_41, 17);
    case 124:
      return reduce(RULE_41, 17);
    case 123:
      return reduce(RULE_41, 17);
    case 156:
      return reduce(RULE_41, 17);
    case 83:
      return reduce(RULE_41, 17);
    case 122:
      return reduce(RULE_41, 17);
    case 165:
      return reduce(RULE_41, 17);
    case 77:
      return reduce(RULE_41, 17);
    case 92:
      return reduce(RULE_41, 17);
    case 164:
      return reduce(RULE_41, 17);
    case 84:
      return reduce(RULE_41, 17);
    case 105:
      return reduce(RULE_41, 17);
    case 177:
      return reduce(RULE_41, 17);
    case 82:
      return reduce(RULE_41, 17);
    case 116:
      return reduce(RULE_41, 17);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action589(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_33, 1);
    case 137:
      return reduce(RULE_33, 1);
    case 157:
      return reduce(RULE_33, 1);
    case 103:
      return reduce(RULE_33, 1);
    case 147:
      return reduce(RULE_33, 1);
    case 129:
      return reduce(RULE_33, 1);
    case 167:
      return reduce(RULE_33, 1);
    case 117:
      return reduce(RULE_33, 1);
    case 119:
      return reduce(RULE_33, 1);
    case 75:
      return reduce(RULE_33, 1);
    case 152:
      return reduce(RULE_33, 1);
    case 80:
      return reduce(RULE_33, 1);
    case 143:
      return reduce(RULE_33, 1);
    case 112:
      return reduce(RULE_33, 1);
    case 86:
      return reduce(RULE_33, 1);
    case 120:
      return reduce(RULE_33, 1);
    case 121:
      return reduce(RULE_33, 1);
    case 124:
      return reduce(RULE_33, 1);
    case 123:
      return reduce(RULE_33, 1);
    case 156:
      return reduce(RULE_33, 1);
    case 83:
      return reduce(RULE_33, 1);
    case 122:
      return reduce(RULE_33, 1);
    case 99:
      return reduce(RULE_33, 1);
    case 165:
      return reduce(RULE_33, 1);
    case 77:
      return reduce(RULE_33, 1);
    case 92:
      return reduce(RULE_33, 1);
    case 164:
      return reduce(RULE_33, 1);
    case 84:
      return reduce(RULE_33, 1);
    case 105:
      return reduce(RULE_33, 1);
    case 104:
      return reduce(RULE_33, 1);
    case 82:
      return reduce(RULE_33, 1);
    case 177:
      return reduce(RULE_33, 1);
    case 116:
      return reduce(RULE_33, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, RANGLE, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, UNBACKED_KEYWORD, COLON, QUESTION_MARK});
    }
  }

  private final boolean action590(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 10);
    case 137:
      return reduce(RULE_41, 10);
    case 157:
      return reduce(RULE_41, 10);
    case 147:
      return reduce(RULE_41, 10);
    case 129:
      return reduce(RULE_41, 10);
    case 167:
      return reduce(RULE_41, 10);
    case 117:
      return reduce(RULE_41, 10);
    case 75:
      return reduce(RULE_41, 10);
    case 80:
      return reduce(RULE_41, 10);
    case 143:
      return reduce(RULE_41, 10);
    case 112:
      return reduce(RULE_41, 10);
    case 121:
      return reduce(RULE_41, 10);
    case 124:
      return reduce(RULE_41, 10);
    case 123:
      return reduce(RULE_41, 10);
    case 156:
      return reduce(RULE_41, 10);
    case 83:
      return reduce(RULE_41, 10);
    case 122:
      return reduce(RULE_41, 10);
    case 165:
      return reduce(RULE_41, 10);
    case 77:
      return reduce(RULE_41, 10);
    case 92:
      return reduce(RULE_41, 10);
    case 164:
      return reduce(RULE_41, 10);
    case 84:
      return reduce(RULE_41, 10);
    case 105:
      return reduce(RULE_41, 10);
    case 177:
      return reduce(RULE_41, 10);
    case 82:
      return reduce(RULE_41, 10);
    case 116:
      return reduce(RULE_41, 10);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto590(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action591(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 9);
    case 137:
      return reduce(RULE_41, 9);
    case 157:
      return reduce(RULE_41, 9);
    case 147:
      return reduce(RULE_41, 9);
    case 129:
      return reduce(RULE_41, 9);
    case 167:
      return reduce(RULE_41, 9);
    case 117:
      return reduce(RULE_41, 9);
    case 75:
      return reduce(RULE_41, 9);
    case 80:
      return reduce(RULE_41, 9);
    case 143:
      return reduce(RULE_41, 9);
    case 112:
      return reduce(RULE_41, 9);
    case 121:
      return reduce(RULE_41, 9);
    case 124:
      return reduce(RULE_41, 9);
    case 123:
      return reduce(RULE_41, 9);
    case 156:
      return reduce(RULE_41, 9);
    case 83:
      return reduce(RULE_41, 9);
    case 122:
      return reduce(RULE_41, 9);
    case 165:
      return reduce(RULE_41, 9);
    case 77:
      return reduce(RULE_41, 9);
    case 92:
      return reduce(RULE_41, 9);
    case 164:
      return reduce(RULE_41, 9);
    case 84:
      return reduce(RULE_41, 9);
    case 105:
      return reduce(RULE_41, 9);
    case 177:
      return reduce(RULE_41, 9);
    case 82:
      return reduce(RULE_41, 9);
    case 116:
      return reduce(RULE_41, 9);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action592(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 14);
    case 137:
      return reduce(RULE_41, 14);
    case 157:
      return reduce(RULE_41, 14);
    case 147:
      return reduce(RULE_41, 14);
    case 129:
      return reduce(RULE_41, 14);
    case 167:
      return reduce(RULE_41, 14);
    case 117:
      return reduce(RULE_41, 14);
    case 75:
      return reduce(RULE_41, 14);
    case 80:
      return reduce(RULE_41, 14);
    case 143:
      return reduce(RULE_41, 14);
    case 112:
      return reduce(RULE_41, 14);
    case 121:
      return reduce(RULE_41, 14);
    case 124:
      return reduce(RULE_41, 14);
    case 123:
      return reduce(RULE_41, 14);
    case 156:
      return reduce(RULE_41, 14);
    case 83:
      return reduce(RULE_41, 14);
    case 122:
      return reduce(RULE_41, 14);
    case 165:
      return reduce(RULE_41, 14);
    case 77:
      return reduce(RULE_41, 14);
    case 92:
      return reduce(RULE_41, 14);
    case 164:
      return reduce(RULE_41, 14);
    case 84:
      return reduce(RULE_41, 14);
    case 105:
      return reduce(RULE_41, 14);
    case 177:
      return reduce(RULE_41, 14);
    case 82:
      return reduce(RULE_41, 14);
    case 116:
      return reduce(RULE_41, 14);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto592(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action593(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 13);
    case 137:
      return reduce(RULE_41, 13);
    case 157:
      return reduce(RULE_41, 13);
    case 147:
      return reduce(RULE_41, 13);
    case 129:
      return reduce(RULE_41, 13);
    case 167:
      return reduce(RULE_41, 13);
    case 117:
      return reduce(RULE_41, 13);
    case 75:
      return reduce(RULE_41, 13);
    case 80:
      return reduce(RULE_41, 13);
    case 143:
      return reduce(RULE_41, 13);
    case 112:
      return reduce(RULE_41, 13);
    case 121:
      return reduce(RULE_41, 13);
    case 124:
      return reduce(RULE_41, 13);
    case 123:
      return reduce(RULE_41, 13);
    case 156:
      return reduce(RULE_41, 13);
    case 83:
      return reduce(RULE_41, 13);
    case 122:
      return reduce(RULE_41, 13);
    case 165:
      return reduce(RULE_41, 13);
    case 77:
      return reduce(RULE_41, 13);
    case 92:
      return reduce(RULE_41, 13);
    case 164:
      return reduce(RULE_41, 13);
    case 84:
      return reduce(RULE_41, 13);
    case 105:
      return reduce(RULE_41, 13);
    case 177:
      return reduce(RULE_41, 13);
    case 82:
      return reduce(RULE_41, 13);
    case 116:
      return reduce(RULE_41, 13);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action594(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 6);
    case 137:
      return reduce(RULE_41, 6);
    case 157:
      return reduce(RULE_41, 6);
    case 147:
      return reduce(RULE_41, 6);
    case 129:
      return reduce(RULE_41, 6);
    case 167:
      return reduce(RULE_41, 6);
    case 117:
      return reduce(RULE_41, 6);
    case 75:
      return reduce(RULE_41, 6);
    case 80:
      return reduce(RULE_41, 6);
    case 143:
      return reduce(RULE_41, 6);
    case 112:
      return reduce(RULE_41, 6);
    case 121:
      return reduce(RULE_41, 6);
    case 124:
      return reduce(RULE_41, 6);
    case 123:
      return reduce(RULE_41, 6);
    case 156:
      return reduce(RULE_41, 6);
    case 83:
      return reduce(RULE_41, 6);
    case 122:
      return reduce(RULE_41, 6);
    case 165:
      return reduce(RULE_41, 6);
    case 77:
      return reduce(RULE_41, 6);
    case 92:
      return reduce(RULE_41, 6);
    case 164:
      return reduce(RULE_41, 6);
    case 84:
      return reduce(RULE_41, 6);
    case 105:
      return reduce(RULE_41, 6);
    case 177:
      return reduce(RULE_41, 6);
    case 82:
      return reduce(RULE_41, 6);
    case 116:
      return reduce(RULE_41, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto594(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action595(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 5);
    case 137:
      return reduce(RULE_41, 5);
    case 157:
      return reduce(RULE_41, 5);
    case 147:
      return reduce(RULE_41, 5);
    case 129:
      return reduce(RULE_41, 5);
    case 167:
      return reduce(RULE_41, 5);
    case 117:
      return reduce(RULE_41, 5);
    case 75:
      return reduce(RULE_41, 5);
    case 80:
      return reduce(RULE_41, 5);
    case 143:
      return reduce(RULE_41, 5);
    case 112:
      return reduce(RULE_41, 5);
    case 121:
      return reduce(RULE_41, 5);
    case 124:
      return reduce(RULE_41, 5);
    case 123:
      return reduce(RULE_41, 5);
    case 156:
      return reduce(RULE_41, 5);
    case 83:
      return reduce(RULE_41, 5);
    case 122:
      return reduce(RULE_41, 5);
    case 165:
      return reduce(RULE_41, 5);
    case 77:
      return reduce(RULE_41, 5);
    case 92:
      return reduce(RULE_41, 5);
    case 164:
      return reduce(RULE_41, 5);
    case 84:
      return reduce(RULE_41, 5);
    case 105:
      return reduce(RULE_41, 5);
    case 177:
      return reduce(RULE_41, 5);
    case 82:
      return reduce(RULE_41, 5);
    case 116:
      return reduce(RULE_41, 5);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action596(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 2);
    case 137:
      return reduce(RULE_41, 2);
    case 157:
      return reduce(RULE_41, 2);
    case 147:
      return reduce(RULE_41, 2);
    case 129:
      return reduce(RULE_41, 2);
    case 167:
      return reduce(RULE_41, 2);
    case 117:
      return reduce(RULE_41, 2);
    case 75:
      return reduce(RULE_41, 2);
    case 80:
      return reduce(RULE_41, 2);
    case 143:
      return reduce(RULE_41, 2);
    case 112:
      return reduce(RULE_41, 2);
    case 121:
      return reduce(RULE_41, 2);
    case 124:
      return reduce(RULE_41, 2);
    case 123:
      return reduce(RULE_41, 2);
    case 156:
      return reduce(RULE_41, 2);
    case 83:
      return reduce(RULE_41, 2);
    case 122:
      return reduce(RULE_41, 2);
    case 165:
      return reduce(RULE_41, 2);
    case 77:
      return reduce(RULE_41, 2);
    case 92:
      return reduce(RULE_41, 2);
    case 164:
      return reduce(RULE_41, 2);
    case 84:
      return reduce(RULE_41, 2);
    case 105:
      return reduce(RULE_41, 2);
    case 177:
      return reduce(RULE_41, 2);
    case 82:
      return reduce(RULE_41, 2);
    case 116:
      return reduce(RULE_41, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, PERCENT, NATIVE_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, COLON, UNBACKED_KEYWORD, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto596(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action597(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 152:
      stateStack.addFirst(402);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_41, 1);
    case 137:
      return reduce(RULE_41, 1);
    case 157:
      return reduce(RULE_41, 1);
    case 147:
      return reduce(RULE_41, 1);
    case 129:
      return reduce(RULE_41, 1);
    case 167:
      return reduce(RULE_41, 1);
    case 117:
      return reduce(RULE_41, 1);
    case 75:
      return reduce(RULE_41, 1);
    case 80:
      return reduce(RULE_41, 1);
    case 143:
      return reduce(RULE_41, 1);
    case 112:
      return reduce(RULE_41, 1);
    case 121:
      return reduce(RULE_41, 1);
    case 124:
      return reduce(RULE_41, 1);
    case 123:
      return reduce(RULE_41, 1);
    case 156:
      return reduce(RULE_41, 1);
    case 83:
      return reduce(RULE_41, 1);
    case 122:
      return reduce(RULE_41, 1);
    case 165:
      return reduce(RULE_41, 1);
    case 77:
      return reduce(RULE_41, 1);
    case 92:
      return reduce(RULE_41, 1);
    case 164:
      return reduce(RULE_41, 1);
    case 84:
      return reduce(RULE_41, 1);
    case 105:
      return reduce(RULE_41, 1);
    case 177:
      return reduce(RULE_41, 1);
    case 82:
      return reduce(RULE_41, 1);
    case 116:
      return reduce(RULE_41, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, QUESTION_MARK_COLON, STATIC_KEYWORD, SINCE_SPECIFIER, INSTANCEOF_KEYWORD, CARET, FINAL_KEYWORD, PIPE, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, AMPERSAND, DOUBLE_PIPE, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, COLON, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action598(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_42, 2);
    case 137:
      return reduce(RULE_42, 2);
    case 124:
      return reduce(RULE_42, 2);
    case 157:
      return reduce(RULE_42, 2);
    case 123:
      return reduce(RULE_42, 2);
    case 156:
      return reduce(RULE_42, 2);
    case 122:
      return reduce(RULE_42, 2);
    case 165:
      return reduce(RULE_42, 2);
    case 147:
      return reduce(RULE_42, 2);
    case 129:
      return reduce(RULE_42, 2);
    case 167:
      return reduce(RULE_42, 2);
    case 164:
      return reduce(RULE_42, 2);
    case 75:
      return reduce(RULE_42, 2);
    case 105:
      return reduce(RULE_42, 2);
    case 82:
      return reduce(RULE_42, 2);
    case 177:
      return reduce(RULE_42, 2);
    case 143:
      return reduce(RULE_42, 2);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action599(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_42, 3);
    case 137:
      return reduce(RULE_42, 3);
    case 124:
      return reduce(RULE_42, 3);
    case 157:
      return reduce(RULE_42, 3);
    case 123:
      return reduce(RULE_42, 3);
    case 156:
      return reduce(RULE_42, 3);
    case 122:
      return reduce(RULE_42, 3);
    case 165:
      return reduce(RULE_42, 3);
    case 147:
      return reduce(RULE_42, 3);
    case 129:
      return reduce(RULE_42, 3);
    case 167:
      return reduce(RULE_42, 3);
    case 164:
      return reduce(RULE_42, 3);
    case 75:
      return reduce(RULE_42, 3);
    case 105:
      return reduce(RULE_42, 3);
    case 82:
      return reduce(RULE_42, 3);
    case 177:
      return reduce(RULE_42, 3);
    case 143:
      return reduce(RULE_42, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action600(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(656);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action601(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto601(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 657;
    case 48: return 221;
    case 66: return 139;
    case 64: return 140;
    case 55: return 222;
    case 59: return 223;
    case 30: return 347;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    case 54: return 658;
    default: return -1;
    }
  }

  private final boolean action602(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_53, 0);
    case 149:
      return reduce(RULE_53, 0);
    case 137:
      return reduce(RULE_53, 0);
    case 110:
      return reduce(RULE_53, 0);
    case 157:
      return reduce(RULE_53, 0);
    case 96:
      return reduce(RULE_53, 0);
    case 103:
      return reduce(RULE_53, 0);
    case 106:
      return reduce(RULE_53, 0);
    case 147:
      return reduce(RULE_53, 0);
    case 129:
      return reduce(RULE_53, 0);
    case 117:
      return reduce(RULE_53, 0);
    case 167:
      return reduce(RULE_53, 0);
    case 119:
      return reduce(RULE_53, 0);
    case 75:
      return reduce(RULE_53, 0);
    case 100:
      return reduce(RULE_53, 0);
    case 152:
      return reduce(RULE_53, 0);
    case 80:
      return reduce(RULE_53, 0);
    case 94:
      return reduce(RULE_53, 0);
    case 107:
      return reduce(RULE_53, 0);
    case 143:
      return reduce(RULE_53, 0);
    case 98:
      return reduce(RULE_53, 0);
    case 112:
      return reduce(RULE_53, 0);
    case 86:
      return reduce(RULE_53, 0);
    case 120:
      return reduce(RULE_53, 0);
    case 121:
      return reduce(RULE_53, 0);
    case 124:
      return reduce(RULE_53, 0);
    case 123:
      return reduce(RULE_53, 0);
    case 156:
      return reduce(RULE_53, 0);
    case 83:
      return reduce(RULE_53, 0);
    case 99:
      return reduce(RULE_53, 0);
    case 122:
      return reduce(RULE_53, 0);
    case 125:
      return reduce(RULE_53, 0);
    case 165:
      return reduce(RULE_53, 0);
    case 77:
      return reduce(RULE_53, 0);
    case 108:
      return reduce(RULE_53, 0);
    case 92:
      return reduce(RULE_53, 0);
    case 164:
      return reduce(RULE_53, 0);
    case 84:
      return reduce(RULE_53, 0);
    case 105:
      return reduce(RULE_53, 0);
    case 104:
      return reduce(RULE_53, 0);
    case 114:
      return reduce(RULE_53, 0);
    case 82:
      return reduce(RULE_53, 0);
    case 177:
      return reduce(RULE_53, 0);
    case 90:
      return reduce(RULE_53, 0);
    case 116:
      return reduce(RULE_53, 0);
    case 118:
      return reduce(RULE_53, 0);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action603(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto603(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 659;
    case 67: return 230;
    case 28: return 345;
    case 71: return 137;
    case 63: return 660;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action604(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    case 148:
      stateStack.addFirst(123);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE, IF_KEYWORD});
    }
  }

  private final int goto604(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 40: return 661;
    case 33: return 662;
    default: return -1;
    }
  }

  private final boolean action605(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_56, 1);
    case 139:
      return reduce(RULE_56, 1);
    case 175:
      return reduce(RULE_56, 1);
    case 142:
      return reduce(RULE_56, 1);
    case 155:
      return reduce(RULE_56, 1);
    case 106:
      return reduce(RULE_56, 1);
    case 160:
      return reduce(RULE_56, 1);
    case 130:
      return reduce(RULE_56, 1);
    case 74:
      return reduce(RULE_56, 1);
    case 102:
      return reduce(RULE_56, 1);
    case 153:
      return reduce(RULE_56, 1);
    case 127:
      return reduce(RULE_56, 1);
    case 174:
      return reduce(RULE_56, 1);
    case 166:
      return reduce(RULE_56, 1);
    case 172:
      return reduce(RULE_56, 1);
    case 107:
      return reduce(RULE_56, 1);
    case 98:
      return reduce(RULE_56, 1);
    case 73:
      return reduce(RULE_56, 1);
    case 176:
      return reduce(RULE_56, 1);
    case 132:
      return reduce(RULE_56, 1);
    case 169:
      return reduce(RULE_56, 1);
    case 124:
      return reduce(RULE_56, 1);
    case 133:
      return reduce(RULE_56, 1);
    case 76:
      return reduce(RULE_56, 1);
    case 108:
      return reduce(RULE_56, 1);
    case 145:
      return reduce(RULE_56, 1);
    case 105:
      return reduce(RULE_56, 1);
    case 179:
      return reduce(RULE_56, 1);
    case 72:
      return reduce(RULE_56, 1);
    case 158:
      return reduce(RULE_56, 1);
    case 116:
      return reduce(RULE_56, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, FLOATING_LITERAL, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, SEMICOLON, CAST_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, MINUS, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action606(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(663);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(664);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 122:
      return reduce(RULE_66, 5);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RPAREN, STRING_LITERAL, FLOAT_KEYWORD, UNDERSCORE, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto606(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 71: return 137;
    case 43: return 665;
    case 48: return 152;
    case 64: return 140;
    case 66: return 139;
    case 23: return 666;
    case 30: return 247;
    case 65: return 154;
    case 68: return 667;
    case 15: return 668;
    case 14: return 162;
    case 67: return 230;
    case 28: return 476;
    case 13: return 163;
    case 63: return 164;
    case 49: return 87;
    default: return -1;
    }
  }

  private final boolean action607(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(669);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action608(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(670);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final boolean action609(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_67, 0);
    case 132:
      return reduce(RULE_67, 0);
    case 139:
      return reduce(RULE_67, 0);
    case 175:
      return reduce(RULE_67, 0);
    case 155:
      return reduce(RULE_67, 0);
    case 106:
      return reduce(RULE_67, 0);
    case 145:
      return reduce(RULE_67, 0);
    case 160:
      return reduce(RULE_67, 0);
    case 130:
      return reduce(RULE_67, 0);
    case 102:
      return reduce(RULE_67, 0);
    case 153:
      return reduce(RULE_67, 0);
    case 174:
      return reduce(RULE_67, 0);
    case 166:
      return reduce(RULE_67, 0);
    case 105:
      return reduce(RULE_67, 0);
    case 179:
      return reduce(RULE_67, 0);
    case 107:
      return reduce(RULE_67, 0);
    case 72:
      return reduce(RULE_67, 0);
    case 116:
      return reduce(RULE_67, 0);
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, HASH, INT_KEYWORD, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final boolean action610(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 123:
      stateStack.addFirst(671);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RSQUARE});
    }
  }

  private final boolean action611(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto611(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 672;
    default: return -1;
    }
  }

  private final boolean action612(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(673);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action613(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_20, 1);
    case 97:
      return reduce(RULE_20, 1);
    case 124:
      return reduce(RULE_20, 1);
    case 111:
      return reduce(RULE_20, 1);
    case 83:
      return reduce(RULE_20, 1);
    case 115:
      return reduce(RULE_20, 1);
    case 96:
      return reduce(RULE_17, 6);
    case 122:
      return reduce(RULE_20, 1);
    case 88:
      return reduce(RULE_20, 1);
    case 101:
      return reduce(RULE_20, 1);
    case 113:
      return reduce(RULE_20, 1);
    case 95:
      return reduce(RULE_20, 1);
    case 106:
      return reduce(RULE_17, 6);
    case 81:
      return reduce(RULE_20, 1);
    case 109:
      return reduce(RULE_20, 1);
    case 78:
      return reduce(RULE_20, 1);
    case 91:
      return reduce(RULE_20, 1);
    case 107:
      return reduce(RULE_17, 6);
    case 118:
      return reduce(RULE_17, 6);
    default: throw new BadTokenException(token, new Object[] {STAR_EQUALS, EQUALS, SEMICOLON, PERCENT_EQUALS, COMMA, PLUS_EQUALS, DOT, RPAREN, DOUBLE_LANGLE_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, LPAREN, CARET_EQUALS, MINUS_EQUALS, DOUBLE_PERCENT_EQUALS, AMPERSAND_EQUALS, LSQUARE, QUESTION_MARK_DOT});
    }
  }

  private final boolean action614(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(674);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action615(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      return reduce(RULE_48, 2);
    case 124:
      return reduce(RULE_48, 2);
    case 83:
      return reduce(RULE_48, 2);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action616(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 97:
      return reduce(RULE_48, 3);
    case 124:
      return reduce(RULE_48, 3);
    case 83:
      return reduce(RULE_48, 3);
    default: throw new BadTokenException(token, new Object[] {EQUALS, SEMICOLON, COMMA});
    }
  }

  private final boolean action617(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(675);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action618(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto618(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 676;
    default: return -1;
    }
  }

  private final boolean action619(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, LBRACE, SHORT_KEYWORD, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto619(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 677;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action620(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(678);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(619);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action621(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_20, 2);
    case 97:
      return reduce(RULE_20, 2);
    case 124:
      return reduce(RULE_20, 2);
    case 111:
      return reduce(RULE_20, 2);
    case 83:
      return reduce(RULE_20, 2);
    case 115:
      return reduce(RULE_20, 2);
    case 96:
      return reduce(RULE_17, 7);
    case 122:
      return reduce(RULE_20, 2);
    case 88:
      return reduce(RULE_20, 2);
    case 101:
      return reduce(RULE_20, 2);
    case 113:
      return reduce(RULE_20, 2);
    case 95:
      return reduce(RULE_20, 2);
    case 106:
      return reduce(RULE_17, 7);
    case 81:
      return reduce(RULE_20, 2);
    case 109:
      return reduce(RULE_20, 2);
    case 78:
      return reduce(RULE_20, 2);
    case 91:
      return reduce(RULE_20, 2);
    case 107:
      return reduce(RULE_17, 7);
    case 118:
      return reduce(RULE_17, 7);
    default: throw new BadTokenException(token, new Object[] {STAR_EQUALS, EQUALS, SEMICOLON, PERCENT_EQUALS, COMMA, PLUS_EQUALS, DOT, RPAREN, DOUBLE_LANGLE_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, LPAREN, CARET_EQUALS, MINUS_EQUALS, DOUBLE_PERCENT_EQUALS, AMPERSAND_EQUALS, LSQUARE, QUESTION_MARK_DOT});
    }
  }

  private final boolean action622(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(679);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action623(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 0);
    case 173:
      return reduce(RULE_59, 0);
    case 106:
      return reduce(RULE_59, 0);
    case 153:
      return reduce(RULE_59, 0);
    case 102:
      return reduce(RULE_59, 0);
    case 74:
      return reduce(RULE_59, 0);
    case 167:
      return reduce(RULE_59, 0);
    case 163:
      return reduce(RULE_59, 0);
    case 174:
      return reduce(RULE_59, 0);
    case 172:
      return reduce(RULE_59, 0);
    case 89:
      return reduce(RULE_59, 0);
    case 170:
      return reduce(RULE_59, 0);
    case 98:
      return reduce(RULE_59, 0);
    case 73:
      return reduce(RULE_59, 0);
    case 176:
      return reduce(RULE_59, 0);
    case 132:
      return reduce(RULE_59, 0);
    case 169:
      return reduce(RULE_59, 0);
    case 133:
      return reduce(RULE_59, 0);
    case 148:
      return reduce(RULE_59, 0);
    case 128:
      return reduce(RULE_59, 0);
    case 108:
      return reduce(RULE_59, 0);
    case 93:
      return reduce(RULE_59, 0);
    case 146:
      return reduce(RULE_59, 0);
    case 158:
      return reduce(RULE_59, 0);
    case 116:
      return reduce(RULE_59, 0);
    case 159:
      return reduce(RULE_59, 0);
    case 149:
      return reduce(RULE_59, 0);
    case 139:
      return reduce(RULE_59, 0);
    case 175:
      return reduce(RULE_59, 0);
    case 157:
      return reduce(RULE_59, 0);
    case 155:
      return reduce(RULE_59, 0);
    case 160:
      return reduce(RULE_59, 0);
    case 130:
      return reduce(RULE_59, 0);
    case 129:
      return reduce(RULE_59, 0);
    case 138:
      return reduce(RULE_59, 0);
    case 75:
      return reduce(RULE_59, 0);
    case 127:
      return reduce(RULE_59, 0);
    case 166:
      return reduce(RULE_59, 0);
    case 107:
      return reduce(RULE_59, 0);
    case 143:
      return reduce(RULE_59, 0);
    case 121:
      return reduce(RULE_59, 0);
    case 124:
      return reduce(RULE_59, 0);
    case 156:
      return reduce(RULE_59, 0);
    case 131:
      return reduce(RULE_59, 0);
    case 76:
      return reduce(RULE_59, 0);
    case 145:
      return reduce(RULE_59, 0);
    case 168:
      return reduce(RULE_59, 0);
    case 181:
      return reduce(RULE_59, 0);
    case 164:
      return reduce(RULE_59, 0);
    case 105:
      return reduce(RULE_59, 0);
    case 179:
      return reduce(RULE_59, 0);
    case 72:
      return reduce(RULE_59, 0);
    case 177:
      return reduce(RULE_59, 0);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action624(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto624(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 680;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action625(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 7);
    case 173:
      return reduce(RULE_59, 7);
    case 106:
      return reduce(RULE_59, 7);
    case 153:
      return reduce(RULE_59, 7);
    case 102:
      return reduce(RULE_59, 7);
    case 74:
      return reduce(RULE_59, 7);
    case 167:
      return reduce(RULE_59, 7);
    case 163:
      return reduce(RULE_59, 7);
    case 174:
      return reduce(RULE_59, 7);
    case 172:
      return reduce(RULE_59, 7);
    case 89:
      return reduce(RULE_59, 7);
    case 170:
      return reduce(RULE_59, 7);
    case 98:
      return reduce(RULE_59, 7);
    case 73:
      return reduce(RULE_59, 7);
    case 176:
      return reduce(RULE_59, 7);
    case 132:
      return reduce(RULE_59, 7);
    case 169:
      return reduce(RULE_59, 7);
    case 133:
      return reduce(RULE_59, 7);
    case 148:
      return reduce(RULE_59, 7);
    case 128:
      return reduce(RULE_59, 7);
    case 108:
      return reduce(RULE_59, 7);
    case 93:
      return reduce(RULE_59, 7);
    case 146:
      return reduce(RULE_59, 7);
    case 158:
      return reduce(RULE_59, 7);
    case 116:
      return reduce(RULE_59, 7);
    case 159:
      return reduce(RULE_59, 7);
    case 149:
      return reduce(RULE_59, 7);
    case 139:
      return reduce(RULE_59, 7);
    case 175:
      return reduce(RULE_59, 7);
    case 157:
      return reduce(RULE_59, 7);
    case 155:
      return reduce(RULE_59, 7);
    case 160:
      return reduce(RULE_59, 7);
    case 130:
      return reduce(RULE_59, 7);
    case 129:
      return reduce(RULE_59, 7);
    case 138:
      return reduce(RULE_59, 7);
    case 75:
      return reduce(RULE_59, 7);
    case 127:
      return reduce(RULE_59, 7);
    case 166:
      return reduce(RULE_59, 7);
    case 107:
      return reduce(RULE_59, 7);
    case 143:
      return reduce(RULE_59, 7);
    case 121:
      return reduce(RULE_59, 7);
    case 124:
      return reduce(RULE_59, 7);
    case 156:
      return reduce(RULE_59, 7);
    case 131:
      return reduce(RULE_59, 7);
    case 76:
      return reduce(RULE_59, 7);
    case 145:
      return reduce(RULE_59, 7);
    case 168:
      return reduce(RULE_59, 7);
    case 181:
      return reduce(RULE_59, 7);
    case 164:
      return reduce(RULE_59, 7);
    case 105:
      return reduce(RULE_59, 7);
    case 179:
      return reduce(RULE_59, 7);
    case 72:
      return reduce(RULE_59, 7);
    case 177:
      return reduce(RULE_59, 7);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action626(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto626(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 681;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action627(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 2);
    case 173:
      return reduce(RULE_59, 2);
    case 106:
      return reduce(RULE_59, 2);
    case 153:
      return reduce(RULE_59, 2);
    case 102:
      return reduce(RULE_59, 2);
    case 74:
      return reduce(RULE_59, 2);
    case 167:
      return reduce(RULE_59, 2);
    case 163:
      return reduce(RULE_59, 2);
    case 174:
      return reduce(RULE_59, 2);
    case 172:
      return reduce(RULE_59, 2);
    case 89:
      return reduce(RULE_59, 2);
    case 170:
      return reduce(RULE_59, 2);
    case 98:
      return reduce(RULE_59, 2);
    case 73:
      return reduce(RULE_59, 2);
    case 176:
      return reduce(RULE_59, 2);
    case 132:
      return reduce(RULE_59, 2);
    case 169:
      return reduce(RULE_59, 2);
    case 133:
      return reduce(RULE_59, 2);
    case 148:
      return reduce(RULE_59, 2);
    case 128:
      return reduce(RULE_59, 2);
    case 108:
      return reduce(RULE_59, 2);
    case 93:
      return reduce(RULE_59, 2);
    case 146:
      return reduce(RULE_59, 2);
    case 158:
      return reduce(RULE_59, 2);
    case 116:
      return reduce(RULE_59, 2);
    case 159:
      return reduce(RULE_59, 2);
    case 149:
      return reduce(RULE_59, 2);
    case 139:
      return reduce(RULE_59, 2);
    case 175:
      return reduce(RULE_59, 2);
    case 157:
      return reduce(RULE_59, 2);
    case 155:
      return reduce(RULE_59, 2);
    case 160:
      return reduce(RULE_59, 2);
    case 130:
      return reduce(RULE_59, 2);
    case 129:
      return reduce(RULE_59, 2);
    case 138:
      return reduce(RULE_59, 2);
    case 75:
      return reduce(RULE_59, 2);
    case 127:
      return reduce(RULE_59, 2);
    case 166:
      return reduce(RULE_59, 2);
    case 107:
      return reduce(RULE_59, 2);
    case 143:
      return reduce(RULE_59, 2);
    case 121:
      return reduce(RULE_59, 2);
    case 124:
      return reduce(RULE_59, 2);
    case 156:
      return reduce(RULE_59, 2);
    case 131:
      return reduce(RULE_59, 2);
    case 76:
      return reduce(RULE_59, 2);
    case 145:
      return reduce(RULE_59, 2);
    case 168:
      return reduce(RULE_59, 2);
    case 181:
      return reduce(RULE_59, 2);
    case 164:
      return reduce(RULE_59, 2);
    case 105:
      return reduce(RULE_59, 2);
    case 179:
      return reduce(RULE_59, 2);
    case 72:
      return reduce(RULE_59, 2);
    case 177:
      return reduce(RULE_59, 2);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action628(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto628(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 682;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action629(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 11);
    case 173:
      return reduce(RULE_59, 11);
    case 106:
      return reduce(RULE_59, 11);
    case 153:
      return reduce(RULE_59, 11);
    case 102:
      return reduce(RULE_59, 11);
    case 74:
      return reduce(RULE_59, 11);
    case 167:
      return reduce(RULE_59, 11);
    case 163:
      return reduce(RULE_59, 11);
    case 174:
      return reduce(RULE_59, 11);
    case 172:
      return reduce(RULE_59, 11);
    case 89:
      return reduce(RULE_59, 11);
    case 170:
      return reduce(RULE_59, 11);
    case 98:
      return reduce(RULE_59, 11);
    case 73:
      return reduce(RULE_59, 11);
    case 176:
      return reduce(RULE_59, 11);
    case 132:
      return reduce(RULE_59, 11);
    case 169:
      return reduce(RULE_59, 11);
    case 133:
      return reduce(RULE_59, 11);
    case 148:
      return reduce(RULE_59, 11);
    case 128:
      return reduce(RULE_59, 11);
    case 108:
      return reduce(RULE_59, 11);
    case 93:
      return reduce(RULE_59, 11);
    case 146:
      return reduce(RULE_59, 11);
    case 158:
      return reduce(RULE_59, 11);
    case 116:
      return reduce(RULE_59, 11);
    case 159:
      return reduce(RULE_59, 11);
    case 149:
      return reduce(RULE_59, 11);
    case 139:
      return reduce(RULE_59, 11);
    case 175:
      return reduce(RULE_59, 11);
    case 157:
      return reduce(RULE_59, 11);
    case 155:
      return reduce(RULE_59, 11);
    case 160:
      return reduce(RULE_59, 11);
    case 130:
      return reduce(RULE_59, 11);
    case 129:
      return reduce(RULE_59, 11);
    case 138:
      return reduce(RULE_59, 11);
    case 75:
      return reduce(RULE_59, 11);
    case 127:
      return reduce(RULE_59, 11);
    case 166:
      return reduce(RULE_59, 11);
    case 107:
      return reduce(RULE_59, 11);
    case 143:
      return reduce(RULE_59, 11);
    case 121:
      return reduce(RULE_59, 11);
    case 124:
      return reduce(RULE_59, 11);
    case 156:
      return reduce(RULE_59, 11);
    case 131:
      return reduce(RULE_59, 11);
    case 76:
      return reduce(RULE_59, 11);
    case 145:
      return reduce(RULE_59, 11);
    case 168:
      return reduce(RULE_59, 11);
    case 181:
      return reduce(RULE_59, 11);
    case 164:
      return reduce(RULE_59, 11);
    case 105:
      return reduce(RULE_59, 11);
    case 179:
      return reduce(RULE_59, 11);
    case 72:
      return reduce(RULE_59, 11);
    case 177:
      return reduce(RULE_59, 11);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action630(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 126:
      return reduce(RULE_20, 0);
    case 97:
      return reduce(RULE_20, 0);
    case 124:
      return reduce(RULE_20, 0);
    case 111:
      return reduce(RULE_20, 0);
    case 83:
      return reduce(RULE_20, 0);
    case 115:
      return reduce(RULE_20, 0);
    case 96:
      return reduce(RULE_17, 5);
    case 122:
      return reduce(RULE_20, 0);
    case 88:
      return reduce(RULE_20, 0);
    case 101:
      return reduce(RULE_20, 0);
    case 113:
      return reduce(RULE_20, 0);
    case 95:
      return reduce(RULE_20, 0);
    case 106:
      return reduce(RULE_17, 5);
    case 81:
      return reduce(RULE_20, 0);
    case 109:
      return reduce(RULE_20, 0);
    case 78:
      return reduce(RULE_20, 0);
    case 91:
      return reduce(RULE_20, 0);
    case 107:
      return reduce(RULE_17, 5);
    case 118:
      return reduce(RULE_17, 5);
    default: throw new BadTokenException(token, new Object[] {STAR_EQUALS, EQUALS, SEMICOLON, PERCENT_EQUALS, COMMA, PLUS_EQUALS, DOT, RPAREN, DOUBLE_LANGLE_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, LPAREN, CARET_EQUALS, MINUS_EQUALS, DOUBLE_PERCENT_EQUALS, AMPERSAND_EQUALS, LSQUARE, QUESTION_MARK_DOT});
    }
  }

  private final boolean action631(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 28);
    case 137:
      return reduce(RULE_9, 28);
    case 110:
      return reduce(RULE_9, 28);
    case 79:
      return reduce(RULE_9, 28);
    case 106:
      return reduce(RULE_9, 28);
    case 117:
      return reduce(RULE_9, 28);
    case 102:
      return reduce(RULE_9, 28);
    case 167:
      return reduce(RULE_9, 28);
    case 152:
      return reduce(RULE_9, 28);
    case 94:
      return reduce(RULE_9, 28);
    case 80:
      return reduce(RULE_9, 28);
    case 98:
      return reduce(RULE_9, 28);
    case 171:
      return reduce(RULE_9, 28);
    case 86:
      return reduce(RULE_9, 28);
    case 83:
      return reduce(RULE_9, 28);
    case 122:
      return reduce(RULE_9, 28);
    case 108:
      return reduce(RULE_9, 28);
    case 92:
      return reduce(RULE_9, 28);
    case 128:
      return reduce(RULE_9, 28);
    case 104:
      return reduce(RULE_9, 28);
    case 82:
      return reduce(RULE_9, 28);
    case 116:
      return reduce(RULE_9, 28);
    case 85:
      return reduce(RULE_9, 28);
    case 149:
      return reduce(RULE_9, 28);
    case 157:
      return reduce(RULE_9, 28);
    case 103:
      return reduce(RULE_9, 28);
    case 147:
      return reduce(RULE_9, 28);
    case 129:
      return reduce(RULE_9, 28);
    case 119:
      return reduce(RULE_9, 28);
    case 75:
      return reduce(RULE_9, 28);
    case 100:
      return reduce(RULE_9, 28);
    case 107:
      return reduce(RULE_9, 28);
    case 143:
      return reduce(RULE_9, 28);
    case 112:
      return reduce(RULE_9, 28);
    case 120:
      return reduce(RULE_9, 28);
    case 121:
      return reduce(RULE_9, 28);
    case 124:
      return reduce(RULE_9, 28);
    case 156:
      return reduce(RULE_9, 28);
    case 123:
      return reduce(RULE_9, 28);
    case 99:
      return reduce(RULE_9, 28);
    case 125:
      return reduce(RULE_9, 28);
    case 165:
      return reduce(RULE_9, 28);
    case 77:
      return reduce(RULE_9, 28);
    case 164:
      return reduce(RULE_9, 28);
    case 84:
      return reduce(RULE_9, 28);
    case 105:
      return reduce(RULE_9, 28);
    case 114:
      return reduce(RULE_9, 28);
    case 72:
      return reduce(RULE_9, 28);
    case 177:
      return reduce(RULE_9, 28);
    case 90:
      return reduce(RULE_9, 28);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action632(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(683);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action633(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto633(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 684;
    default: return -1;
    }
  }

  private final boolean action634(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 180:
      stateStack.addFirst(208);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, VOID_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto634(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 47: return 685;
    case 28: return 84;
    case 48: return 210;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action635(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto635(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 686;
    default: return -1;
    }
  }

  private final boolean action636(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_51, 0);
    case 137:
      return reduce(RULE_51, 0);
    case 139:
      return reduce(RULE_51, 0);
    case 175:
      return reduce(RULE_51, 0);
    case 157:
      return reduce(RULE_51, 0);
    case 155:
      return reduce(RULE_51, 0);
    case 106:
      return reduce(RULE_51, 0);
    case 160:
      return reduce(RULE_51, 0);
    case 130:
      return reduce(RULE_51, 0);
    case 129:
      return reduce(RULE_51, 0);
    case 167:
      return reduce(RULE_51, 0);
    case 102:
      return reduce(RULE_51, 0);
    case 153:
      return reduce(RULE_51, 0);
    case 75:
      return reduce(RULE_51, 0);
    case 174:
      return reduce(RULE_51, 0);
    case 180:
      return reduce(RULE_51, 0);
    case 166:
      return reduce(RULE_51, 0);
    case 107:
      return reduce(RULE_51, 0);
    case 143:
      return reduce(RULE_51, 0);
    case 176:
      return reduce(RULE_51, 0);
    case 132:
      return reduce(RULE_51, 0);
    case 121:
      return reduce(RULE_51, 0);
    case 156:
      return reduce(RULE_51, 0);
    case 145:
      return reduce(RULE_51, 0);
    case 162:
      return reduce(RULE_51, 0);
    case 164:
      return reduce(RULE_51, 0);
    case 105:
      return reduce(RULE_51, 0);
    case 179:
      return reduce(RULE_51, 0);
    case 72:
      return reduce(RULE_51, 0);
    case 177:
      return reduce(RULE_51, 0);
    case 116:
      return reduce(RULE_51, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, HASH, STATIC_KEYWORD, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final boolean action637(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(687);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto637(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 688;
    default: return -1;
    }
  }

  private final boolean action638(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(689);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action639(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(690);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, LBRACE});
    }
  }

  private final int goto639(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 691;
    default: return -1;
    }
  }

  private final boolean action640(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto640(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 61: return 232;
    case 52: return 692;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action641(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(693);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 137:
      return reduce(RULE_1, 0);
    case 165:
      return reduce(RULE_1, 0);
    case 147:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto641(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 15;
    case 27: return 694;
    case 19: return 695;
    default: return -1;
    }
  }

  private final boolean action642(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_49, 1);
    case 137:
      return reduce(RULE_49, 1);
    case 139:
      return reduce(RULE_49, 1);
    case 175:
      return reduce(RULE_49, 1);
    case 157:
      return reduce(RULE_49, 1);
    case 155:
      return reduce(RULE_49, 1);
    case 106:
      return reduce(RULE_49, 1);
    case 160:
      return reduce(RULE_49, 1);
    case 130:
      return reduce(RULE_49, 1);
    case 129:
      return reduce(RULE_49, 1);
    case 167:
      return reduce(RULE_49, 1);
    case 102:
      return reduce(RULE_49, 1);
    case 153:
      return reduce(RULE_49, 1);
    case 75:
      return reduce(RULE_49, 1);
    case 174:
      return reduce(RULE_49, 1);
    case 180:
      return reduce(RULE_49, 1);
    case 166:
      return reduce(RULE_49, 1);
    case 107:
      return reduce(RULE_49, 1);
    case 143:
      return reduce(RULE_49, 1);
    case 176:
      return reduce(RULE_49, 1);
    case 132:
      return reduce(RULE_49, 1);
    case 121:
      return reduce(RULE_49, 1);
    case 156:
      return reduce(RULE_49, 1);
    case 145:
      return reduce(RULE_49, 1);
    case 162:
      return reduce(RULE_49, 1);
    case 164:
      return reduce(RULE_49, 1);
    case 105:
      return reduce(RULE_49, 1);
    case 179:
      return reduce(RULE_49, 1);
    case 72:
      return reduce(RULE_49, 1);
    case 177:
      return reduce(RULE_49, 1);
    case 116:
      return reduce(RULE_49, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, HASH, STATIC_KEYWORD, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final boolean action643(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_65, 4);
    case 137:
      return reduce(RULE_65, 4);
    case 139:
      return reduce(RULE_65, 4);
    case 175:
      return reduce(RULE_65, 4);
    case 157:
      return reduce(RULE_65, 4);
    case 155:
      return reduce(RULE_65, 4);
    case 106:
      return reduce(RULE_65, 4);
    case 160:
      return reduce(RULE_65, 4);
    case 130:
      return reduce(RULE_65, 4);
    case 129:
      return reduce(RULE_65, 4);
    case 167:
      return reduce(RULE_65, 4);
    case 102:
      return reduce(RULE_65, 4);
    case 153:
      return reduce(RULE_65, 4);
    case 75:
      return reduce(RULE_65, 4);
    case 174:
      return reduce(RULE_65, 4);
    case 180:
      return reduce(RULE_65, 4);
    case 166:
      return reduce(RULE_65, 4);
    case 107:
      return reduce(RULE_65, 4);
    case 143:
      return reduce(RULE_65, 4);
    case 176:
      return reduce(RULE_65, 4);
    case 132:
      return reduce(RULE_65, 4);
    case 121:
      return reduce(RULE_65, 4);
    case 156:
      return reduce(RULE_65, 4);
    case 145:
      return reduce(RULE_65, 4);
    case 162:
      return reduce(RULE_65, 4);
    case 164:
      return reduce(RULE_65, 4);
    case 105:
      return reduce(RULE_65, 4);
    case 179:
      return reduce(RULE_65, 4);
    case 72:
      return reduce(RULE_65, 4);
    case 177:
      return reduce(RULE_65, 4);
    case 116:
      return reduce(RULE_65, 4);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, HASH, STATIC_KEYWORD, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final boolean action644(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_65, 0);
    case 137:
      return reduce(RULE_65, 0);
    case 139:
      return reduce(RULE_65, 0);
    case 175:
      return reduce(RULE_65, 0);
    case 157:
      return reduce(RULE_65, 0);
    case 155:
      return reduce(RULE_65, 0);
    case 106:
      return reduce(RULE_65, 0);
    case 160:
      return reduce(RULE_65, 0);
    case 130:
      return reduce(RULE_65, 0);
    case 129:
      return reduce(RULE_65, 0);
    case 167:
      return reduce(RULE_65, 0);
    case 102:
      return reduce(RULE_65, 0);
    case 153:
      return reduce(RULE_65, 0);
    case 75:
      return reduce(RULE_65, 0);
    case 174:
      return reduce(RULE_65, 0);
    case 180:
      return reduce(RULE_65, 0);
    case 166:
      return reduce(RULE_65, 0);
    case 107:
      return reduce(RULE_65, 0);
    case 143:
      return reduce(RULE_65, 0);
    case 176:
      return reduce(RULE_65, 0);
    case 132:
      return reduce(RULE_65, 0);
    case 121:
      return reduce(RULE_65, 0);
    case 156:
      return reduce(RULE_65, 0);
    case 145:
      return reduce(RULE_65, 0);
    case 162:
      return reduce(RULE_65, 0);
    case 164:
      return reduce(RULE_65, 0);
    case 105:
      return reduce(RULE_65, 0);
    case 179:
      return reduce(RULE_65, 0);
    case 72:
      return reduce(RULE_65, 0);
    case 177:
      return reduce(RULE_65, 0);
    case 116:
      return reduce(RULE_65, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, CONSTRUCTOR_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, HASH, STATIC_KEYWORD, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final boolean action645(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(696);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final boolean action646(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME});
    }
  }

  private final int goto646(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 697;
    default: return -1;
    }
  }

  private final boolean action647(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_50, 2);
    case 124:
      return reduce(RULE_50, 2);
    case 83:
      return reduce(RULE_50, 2);
    case 105:
      return reduce(RULE_50, 2);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE, DOT});
    }
  }

  private final boolean action648(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto648(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 698;
    default: return -1;
    }
  }

  private final boolean action649(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      stateStack.addFirst(699);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(619);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action650(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto650(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 62: return 700;
    case 67: return 230;
    case 28: return 345;
    case 71: return 701;
    case 63: return 233;
    case 48: return 221;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 347;
    case 65: return 225;
    default: return -1;
    }
  }

  private final boolean action651(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto651(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 702;
    case 48: return 221;
    case 66: return 139;
    case 64: return 140;
    case 55: return 222;
    case 59: return 223;
    case 30: return 347;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    case 54: return 703;
    default: return -1;
    }
  }

  private final boolean action652(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto652(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 704;
    case 48: return 221;
    case 66: return 139;
    case 64: return 140;
    case 55: return 222;
    case 59: return 223;
    case 30: return 347;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    case 54: return 705;
    default: return -1;
    }
  }

  private final boolean action653(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 7);
    case 149:
      return reduce(RULE_17, 7);
    case 137:
      return reduce(RULE_17, 7);
    case 110:
      return reduce(RULE_17, 7);
    case 157:
      return reduce(RULE_17, 7);
    case 103:
      return reduce(RULE_17, 7);
    case 96:
      return reduce(RULE_17, 7);
    case 106:
      return reduce(RULE_17, 7);
    case 147:
      return reduce(RULE_17, 7);
    case 129:
      return reduce(RULE_17, 7);
    case 117:
      return reduce(RULE_17, 7);
    case 167:
      return reduce(RULE_17, 7);
    case 119:
      return reduce(RULE_17, 7);
    case 75:
      return reduce(RULE_17, 7);
    case 100:
      return reduce(RULE_17, 7);
    case 152:
      return reduce(RULE_17, 7);
    case 94:
      return reduce(RULE_17, 7);
    case 80:
      return reduce(RULE_17, 7);
    case 107:
      return reduce(RULE_17, 7);
    case 143:
      return reduce(RULE_17, 7);
    case 98:
      return reduce(RULE_17, 7);
    case 112:
      return reduce(RULE_17, 7);
    case 86:
      return reduce(RULE_17, 7);
    case 120:
      return reduce(RULE_17, 7);
    case 121:
      return reduce(RULE_17, 7);
    case 124:
      return reduce(RULE_17, 7);
    case 123:
      return reduce(RULE_17, 7);
    case 156:
      return reduce(RULE_17, 7);
    case 83:
      return reduce(RULE_17, 7);
    case 99:
      return reduce(RULE_17, 7);
    case 122:
      return reduce(RULE_17, 7);
    case 125:
      return reduce(RULE_17, 7);
    case 165:
      return reduce(RULE_17, 7);
    case 77:
      return reduce(RULE_17, 7);
    case 108:
      return reduce(RULE_17, 7);
    case 92:
      return reduce(RULE_17, 7);
    case 164:
      return reduce(RULE_17, 7);
    case 84:
      return reduce(RULE_17, 7);
    case 104:
      return reduce(RULE_17, 7);
    case 105:
      return reduce(RULE_17, 7);
    case 114:
      return reduce(RULE_17, 7);
    case 82:
      return reduce(RULE_17, 7);
    case 177:
      return reduce(RULE_17, 7);
    case 90:
      return reduce(RULE_17, 7);
    case 116:
      return reduce(RULE_17, 7);
    case 118:
      return reduce(RULE_17, 7);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action654(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 6);
    case 149:
      return reduce(RULE_17, 6);
    case 137:
      return reduce(RULE_17, 6);
    case 110:
      return reduce(RULE_17, 6);
    case 157:
      return reduce(RULE_17, 6);
    case 103:
      return reduce(RULE_17, 6);
    case 96:
      return reduce(RULE_17, 6);
    case 106:
      return reduce(RULE_17, 6);
    case 147:
      return reduce(RULE_17, 6);
    case 129:
      return reduce(RULE_17, 6);
    case 117:
      return reduce(RULE_17, 6);
    case 167:
      return reduce(RULE_17, 6);
    case 119:
      return reduce(RULE_17, 6);
    case 75:
      return reduce(RULE_17, 6);
    case 100:
      return reduce(RULE_17, 6);
    case 152:
      return reduce(RULE_17, 6);
    case 94:
      return reduce(RULE_17, 6);
    case 80:
      return reduce(RULE_17, 6);
    case 107:
      return reduce(RULE_17, 6);
    case 143:
      return reduce(RULE_17, 6);
    case 98:
      return reduce(RULE_17, 6);
    case 112:
      return reduce(RULE_17, 6);
    case 86:
      return reduce(RULE_17, 6);
    case 120:
      return reduce(RULE_17, 6);
    case 121:
      return reduce(RULE_17, 6);
    case 124:
      return reduce(RULE_17, 6);
    case 123:
      return reduce(RULE_17, 6);
    case 156:
      return reduce(RULE_17, 6);
    case 83:
      return reduce(RULE_17, 6);
    case 99:
      return reduce(RULE_17, 6);
    case 122:
      return reduce(RULE_17, 6);
    case 125:
      return reduce(RULE_17, 6);
    case 165:
      return reduce(RULE_17, 6);
    case 77:
      return reduce(RULE_17, 6);
    case 108:
      return reduce(RULE_17, 6);
    case 92:
      return reduce(RULE_17, 6);
    case 164:
      return reduce(RULE_17, 6);
    case 84:
      return reduce(RULE_17, 6);
    case 104:
      return reduce(RULE_17, 6);
    case 105:
      return reduce(RULE_17, 6);
    case 114:
      return reduce(RULE_17, 6);
    case 82:
      return reduce(RULE_17, 6);
    case 177:
      return reduce(RULE_17, 6);
    case 90:
      return reduce(RULE_17, 6);
    case 116:
      return reduce(RULE_17, 6);
    case 118:
      return reduce(RULE_17, 6);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action655(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 5);
    case 149:
      return reduce(RULE_17, 5);
    case 137:
      return reduce(RULE_17, 5);
    case 110:
      return reduce(RULE_17, 5);
    case 157:
      return reduce(RULE_17, 5);
    case 103:
      return reduce(RULE_17, 5);
    case 96:
      return reduce(RULE_17, 5);
    case 106:
      return reduce(RULE_17, 5);
    case 147:
      return reduce(RULE_17, 5);
    case 129:
      return reduce(RULE_17, 5);
    case 117:
      return reduce(RULE_17, 5);
    case 167:
      return reduce(RULE_17, 5);
    case 119:
      return reduce(RULE_17, 5);
    case 75:
      return reduce(RULE_17, 5);
    case 100:
      return reduce(RULE_17, 5);
    case 152:
      return reduce(RULE_17, 5);
    case 94:
      return reduce(RULE_17, 5);
    case 80:
      return reduce(RULE_17, 5);
    case 107:
      return reduce(RULE_17, 5);
    case 143:
      return reduce(RULE_17, 5);
    case 98:
      return reduce(RULE_17, 5);
    case 112:
      return reduce(RULE_17, 5);
    case 86:
      return reduce(RULE_17, 5);
    case 120:
      return reduce(RULE_17, 5);
    case 121:
      return reduce(RULE_17, 5);
    case 124:
      return reduce(RULE_17, 5);
    case 123:
      return reduce(RULE_17, 5);
    case 156:
      return reduce(RULE_17, 5);
    case 83:
      return reduce(RULE_17, 5);
    case 99:
      return reduce(RULE_17, 5);
    case 122:
      return reduce(RULE_17, 5);
    case 125:
      return reduce(RULE_17, 5);
    case 165:
      return reduce(RULE_17, 5);
    case 77:
      return reduce(RULE_17, 5);
    case 108:
      return reduce(RULE_17, 5);
    case 92:
      return reduce(RULE_17, 5);
    case 164:
      return reduce(RULE_17, 5);
    case 84:
      return reduce(RULE_17, 5);
    case 105:
      return reduce(RULE_17, 5);
    case 104:
      return reduce(RULE_17, 5);
    case 114:
      return reduce(RULE_17, 5);
    case 82:
      return reduce(RULE_17, 5);
    case 177:
      return reduce(RULE_17, 5);
    case 90:
      return reduce(RULE_17, 5);
    case 116:
      return reduce(RULE_17, 5);
    case 118:
      return reduce(RULE_17, 5);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action656(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 38);
    case 137:
      return reduce(RULE_9, 38);
    case 110:
      return reduce(RULE_9, 38);
    case 79:
      return reduce(RULE_9, 38);
    case 106:
      return reduce(RULE_9, 38);
    case 117:
      return reduce(RULE_9, 38);
    case 102:
      return reduce(RULE_9, 38);
    case 167:
      return reduce(RULE_9, 38);
    case 152:
      return reduce(RULE_9, 38);
    case 94:
      return reduce(RULE_9, 38);
    case 80:
      return reduce(RULE_9, 38);
    case 98:
      return reduce(RULE_9, 38);
    case 171:
      return reduce(RULE_9, 38);
    case 86:
      return reduce(RULE_9, 38);
    case 83:
      return reduce(RULE_9, 38);
    case 122:
      return reduce(RULE_9, 38);
    case 108:
      return reduce(RULE_9, 38);
    case 92:
      return reduce(RULE_9, 38);
    case 128:
      return reduce(RULE_9, 38);
    case 104:
      return reduce(RULE_9, 38);
    case 82:
      return reduce(RULE_9, 38);
    case 116:
      return reduce(RULE_9, 38);
    case 85:
      return reduce(RULE_9, 38);
    case 149:
      return reduce(RULE_9, 38);
    case 157:
      return reduce(RULE_9, 38);
    case 103:
      return reduce(RULE_9, 38);
    case 147:
      return reduce(RULE_9, 38);
    case 129:
      return reduce(RULE_9, 38);
    case 119:
      return reduce(RULE_9, 38);
    case 75:
      return reduce(RULE_9, 38);
    case 100:
      return reduce(RULE_9, 38);
    case 107:
      return reduce(RULE_9, 38);
    case 143:
      return reduce(RULE_9, 38);
    case 112:
      return reduce(RULE_9, 38);
    case 120:
      return reduce(RULE_9, 38);
    case 121:
      return reduce(RULE_9, 38);
    case 124:
      return reduce(RULE_9, 38);
    case 156:
      return reduce(RULE_9, 38);
    case 123:
      return reduce(RULE_9, 38);
    case 99:
      return reduce(RULE_9, 38);
    case 125:
      return reduce(RULE_9, 38);
    case 165:
      return reduce(RULE_9, 38);
    case 77:
      return reduce(RULE_9, 38);
    case 164:
      return reduce(RULE_9, 38);
    case 84:
      return reduce(RULE_9, 38);
    case 105:
      return reduce(RULE_9, 38);
    case 114:
      return reduce(RULE_9, 38);
    case 72:
      return reduce(RULE_9, 38);
    case 177:
      return reduce(RULE_9, 38);
    case 90:
      return reduce(RULE_9, 38);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action657(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(360);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(364);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(367);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(372);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(373);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(375);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(379);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_54, 3);
    case 83:
      return reduce(RULE_54, 3);
    case 122:
      return reduce(RULE_54, 3);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, PERCENT, LANGLE, LPAREN, QUESTION_MARK_COLON, RANGLE, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, DOUBLE_AMPERSAND, LANGLE_EQUALS, PLUS, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto657(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action658(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      return reduce(RULE_54, 2);
    case 83:
      return reduce(RULE_54, 2);
    case 122:
      return reduce(RULE_54, 2);
    default: throw new BadTokenException(token, new Object[] {RBRACE, COMMA, RPAREN});
    }
  }

  private final boolean action659(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(706);
      tokenStack.addFirst(token);
      return true;
    case 96:
      return reduce(RULE_17, 15);
    case 107:
      return reduce(RULE_17, 15);
    case 106:
      return reduce(RULE_17, 15);
    case 118:
      return reduce(RULE_17, 15);
    default: throw new BadTokenException(token, new Object[] {SEMICOLON, DOT, LSQUARE, LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final boolean action660(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 107:
      stateStack.addFirst(399);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LSQUARE});
    }
  }

  private final boolean action661(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_55, 2);
    case 149:
      return reduce(RULE_55, 2);
    case 139:
      return reduce(RULE_55, 2);
    case 175:
      return reduce(RULE_55, 2);
    case 142:
      return reduce(RULE_55, 2);
    case 157:
      return reduce(RULE_55, 2);
    case 155:
      return reduce(RULE_55, 2);
    case 173:
      return reduce(RULE_55, 2);
    case 106:
      return reduce(RULE_55, 2);
    case 160:
      return reduce(RULE_55, 2);
    case 130:
      return reduce(RULE_55, 2);
    case 129:
      return reduce(RULE_55, 2);
    case 167:
      return reduce(RULE_55, 2);
    case 74:
      return reduce(RULE_55, 2);
    case 102:
      return reduce(RULE_55, 2);
    case 153:
      return reduce(RULE_55, 2);
    case 75:
      return reduce(RULE_55, 2);
    case 138:
      return reduce(RULE_55, 2);
    case 163:
      return reduce(RULE_55, 2);
    case 174:
      return reduce(RULE_55, 2);
    case 166:
      return reduce(RULE_55, 2);
    case 172:
      return reduce(RULE_55, 2);
    case 107:
      return reduce(RULE_55, 2);
    case 89:
      return reduce(RULE_55, 2);
    case 170:
      return reduce(RULE_55, 2);
    case 143:
      return reduce(RULE_55, 2);
    case 73:
      return reduce(RULE_55, 2);
    case 176:
      return reduce(RULE_55, 2);
    case 132:
      return reduce(RULE_55, 2);
    case 169:
      return reduce(RULE_55, 2);
    case 121:
      return reduce(RULE_55, 2);
    case 133:
      return reduce(RULE_55, 2);
    case 156:
      return reduce(RULE_55, 2);
    case 131:
      return reduce(RULE_55, 2);
    case 76:
      return reduce(RULE_55, 2);
    case 148:
      return reduce(RULE_55, 2);
    case 145:
      return reduce(RULE_55, 2);
    case 128:
      return reduce(RULE_55, 2);
    case 168:
      return reduce(RULE_55, 2);
    case 181:
      return reduce(RULE_55, 2);
    case 164:
      return reduce(RULE_55, 2);
    case 93:
      return reduce(RULE_55, 2);
    case 105:
      return reduce(RULE_55, 2);
    case 179:
      return reduce(RULE_55, 2);
    case 72:
      return reduce(RULE_55, 2);
    case 146:
      return reduce(RULE_55, 2);
    case 177:
      return reduce(RULE_55, 2);
    case 158:
      return reduce(RULE_55, 2);
    case 116:
      return reduce(RULE_55, 2);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action662(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_55, 1);
    case 149:
      return reduce(RULE_55, 1);
    case 139:
      return reduce(RULE_55, 1);
    case 175:
      return reduce(RULE_55, 1);
    case 142:
      return reduce(RULE_55, 1);
    case 157:
      return reduce(RULE_55, 1);
    case 155:
      return reduce(RULE_55, 1);
    case 173:
      return reduce(RULE_55, 1);
    case 106:
      return reduce(RULE_55, 1);
    case 160:
      return reduce(RULE_55, 1);
    case 130:
      return reduce(RULE_55, 1);
    case 129:
      return reduce(RULE_55, 1);
    case 167:
      return reduce(RULE_55, 1);
    case 74:
      return reduce(RULE_55, 1);
    case 102:
      return reduce(RULE_55, 1);
    case 153:
      return reduce(RULE_55, 1);
    case 75:
      return reduce(RULE_55, 1);
    case 138:
      return reduce(RULE_55, 1);
    case 163:
      return reduce(RULE_55, 1);
    case 174:
      return reduce(RULE_55, 1);
    case 166:
      return reduce(RULE_55, 1);
    case 172:
      return reduce(RULE_55, 1);
    case 107:
      return reduce(RULE_55, 1);
    case 89:
      return reduce(RULE_55, 1);
    case 170:
      return reduce(RULE_55, 1);
    case 143:
      return reduce(RULE_55, 1);
    case 73:
      return reduce(RULE_55, 1);
    case 176:
      return reduce(RULE_55, 1);
    case 132:
      return reduce(RULE_55, 1);
    case 169:
      return reduce(RULE_55, 1);
    case 121:
      return reduce(RULE_55, 1);
    case 133:
      return reduce(RULE_55, 1);
    case 156:
      return reduce(RULE_55, 1);
    case 131:
      return reduce(RULE_55, 1);
    case 76:
      return reduce(RULE_55, 1);
    case 148:
      return reduce(RULE_55, 1);
    case 145:
      return reduce(RULE_55, 1);
    case 128:
      return reduce(RULE_55, 1);
    case 168:
      return reduce(RULE_55, 1);
    case 181:
      return reduce(RULE_55, 1);
    case 164:
      return reduce(RULE_55, 1);
    case 93:
      return reduce(RULE_55, 1);
    case 105:
      return reduce(RULE_55, 1);
    case 179:
      return reduce(RULE_55, 1);
    case 72:
      return reduce(RULE_55, 1);
    case 146:
      return reduce(RULE_55, 1);
    case 177:
      return reduce(RULE_55, 1);
    case 158:
      return reduce(RULE_55, 1);
    case 116:
      return reduce(RULE_55, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action663(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, UNDERSCORE, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto663(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 67: return 230;
    case 14: return 244;
    case 28: return 245;
    case 71: return 137;
    case 13: return 707;
    case 63: return 164;
    case 48: return 152;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 247;
    case 65: return 154;
    default: return -1;
    }
  }

  private final boolean action664(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, UNDERSCORE, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto664(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 68: return 226;
    case 67: return 230;
    case 14: return 244;
    case 28: return 245;
    case 71: return 137;
    case 13: return 708;
    case 63: return 164;
    case 48: return 152;
    case 49: return 87;
    case 66: return 139;
    case 64: return 140;
    case 30: return 247;
    case 65: return 154;
    default: return -1;
    }
  }

  private final boolean action665(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      return reduce(RULE_66, 3);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action666(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(709);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action667(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      return reduce(RULE_17, 15);
    case 122:
      return reduce(RULE_66, 4);
    case 107:
      return reduce(RULE_17, 15);
    case 106:
      return reduce(RULE_17, 15);
    case 118:
      return reduce(RULE_17, 15);
    default: throw new BadTokenException(token, new Object[] {RPAREN, DOT, LSQUARE, LPAREN, QUESTION_MARK_DOT});
    }
  }

  private final boolean action668(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 109:
      stateStack.addFirst(285);
      tokenStack.addFirst(token);
      return true;
    case 126:
      stateStack.addFirst(286);
      tokenStack.addFirst(token);
      return true;
    case 97:
      stateStack.addFirst(710);
      tokenStack.addFirst(token);
      return true;
    case 111:
      stateStack.addFirst(288);
      tokenStack.addFirst(token);
      return true;
    case 115:
      stateStack.addFirst(289);
      tokenStack.addFirst(token);
      return true;
    case 78:
      stateStack.addFirst(290);
      tokenStack.addFirst(token);
      return true;
    case 91:
      stateStack.addFirst(291);
      tokenStack.addFirst(token);
      return true;
    case 88:
      stateStack.addFirst(292);
      tokenStack.addFirst(token);
      return true;
    case 113:
      stateStack.addFirst(293);
      tokenStack.addFirst(token);
      return true;
    case 101:
      stateStack.addFirst(294);
      tokenStack.addFirst(token);
      return true;
    case 95:
      stateStack.addFirst(295);
      tokenStack.addFirst(token);
      return true;
    case 81:
      stateStack.addFirst(296);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {MINUS_EQUALS, STAR_EQUALS, EQUALS, PERCENT_EQUALS, PLUS_EQUALS, DOUBLE_LANGLE_EQUALS, DOUBLE_PERCENT_EQUALS, AMPERSAND_EQUALS, FORWARD_SLASH_EQUALS, PIPE_EQUALS, DOUBLE_RANGLE_EQUALS, CARET_EQUALS});
    }
  }

  private final boolean action669(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 89:
      stateStack.addFirst(663);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 128:
      stateStack.addFirst(124);
      tokenStack.addFirst(token);
      return true;
    case 93:
      stateStack.addFirst(664);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    case 122:
      return reduce(RULE_66, 5);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, LSQUARE, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RPAREN, STRING_LITERAL, FLOAT_KEYWORD, UNDERSCORE, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto669(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 71: return 137;
    case 43: return 665;
    case 48: return 152;
    case 64: return 140;
    case 66: return 139;
    case 23: return 711;
    case 30: return 247;
    case 65: return 154;
    case 68: return 667;
    case 15: return 668;
    case 14: return 162;
    case 67: return 230;
    case 28: return 476;
    case 13: return 163;
    case 63: return 164;
    case 49: return 87;
    default: return -1;
    }
  }

  private final boolean action670(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 121:
      stateStack.addFirst(712);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto670(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 69: return 713;
    case 60: return 219;
    case 71: return 416;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 347;
    case 65: return 225;
    case 68: return 226;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 345;
    case 61: return 232;
    case 63: return 233;
    case 49: return 87;
    case 57: return 235;
    case 54: return 417;
    default: return -1;
    }
  }

  private final boolean action671(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      return reduce(RULE_67, 1);
    case 132:
      return reduce(RULE_67, 1);
    case 139:
      return reduce(RULE_67, 1);
    case 175:
      return reduce(RULE_67, 1);
    case 155:
      return reduce(RULE_67, 1);
    case 106:
      return reduce(RULE_67, 1);
    case 145:
      return reduce(RULE_67, 1);
    case 160:
      return reduce(RULE_67, 1);
    case 130:
      return reduce(RULE_67, 1);
    case 102:
      return reduce(RULE_67, 1);
    case 153:
      return reduce(RULE_67, 1);
    case 174:
      return reduce(RULE_67, 1);
    case 105:
      return reduce(RULE_67, 1);
    case 166:
      return reduce(RULE_67, 1);
    case 107:
      return reduce(RULE_67, 1);
    case 179:
      return reduce(RULE_67, 1);
    case 72:
      return reduce(RULE_67, 1);
    case 116:
      return reduce(RULE_67, 1);
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, FLOAT_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, HASH, INT_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, USHORT_KEYWORD, LSQUARE, NAME, QUESTION_MARK});
    }
  }

  private final boolean action672(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(714);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action673(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 32);
    case 137:
      return reduce(RULE_9, 32);
    case 110:
      return reduce(RULE_9, 32);
    case 79:
      return reduce(RULE_9, 32);
    case 106:
      return reduce(RULE_9, 32);
    case 117:
      return reduce(RULE_9, 32);
    case 102:
      return reduce(RULE_9, 32);
    case 167:
      return reduce(RULE_9, 32);
    case 152:
      return reduce(RULE_9, 32);
    case 94:
      return reduce(RULE_9, 32);
    case 80:
      return reduce(RULE_9, 32);
    case 98:
      return reduce(RULE_9, 32);
    case 171:
      return reduce(RULE_9, 32);
    case 86:
      return reduce(RULE_9, 32);
    case 83:
      return reduce(RULE_9, 32);
    case 122:
      return reduce(RULE_9, 32);
    case 108:
      return reduce(RULE_9, 32);
    case 92:
      return reduce(RULE_9, 32);
    case 128:
      return reduce(RULE_9, 32);
    case 104:
      return reduce(RULE_9, 32);
    case 82:
      return reduce(RULE_9, 32);
    case 116:
      return reduce(RULE_9, 32);
    case 85:
      return reduce(RULE_9, 32);
    case 149:
      return reduce(RULE_9, 32);
    case 157:
      return reduce(RULE_9, 32);
    case 103:
      return reduce(RULE_9, 32);
    case 147:
      return reduce(RULE_9, 32);
    case 129:
      return reduce(RULE_9, 32);
    case 119:
      return reduce(RULE_9, 32);
    case 75:
      return reduce(RULE_9, 32);
    case 100:
      return reduce(RULE_9, 32);
    case 107:
      return reduce(RULE_9, 32);
    case 143:
      return reduce(RULE_9, 32);
    case 112:
      return reduce(RULE_9, 32);
    case 120:
      return reduce(RULE_9, 32);
    case 121:
      return reduce(RULE_9, 32);
    case 124:
      return reduce(RULE_9, 32);
    case 156:
      return reduce(RULE_9, 32);
    case 123:
      return reduce(RULE_9, 32);
    case 99:
      return reduce(RULE_9, 32);
    case 125:
      return reduce(RULE_9, 32);
    case 165:
      return reduce(RULE_9, 32);
    case 77:
      return reduce(RULE_9, 32);
    case 164:
      return reduce(RULE_9, 32);
    case 84:
      return reduce(RULE_9, 32);
    case 105:
      return reduce(RULE_9, 32);
    case 114:
      return reduce(RULE_9, 32);
    case 72:
      return reduce(RULE_9, 32);
    case 177:
      return reduce(RULE_9, 32);
    case 90:
      return reduce(RULE_9, 32);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action674(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 6);
    case 173:
      return reduce(RULE_59, 6);
    case 106:
      return reduce(RULE_59, 6);
    case 153:
      return reduce(RULE_59, 6);
    case 102:
      return reduce(RULE_59, 6);
    case 74:
      return reduce(RULE_59, 6);
    case 167:
      return reduce(RULE_59, 6);
    case 163:
      return reduce(RULE_59, 6);
    case 174:
      return reduce(RULE_59, 6);
    case 172:
      return reduce(RULE_59, 6);
    case 89:
      return reduce(RULE_59, 6);
    case 170:
      return reduce(RULE_59, 6);
    case 98:
      return reduce(RULE_59, 6);
    case 73:
      return reduce(RULE_59, 6);
    case 176:
      return reduce(RULE_59, 6);
    case 132:
      return reduce(RULE_59, 6);
    case 169:
      return reduce(RULE_59, 6);
    case 133:
      return reduce(RULE_59, 6);
    case 148:
      return reduce(RULE_59, 6);
    case 128:
      return reduce(RULE_59, 6);
    case 108:
      return reduce(RULE_59, 6);
    case 93:
      return reduce(RULE_59, 6);
    case 146:
      return reduce(RULE_59, 6);
    case 158:
      return reduce(RULE_59, 6);
    case 116:
      return reduce(RULE_59, 6);
    case 159:
      return reduce(RULE_59, 6);
    case 149:
      return reduce(RULE_59, 6);
    case 139:
      return reduce(RULE_59, 6);
    case 175:
      return reduce(RULE_59, 6);
    case 157:
      return reduce(RULE_59, 6);
    case 155:
      return reduce(RULE_59, 6);
    case 160:
      return reduce(RULE_59, 6);
    case 130:
      return reduce(RULE_59, 6);
    case 129:
      return reduce(RULE_59, 6);
    case 138:
      return reduce(RULE_59, 6);
    case 75:
      return reduce(RULE_59, 6);
    case 127:
      return reduce(RULE_59, 6);
    case 166:
      return reduce(RULE_59, 6);
    case 107:
      return reduce(RULE_59, 6);
    case 143:
      return reduce(RULE_59, 6);
    case 121:
      return reduce(RULE_59, 6);
    case 124:
      return reduce(RULE_59, 6);
    case 156:
      return reduce(RULE_59, 6);
    case 131:
      return reduce(RULE_59, 6);
    case 76:
      return reduce(RULE_59, 6);
    case 145:
      return reduce(RULE_59, 6);
    case 168:
      return reduce(RULE_59, 6);
    case 164:
      return reduce(RULE_59, 6);
    case 181:
      return reduce(RULE_59, 6);
    case 105:
      return reduce(RULE_59, 6);
    case 179:
      return reduce(RULE_59, 6);
    case 177:
      return reduce(RULE_59, 6);
    case 72:
      return reduce(RULE_59, 6);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final boolean action675(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 3);
    case 173:
      return reduce(RULE_59, 3);
    case 106:
      return reduce(RULE_59, 3);
    case 153:
      return reduce(RULE_59, 3);
    case 102:
      return reduce(RULE_59, 3);
    case 74:
      return reduce(RULE_59, 3);
    case 167:
      return reduce(RULE_59, 3);
    case 163:
      return reduce(RULE_59, 3);
    case 174:
      return reduce(RULE_59, 3);
    case 172:
      return reduce(RULE_59, 3);
    case 89:
      return reduce(RULE_59, 3);
    case 170:
      return reduce(RULE_59, 3);
    case 98:
      return reduce(RULE_59, 3);
    case 73:
      return reduce(RULE_59, 3);
    case 176:
      return reduce(RULE_59, 3);
    case 132:
      return reduce(RULE_59, 3);
    case 169:
      return reduce(RULE_59, 3);
    case 133:
      return reduce(RULE_59, 3);
    case 148:
      return reduce(RULE_59, 3);
    case 128:
      return reduce(RULE_59, 3);
    case 108:
      return reduce(RULE_59, 3);
    case 93:
      return reduce(RULE_59, 3);
    case 146:
      return reduce(RULE_59, 3);
    case 158:
      return reduce(RULE_59, 3);
    case 116:
      return reduce(RULE_59, 3);
    case 159:
      return reduce(RULE_59, 3);
    case 149:
      return reduce(RULE_59, 3);
    case 139:
      return reduce(RULE_59, 3);
    case 175:
      return reduce(RULE_59, 3);
    case 157:
      return reduce(RULE_59, 3);
    case 155:
      return reduce(RULE_59, 3);
    case 160:
      return reduce(RULE_59, 3);
    case 130:
      return reduce(RULE_59, 3);
    case 129:
      return reduce(RULE_59, 3);
    case 138:
      return reduce(RULE_59, 3);
    case 75:
      return reduce(RULE_59, 3);
    case 127:
      return reduce(RULE_59, 3);
    case 166:
      return reduce(RULE_59, 3);
    case 107:
      return reduce(RULE_59, 3);
    case 143:
      return reduce(RULE_59, 3);
    case 121:
      return reduce(RULE_59, 3);
    case 124:
      return reduce(RULE_59, 3);
    case 156:
      return reduce(RULE_59, 3);
    case 131:
      return reduce(RULE_59, 3);
    case 76:
      return reduce(RULE_59, 3);
    case 145:
      return reduce(RULE_59, 3);
    case 168:
      return reduce(RULE_59, 3);
    case 164:
      return reduce(RULE_59, 3);
    case 181:
      return reduce(RULE_59, 3);
    case 105:
      return reduce(RULE_59, 3);
    case 179:
      return reduce(RULE_59, 3);
    case 177:
      return reduce(RULE_59, 3);
    case 72:
      return reduce(RULE_59, 3);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final boolean action676(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_68, 2);
    case 173:
      return reduce(RULE_68, 2);
    case 106:
      return reduce(RULE_68, 2);
    case 153:
      return reduce(RULE_68, 2);
    case 102:
      return reduce(RULE_68, 2);
    case 74:
      return reduce(RULE_68, 2);
    case 167:
      return reduce(RULE_68, 2);
    case 163:
      return reduce(RULE_68, 2);
    case 174:
      return reduce(RULE_68, 2);
    case 134:
      return reduce(RULE_68, 2);
    case 172:
      return reduce(RULE_68, 2);
    case 89:
      return reduce(RULE_68, 2);
    case 170:
      return reduce(RULE_68, 2);
    case 73:
      return reduce(RULE_68, 2);
    case 176:
      return reduce(RULE_68, 2);
    case 132:
      return reduce(RULE_68, 2);
    case 169:
      return reduce(RULE_68, 2);
    case 133:
      return reduce(RULE_68, 2);
    case 148:
      return reduce(RULE_68, 2);
    case 128:
      return reduce(RULE_68, 2);
    case 144:
      return reduce(RULE_68, 2);
    case 93:
      return reduce(RULE_68, 2);
    case 146:
      return reduce(RULE_68, 2);
    case 158:
      return reduce(RULE_68, 2);
    case 116:
      return reduce(RULE_68, 2);
    case 159:
      return reduce(RULE_68, 2);
    case 149:
      return reduce(RULE_68, 2);
    case 139:
      return reduce(RULE_68, 2);
    case 175:
      return reduce(RULE_68, 2);
    case 157:
      return reduce(RULE_68, 2);
    case 155:
      return reduce(RULE_68, 2);
    case 160:
      return reduce(RULE_68, 2);
    case 130:
      return reduce(RULE_68, 2);
    case 129:
      return reduce(RULE_68, 2);
    case 138:
      return reduce(RULE_68, 2);
    case 75:
      return reduce(RULE_68, 2);
    case 166:
      return reduce(RULE_68, 2);
    case 107:
      return reduce(RULE_68, 2);
    case 143:
      return reduce(RULE_68, 2);
    case 121:
      return reduce(RULE_68, 2);
    case 156:
      return reduce(RULE_68, 2);
    case 131:
      return reduce(RULE_68, 2);
    case 76:
      return reduce(RULE_68, 2);
    case 145:
      return reduce(RULE_68, 2);
    case 168:
      return reduce(RULE_68, 2);
    case 164:
      return reduce(RULE_68, 2);
    case 181:
      return reduce(RULE_68, 2);
    case 105:
      return reduce(RULE_68, 2);
    case 179:
      return reduce(RULE_68, 2);
    case 72:
      return reduce(RULE_68, 2);
    case 177:
      return reduce(RULE_68, 2);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, CATCH_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, FINALLY_KEYWORD, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action677(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 72:
      return reduce(RULE_61, 1);
    case 112:
      return reduce(RULE_61, 1);
    default: throw new BadTokenException(token, new Object[] {NAME, PIPE});
    }
  }

  private final boolean action678(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto678(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 715;
    default: return -1;
    }
  }

  private final boolean action679(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 10);
    case 173:
      return reduce(RULE_59, 10);
    case 106:
      return reduce(RULE_59, 10);
    case 153:
      return reduce(RULE_59, 10);
    case 102:
      return reduce(RULE_59, 10);
    case 74:
      return reduce(RULE_59, 10);
    case 167:
      return reduce(RULE_59, 10);
    case 163:
      return reduce(RULE_59, 10);
    case 174:
      return reduce(RULE_59, 10);
    case 172:
      return reduce(RULE_59, 10);
    case 89:
      return reduce(RULE_59, 10);
    case 170:
      return reduce(RULE_59, 10);
    case 98:
      return reduce(RULE_59, 10);
    case 73:
      return reduce(RULE_59, 10);
    case 176:
      return reduce(RULE_59, 10);
    case 132:
      return reduce(RULE_59, 10);
    case 169:
      return reduce(RULE_59, 10);
    case 133:
      return reduce(RULE_59, 10);
    case 148:
      return reduce(RULE_59, 10);
    case 128:
      return reduce(RULE_59, 10);
    case 108:
      return reduce(RULE_59, 10);
    case 93:
      return reduce(RULE_59, 10);
    case 146:
      return reduce(RULE_59, 10);
    case 158:
      return reduce(RULE_59, 10);
    case 116:
      return reduce(RULE_59, 10);
    case 159:
      return reduce(RULE_59, 10);
    case 149:
      return reduce(RULE_59, 10);
    case 139:
      return reduce(RULE_59, 10);
    case 175:
      return reduce(RULE_59, 10);
    case 157:
      return reduce(RULE_59, 10);
    case 155:
      return reduce(RULE_59, 10);
    case 160:
      return reduce(RULE_59, 10);
    case 130:
      return reduce(RULE_59, 10);
    case 129:
      return reduce(RULE_59, 10);
    case 138:
      return reduce(RULE_59, 10);
    case 75:
      return reduce(RULE_59, 10);
    case 127:
      return reduce(RULE_59, 10);
    case 166:
      return reduce(RULE_59, 10);
    case 107:
      return reduce(RULE_59, 10);
    case 143:
      return reduce(RULE_59, 10);
    case 121:
      return reduce(RULE_59, 10);
    case 124:
      return reduce(RULE_59, 10);
    case 156:
      return reduce(RULE_59, 10);
    case 131:
      return reduce(RULE_59, 10);
    case 76:
      return reduce(RULE_59, 10);
    case 145:
      return reduce(RULE_59, 10);
    case 168:
      return reduce(RULE_59, 10);
    case 164:
      return reduce(RULE_59, 10);
    case 181:
      return reduce(RULE_59, 10);
    case 105:
      return reduce(RULE_59, 10);
    case 179:
      return reduce(RULE_59, 10);
    case 177:
      return reduce(RULE_59, 10);
    case 72:
      return reduce(RULE_59, 10);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final boolean action680(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(716);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action681(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(717);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action682(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 124:
      stateStack.addFirst(718);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {SEMICOLON});
    }
  }

  private final boolean action683(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 37);
    case 137:
      return reduce(RULE_9, 37);
    case 110:
      return reduce(RULE_9, 37);
    case 79:
      return reduce(RULE_9, 37);
    case 106:
      return reduce(RULE_9, 37);
    case 117:
      return reduce(RULE_9, 37);
    case 102:
      return reduce(RULE_9, 37);
    case 167:
      return reduce(RULE_9, 37);
    case 152:
      return reduce(RULE_9, 37);
    case 94:
      return reduce(RULE_9, 37);
    case 80:
      return reduce(RULE_9, 37);
    case 98:
      return reduce(RULE_9, 37);
    case 171:
      return reduce(RULE_9, 37);
    case 86:
      return reduce(RULE_9, 37);
    case 83:
      return reduce(RULE_9, 37);
    case 122:
      return reduce(RULE_9, 37);
    case 108:
      return reduce(RULE_9, 37);
    case 92:
      return reduce(RULE_9, 37);
    case 128:
      return reduce(RULE_9, 37);
    case 104:
      return reduce(RULE_9, 37);
    case 82:
      return reduce(RULE_9, 37);
    case 116:
      return reduce(RULE_9, 37);
    case 85:
      return reduce(RULE_9, 37);
    case 149:
      return reduce(RULE_9, 37);
    case 157:
      return reduce(RULE_9, 37);
    case 103:
      return reduce(RULE_9, 37);
    case 147:
      return reduce(RULE_9, 37);
    case 129:
      return reduce(RULE_9, 37);
    case 119:
      return reduce(RULE_9, 37);
    case 75:
      return reduce(RULE_9, 37);
    case 100:
      return reduce(RULE_9, 37);
    case 107:
      return reduce(RULE_9, 37);
    case 143:
      return reduce(RULE_9, 37);
    case 112:
      return reduce(RULE_9, 37);
    case 120:
      return reduce(RULE_9, 37);
    case 121:
      return reduce(RULE_9, 37);
    case 124:
      return reduce(RULE_9, 37);
    case 156:
      return reduce(RULE_9, 37);
    case 123:
      return reduce(RULE_9, 37);
    case 99:
      return reduce(RULE_9, 37);
    case 125:
      return reduce(RULE_9, 37);
    case 165:
      return reduce(RULE_9, 37);
    case 77:
      return reduce(RULE_9, 37);
    case 164:
      return reduce(RULE_9, 37);
    case 84:
      return reduce(RULE_9, 37);
    case 105:
      return reduce(RULE_9, 37);
    case 114:
      return reduce(RULE_9, 37);
    case 72:
      return reduce(RULE_9, 37);
    case 177:
      return reduce(RULE_9, 37);
    case 90:
      return reduce(RULE_9, 37);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action684(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(719);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action685(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {RBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto685(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 720;
    default: return -1;
    }
  }

  private final boolean action686(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(721);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action687(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_65, 7);
    case 139:
      return reduce(RULE_65, 7);
    case 137:
      return reduce(RULE_65, 7);
    case 175:
      return reduce(RULE_65, 7);
    case 157:
      return reduce(RULE_65, 7);
    case 155:
      return reduce(RULE_65, 7);
    case 106:
      return reduce(RULE_65, 7);
    case 160:
      return reduce(RULE_65, 7);
    case 130:
      return reduce(RULE_65, 7);
    case 129:
      return reduce(RULE_65, 7);
    case 102:
      return reduce(RULE_65, 7);
    case 167:
      return reduce(RULE_65, 7);
    case 153:
      return reduce(RULE_65, 7);
    case 75:
      return reduce(RULE_65, 7);
    case 174:
      return reduce(RULE_65, 7);
    case 180:
      return reduce(RULE_65, 7);
    case 166:
      return reduce(RULE_65, 7);
    case 107:
      return reduce(RULE_65, 7);
    case 143:
      return reduce(RULE_65, 7);
    case 176:
      return reduce(RULE_65, 7);
    case 132:
      return reduce(RULE_65, 7);
    case 121:
      return reduce(RULE_65, 7);
    case 156:
      return reduce(RULE_65, 7);
    case 145:
      return reduce(RULE_65, 7);
    case 162:
      return reduce(RULE_65, 7);
    case 164:
      return reduce(RULE_65, 7);
    case 105:
      return reduce(RULE_65, 7);
    case 179:
      return reduce(RULE_65, 7);
    case 177:
      return reduce(RULE_65, 7);
    case 72:
      return reduce(RULE_65, 7);
    case 116:
      return reduce(RULE_65, 7);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action688(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_65, 3);
    case 139:
      return reduce(RULE_65, 3);
    case 137:
      return reduce(RULE_65, 3);
    case 175:
      return reduce(RULE_65, 3);
    case 157:
      return reduce(RULE_65, 3);
    case 155:
      return reduce(RULE_65, 3);
    case 106:
      return reduce(RULE_65, 3);
    case 160:
      return reduce(RULE_65, 3);
    case 130:
      return reduce(RULE_65, 3);
    case 129:
      return reduce(RULE_65, 3);
    case 102:
      return reduce(RULE_65, 3);
    case 167:
      return reduce(RULE_65, 3);
    case 153:
      return reduce(RULE_65, 3);
    case 75:
      return reduce(RULE_65, 3);
    case 174:
      return reduce(RULE_65, 3);
    case 180:
      return reduce(RULE_65, 3);
    case 166:
      return reduce(RULE_65, 3);
    case 107:
      return reduce(RULE_65, 3);
    case 143:
      return reduce(RULE_65, 3);
    case 176:
      return reduce(RULE_65, 3);
    case 132:
      return reduce(RULE_65, 3);
    case 121:
      return reduce(RULE_65, 3);
    case 156:
      return reduce(RULE_65, 3);
    case 145:
      return reduce(RULE_65, 3);
    case 162:
      return reduce(RULE_65, 3);
    case 164:
      return reduce(RULE_65, 3);
    case 105:
      return reduce(RULE_65, 3);
    case 179:
      return reduce(RULE_65, 3);
    case 177:
      return reduce(RULE_65, 3);
    case 72:
      return reduce(RULE_65, 3);
    case 116:
      return reduce(RULE_65, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action689(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_49, 3);
    case 139:
      return reduce(RULE_49, 3);
    case 137:
      return reduce(RULE_49, 3);
    case 175:
      return reduce(RULE_49, 3);
    case 157:
      return reduce(RULE_49, 3);
    case 155:
      return reduce(RULE_49, 3);
    case 106:
      return reduce(RULE_49, 3);
    case 160:
      return reduce(RULE_49, 3);
    case 130:
      return reduce(RULE_49, 3);
    case 129:
      return reduce(RULE_49, 3);
    case 102:
      return reduce(RULE_49, 3);
    case 167:
      return reduce(RULE_49, 3);
    case 153:
      return reduce(RULE_49, 3);
    case 75:
      return reduce(RULE_49, 3);
    case 174:
      return reduce(RULE_49, 3);
    case 180:
      return reduce(RULE_49, 3);
    case 166:
      return reduce(RULE_49, 3);
    case 107:
      return reduce(RULE_49, 3);
    case 143:
      return reduce(RULE_49, 3);
    case 176:
      return reduce(RULE_49, 3);
    case 132:
      return reduce(RULE_49, 3);
    case 121:
      return reduce(RULE_49, 3);
    case 156:
      return reduce(RULE_49, 3);
    case 145:
      return reduce(RULE_49, 3);
    case 162:
      return reduce(RULE_49, 3);
    case 164:
      return reduce(RULE_49, 3);
    case 105:
      return reduce(RULE_49, 3);
    case 179:
      return reduce(RULE_49, 3);
    case 177:
      return reduce(RULE_49, 3);
    case 72:
      return reduce(RULE_49, 3);
    case 116:
      return reduce(RULE_49, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action690(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_65, 6);
    case 139:
      return reduce(RULE_65, 6);
    case 137:
      return reduce(RULE_65, 6);
    case 175:
      return reduce(RULE_65, 6);
    case 157:
      return reduce(RULE_65, 6);
    case 155:
      return reduce(RULE_65, 6);
    case 106:
      return reduce(RULE_65, 6);
    case 160:
      return reduce(RULE_65, 6);
    case 130:
      return reduce(RULE_65, 6);
    case 129:
      return reduce(RULE_65, 6);
    case 102:
      return reduce(RULE_65, 6);
    case 167:
      return reduce(RULE_65, 6);
    case 153:
      return reduce(RULE_65, 6);
    case 75:
      return reduce(RULE_65, 6);
    case 174:
      return reduce(RULE_65, 6);
    case 180:
      return reduce(RULE_65, 6);
    case 166:
      return reduce(RULE_65, 6);
    case 107:
      return reduce(RULE_65, 6);
    case 143:
      return reduce(RULE_65, 6);
    case 176:
      return reduce(RULE_65, 6);
    case 132:
      return reduce(RULE_65, 6);
    case 121:
      return reduce(RULE_65, 6);
    case 156:
      return reduce(RULE_65, 6);
    case 145:
      return reduce(RULE_65, 6);
    case 162:
      return reduce(RULE_65, 6);
    case 164:
      return reduce(RULE_65, 6);
    case 105:
      return reduce(RULE_65, 6);
    case 179:
      return reduce(RULE_65, 6);
    case 177:
      return reduce(RULE_65, 6);
    case 72:
      return reduce(RULE_65, 6);
    case 116:
      return reduce(RULE_65, 6);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action691(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_65, 2);
    case 139:
      return reduce(RULE_65, 2);
    case 137:
      return reduce(RULE_65, 2);
    case 175:
      return reduce(RULE_65, 2);
    case 157:
      return reduce(RULE_65, 2);
    case 155:
      return reduce(RULE_65, 2);
    case 106:
      return reduce(RULE_65, 2);
    case 160:
      return reduce(RULE_65, 2);
    case 130:
      return reduce(RULE_65, 2);
    case 129:
      return reduce(RULE_65, 2);
    case 102:
      return reduce(RULE_65, 2);
    case 167:
      return reduce(RULE_65, 2);
    case 153:
      return reduce(RULE_65, 2);
    case 75:
      return reduce(RULE_65, 2);
    case 174:
      return reduce(RULE_65, 2);
    case 180:
      return reduce(RULE_65, 2);
    case 166:
      return reduce(RULE_65, 2);
    case 107:
      return reduce(RULE_65, 2);
    case 143:
      return reduce(RULE_65, 2);
    case 176:
      return reduce(RULE_65, 2);
    case 132:
      return reduce(RULE_65, 2);
    case 121:
      return reduce(RULE_65, 2);
    case 156:
      return reduce(RULE_65, 2);
    case 145:
      return reduce(RULE_65, 2);
    case 162:
      return reduce(RULE_65, 2);
    case 164:
      return reduce(RULE_65, 2);
    case 105:
      return reduce(RULE_65, 2);
    case 179:
      return reduce(RULE_65, 2);
    case 177:
      return reduce(RULE_65, 2);
    case 72:
      return reduce(RULE_65, 2);
    case 116:
      return reduce(RULE_65, 2);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action692(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_63, 0);
    case 137:
      return reduce(RULE_63, 0);
    case 124:
      return reduce(RULE_63, 0);
    case 157:
      return reduce(RULE_63, 0);
    case 156:
      return reduce(RULE_63, 0);
    case 165:
      return reduce(RULE_63, 0);
    case 147:
      return reduce(RULE_63, 0);
    case 129:
      return reduce(RULE_63, 0);
    case 167:
      return reduce(RULE_63, 0);
    case 164:
      return reduce(RULE_63, 0);
    case 75:
      return reduce(RULE_63, 0);
    case 177:
      return reduce(RULE_63, 0);
    case 143:
      return reduce(RULE_63, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto692(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 18: return 722;
    default: return -1;
    }
  }

  private final boolean action693(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_69, 0);
    case 139:
      return reduce(RULE_69, 0);
    case 137:
      return reduce(RULE_69, 0);
    case 175:
      return reduce(RULE_69, 0);
    case 157:
      return reduce(RULE_69, 0);
    case 155:
      return reduce(RULE_69, 0);
    case 106:
      return reduce(RULE_69, 0);
    case 160:
      return reduce(RULE_69, 0);
    case 130:
      return reduce(RULE_69, 0);
    case 129:
      return reduce(RULE_69, 0);
    case 102:
      return reduce(RULE_69, 0);
    case 167:
      return reduce(RULE_69, 0);
    case 153:
      return reduce(RULE_69, 0);
    case 75:
      return reduce(RULE_69, 0);
    case 174:
      return reduce(RULE_69, 0);
    case 180:
      return reduce(RULE_69, 0);
    case 166:
      return reduce(RULE_69, 0);
    case 107:
      return reduce(RULE_69, 0);
    case 143:
      return reduce(RULE_69, 0);
    case 176:
      return reduce(RULE_69, 0);
    case 132:
      return reduce(RULE_69, 0);
    case 121:
      return reduce(RULE_69, 0);
    case 156:
      return reduce(RULE_69, 0);
    case 145:
      return reduce(RULE_69, 0);
    case 162:
      return reduce(RULE_69, 0);
    case 164:
      return reduce(RULE_69, 0);
    case 105:
      return reduce(RULE_69, 0);
    case 179:
      return reduce(RULE_69, 0);
    case 177:
      return reduce(RULE_69, 0);
    case 72:
      return reduce(RULE_69, 0);
    case 116:
      return reduce(RULE_69, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action694(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 137:
      stateStack.addFirst(723);
      tokenStack.addFirst(token);
      return true;
    case 165:
      stateStack.addFirst(724);
      tokenStack.addFirst(token);
      return true;
    case 147:
      stateStack.addFirst(725);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {CONSTRUCTOR_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD});
    }
  }

  private final boolean action695(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_63, 1);
    case 137:
      return reduce(RULE_63, 1);
    case 124:
      return reduce(RULE_63, 1);
    case 157:
      return reduce(RULE_63, 1);
    case 156:
      return reduce(RULE_63, 1);
    case 165:
      return reduce(RULE_63, 1);
    case 147:
      return reduce(RULE_63, 1);
    case 129:
      return reduce(RULE_63, 1);
    case 167:
      return reduce(RULE_63, 1);
    case 164:
      return reduce(RULE_63, 1);
    case 75:
      return reduce(RULE_63, 1);
    case 177:
      return reduce(RULE_63, 1);
    case 143:
      return reduce(RULE_63, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action696(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 83:
      return reduce(RULE_64, 1);
    case 122:
      return reduce(RULE_64, 1);
    default: throw new BadTokenException(token, new Object[] {COMMA, RPAREN});
    }
  }

  private final boolean action697(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 96:
      stateStack.addFirst(22);
      tokenStack.addFirst(token);
      return true;
    case 121:
      return reduce(RULE_50, 3);
    case 124:
      return reduce(RULE_50, 3);
    case 83:
      return reduce(RULE_50, 3);
    case 105:
      return reduce(RULE_50, 3);
    default: throw new BadTokenException(token, new Object[] {RBRACE, SEMICOLON, COMMA, LBRACE, DOT});
    }
  }

  private final boolean action698(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_68, 0);
    case 173:
      return reduce(RULE_68, 0);
    case 106:
      return reduce(RULE_68, 0);
    case 153:
      return reduce(RULE_68, 0);
    case 102:
      return reduce(RULE_68, 0);
    case 74:
      return reduce(RULE_68, 0);
    case 167:
      return reduce(RULE_68, 0);
    case 163:
      return reduce(RULE_68, 0);
    case 174:
      return reduce(RULE_68, 0);
    case 134:
      return reduce(RULE_68, 0);
    case 172:
      return reduce(RULE_68, 0);
    case 89:
      return reduce(RULE_68, 0);
    case 170:
      return reduce(RULE_68, 0);
    case 73:
      return reduce(RULE_68, 0);
    case 176:
      return reduce(RULE_68, 0);
    case 132:
      return reduce(RULE_68, 0);
    case 169:
      return reduce(RULE_68, 0);
    case 133:
      return reduce(RULE_68, 0);
    case 148:
      return reduce(RULE_68, 0);
    case 128:
      return reduce(RULE_68, 0);
    case 144:
      return reduce(RULE_68, 0);
    case 93:
      return reduce(RULE_68, 0);
    case 146:
      return reduce(RULE_68, 0);
    case 158:
      return reduce(RULE_68, 0);
    case 116:
      return reduce(RULE_68, 0);
    case 159:
      return reduce(RULE_68, 0);
    case 149:
      return reduce(RULE_68, 0);
    case 139:
      return reduce(RULE_68, 0);
    case 175:
      return reduce(RULE_68, 0);
    case 157:
      return reduce(RULE_68, 0);
    case 155:
      return reduce(RULE_68, 0);
    case 160:
      return reduce(RULE_68, 0);
    case 130:
      return reduce(RULE_68, 0);
    case 129:
      return reduce(RULE_68, 0);
    case 138:
      return reduce(RULE_68, 0);
    case 75:
      return reduce(RULE_68, 0);
    case 166:
      return reduce(RULE_68, 0);
    case 107:
      return reduce(RULE_68, 0);
    case 143:
      return reduce(RULE_68, 0);
    case 121:
      return reduce(RULE_68, 0);
    case 156:
      return reduce(RULE_68, 0);
    case 131:
      return reduce(RULE_68, 0);
    case 76:
      return reduce(RULE_68, 0);
    case 145:
      return reduce(RULE_68, 0);
    case 168:
      return reduce(RULE_68, 0);
    case 164:
      return reduce(RULE_68, 0);
    case 181:
      return reduce(RULE_68, 0);
    case 105:
      return reduce(RULE_68, 0);
    case 179:
      return reduce(RULE_68, 0);
    case 177:
      return reduce(RULE_68, 0);
    case 72:
      return reduce(RULE_68, 0);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, CATCH_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, FINALLY_KEYWORD, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final boolean action699(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto699(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 726;
    default: return -1;
    }
  }

  private final boolean action700(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_40, 1);
    case 149:
      return reduce(RULE_40, 1);
    case 137:
      return reduce(RULE_40, 1);
    case 110:
      return reduce(RULE_40, 1);
    case 157:
      return reduce(RULE_40, 1);
    case 103:
      return reduce(RULE_40, 1);
    case 147:
      return reduce(RULE_40, 1);
    case 129:
      return reduce(RULE_40, 1);
    case 117:
      return reduce(RULE_40, 1);
    case 167:
      return reduce(RULE_40, 1);
    case 119:
      return reduce(RULE_40, 1);
    case 75:
      return reduce(RULE_40, 1);
    case 100:
      return reduce(RULE_40, 1);
    case 152:
      return reduce(RULE_40, 1);
    case 80:
      return reduce(RULE_40, 1);
    case 94:
      return reduce(RULE_40, 1);
    case 143:
      return reduce(RULE_40, 1);
    case 98:
      return reduce(RULE_40, 1);
    case 112:
      return reduce(RULE_40, 1);
    case 86:
      return reduce(RULE_40, 1);
    case 120:
      return reduce(RULE_40, 1);
    case 121:
      return reduce(RULE_40, 1);
    case 124:
      return reduce(RULE_40, 1);
    case 156:
      return reduce(RULE_40, 1);
    case 123:
      return reduce(RULE_40, 1);
    case 83:
      return reduce(RULE_40, 1);
    case 99:
      return reduce(RULE_40, 1);
    case 122:
      return reduce(RULE_40, 1);
    case 125:
      return reduce(RULE_40, 1);
    case 165:
      return reduce(RULE_40, 1);
    case 77:
      return reduce(RULE_40, 1);
    case 108:
      return reduce(RULE_40, 1);
    case 92:
      return reduce(RULE_40, 1);
    case 164:
      return reduce(RULE_40, 1);
    case 84:
      return reduce(RULE_40, 1);
    case 104:
      return reduce(RULE_40, 1);
    case 105:
      return reduce(RULE_40, 1);
    case 114:
      return reduce(RULE_40, 1);
    case 82:
      return reduce(RULE_40, 1);
    case 177:
      return reduce(RULE_40, 1);
    case 90:
      return reduce(RULE_40, 1);
    case 116:
      return reduce(RULE_40, 1);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK});
    }
  }

  private final boolean action701(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 87:
      return reduce(RULE_40, 2);
    case 149:
      return reduce(RULE_40, 2);
    case 137:
      return reduce(RULE_40, 2);
    case 110:
      return reduce(RULE_40, 2);
    case 157:
      return reduce(RULE_40, 2);
    case 103:
      return reduce(RULE_40, 2);
    case 147:
      return reduce(RULE_40, 2);
    case 129:
      return reduce(RULE_40, 2);
    case 117:
      return reduce(RULE_40, 2);
    case 167:
      return reduce(RULE_40, 2);
    case 119:
      return reduce(RULE_40, 2);
    case 75:
      return reduce(RULE_40, 2);
    case 100:
      return reduce(RULE_40, 2);
    case 152:
      return reduce(RULE_40, 2);
    case 80:
      return reduce(RULE_40, 2);
    case 94:
      return reduce(RULE_40, 2);
    case 143:
      return reduce(RULE_40, 2);
    case 98:
      return reduce(RULE_40, 2);
    case 112:
      return reduce(RULE_40, 2);
    case 86:
      return reduce(RULE_40, 2);
    case 120:
      return reduce(RULE_40, 2);
    case 121:
      return reduce(RULE_40, 2);
    case 124:
      return reduce(RULE_40, 2);
    case 156:
      return reduce(RULE_40, 2);
    case 123:
      return reduce(RULE_40, 2);
    case 83:
      return reduce(RULE_40, 2);
    case 99:
      return reduce(RULE_40, 2);
    case 122:
      return reduce(RULE_40, 2);
    case 125:
      return reduce(RULE_40, 2);
    case 165:
      return reduce(RULE_40, 2);
    case 77:
      return reduce(RULE_40, 2);
    case 108:
      return reduce(RULE_40, 2);
    case 92:
      return reduce(RULE_40, 2);
    case 164:
      return reduce(RULE_40, 2);
    case 84:
      return reduce(RULE_40, 2);
    case 104:
      return reduce(RULE_40, 2);
    case 105:
      return reduce(RULE_40, 2);
    case 114:
      return reduce(RULE_40, 2);
    case 82:
      return reduce(RULE_40, 2);
    case 177:
      return reduce(RULE_40, 2);
    case 90:
      return reduce(RULE_40, 2);
    case 116:
      return reduce(RULE_40, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto701(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action702(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(360);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(364);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(367);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(372);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(373);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(375);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(379);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_35, 4);
    case 137:
      return reduce(RULE_35, 4);
    case 121:
      return reduce(RULE_35, 4);
    case 124:
      return reduce(RULE_35, 4);
    case 157:
      return reduce(RULE_35, 4);
    case 123:
      return reduce(RULE_35, 4);
    case 156:
      return reduce(RULE_35, 4);
    case 83:
      return reduce(RULE_35, 4);
    case 122:
      return reduce(RULE_35, 4);
    case 165:
      return reduce(RULE_35, 4);
    case 147:
      return reduce(RULE_35, 4);
    case 129:
      return reduce(RULE_35, 4);
    case 167:
      return reduce(RULE_35, 4);
    case 164:
      return reduce(RULE_35, 4);
    case 75:
      return reduce(RULE_35, 4);
    case 105:
      return reduce(RULE_35, 4);
    case 82:
      return reduce(RULE_35, 4);
    case 177:
      return reduce(RULE_35, 4);
    case 143:
      return reduce(RULE_35, 4);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto702(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action703(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_35, 3);
    case 137:
      return reduce(RULE_35, 3);
    case 121:
      return reduce(RULE_35, 3);
    case 124:
      return reduce(RULE_35, 3);
    case 157:
      return reduce(RULE_35, 3);
    case 123:
      return reduce(RULE_35, 3);
    case 156:
      return reduce(RULE_35, 3);
    case 83:
      return reduce(RULE_35, 3);
    case 122:
      return reduce(RULE_35, 3);
    case 165:
      return reduce(RULE_35, 3);
    case 147:
      return reduce(RULE_35, 3);
    case 129:
      return reduce(RULE_35, 3);
    case 167:
      return reduce(RULE_35, 3);
    case 164:
      return reduce(RULE_35, 3);
    case 75:
      return reduce(RULE_35, 3);
    case 105:
      return reduce(RULE_35, 3);
    case 82:
      return reduce(RULE_35, 3);
    case 177:
      return reduce(RULE_35, 3);
    case 143:
      return reduce(RULE_35, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, RBRACE, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action704(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      stateStack.addFirst(357);
      tokenStack.addFirst(token);
      return true;
    case 110:
      stateStack.addFirst(358);
      tokenStack.addFirst(token);
      return true;
    case 103:
      stateStack.addFirst(359);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(249);
      tokenStack.addFirst(token);
      return true;
    case 117:
      stateStack.addFirst(360);
      tokenStack.addFirst(token);
      return true;
    case 119:
      stateStack.addFirst(361);
      tokenStack.addFirst(token);
      return true;
    case 100:
      stateStack.addFirst(362);
      tokenStack.addFirst(token);
      return true;
    case 152:
      stateStack.addFirst(363);
      tokenStack.addFirst(token);
      return true;
    case 80:
      stateStack.addFirst(364);
      tokenStack.addFirst(token);
      return true;
    case 94:
      stateStack.addFirst(365);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(366);
      tokenStack.addFirst(token);
      return true;
    case 112:
      stateStack.addFirst(367);
      tokenStack.addFirst(token);
      return true;
    case 86:
      stateStack.addFirst(368);
      tokenStack.addFirst(token);
      return true;
    case 120:
      stateStack.addFirst(369);
      tokenStack.addFirst(token);
      return true;
    case 99:
      stateStack.addFirst(370);
      tokenStack.addFirst(token);
      return true;
    case 125:
      stateStack.addFirst(371);
      tokenStack.addFirst(token);
      return true;
    case 77:
      stateStack.addFirst(372);
      tokenStack.addFirst(token);
      return true;
    case 92:
      stateStack.addFirst(373);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(374);
      tokenStack.addFirst(token);
      return true;
    case 84:
      stateStack.addFirst(375);
      tokenStack.addFirst(token);
      return true;
    case 104:
      stateStack.addFirst(376);
      tokenStack.addFirst(token);
      return true;
    case 114:
      stateStack.addFirst(377);
      tokenStack.addFirst(token);
      return true;
    case 90:
      stateStack.addFirst(378);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(379);
      tokenStack.addFirst(token);
      return true;
    case 118:
      stateStack.addFirst(265);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_35, 2);
    case 137:
      return reduce(RULE_35, 2);
    case 121:
      return reduce(RULE_35, 2);
    case 124:
      return reduce(RULE_35, 2);
    case 157:
      return reduce(RULE_35, 2);
    case 123:
      return reduce(RULE_35, 2);
    case 156:
      return reduce(RULE_35, 2);
    case 83:
      return reduce(RULE_35, 2);
    case 122:
      return reduce(RULE_35, 2);
    case 165:
      return reduce(RULE_35, 2);
    case 147:
      return reduce(RULE_35, 2);
    case 129:
      return reduce(RULE_35, 2);
    case 167:
      return reduce(RULE_35, 2);
    case 164:
      return reduce(RULE_35, 2);
    case 75:
      return reduce(RULE_35, 2);
    case 105:
      return reduce(RULE_35, 2);
    case 82:
      return reduce(RULE_35, 2);
    case 177:
      return reduce(RULE_35, 2);
    case 143:
      return reduce(RULE_35, 2);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final int goto704(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 12: return 266;
    default: return -1;
    }
  }

  private final boolean action705(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_35, 1);
    case 137:
      return reduce(RULE_35, 1);
    case 121:
      return reduce(RULE_35, 1);
    case 124:
      return reduce(RULE_35, 1);
    case 157:
      return reduce(RULE_35, 1);
    case 123:
      return reduce(RULE_35, 1);
    case 156:
      return reduce(RULE_35, 1);
    case 83:
      return reduce(RULE_35, 1);
    case 122:
      return reduce(RULE_35, 1);
    case 165:
      return reduce(RULE_35, 1);
    case 147:
      return reduce(RULE_35, 1);
    case 129:
      return reduce(RULE_35, 1);
    case 167:
      return reduce(RULE_35, 1);
    case 164:
      return reduce(RULE_35, 1);
    case 75:
      return reduce(RULE_35, 1);
    case 105:
      return reduce(RULE_35, 1);
    case 82:
      return reduce(RULE_35, 1);
    case 177:
      return reduce(RULE_35, 1);
    case 143:
      return reduce(RULE_35, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, RBRACE, SEMICOLON, NATIVE_KEYWORD, RSQUARE, MUTABLE_KEYWORD, COMMA, RPAREN, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, COLON, FINAL_KEYWORD});
    }
  }

  private final boolean action706(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_22, 13);
    case 149:
      return reduce(RULE_22, 13);
    case 139:
      return reduce(RULE_22, 13);
    case 175:
      return reduce(RULE_22, 13);
    case 157:
      return reduce(RULE_22, 13);
    case 142:
      return reduce(RULE_22, 13);
    case 155:
      return reduce(RULE_22, 13);
    case 173:
      return reduce(RULE_22, 13);
    case 106:
      return reduce(RULE_22, 13);
    case 160:
      return reduce(RULE_22, 13);
    case 130:
      return reduce(RULE_22, 13);
    case 129:
      return reduce(RULE_22, 13);
    case 167:
      return reduce(RULE_22, 13);
    case 74:
      return reduce(RULE_22, 13);
    case 102:
      return reduce(RULE_22, 13);
    case 153:
      return reduce(RULE_22, 13);
    case 75:
      return reduce(RULE_22, 13);
    case 138:
      return reduce(RULE_22, 13);
    case 163:
      return reduce(RULE_22, 13);
    case 174:
      return reduce(RULE_22, 13);
    case 166:
      return reduce(RULE_22, 13);
    case 172:
      return reduce(RULE_22, 13);
    case 107:
      return reduce(RULE_22, 13);
    case 89:
      return reduce(RULE_22, 13);
    case 170:
      return reduce(RULE_22, 13);
    case 143:
      return reduce(RULE_22, 13);
    case 73:
      return reduce(RULE_22, 13);
    case 176:
      return reduce(RULE_22, 13);
    case 132:
      return reduce(RULE_22, 13);
    case 169:
      return reduce(RULE_22, 13);
    case 121:
      return reduce(RULE_22, 13);
    case 156:
      return reduce(RULE_22, 13);
    case 133:
      return reduce(RULE_22, 13);
    case 131:
      return reduce(RULE_22, 13);
    case 148:
      return reduce(RULE_22, 13);
    case 76:
      return reduce(RULE_22, 13);
    case 128:
      return reduce(RULE_22, 13);
    case 145:
      return reduce(RULE_22, 13);
    case 168:
      return reduce(RULE_22, 13);
    case 164:
      return reduce(RULE_22, 13);
    case 181:
      return reduce(RULE_22, 13);
    case 93:
      return reduce(RULE_22, 13);
    case 105:
      return reduce(RULE_22, 13);
    case 179:
      return reduce(RULE_22, 13);
    case 177:
      return reduce(RULE_22, 13);
    case 146:
      return reduce(RULE_22, 13);
    case 72:
      return reduce(RULE_22, 13);
    case 158:
      return reduce(RULE_22, 13);
    case 116:
      return reduce(RULE_22, 13);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action707(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      return reduce(RULE_66, 1);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action708(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      return reduce(RULE_66, 0);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action709(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto709(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 727;
    default: return -1;
    }
  }

  private final boolean action710(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      stateStack.addFirst(128);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 142:
      stateStack.addFirst(110);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(113);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 74:
      stateStack.addFirst(114);
      tokenStack.addFirst(token);
      return true;
    case 127:
      stateStack.addFirst(213);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 172:
      stateStack.addFirst(117);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 98:
      stateStack.addFirst(214);
      tokenStack.addFirst(token);
      return true;
    case 73:
      stateStack.addFirst(120);
      tokenStack.addFirst(token);
      return true;
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 169:
      stateStack.addFirst(215);
      tokenStack.addFirst(token);
      return true;
    case 133:
      stateStack.addFirst(216);
      tokenStack.addFirst(token);
      return true;
    case 76:
      stateStack.addFirst(132);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 108:
      stateStack.addFirst(217);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(4);
      tokenStack.addFirst(token);
      return true;
    case 158:
      stateStack.addFirst(127);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, FLOATING_LITERAL, INT_KEYWORD, HASH, TILDE, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, STRING_LITERAL, MINUS, FLOAT_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto710(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 58: return 218;
    case 60: return 219;
    case 71: return 220;
    case 48: return 221;
    case 64: return 140;
    case 66: return 139;
    case 55: return 222;
    case 59: return 223;
    case 30: return 239;
    case 65: return 225;
    case 68: return 226;
    case 53: return 240;
    case 62: return 228;
    case 56: return 229;
    case 67: return 230;
    case 28: return 241;
    case 52: return 728;
    case 61: return 232;
    case 63: return 233;
    case 29: return 243;
    case 49: return 87;
    case 57: return 235;
    case 54: return 236;
    default: return -1;
    }
  }

  private final boolean action711(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(729);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action712(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 8);
    case 149:
      return reduce(RULE_17, 8);
    case 137:
      return reduce(RULE_17, 8);
    case 110:
      return reduce(RULE_17, 8);
    case 157:
      return reduce(RULE_17, 8);
    case 103:
      return reduce(RULE_17, 8);
    case 96:
      return reduce(RULE_17, 8);
    case 106:
      return reduce(RULE_17, 8);
    case 147:
      return reduce(RULE_17, 8);
    case 129:
      return reduce(RULE_17, 8);
    case 117:
      return reduce(RULE_17, 8);
    case 167:
      return reduce(RULE_17, 8);
    case 119:
      return reduce(RULE_17, 8);
    case 75:
      return reduce(RULE_17, 8);
    case 100:
      return reduce(RULE_17, 8);
    case 152:
      return reduce(RULE_17, 8);
    case 94:
      return reduce(RULE_17, 8);
    case 80:
      return reduce(RULE_17, 8);
    case 107:
      return reduce(RULE_17, 8);
    case 143:
      return reduce(RULE_17, 8);
    case 98:
      return reduce(RULE_17, 8);
    case 112:
      return reduce(RULE_17, 8);
    case 86:
      return reduce(RULE_17, 8);
    case 120:
      return reduce(RULE_17, 8);
    case 121:
      return reduce(RULE_17, 8);
    case 124:
      return reduce(RULE_17, 8);
    case 123:
      return reduce(RULE_17, 8);
    case 156:
      return reduce(RULE_17, 8);
    case 83:
      return reduce(RULE_17, 8);
    case 99:
      return reduce(RULE_17, 8);
    case 122:
      return reduce(RULE_17, 8);
    case 125:
      return reduce(RULE_17, 8);
    case 165:
      return reduce(RULE_17, 8);
    case 77:
      return reduce(RULE_17, 8);
    case 108:
      return reduce(RULE_17, 8);
    case 92:
      return reduce(RULE_17, 8);
    case 164:
      return reduce(RULE_17, 8);
    case 84:
      return reduce(RULE_17, 8);
    case 105:
      return reduce(RULE_17, 8);
    case 104:
      return reduce(RULE_17, 8);
    case 114:
      return reduce(RULE_17, 8);
    case 82:
      return reduce(RULE_17, 8);
    case 177:
      return reduce(RULE_17, 8);
    case 90:
      return reduce(RULE_17, 8);
    case 116:
      return reduce(RULE_17, 8);
    case 118:
      return reduce(RULE_17, 8);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, DOT, LANGLE, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LANGLE_EQUALS, LBRACE, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action713(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(730);
      tokenStack.addFirst(token);
      return true;
    case 83:
      stateStack.addFirst(601);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE, COMMA});
    }
  }

  private final boolean action714(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 34);
    case 137:
      return reduce(RULE_9, 34);
    case 110:
      return reduce(RULE_9, 34);
    case 79:
      return reduce(RULE_9, 34);
    case 106:
      return reduce(RULE_9, 34);
    case 117:
      return reduce(RULE_9, 34);
    case 102:
      return reduce(RULE_9, 34);
    case 167:
      return reduce(RULE_9, 34);
    case 152:
      return reduce(RULE_9, 34);
    case 94:
      return reduce(RULE_9, 34);
    case 80:
      return reduce(RULE_9, 34);
    case 98:
      return reduce(RULE_9, 34);
    case 171:
      return reduce(RULE_9, 34);
    case 86:
      return reduce(RULE_9, 34);
    case 83:
      return reduce(RULE_9, 34);
    case 122:
      return reduce(RULE_9, 34);
    case 108:
      return reduce(RULE_9, 34);
    case 92:
      return reduce(RULE_9, 34);
    case 128:
      return reduce(RULE_9, 34);
    case 104:
      return reduce(RULE_9, 34);
    case 82:
      return reduce(RULE_9, 34);
    case 116:
      return reduce(RULE_9, 34);
    case 85:
      return reduce(RULE_9, 34);
    case 149:
      return reduce(RULE_9, 34);
    case 157:
      return reduce(RULE_9, 34);
    case 103:
      return reduce(RULE_9, 34);
    case 147:
      return reduce(RULE_9, 34);
    case 129:
      return reduce(RULE_9, 34);
    case 119:
      return reduce(RULE_9, 34);
    case 75:
      return reduce(RULE_9, 34);
    case 100:
      return reduce(RULE_9, 34);
    case 107:
      return reduce(RULE_9, 34);
    case 143:
      return reduce(RULE_9, 34);
    case 112:
      return reduce(RULE_9, 34);
    case 120:
      return reduce(RULE_9, 34);
    case 121:
      return reduce(RULE_9, 34);
    case 124:
      return reduce(RULE_9, 34);
    case 156:
      return reduce(RULE_9, 34);
    case 123:
      return reduce(RULE_9, 34);
    case 99:
      return reduce(RULE_9, 34);
    case 125:
      return reduce(RULE_9, 34);
    case 165:
      return reduce(RULE_9, 34);
    case 77:
      return reduce(RULE_9, 34);
    case 164:
      return reduce(RULE_9, 34);
    case 84:
      return reduce(RULE_9, 34);
    case 105:
      return reduce(RULE_9, 34);
    case 114:
      return reduce(RULE_9, 34);
    case 72:
      return reduce(RULE_9, 34);
    case 177:
      return reduce(RULE_9, 34);
    case 90:
      return reduce(RULE_9, 34);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action715(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_68, 3);
    case 173:
      return reduce(RULE_68, 3);
    case 106:
      return reduce(RULE_68, 3);
    case 153:
      return reduce(RULE_68, 3);
    case 102:
      return reduce(RULE_68, 3);
    case 74:
      return reduce(RULE_68, 3);
    case 167:
      return reduce(RULE_68, 3);
    case 163:
      return reduce(RULE_68, 3);
    case 174:
      return reduce(RULE_68, 3);
    case 134:
      return reduce(RULE_68, 3);
    case 172:
      return reduce(RULE_68, 3);
    case 89:
      return reduce(RULE_68, 3);
    case 170:
      return reduce(RULE_68, 3);
    case 73:
      return reduce(RULE_68, 3);
    case 176:
      return reduce(RULE_68, 3);
    case 132:
      return reduce(RULE_68, 3);
    case 169:
      return reduce(RULE_68, 3);
    case 133:
      return reduce(RULE_68, 3);
    case 148:
      return reduce(RULE_68, 3);
    case 128:
      return reduce(RULE_68, 3);
    case 144:
      return reduce(RULE_68, 3);
    case 93:
      return reduce(RULE_68, 3);
    case 146:
      return reduce(RULE_68, 3);
    case 158:
      return reduce(RULE_68, 3);
    case 116:
      return reduce(RULE_68, 3);
    case 159:
      return reduce(RULE_68, 3);
    case 149:
      return reduce(RULE_68, 3);
    case 139:
      return reduce(RULE_68, 3);
    case 175:
      return reduce(RULE_68, 3);
    case 157:
      return reduce(RULE_68, 3);
    case 155:
      return reduce(RULE_68, 3);
    case 160:
      return reduce(RULE_68, 3);
    case 130:
      return reduce(RULE_68, 3);
    case 129:
      return reduce(RULE_68, 3);
    case 138:
      return reduce(RULE_68, 3);
    case 75:
      return reduce(RULE_68, 3);
    case 166:
      return reduce(RULE_68, 3);
    case 107:
      return reduce(RULE_68, 3);
    case 143:
      return reduce(RULE_68, 3);
    case 121:
      return reduce(RULE_68, 3);
    case 156:
      return reduce(RULE_68, 3);
    case 131:
      return reduce(RULE_68, 3);
    case 76:
      return reduce(RULE_68, 3);
    case 145:
      return reduce(RULE_68, 3);
    case 168:
      return reduce(RULE_68, 3);
    case 164:
      return reduce(RULE_68, 3);
    case 181:
      return reduce(RULE_68, 3);
    case 105:
      return reduce(RULE_68, 3);
    case 179:
      return reduce(RULE_68, 3);
    case 177:
      return reduce(RULE_68, 3);
    case 72:
      return reduce(RULE_68, 3);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, CATCH_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, FINALLY_KEYWORD, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD});
    }
  }

  private final boolean action716(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 8);
    case 173:
      return reduce(RULE_59, 8);
    case 106:
      return reduce(RULE_59, 8);
    case 153:
      return reduce(RULE_59, 8);
    case 102:
      return reduce(RULE_59, 8);
    case 74:
      return reduce(RULE_59, 8);
    case 167:
      return reduce(RULE_59, 8);
    case 163:
      return reduce(RULE_59, 8);
    case 174:
      return reduce(RULE_59, 8);
    case 172:
      return reduce(RULE_59, 8);
    case 89:
      return reduce(RULE_59, 8);
    case 170:
      return reduce(RULE_59, 8);
    case 98:
      return reduce(RULE_59, 8);
    case 73:
      return reduce(RULE_59, 8);
    case 176:
      return reduce(RULE_59, 8);
    case 132:
      return reduce(RULE_59, 8);
    case 169:
      return reduce(RULE_59, 8);
    case 133:
      return reduce(RULE_59, 8);
    case 148:
      return reduce(RULE_59, 8);
    case 128:
      return reduce(RULE_59, 8);
    case 108:
      return reduce(RULE_59, 8);
    case 93:
      return reduce(RULE_59, 8);
    case 146:
      return reduce(RULE_59, 8);
    case 158:
      return reduce(RULE_59, 8);
    case 116:
      return reduce(RULE_59, 8);
    case 159:
      return reduce(RULE_59, 8);
    case 149:
      return reduce(RULE_59, 8);
    case 139:
      return reduce(RULE_59, 8);
    case 175:
      return reduce(RULE_59, 8);
    case 157:
      return reduce(RULE_59, 8);
    case 155:
      return reduce(RULE_59, 8);
    case 160:
      return reduce(RULE_59, 8);
    case 130:
      return reduce(RULE_59, 8);
    case 129:
      return reduce(RULE_59, 8);
    case 138:
      return reduce(RULE_59, 8);
    case 75:
      return reduce(RULE_59, 8);
    case 127:
      return reduce(RULE_59, 8);
    case 166:
      return reduce(RULE_59, 8);
    case 107:
      return reduce(RULE_59, 8);
    case 143:
      return reduce(RULE_59, 8);
    case 121:
      return reduce(RULE_59, 8);
    case 124:
      return reduce(RULE_59, 8);
    case 156:
      return reduce(RULE_59, 8);
    case 131:
      return reduce(RULE_59, 8);
    case 76:
      return reduce(RULE_59, 8);
    case 145:
      return reduce(RULE_59, 8);
    case 168:
      return reduce(RULE_59, 8);
    case 181:
      return reduce(RULE_59, 8);
    case 164:
      return reduce(RULE_59, 8);
    case 105:
      return reduce(RULE_59, 8);
    case 179:
      return reduce(RULE_59, 8);
    case 72:
      return reduce(RULE_59, 8);
    case 177:
      return reduce(RULE_59, 8);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action717(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 4);
    case 173:
      return reduce(RULE_59, 4);
    case 106:
      return reduce(RULE_59, 4);
    case 153:
      return reduce(RULE_59, 4);
    case 102:
      return reduce(RULE_59, 4);
    case 74:
      return reduce(RULE_59, 4);
    case 167:
      return reduce(RULE_59, 4);
    case 163:
      return reduce(RULE_59, 4);
    case 174:
      return reduce(RULE_59, 4);
    case 172:
      return reduce(RULE_59, 4);
    case 89:
      return reduce(RULE_59, 4);
    case 170:
      return reduce(RULE_59, 4);
    case 98:
      return reduce(RULE_59, 4);
    case 73:
      return reduce(RULE_59, 4);
    case 176:
      return reduce(RULE_59, 4);
    case 132:
      return reduce(RULE_59, 4);
    case 169:
      return reduce(RULE_59, 4);
    case 133:
      return reduce(RULE_59, 4);
    case 148:
      return reduce(RULE_59, 4);
    case 128:
      return reduce(RULE_59, 4);
    case 108:
      return reduce(RULE_59, 4);
    case 93:
      return reduce(RULE_59, 4);
    case 146:
      return reduce(RULE_59, 4);
    case 158:
      return reduce(RULE_59, 4);
    case 116:
      return reduce(RULE_59, 4);
    case 159:
      return reduce(RULE_59, 4);
    case 149:
      return reduce(RULE_59, 4);
    case 139:
      return reduce(RULE_59, 4);
    case 175:
      return reduce(RULE_59, 4);
    case 157:
      return reduce(RULE_59, 4);
    case 155:
      return reduce(RULE_59, 4);
    case 160:
      return reduce(RULE_59, 4);
    case 130:
      return reduce(RULE_59, 4);
    case 129:
      return reduce(RULE_59, 4);
    case 138:
      return reduce(RULE_59, 4);
    case 75:
      return reduce(RULE_59, 4);
    case 127:
      return reduce(RULE_59, 4);
    case 166:
      return reduce(RULE_59, 4);
    case 107:
      return reduce(RULE_59, 4);
    case 143:
      return reduce(RULE_59, 4);
    case 121:
      return reduce(RULE_59, 4);
    case 124:
      return reduce(RULE_59, 4);
    case 156:
      return reduce(RULE_59, 4);
    case 131:
      return reduce(RULE_59, 4);
    case 76:
      return reduce(RULE_59, 4);
    case 145:
      return reduce(RULE_59, 4);
    case 168:
      return reduce(RULE_59, 4);
    case 181:
      return reduce(RULE_59, 4);
    case 164:
      return reduce(RULE_59, 4);
    case 105:
      return reduce(RULE_59, 4);
    case 179:
      return reduce(RULE_59, 4);
    case 72:
      return reduce(RULE_59, 4);
    case 177:
      return reduce(RULE_59, 4);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action718(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_59, 12);
    case 173:
      return reduce(RULE_59, 12);
    case 106:
      return reduce(RULE_59, 12);
    case 153:
      return reduce(RULE_59, 12);
    case 102:
      return reduce(RULE_59, 12);
    case 74:
      return reduce(RULE_59, 12);
    case 167:
      return reduce(RULE_59, 12);
    case 163:
      return reduce(RULE_59, 12);
    case 174:
      return reduce(RULE_59, 12);
    case 172:
      return reduce(RULE_59, 12);
    case 89:
      return reduce(RULE_59, 12);
    case 170:
      return reduce(RULE_59, 12);
    case 98:
      return reduce(RULE_59, 12);
    case 73:
      return reduce(RULE_59, 12);
    case 176:
      return reduce(RULE_59, 12);
    case 132:
      return reduce(RULE_59, 12);
    case 169:
      return reduce(RULE_59, 12);
    case 133:
      return reduce(RULE_59, 12);
    case 148:
      return reduce(RULE_59, 12);
    case 128:
      return reduce(RULE_59, 12);
    case 108:
      return reduce(RULE_59, 12);
    case 93:
      return reduce(RULE_59, 12);
    case 146:
      return reduce(RULE_59, 12);
    case 158:
      return reduce(RULE_59, 12);
    case 116:
      return reduce(RULE_59, 12);
    case 159:
      return reduce(RULE_59, 12);
    case 149:
      return reduce(RULE_59, 12);
    case 139:
      return reduce(RULE_59, 12);
    case 175:
      return reduce(RULE_59, 12);
    case 157:
      return reduce(RULE_59, 12);
    case 155:
      return reduce(RULE_59, 12);
    case 160:
      return reduce(RULE_59, 12);
    case 130:
      return reduce(RULE_59, 12);
    case 129:
      return reduce(RULE_59, 12);
    case 138:
      return reduce(RULE_59, 12);
    case 75:
      return reduce(RULE_59, 12);
    case 127:
      return reduce(RULE_59, 12);
    case 166:
      return reduce(RULE_59, 12);
    case 107:
      return reduce(RULE_59, 12);
    case 143:
      return reduce(RULE_59, 12);
    case 121:
      return reduce(RULE_59, 12);
    case 124:
      return reduce(RULE_59, 12);
    case 156:
      return reduce(RULE_59, 12);
    case 131:
      return reduce(RULE_59, 12);
    case 76:
      return reduce(RULE_59, 12);
    case 145:
      return reduce(RULE_59, 12);
    case 168:
      return reduce(RULE_59, 12);
    case 181:
      return reduce(RULE_59, 12);
    case 164:
      return reduce(RULE_59, 12);
    case 105:
      return reduce(RULE_59, 12);
    case 179:
      return reduce(RULE_59, 12);
    case 72:
      return reduce(RULE_59, 12);
    case 177:
      return reduce(RULE_59, 12);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, EXCLAIMATION_MARK, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, MINUS, UNDERSCORE, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, TILDE, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, SEMICOLON, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action719(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 39);
    case 137:
      return reduce(RULE_9, 39);
    case 110:
      return reduce(RULE_9, 39);
    case 79:
      return reduce(RULE_9, 39);
    case 106:
      return reduce(RULE_9, 39);
    case 117:
      return reduce(RULE_9, 39);
    case 102:
      return reduce(RULE_9, 39);
    case 167:
      return reduce(RULE_9, 39);
    case 152:
      return reduce(RULE_9, 39);
    case 94:
      return reduce(RULE_9, 39);
    case 80:
      return reduce(RULE_9, 39);
    case 98:
      return reduce(RULE_9, 39);
    case 171:
      return reduce(RULE_9, 39);
    case 86:
      return reduce(RULE_9, 39);
    case 83:
      return reduce(RULE_9, 39);
    case 122:
      return reduce(RULE_9, 39);
    case 108:
      return reduce(RULE_9, 39);
    case 92:
      return reduce(RULE_9, 39);
    case 128:
      return reduce(RULE_9, 39);
    case 104:
      return reduce(RULE_9, 39);
    case 82:
      return reduce(RULE_9, 39);
    case 116:
      return reduce(RULE_9, 39);
    case 85:
      return reduce(RULE_9, 39);
    case 149:
      return reduce(RULE_9, 39);
    case 157:
      return reduce(RULE_9, 39);
    case 103:
      return reduce(RULE_9, 39);
    case 147:
      return reduce(RULE_9, 39);
    case 129:
      return reduce(RULE_9, 39);
    case 119:
      return reduce(RULE_9, 39);
    case 75:
      return reduce(RULE_9, 39);
    case 100:
      return reduce(RULE_9, 39);
    case 107:
      return reduce(RULE_9, 39);
    case 143:
      return reduce(RULE_9, 39);
    case 112:
      return reduce(RULE_9, 39);
    case 120:
      return reduce(RULE_9, 39);
    case 121:
      return reduce(RULE_9, 39);
    case 124:
      return reduce(RULE_9, 39);
    case 156:
      return reduce(RULE_9, 39);
    case 123:
      return reduce(RULE_9, 39);
    case 99:
      return reduce(RULE_9, 39);
    case 125:
      return reduce(RULE_9, 39);
    case 165:
      return reduce(RULE_9, 39);
    case 77:
      return reduce(RULE_9, 39);
    case 164:
      return reduce(RULE_9, 39);
    case 84:
      return reduce(RULE_9, 39);
    case 105:
      return reduce(RULE_9, 39);
    case 114:
      return reduce(RULE_9, 39);
    case 72:
      return reduce(RULE_9, 39);
    case 177:
      return reduce(RULE_9, 39);
    case 90:
      return reduce(RULE_9, 39);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action720(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 121:
      stateStack.addFirst(731);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {RBRACE});
    }
  }

  private final boolean action721(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 33);
    case 137:
      return reduce(RULE_9, 33);
    case 110:
      return reduce(RULE_9, 33);
    case 79:
      return reduce(RULE_9, 33);
    case 106:
      return reduce(RULE_9, 33);
    case 117:
      return reduce(RULE_9, 33);
    case 102:
      return reduce(RULE_9, 33);
    case 167:
      return reduce(RULE_9, 33);
    case 152:
      return reduce(RULE_9, 33);
    case 94:
      return reduce(RULE_9, 33);
    case 80:
      return reduce(RULE_9, 33);
    case 98:
      return reduce(RULE_9, 33);
    case 171:
      return reduce(RULE_9, 33);
    case 86:
      return reduce(RULE_9, 33);
    case 83:
      return reduce(RULE_9, 33);
    case 122:
      return reduce(RULE_9, 33);
    case 108:
      return reduce(RULE_9, 33);
    case 92:
      return reduce(RULE_9, 33);
    case 128:
      return reduce(RULE_9, 33);
    case 104:
      return reduce(RULE_9, 33);
    case 82:
      return reduce(RULE_9, 33);
    case 116:
      return reduce(RULE_9, 33);
    case 85:
      return reduce(RULE_9, 33);
    case 149:
      return reduce(RULE_9, 33);
    case 157:
      return reduce(RULE_9, 33);
    case 103:
      return reduce(RULE_9, 33);
    case 147:
      return reduce(RULE_9, 33);
    case 129:
      return reduce(RULE_9, 33);
    case 119:
      return reduce(RULE_9, 33);
    case 75:
      return reduce(RULE_9, 33);
    case 100:
      return reduce(RULE_9, 33);
    case 107:
      return reduce(RULE_9, 33);
    case 143:
      return reduce(RULE_9, 33);
    case 112:
      return reduce(RULE_9, 33);
    case 120:
      return reduce(RULE_9, 33);
    case 121:
      return reduce(RULE_9, 33);
    case 124:
      return reduce(RULE_9, 33);
    case 156:
      return reduce(RULE_9, 33);
    case 123:
      return reduce(RULE_9, 33);
    case 99:
      return reduce(RULE_9, 33);
    case 125:
      return reduce(RULE_9, 33);
    case 165:
      return reduce(RULE_9, 33);
    case 77:
      return reduce(RULE_9, 33);
    case 164:
      return reduce(RULE_9, 33);
    case 84:
      return reduce(RULE_9, 33);
    case 105:
      return reduce(RULE_9, 33);
    case 114:
      return reduce(RULE_9, 33);
    case 72:
      return reduce(RULE_9, 33);
    case 177:
      return reduce(RULE_9, 33);
    case 90:
      return reduce(RULE_9, 33);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action722(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 124:
      stateStack.addFirst(732);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 137:
      return reduce(RULE_1, 0);
    case 165:
      return reduce(RULE_1, 0);
    case 147:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, SEMICOLON, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto722(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 26: return 15;
    case 27: return 694;
    case 19: return 695;
    default: return -1;
    }
  }

  private final boolean action723(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(733);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_70, 5);
    case 137:
      return reduce(RULE_70, 5);
    case 124:
      return reduce(RULE_70, 5);
    case 157:
      return reduce(RULE_70, 5);
    case 156:
      return reduce(RULE_70, 5);
    case 165:
      return reduce(RULE_70, 5);
    case 147:
      return reduce(RULE_70, 5);
    case 129:
      return reduce(RULE_70, 5);
    case 167:
      return reduce(RULE_70, 5);
    case 164:
      return reduce(RULE_70, 5);
    case 75:
      return reduce(RULE_70, 5);
    case 177:
      return reduce(RULE_70, 5);
    case 143:
      return reduce(RULE_70, 5);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto723(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 734;
    default: return -1;
    }
  }

  private final boolean action724(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 106:
      stateStack.addFirst(735);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_70, 2);
    case 137:
      return reduce(RULE_70, 2);
    case 124:
      return reduce(RULE_70, 2);
    case 157:
      return reduce(RULE_70, 2);
    case 156:
      return reduce(RULE_70, 2);
    case 165:
      return reduce(RULE_70, 2);
    case 147:
      return reduce(RULE_70, 2);
    case 129:
      return reduce(RULE_70, 2);
    case 167:
      return reduce(RULE_70, 2);
    case 164:
      return reduce(RULE_70, 2);
    case 75:
      return reduce(RULE_70, 2);
    case 177:
      return reduce(RULE_70, 2);
    case 143:
      return reduce(RULE_70, 2);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final int goto724(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 21: return 736;
    default: return -1;
    }
  }

  private final boolean action725(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 149:
      return reduce(RULE_70, 0);
    case 137:
      return reduce(RULE_70, 0);
    case 124:
      return reduce(RULE_70, 0);
    case 157:
      return reduce(RULE_70, 0);
    case 156:
      return reduce(RULE_70, 0);
    case 165:
      return reduce(RULE_70, 0);
    case 147:
      return reduce(RULE_70, 0);
    case 129:
      return reduce(RULE_70, 0);
    case 167:
      return reduce(RULE_70, 0);
    case 164:
      return reduce(RULE_70, 0);
    case 75:
      return reduce(RULE_70, 0);
    case 105:
      return reduce(RULE_14, 0);
    case 177:
      return reduce(RULE_70, 0);
    case 143:
      return reduce(RULE_70, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, LBRACE, UNBACKED_KEYWORD, FINAL_KEYWORD, THROWS_KEYWORD});
    }
  }

  private final int goto725(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 737;
    default: return -1;
    }
  }

  private final boolean action726(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 142:
      return reduce(RULE_68, 1);
    case 173:
      return reduce(RULE_68, 1);
    case 106:
      return reduce(RULE_68, 1);
    case 153:
      return reduce(RULE_68, 1);
    case 102:
      return reduce(RULE_68, 1);
    case 74:
      return reduce(RULE_68, 1);
    case 167:
      return reduce(RULE_68, 1);
    case 163:
      return reduce(RULE_68, 1);
    case 174:
      return reduce(RULE_68, 1);
    case 134:
      return reduce(RULE_68, 1);
    case 172:
      return reduce(RULE_68, 1);
    case 89:
      return reduce(RULE_68, 1);
    case 170:
      return reduce(RULE_68, 1);
    case 73:
      return reduce(RULE_68, 1);
    case 176:
      return reduce(RULE_68, 1);
    case 132:
      return reduce(RULE_68, 1);
    case 169:
      return reduce(RULE_68, 1);
    case 133:
      return reduce(RULE_68, 1);
    case 148:
      return reduce(RULE_68, 1);
    case 128:
      return reduce(RULE_68, 1);
    case 144:
      return reduce(RULE_68, 1);
    case 93:
      return reduce(RULE_68, 1);
    case 146:
      return reduce(RULE_68, 1);
    case 158:
      return reduce(RULE_68, 1);
    case 116:
      return reduce(RULE_68, 1);
    case 159:
      return reduce(RULE_68, 1);
    case 149:
      return reduce(RULE_68, 1);
    case 139:
      return reduce(RULE_68, 1);
    case 175:
      return reduce(RULE_68, 1);
    case 157:
      return reduce(RULE_68, 1);
    case 155:
      return reduce(RULE_68, 1);
    case 160:
      return reduce(RULE_68, 1);
    case 130:
      return reduce(RULE_68, 1);
    case 129:
      return reduce(RULE_68, 1);
    case 138:
      return reduce(RULE_68, 1);
    case 75:
      return reduce(RULE_68, 1);
    case 166:
      return reduce(RULE_68, 1);
    case 107:
      return reduce(RULE_68, 1);
    case 143:
      return reduce(RULE_68, 1);
    case 121:
      return reduce(RULE_68, 1);
    case 156:
      return reduce(RULE_68, 1);
    case 131:
      return reduce(RULE_68, 1);
    case 76:
      return reduce(RULE_68, 1);
    case 145:
      return reduce(RULE_68, 1);
    case 168:
      return reduce(RULE_68, 1);
    case 164:
      return reduce(RULE_68, 1);
    case 181:
      return reduce(RULE_68, 1);
    case 105:
      return reduce(RULE_68, 1);
    case 179:
      return reduce(RULE_68, 1);
    case 72:
      return reduce(RULE_68, 1);
    case 177:
      return reduce(RULE_68, 1);
    default: throw new BadTokenException(token, new Object[] {FALSE_KEYWORD, TRY_KEYWORD, LPAREN, INT_KEYWORD, HASH, FLOATING_LITERAL, STATIC_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, CATCH_KEYWORD, TRUE_KEYWORD, DOUBLE_MINUS, THROW_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, CAST_KEYWORD, IF_KEYWORD, UNDERSCORE, FINALLY_KEYWORD, DOUBLE_PLUS, FOR_KEYWORD, NEW_KEYWORD, QUESTION_MARK, NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, CONTINUE_KEYWORD, SINCE_SPECIFIER, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, RBRACE, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, NAME});
    }
  }

  private final boolean action727(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_71, 1);
    case 149:
      return reduce(RULE_71, 1);
    case 139:
      return reduce(RULE_71, 1);
    case 175:
      return reduce(RULE_71, 1);
    case 142:
      return reduce(RULE_71, 1);
    case 157:
      return reduce(RULE_71, 1);
    case 155:
      return reduce(RULE_71, 1);
    case 173:
      return reduce(RULE_71, 1);
    case 106:
      return reduce(RULE_71, 1);
    case 160:
      return reduce(RULE_71, 1);
    case 130:
      return reduce(RULE_71, 1);
    case 129:
      return reduce(RULE_71, 1);
    case 167:
      return reduce(RULE_71, 1);
    case 74:
      return reduce(RULE_71, 1);
    case 102:
      return reduce(RULE_71, 1);
    case 153:
      return reduce(RULE_71, 1);
    case 75:
      return reduce(RULE_71, 1);
    case 138:
      return reduce(RULE_71, 1);
    case 163:
      return reduce(RULE_71, 1);
    case 174:
      return reduce(RULE_71, 1);
    case 166:
      return reduce(RULE_71, 1);
    case 172:
      return reduce(RULE_71, 1);
    case 107:
      return reduce(RULE_71, 1);
    case 89:
      return reduce(RULE_71, 1);
    case 170:
      return reduce(RULE_71, 1);
    case 143:
      return reduce(RULE_71, 1);
    case 73:
      return reduce(RULE_71, 1);
    case 176:
      return reduce(RULE_71, 1);
    case 132:
      return reduce(RULE_71, 1);
    case 169:
      return reduce(RULE_71, 1);
    case 121:
      return reduce(RULE_71, 1);
    case 133:
      return reduce(RULE_71, 1);
    case 156:
      return reduce(RULE_71, 1);
    case 131:
      return reduce(RULE_71, 1);
    case 76:
      return reduce(RULE_71, 1);
    case 148:
      return reduce(RULE_71, 1);
    case 145:
      return reduce(RULE_71, 1);
    case 128:
      return reduce(RULE_71, 1);
    case 168:
      return reduce(RULE_71, 1);
    case 181:
      return reduce(RULE_71, 1);
    case 164:
      return reduce(RULE_71, 1);
    case 93:
      return reduce(RULE_71, 1);
    case 105:
      return reduce(RULE_71, 1);
    case 179:
      return reduce(RULE_71, 1);
    case 72:
      return reduce(RULE_71, 1);
    case 146:
      return reduce(RULE_71, 1);
    case 177:
      return reduce(RULE_71, 1);
    case 158:
      return reduce(RULE_71, 1);
    case 116:
      return reduce(RULE_71, 1);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, FALSE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, MUTABLE_KEYWORD, CAST_KEYWORD, BREAK_KEYWORD, IF_KEYWORD, STRING_LITERAL, UNDERSCORE, FLOAT_KEYWORD, SUPER_KEYWORD, SELFISH_KEYWORD, WHILE_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, UNBACKED_KEYWORD, FOR_KEYWORD, NAME, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action728(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      return reduce(RULE_66, 2);
    default: throw new BadTokenException(token, new Object[] {RPAREN});
    }
  }

  private final boolean action729(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto729(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 738;
    default: return -1;
    }
  }

  private final boolean action730(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_17, 9);
    case 149:
      return reduce(RULE_17, 9);
    case 137:
      return reduce(RULE_17, 9);
    case 110:
      return reduce(RULE_17, 9);
    case 157:
      return reduce(RULE_17, 9);
    case 96:
      return reduce(RULE_17, 9);
    case 103:
      return reduce(RULE_17, 9);
    case 106:
      return reduce(RULE_17, 9);
    case 147:
      return reduce(RULE_17, 9);
    case 129:
      return reduce(RULE_17, 9);
    case 117:
      return reduce(RULE_17, 9);
    case 167:
      return reduce(RULE_17, 9);
    case 119:
      return reduce(RULE_17, 9);
    case 75:
      return reduce(RULE_17, 9);
    case 100:
      return reduce(RULE_17, 9);
    case 152:
      return reduce(RULE_17, 9);
    case 80:
      return reduce(RULE_17, 9);
    case 94:
      return reduce(RULE_17, 9);
    case 107:
      return reduce(RULE_17, 9);
    case 143:
      return reduce(RULE_17, 9);
    case 98:
      return reduce(RULE_17, 9);
    case 112:
      return reduce(RULE_17, 9);
    case 86:
      return reduce(RULE_17, 9);
    case 120:
      return reduce(RULE_17, 9);
    case 121:
      return reduce(RULE_17, 9);
    case 124:
      return reduce(RULE_17, 9);
    case 123:
      return reduce(RULE_17, 9);
    case 156:
      return reduce(RULE_17, 9);
    case 83:
      return reduce(RULE_17, 9);
    case 99:
      return reduce(RULE_17, 9);
    case 122:
      return reduce(RULE_17, 9);
    case 125:
      return reduce(RULE_17, 9);
    case 165:
      return reduce(RULE_17, 9);
    case 77:
      return reduce(RULE_17, 9);
    case 108:
      return reduce(RULE_17, 9);
    case 92:
      return reduce(RULE_17, 9);
    case 164:
      return reduce(RULE_17, 9);
    case 84:
      return reduce(RULE_17, 9);
    case 104:
      return reduce(RULE_17, 9);
    case 105:
      return reduce(RULE_17, 9);
    case 114:
      return reduce(RULE_17, 9);
    case 82:
      return reduce(RULE_17, 9);
    case 177:
      return reduce(RULE_17, 9);
    case 90:
      return reduce(RULE_17, 9);
    case 116:
      return reduce(RULE_17, 9);
    case 118:
      return reduce(RULE_17, 9);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, NATIVE_KEYWORD, PERCENT, LANGLE, DOT, LPAREN, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, QUESTION_MARK_COLON, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, INSTANCEOF_KEYWORD, CARET, DOUBLE_RANGLE, LSQUARE, FINAL_KEYWORD, EXCLAIMATION_MARK, PIPE, DOUBLE_EQUALS, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, COMMA, RPAREN, EXCLAIMATION_MARK_EQUALS, SETTER_KEYWORD, STAR, AMPERSAND, DOUBLE_PIPE, MINUS, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, LANGLE_EQUALS, PLUS, UNBACKED_KEYWORD, COLON, DOUBLE_PERCENT, QUESTION_MARK, QUESTION_MARK_DOT});
    }
  }

  private final boolean action731(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 87:
      return reduce(RULE_9, 35);
    case 137:
      return reduce(RULE_9, 35);
    case 110:
      return reduce(RULE_9, 35);
    case 79:
      return reduce(RULE_9, 35);
    case 106:
      return reduce(RULE_9, 35);
    case 117:
      return reduce(RULE_9, 35);
    case 102:
      return reduce(RULE_9, 35);
    case 167:
      return reduce(RULE_9, 35);
    case 152:
      return reduce(RULE_9, 35);
    case 94:
      return reduce(RULE_9, 35);
    case 80:
      return reduce(RULE_9, 35);
    case 98:
      return reduce(RULE_9, 35);
    case 171:
      return reduce(RULE_9, 35);
    case 86:
      return reduce(RULE_9, 35);
    case 83:
      return reduce(RULE_9, 35);
    case 122:
      return reduce(RULE_9, 35);
    case 108:
      return reduce(RULE_9, 35);
    case 92:
      return reduce(RULE_9, 35);
    case 128:
      return reduce(RULE_9, 35);
    case 104:
      return reduce(RULE_9, 35);
    case 82:
      return reduce(RULE_9, 35);
    case 116:
      return reduce(RULE_9, 35);
    case 85:
      return reduce(RULE_9, 35);
    case 149:
      return reduce(RULE_9, 35);
    case 157:
      return reduce(RULE_9, 35);
    case 103:
      return reduce(RULE_9, 35);
    case 147:
      return reduce(RULE_9, 35);
    case 129:
      return reduce(RULE_9, 35);
    case 119:
      return reduce(RULE_9, 35);
    case 75:
      return reduce(RULE_9, 35);
    case 100:
      return reduce(RULE_9, 35);
    case 107:
      return reduce(RULE_9, 35);
    case 143:
      return reduce(RULE_9, 35);
    case 112:
      return reduce(RULE_9, 35);
    case 120:
      return reduce(RULE_9, 35);
    case 121:
      return reduce(RULE_9, 35);
    case 124:
      return reduce(RULE_9, 35);
    case 156:
      return reduce(RULE_9, 35);
    case 123:
      return reduce(RULE_9, 35);
    case 99:
      return reduce(RULE_9, 35);
    case 125:
      return reduce(RULE_9, 35);
    case 165:
      return reduce(RULE_9, 35);
    case 77:
      return reduce(RULE_9, 35);
    case 164:
      return reduce(RULE_9, 35);
    case 84:
      return reduce(RULE_9, 35);
    case 105:
      return reduce(RULE_9, 35);
    case 114:
      return reduce(RULE_9, 35);
    case 72:
      return reduce(RULE_9, 35);
    case 177:
      return reduce(RULE_9, 35);
    case 90:
      return reduce(RULE_9, 35);
    default: throw new BadTokenException(token, new Object[] {DOUBLE_LANGLE, CONSTRUCTOR_KEYWORD, PERCENT, ARROW, LPAREN, QUESTION_MARK_COLON, HASH, STATIC_KEYWORD, INSTANCEOF_KEYWORD, DOUBLE_RANGLE, CARET, EXCLAIMATION_MARK, DOUBLE_EQUALS, THROWS_KEYWORD, COMMA, RPAREN, UNDERSCORE, DOUBLE_PIPE, MINUS, LANGLE_EQUALS, COLON, QUESTION_MARK, DOUBLE_COLON, IMMUTABLE_KEYWORD, NATIVE_KEYWORD, LANGLE, GETTER_KEYWORD, ABSTRACT_KEYWORD, RANGLE, SINCE_SPECIFIER, FORWARD_SLASH, LSQUARE, FINAL_KEYWORD, PIPE, RANGLE_EQUALS, RBRACE, SEMICOLON, MUTABLE_KEYWORD, RSQUARE, EXCLAIMATION_MARK_EQUALS, STAR, SETTER_KEYWORD, AMPERSAND, SELFISH_KEYWORD, DOUBLE_AMPERSAND, LBRACE, PLUS, UNBACKED_KEYWORD, NAME, DOUBLE_PERCENT});
    }
  }

  private final boolean action732(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_69, 1);
    case 139:
      return reduce(RULE_69, 1);
    case 137:
      return reduce(RULE_69, 1);
    case 175:
      return reduce(RULE_69, 1);
    case 157:
      return reduce(RULE_69, 1);
    case 155:
      return reduce(RULE_69, 1);
    case 106:
      return reduce(RULE_69, 1);
    case 160:
      return reduce(RULE_69, 1);
    case 130:
      return reduce(RULE_69, 1);
    case 129:
      return reduce(RULE_69, 1);
    case 102:
      return reduce(RULE_69, 1);
    case 167:
      return reduce(RULE_69, 1);
    case 153:
      return reduce(RULE_69, 1);
    case 75:
      return reduce(RULE_69, 1);
    case 174:
      return reduce(RULE_69, 1);
    case 180:
      return reduce(RULE_69, 1);
    case 166:
      return reduce(RULE_69, 1);
    case 107:
      return reduce(RULE_69, 1);
    case 143:
      return reduce(RULE_69, 1);
    case 176:
      return reduce(RULE_69, 1);
    case 132:
      return reduce(RULE_69, 1);
    case 121:
      return reduce(RULE_69, 1);
    case 156:
      return reduce(RULE_69, 1);
    case 145:
      return reduce(RULE_69, 1);
    case 162:
      return reduce(RULE_69, 1);
    case 164:
      return reduce(RULE_69, 1);
    case 105:
      return reduce(RULE_69, 1);
    case 179:
      return reduce(RULE_69, 1);
    case 177:
      return reduce(RULE_69, 1);
    case 72:
      return reduce(RULE_69, 1);
    case 116:
      return reduce(RULE_69, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, VOID_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, RBRACE, MUTABLE_KEYWORD, FLOAT_KEYWORD, PROPERTY_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action733(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      return reduce(RULE_1, 0);
    case 132:
      return reduce(RULE_1, 0);
    case 139:
      return reduce(RULE_1, 0);
    case 175:
      return reduce(RULE_1, 0);
    case 155:
      return reduce(RULE_1, 0);
    case 106:
      return reduce(RULE_1, 0);
    case 145:
      return reduce(RULE_1, 0);
    case 160:
      return reduce(RULE_1, 0);
    case 130:
      return reduce(RULE_1, 0);
    case 102:
      return reduce(RULE_1, 0);
    case 153:
      return reduce(RULE_1, 0);
    case 174:
      return reduce(RULE_1, 0);
    case 105:
      return reduce(RULE_1, 0);
    case 166:
      return reduce(RULE_1, 0);
    case 107:
      return reduce(RULE_1, 0);
    case 179:
      return reduce(RULE_1, 0);
    case 72:
      return reduce(RULE_1, 0);
    case 116:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, RPAREN, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto733(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 20: return 196;
    case 26: return 15;
    case 27: return 739;
    default: return -1;
    }
  }

  private final boolean action734(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto734(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 740;
    default: return -1;
    }
  }

  private final boolean action735(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 129:
      stateStack.addFirst(6);
      tokenStack.addFirst(token);
      return true;
    case 167:
      stateStack.addFirst(7);
      tokenStack.addFirst(token);
      return true;
    case 149:
      stateStack.addFirst(8);
      tokenStack.addFirst(token);
      return true;
    case 164:
      stateStack.addFirst(9);
      tokenStack.addFirst(token);
      return true;
    case 75:
      stateStack.addFirst(10);
      tokenStack.addFirst(token);
      return true;
    case 157:
      stateStack.addFirst(11);
      tokenStack.addFirst(token);
      return true;
    case 156:
      stateStack.addFirst(12);
      tokenStack.addFirst(token);
      return true;
    case 122:
      stateStack.addFirst(195);
      tokenStack.addFirst(token);
      return true;
    case 177:
      stateStack.addFirst(13);
      tokenStack.addFirst(token);
      return true;
    case 143:
      stateStack.addFirst(14);
      tokenStack.addFirst(token);
      return true;
    case 176:
      return reduce(RULE_1, 0);
    case 132:
      return reduce(RULE_1, 0);
    case 139:
      return reduce(RULE_1, 0);
    case 175:
      return reduce(RULE_1, 0);
    case 155:
      return reduce(RULE_1, 0);
    case 106:
      return reduce(RULE_1, 0);
    case 145:
      return reduce(RULE_1, 0);
    case 160:
      return reduce(RULE_1, 0);
    case 130:
      return reduce(RULE_1, 0);
    case 102:
      return reduce(RULE_1, 0);
    case 153:
      return reduce(RULE_1, 0);
    case 174:
      return reduce(RULE_1, 0);
    case 105:
      return reduce(RULE_1, 0);
    case 166:
      return reduce(RULE_1, 0);
    case 107:
      return reduce(RULE_1, 0);
    case 179:
      return reduce(RULE_1, 0);
    case 72:
      return reduce(RULE_1, 0);
    case 116:
      return reduce(RULE_1, 0);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, HASH, INT_KEYWORD, SINCE_SPECIFIER, UBYTE_KEYWORD, SHORT_KEYWORD, LSQUARE, FINAL_KEYWORD, ULONG_KEYWORD, BYTE_KEYWORD, MUTABLE_KEYWORD, RPAREN, FLOAT_KEYWORD, SELFISH_KEYWORD, LBRACE, USHORT_KEYWORD, NAME, UNBACKED_KEYWORD, QUESTION_MARK});
    }
  }

  private final int goto735(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 20: return 196;
    case 26: return 15;
    case 27: return 741;
    default: return -1;
    }
  }

  private final boolean action736(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto736(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 742;
    default: return -1;
    }
  }

  private final boolean action737(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto737(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 743;
    default: return -1;
    }
  }

  private final boolean action738(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 159:
      return reduce(RULE_71, 0);
    case 149:
      return reduce(RULE_71, 0);
    case 139:
      return reduce(RULE_71, 0);
    case 175:
      return reduce(RULE_71, 0);
    case 157:
      return reduce(RULE_71, 0);
    case 142:
      return reduce(RULE_71, 0);
    case 155:
      return reduce(RULE_71, 0);
    case 173:
      return reduce(RULE_71, 0);
    case 106:
      return reduce(RULE_71, 0);
    case 160:
      return reduce(RULE_71, 0);
    case 130:
      return reduce(RULE_71, 0);
    case 129:
      return reduce(RULE_71, 0);
    case 167:
      return reduce(RULE_71, 0);
    case 74:
      return reduce(RULE_71, 0);
    case 102:
      return reduce(RULE_71, 0);
    case 153:
      return reduce(RULE_71, 0);
    case 75:
      return reduce(RULE_71, 0);
    case 138:
      return reduce(RULE_71, 0);
    case 163:
      return reduce(RULE_71, 0);
    case 174:
      return reduce(RULE_71, 0);
    case 166:
      return reduce(RULE_71, 0);
    case 172:
      return reduce(RULE_71, 0);
    case 107:
      return reduce(RULE_71, 0);
    case 89:
      return reduce(RULE_71, 0);
    case 170:
      return reduce(RULE_71, 0);
    case 143:
      return reduce(RULE_71, 0);
    case 73:
      return reduce(RULE_71, 0);
    case 176:
      return reduce(RULE_71, 0);
    case 132:
      return reduce(RULE_71, 0);
    case 169:
      return reduce(RULE_71, 0);
    case 121:
      return reduce(RULE_71, 0);
    case 156:
      return reduce(RULE_71, 0);
    case 133:
      return reduce(RULE_71, 0);
    case 131:
      return reduce(RULE_71, 0);
    case 148:
      return reduce(RULE_71, 0);
    case 76:
      return reduce(RULE_71, 0);
    case 128:
      return reduce(RULE_71, 0);
    case 145:
      return reduce(RULE_71, 0);
    case 168:
      return reduce(RULE_71, 0);
    case 164:
      return reduce(RULE_71, 0);
    case 181:
      return reduce(RULE_71, 0);
    case 93:
      return reduce(RULE_71, 0);
    case 105:
      return reduce(RULE_71, 0);
    case 179:
      return reduce(RULE_71, 0);
    case 177:
      return reduce(RULE_71, 0);
    case 146:
      return reduce(RULE_71, 0);
    case 72:
      return reduce(RULE_71, 0);
    case 158:
      return reduce(RULE_71, 0);
    case 116:
      return reduce(RULE_71, 0);
    default: throw new BadTokenException(token, new Object[] {NULL_KEYWORD, IMMUTABLE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, FALSE_KEYWORD, NATIVE_KEYWORD, LONG_KEYWORD, TRY_KEYWORD, LPAREN, OBJECT_KEYWORD, BOOLEAN_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, FLOATING_LITERAL, HASH, INT_KEYWORD, SINCE_SPECIFIER, CONTINUE_KEYWORD, RETURN_KEYWORD, UBYTE_KEYWORD, SHORT_KEYWORD, TRUE_KEYWORD, LSQUARE, DOUBLE_MINUS, THROW_KEYWORD, FINAL_KEYWORD, INTEGER_LITERAL, ULONG_KEYWORD, BYTE_KEYWORD, THIS_KEYWORD, RBRACE, CAST_KEYWORD, MUTABLE_KEYWORD, BREAK_KEYWORD, STRING_LITERAL, IF_KEYWORD, FLOAT_KEYWORD, UNDERSCORE, SUPER_KEYWORD, WHILE_KEYWORD, SELFISH_KEYWORD, DOUBLE_PLUS, LBRACE, USHORT_KEYWORD, NAME, FOR_KEYWORD, UNBACKED_KEYWORD, NEW_KEYWORD, QUESTION_MARK});
    }
  }

  private final boolean action739(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(744);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto739(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 328;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action740(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto740(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 745;
    default: return -1;
    }
  }

  private final boolean action741(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 176:
      stateStack.addFirst(73);
      tokenStack.addFirst(token);
      return true;
    case 132:
      stateStack.addFirst(74);
      tokenStack.addFirst(token);
      return true;
    case 139:
      stateStack.addFirst(61);
      tokenStack.addFirst(token);
      return true;
    case 175:
      stateStack.addFirst(62);
      tokenStack.addFirst(token);
      return true;
    case 155:
      stateStack.addFirst(63);
      tokenStack.addFirst(token);
      return true;
    case 106:
      stateStack.addFirst(64);
      tokenStack.addFirst(token);
      return true;
    case 160:
      stateStack.addFirst(65);
      tokenStack.addFirst(token);
      return true;
    case 145:
      stateStack.addFirst(76);
      tokenStack.addFirst(token);
      return true;
    case 130:
      stateStack.addFirst(66);
      tokenStack.addFirst(token);
      return true;
    case 153:
      stateStack.addFirst(67);
      tokenStack.addFirst(token);
      return true;
    case 102:
      stateStack.addFirst(68);
      tokenStack.addFirst(token);
      return true;
    case 174:
      stateStack.addFirst(69);
      tokenStack.addFirst(token);
      return true;
    case 105:
      stateStack.addFirst(99);
      tokenStack.addFirst(token);
      return true;
    case 166:
      stateStack.addFirst(70);
      tokenStack.addFirst(token);
      return true;
    case 179:
      stateStack.addFirst(78);
      tokenStack.addFirst(token);
      return true;
    case 107:
      stateStack.addFirst(72);
      tokenStack.addFirst(token);
      return true;
    case 72:
      stateStack.addFirst(746);
      tokenStack.addFirst(token);
      return true;
    case 116:
      stateStack.addFirst(79);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {ULONG_KEYWORD, BYTE_KEYWORD, DOUBLE_KEYWORD, UINT_KEYWORD, LONG_KEYWORD, LPAREN, OBJECT_KEYWORD, FLOAT_KEYWORD, BOOLEAN_KEYWORD, INT_KEYWORD, HASH, UBYTE_KEYWORD, SHORT_KEYWORD, LBRACE, LSQUARE, USHORT_KEYWORD, NAME, QUESTION_MARK});
    }
  }

  private final int goto741(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 28: return 84;
    case 48: return 328;
    case 49: return 87;
    case 30: return 90;
    default: return -1;
    }
  }

  private final boolean action742(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto742(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 747;
    default: return -1;
    }
  }

  private final boolean action743(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_70, 1);
    case 137:
      return reduce(RULE_70, 1);
    case 124:
      return reduce(RULE_70, 1);
    case 157:
      return reduce(RULE_70, 1);
    case 156:
      return reduce(RULE_70, 1);
    case 165:
      return reduce(RULE_70, 1);
    case 147:
      return reduce(RULE_70, 1);
    case 129:
      return reduce(RULE_70, 1);
    case 167:
      return reduce(RULE_70, 1);
    case 164:
      return reduce(RULE_70, 1);
    case 75:
      return reduce(RULE_70, 1);
    case 177:
      return reduce(RULE_70, 1);
    case 143:
      return reduce(RULE_70, 1);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action744(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(748);
      tokenStack.addFirst(token);
      return true;
    case 96:
      return reduce(RULE_4, 0);
    case 72:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {DOT, RPAREN, NAME});
    }
  }

  private final boolean action745(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_70, 7);
    case 137:
      return reduce(RULE_70, 7);
    case 124:
      return reduce(RULE_70, 7);
    case 157:
      return reduce(RULE_70, 7);
    case 156:
      return reduce(RULE_70, 7);
    case 165:
      return reduce(RULE_70, 7);
    case 147:
      return reduce(RULE_70, 7);
    case 129:
      return reduce(RULE_70, 7);
    case 167:
      return reduce(RULE_70, 7);
    case 164:
      return reduce(RULE_70, 7);
    case 75:
      return reduce(RULE_70, 7);
    case 177:
      return reduce(RULE_70, 7);
    case 143:
      return reduce(RULE_70, 7);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action746(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 122:
      stateStack.addFirst(749);
      tokenStack.addFirst(token);
      return true;
    case 96:
      return reduce(RULE_4, 0);
    case 72:
      return reduce(RULE_4, 0);
    default: throw new BadTokenException(token, new Object[] {DOT, RPAREN, NAME});
    }
  }

  private final boolean action747(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_70, 4);
    case 137:
      return reduce(RULE_70, 4);
    case 124:
      return reduce(RULE_70, 4);
    case 157:
      return reduce(RULE_70, 4);
    case 156:
      return reduce(RULE_70, 4);
    case 165:
      return reduce(RULE_70, 4);
    case 147:
      return reduce(RULE_70, 4);
    case 129:
      return reduce(RULE_70, 4);
    case 167:
      return reduce(RULE_70, 4);
    case 164:
      return reduce(RULE_70, 4);
    case 75:
      return reduce(RULE_70, 4);
    case 177:
      return reduce(RULE_70, 4);
    case 143:
      return reduce(RULE_70, 4);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action748(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto748(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 750;
    default: return -1;
    }
  }

  private final boolean action749(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 171:
      stateStack.addFirst(198);
      tokenStack.addFirst(token);
      return true;
    case 105:
      return reduce(RULE_14, 0);
    default: throw new BadTokenException(token, new Object[] {LBRACE, THROWS_KEYWORD});
    }
  }

  private final int goto749(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 31: return 751;
    default: return -1;
    }
  }

  private final boolean action750(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto750(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 752;
    default: return -1;
    }
  }

  private final boolean action751(Token<ParseType> token) throws BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 105:
      stateStack.addFirst(211);
      tokenStack.addFirst(token);
      return true;
    default: throw new BadTokenException(token, new Object[] {LBRACE});
    }
  }

  private final int goto751(ParseType tokenType)
  {
    switch (tokenType.ordinal())
    {
    case 33: return 753;
    default: return -1;
    }
  }

  private final boolean action752(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_70, 6);
    case 137:
      return reduce(RULE_70, 6);
    case 124:
      return reduce(RULE_70, 6);
    case 157:
      return reduce(RULE_70, 6);
    case 156:
      return reduce(RULE_70, 6);
    case 165:
      return reduce(RULE_70, 6);
    case 147:
      return reduce(RULE_70, 6);
    case 129:
      return reduce(RULE_70, 6);
    case 167:
      return reduce(RULE_70, 6);
    case 164:
      return reduce(RULE_70, 6);
    case 75:
      return reduce(RULE_70, 6);
    case 177:
      return reduce(RULE_70, 6);
    case 143:
      return reduce(RULE_70, 6);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

  private final boolean action753(Token<ParseType> token) throws ParseException, BadTokenException
  {
    switch (token.getType() != null ? token.getType().ordinal() : -1)
    {
    case 149:
      return reduce(RULE_70, 3);
    case 137:
      return reduce(RULE_70, 3);
    case 124:
      return reduce(RULE_70, 3);
    case 157:
      return reduce(RULE_70, 3);
    case 156:
      return reduce(RULE_70, 3);
    case 165:
      return reduce(RULE_70, 3);
    case 147:
      return reduce(RULE_70, 3);
    case 129:
      return reduce(RULE_70, 3);
    case 167:
      return reduce(RULE_70, 3);
    case 164:
      return reduce(RULE_70, 3);
    case 75:
      return reduce(RULE_70, 3);
    case 177:
      return reduce(RULE_70, 3);
    case 143:
      return reduce(RULE_70, 3);
    default: throw new BadTokenException(token, new Object[] {IMMUTABLE_KEYWORD, CONSTRUCTOR_KEYWORD, SEMICOLON, NATIVE_KEYWORD, MUTABLE_KEYWORD, SETTER_KEYWORD, GETTER_KEYWORD, ABSTRACT_KEYWORD, STATIC_KEYWORD, SELFISH_KEYWORD, SINCE_SPECIFIER, UNBACKED_KEYWORD, FINAL_KEYWORD});
    }
  }

}

