package eu.bryants.anthony.plinth.ast.expression;

import eu.bryants.anthony.plinth.ast.LexicalPhrase;
import eu.bryants.anthony.plinth.ast.type.PrimitiveType;

/*
 * Created on 15 Sep 2012
 */

/**
 * @author Anthony Bryant
 */
public class RelationalExpression extends Expression
{

  public enum RelationalOperator
  {
    LESS_THAN("<"),
    LESS_THAN_EQUAL("<="),
    MORE_THAN(">"),
    MORE_THAN_EQUAL(">="),
    ;

    private String stringRepresentation;
    private RelationalOperator(String stringRepresentation)
    {
      this.stringRepresentation = stringRepresentation;
    }

    @Override
    public String toString()
    {
      return stringRepresentation;
    }
  }

  private Expression leftSubExpression;
  private Expression rightSubExpression;
  private RelationalOperator operator;

  // generated by the type checker so that the code generator knows which type to convert the operands to before comparing them
  // this can be null if both sub-expressions are for integer PrimitiveTypes and neither of them are the common super-type (e.g. ulong and int)
  // in this case, the CodeGenerator is expected to extend both integers into a large-enough signed integer to compare them properly (e.g. 65 bits)
  private PrimitiveType comparisonType;

  public RelationalExpression(Expression leftSubExpression, Expression rightSubExpression, RelationalOperator operator, LexicalPhrase lexicalPhrase)
  {
    super(lexicalPhrase);
    this.operator = operator;
    this.leftSubExpression = leftSubExpression;
    this.rightSubExpression = rightSubExpression;
  }

  /**
   * @return the leftSubExpression
   */
  public Expression getLeftSubExpression()
  {
    return leftSubExpression;
  }

  /**
   * @return the rightSubExpression
   */
  public Expression getRightSubExpression()
  {
    return rightSubExpression;
  }

  /**
   * @return the operator
   */
  public RelationalOperator getOperator()
  {
    return operator;
  }

  /**
   * @return the comparisonType
   */
  public PrimitiveType getComparisonType()
  {
    return comparisonType;
  }

  /**
   * @param comparisonType - the comparisonType to set
   */
  public void setComparisonType(PrimitiveType comparisonType)
  {
    this.comparisonType = comparisonType;
  }

  @Override
  public String toString()
  {
    return leftSubExpression + " " + operator + " " + rightSubExpression;
  }
}
