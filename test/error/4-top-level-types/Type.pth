// Plinth Test
// Compiler: Type.pth: 20:19-25: The declared thrown type string does not inherit from Throwable
// Compiler: Type.pth: 25:3-12: A generic type cannot have type arguments
// Compiler: Type.pth: 27:10: Cannot use the type parameter 'T' in a static context
// Compiler: Type.pth: 31:3-11: Alpha does not accept any type arguments
// Compiler: Type.pth: 33:3-22: Bravo expects 1 type argument, not 2
// Compiler: Type.pth: 35:10-14: 'uint' is not compatible with the type parameter 'T extends Alpha'
// Compiler: Type.pth: 29:12-17: Bravo expects 1 type argument
// Compiler: Type.pth: 71:3-18: Two constructors inside Charlie have the same signature after generic types are filled in for Charlie<string>
// Compiler: Type.pth: 72:3-16: Two methods inside Charlie have the signature 'void method(uint)' after generic types are filled in for Charlie<uint>
// Compiler: Type.pth: 73:3-18: Two methods inside Charlie have the signature '?ulong f()' after generic types are filled in for Charlie<?ulong>
// Compiler: Type.pth: 74:3-17: Two methods inside Charlie have the signature '?ulong g()' after generic types are filled in for Charlie<ulong>
// Compiler: Type.pth: 76:16-20: 'uint' is not compatible with the type parameter 'T extends Alpha'
// Compiler: Type.pth: 76:25-33: Charlie expects 1 type argument
// Compiler: Type.pth: 78:13-34: Charlie expects 1 type argument, not 2
// Compiler: Type.pth: 78:45-51: 'string' is not compatible with the type parameter 'T extends Alpha'

class Alpha
{
  {-> void throws string} x;
}

class Bravo<T extends Alpha>
{
  T<string> a;

  static T b;

  property Bravo c;

  Alpha<T> d;

  Bravo<string, uint> e;

  (Bravo<uint>, string) f;
}

class Charlie<T>
{
  create(string s)
  {
  }
  create(T t)
  {
  }

  void method(uint x)
  {
  }
  void method(T x)
  {
  }

  T f()
  {
  }
  ?ulong f()
  {
  }

  ?T g()
  {
  }
  ?ulong g()
  {
  }
}

class Delta
{
  Charlie<string> a;
  Charlie<uint> b;
  Charlie<?ulong> c;
  Charlie<ulong> d;

  create(Bravo<uint> b, ?Charlie c = null);

  void test(Charlie<uint, string> c, ?Bravo<string> b = null)
  {
  }
}

