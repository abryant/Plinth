/**
 * Represents a string of unicode characters.
 * Internally, this uses UTF-8, which is lazily converted to UTF-32 whenever the string needs to be processed using characters instead of bytes.
 */
compound string
{
  []ubyte bytes;
  ?[]uint chars;

  /**
   * Creates an empty string.
   */
  string()
  {
    bytes = new [0]ubyte;
  }

  /**
   * Creates a string containing the specified UTF-8 bytes.
   * @param bytes - the UTF-8 bytes
   */
  string([]ubyte bytes)
  {
    this.bytes = bytes;
  }

  /**
   * Creates a string containing the specified unicode (UTF-32) characters.
   * @param chars - the unicode characters
   */
  string([]uint chars)
  {
    bytes = convertUTF32ToUTF8(chars);
    this.chars = chars;
  }

  /**
   * Creates a string containing the concatenation of the specified two strings.
   * @param str1 - the first string
   * @param str2 - the second string
   */
  string(string str1, string str2)
  {
    bytes = new [str1.bytes.length + str2.bytes.length]ubyte;
    for (uint i = 0; i < str1.bytes.length; ++i)
    {
      bytes[i] = str1.bytes[i];
    }
    for (uint i = 0; i < str2.bytes.length; ++i)
    {
      bytes[str1.bytes.length + i] = str2.bytes[i];
    }
    if (str1.chars != null & str2.chars != null)
    {
      []uint chars1 = cast<[]uint> str1.chars;
      []uint chars2 = cast<[]uint> str2.chars;
      chars = new [chars1.length + chars2.length]uint;
      for (uint i = 0; i < chars1.length; ++i)
      {
        chars[i] = chars1[i];
      }
      for (uint i = 0; i < chars2.length; ++i)
      {
        chars[chars1.length + i] = chars2[i];
      }
    }
  }

  /**
   * Finds the character length of this string, which is the number of unicode characters it contains.
   * This may not be equal to the number of bytes that represent this string, since in UTF-8 several bytes can represent a single character.
   * @return the number of unicode characters in this string
   */
  uint characterLength()
  {
    return getUnicodeChars().length;
  }

  /**
   * @return the number of bytes in the UTF-8 representation of this string.
   */
  uint byteLength()
  {
    return bytes.length;
  }

  /**
   * Finds the length of this string in terms of the number of characters it contains, rather than the number of bytes make up its UTF-8 representation.
   * The result is equivalent to that of characterLength().
   * @return the character length of this string.
   */
  uint length()
  {
    return characterLength();
  }

  /**
   * Finds the character at the specified position in this string, as a string.
   * @return the string representing the character at the specified index
   */
  string charAt(uint pos)
  {
    return substring(pos, 1);
  }

  /**
   * Finds the character at the specified position in this string, as a uint.
   * @return the uint code of the character at the specified position in this string
   */
  uint charAt(uint pos)
  {
    return getUnicodeChars()[pos];
  }

  /**
   * Finds a substring of this string, starting at the specified offset, with the specified length.
   * @param off - the offset to the substring
   * @param len - the length of the substring
   * @return the substring of this string with the specified offset and length
   */
  string substring(uint off, uint len)
  {
    []uint chars = getUnicodeChars();
    []uint subChars = new [len]uint;
    for (uint i = 0; i < len; ++i)
    {
      subChars[i] = chars[off + i];
    }
    return string(subChars);
  }

  /**
   * @return the UTF-32 code points of the characters of this string.
   */
  []uint getUnicodeChars()
  {
    []uint chars = this.chars ?: convertUTF8ToUTF32(bytes);
    this.chars = chars;
    return chars;
  }

  /**
   * @param bytes - an array of UTF-8 bytes to the find the character length of
   * @return the number of characters represented by the specified UTF-8 bytes.
   */
  static uint findUTF8Length([]ubyte bytes)
  {
    uint len = 0;
    for (uint i = 0; i < bytes.length; ++i)
    {
      if (bytes[i] >> 7) != 0
      {
        ubyte b = bytes[i];
        // skip the extra bytes
             if b >> 5 ==     0b110 { i += 1; }
        else if b >> 4 ==    0b1110 { i += 2; }
        else if b >> 3 ==   0b11110 { i += 3; }
        else if b >> 2 ==  0b111110 { i += 4; }
        else if b >> 1 == 0b1111110 { i += 5; }
      }
      ++len;
    }
    return len;
  }

  /**
   * Checks whether the specified string is equal to this one.
   * @param str - the string to compare this one to
   * @return true iff the string objects represent the same sequence of characters
   */
  boolean equals(string str)
  {
    if (bytes.length != str.bytes.length)
    {
      return false;
    }
    for (uint i = 0; i < bytes.length; ++i)
    {
      if (bytes[i] != str.bytes[i])
      {
        return false;
      }
    }
    return true;
  }

  /**
   * Finds the string which represents the specified boolean value.
   * @param value - the boolean value to find the string representation of
   * @return a string representation of value
   */
  static string valueOf(boolean value)
  {
    return value ? "true" : "false";
  }

  /**
   * Finds the string which represents the specified signed value in base 10.
   * @param value - the signed value to find the string representation of
   * @return a string representation of value in base 10
   */
  static string valueOf(long value)
  {
    return valueOf(value, 10);
  }

  /**
   * Finds the string which represents the specified unsigned value in base 10.
   * @param value - the unsigned value to find the string representation of
   * @return a string representation of value in base 10
   */
  static string valueOf(ulong value)
  {
    return valueOf(value, 10);
  }

  /**
   * Finds the string which represents the specified signed value.
   * @param value - the signed value to find the string representation of
   * @param radix - the radix to encode the value with
   * @return a string representation of value in radix
   */
  static string valueOf(long value, uint radix)
  {
    []ubyte numerals = "0123456789abcdefghijklmnopqrstuvwxyz".bytes;
    if radix < 2 | radix > numerals.length
    {
      return "#RadixError";
    }
    if value == 0
    {
      return "0";
    }
    uint length = 0;
    ulong test = 1;
    ulong abs = cast<ulong> value;
    if value < 0
    {
      ++length;
      abs = cast<ulong> -value;
      // because of the way negative numbers are represented,
      // even if value == long::MIN_VALUE (which cannot be negated),
      // abs will now be the correct unsigned value
    }
    while test <= abs
    {
      test *= radix;
      ++length;
    }
    []ubyte bytes = new [length]ubyte;
    for (uint i = bytes.length - 1; i != 0; --i)
    {
      bytes[i] = numerals[cast<uint> (abs % radix)];
      abs /= radix;
    }
    if value < 0
    {
      bytes[0] = "-".bytes[0];
    }
    else
    {
      bytes[0] = numerals[cast<uint> abs];
    }
    return string(bytes);
  }

  /**
   * Finds the string which represents the specified unsigned value.
   * @param value - the unsigned value to find the string representation of
   * @param radix - the radix to encode the value with
   * @return a string representation of value in radix
   */
  static string valueOf(ulong value, uint radix)
  {
    []ubyte numerals = "0123456789abcdefghijklmnopqrstuvwxyz".bytes;
    if radix < 2 | radix > numerals.length
    {
      return "#RadixError";
    }
    if value == 0
    {
      return "0";
    }
    uint length = 0;
    ulong test = 1;
    while test <= value
    {
      test *= radix;
      ++length;
    }
    []ubyte bytes = new [length]ubyte;
    for (uint i = bytes.length - 1; i != 0; --i)
    {
      bytes[i] = numerals[cast<uint> (value % radix)];
      value /= radix;
    }
    bytes[0] = numerals[cast<uint> value];
    return string(bytes);
  }

  /**
   * Finds the string which represents the specified float.
   * @param value - the float value to find the string representation of
   * @return a string representation of value
   */
  static string valueOf(float value)
  {
    // TODO: implement
    return "<float-valueOf()-unimplemented>";
  }

  /**
   * Finds the string which represents the specified double.
   * @param value - the double value to find the string representation of
   * @return a string representation of value
   */
  static string valueOf(double value)
  {
    // TODO: implement
    return "<double-valueOf()-unimplemented>";
  }

  /**
   * @param bytes - an array of UTF-8 bytes to the find the UTF-32 representation of
   * @return the UTF-32 representation of the specified UTF-8 characters
   */
  static []uint convertUTF8ToUTF32([]ubyte bytes)
  {
    uint len = findUTF8Length(bytes);
    []uint result = new [len]uint;
    uint pos = 0;
    for (uint i = 0; i < bytes.length; ++i)
    {
      ubyte b = bytes[i];
      if (b & 0b10000000) == 0
      {
        result[pos] = b;
      }
      else
      {
        ubyte b2 = (i+1 < bytes.length) ? bytes[i+1] : 0;
        if (b >> 5 == 0b110)
        {
          result[pos] = (cast<uint> (b  & 0x1f) << 6) |
                        (cast<uint> (b2 & 0x3f));
          i += 1;
        }
        else
        {
          ubyte b3 = (i+2 < bytes.length) ? bytes[i+2] : 0;
          if (b >> 4 == 0b1110)
          {
            result[pos] = (cast<uint> (b  & 0x0f) << 12) |
                          (cast<uint> (b2 & 0x3f) <<  6) |
                          (cast<uint> (b3 & 0x3f));
            i += 2;
          }
          else
          {
            ubyte b4 = (i+3 < bytes.length) ? bytes[i+3] : 0;
            if (b >> 3 == 0b11110)
            {
              result[pos] = (cast<uint> (b  & 0x07) << 18) |
                            (cast<uint> (b2 & 0x3f) << 12) |
                            (cast<uint> (b3 & 0x3f) <<  6) |
                            (cast<uint> (b4 & 0x3f));
              i += 3;
            }
            else
            {
              ubyte b5 = (i+4 < bytes.length) ? bytes[i+4] : 0;
              if (b >> 2 == 0b111110)
              {
                result[pos] = (cast<uint> (b  & 0x03) << 24) |
                              (cast<uint> (b2 & 0x3f) << 18) |
                              (cast<uint> (b3 & 0x3f) << 12) |
                              (cast<uint> (b4 & 0x3f) <<  6) |
                              (cast<uint> (b5 & 0x3f));
                i += 4;
              }
              else if (b >> 1 == 0b1111110)
              {
                ubyte b6 = (i+5 < bytes.length) ? bytes[i+5] : 0;
                result[pos] = (cast<uint> (b  & 0x01) << 30) |
                              (cast<uint> (b2 & 0x3f) << 24) |
                              (cast<uint> (b3 & 0x3f) << 18) |
                              (cast<uint> (b4 & 0x3f) << 12) |
                              (cast<uint> (b5 & 0x3f) <<  6) |
                              (cast<uint> (b6 & 0x3f));
                i += 5;
              }
            }
          }
        }
      }
      ++pos;
    }
    return result;
  }

  /**
   * @param chars - an array of UTF-32 character codes to the find the UTF-8 representation of
   * @return the UTF-8 representation of the specified UTF-32 character codes
   */
  static []ubyte convertUTF32ToUTF8([]uint chars)
  {
    uint len = 0;
    for (uint i = 0; i < chars.length; ++i)
    {
           if (chars[i] & 0xffffff80) == 0 {len += 1;}
      else if (chars[i] & 0xfffff800) == 0 {len += 2;}
      else if (chars[i] & 0xffff0000) == 0 {len += 3;}
      else if (chars[i] & 0xffe00000) == 0 {len += 4;}
      else if (chars[i] & 0xfc000000) == 0 {len += 5;}
      else {len += 6;}
    }
    []ubyte bytes = new [len]ubyte;
    uint pos = 0;
    for (uint i = 0; i < chars.length; ++i)
    {
      if (chars[i] & 0xffffff80) == 0
      {
        bytes[pos] = cast<ubyte> chars[i];
        pos += 1;
      }
      else if (chars[i] & 0xfffff800) == 0
      {
        bytes[pos  ] = cast<ubyte> ((chars[i] >> 6) & 0x1f) | 0b11000000;
        bytes[pos+1] = cast<ubyte> ((chars[i]     ) & 0x3f) | 0b10000000;
        pos += 2;
      }
      else if (chars[i] & 0xffff0000) == 0
      {
        bytes[pos  ] = cast<ubyte> ((chars[i] >> 12) & 0x0f) | 0b11100000;
        bytes[pos+1] = cast<ubyte> ((chars[i] >>  6) & 0x3f) | 0b10000000;
        bytes[pos+2] = cast<ubyte> ((chars[i]      ) & 0x3f) | 0b10000000;
        pos += 3;
      }
      else if (chars[i] & 0xffe00000) == 0
      {
        bytes[pos  ] = cast<ubyte> ((chars[i] >> 18) & 0x07) | 0b11110000;
        bytes[pos+1] = cast<ubyte> ((chars[i] >> 12) & 0x3f) | 0b10000000;
        bytes[pos+2] = cast<ubyte> ((chars[i] >>  6) & 0x3f) | 0b10000000;
        bytes[pos+3] = cast<ubyte> ((chars[i]      ) & 0x3f) | 0b10000000;
        pos += 4;
      }
      else if (chars[i] & 0xfc000000) == 0
      {
        bytes[pos  ] = cast<ubyte> ((chars[i] >> 24) & 0x03) | 0b11111000;
        bytes[pos+1] = cast<ubyte> ((chars[i] >> 18) & 0x3f) | 0b10000000;
        bytes[pos+2] = cast<ubyte> ((chars[i] >> 12) & 0x3f) | 0b10000000;
        bytes[pos+3] = cast<ubyte> ((chars[i] >>  6) & 0x3f) | 0b10000000;
        bytes[pos+4] = cast<ubyte> ((chars[i]      ) & 0x3f) | 0b10000000;
        pos += 5;
      }
      else
      {
        bytes[pos  ] = cast<ubyte> ((chars[i] >> 30) & 0x01) | 0b11111100;
        bytes[pos+1] = cast<ubyte> ((chars[i] >> 24) & 0x3f) | 0b10000000;
        bytes[pos+2] = cast<ubyte> ((chars[i] >> 18) & 0x3f) | 0b10000000;
        bytes[pos+3] = cast<ubyte> ((chars[i] >> 12) & 0x3f) | 0b10000000;
        bytes[pos+4] = cast<ubyte> ((chars[i] >>  6) & 0x3f) | 0b10000000;
        bytes[pos+5] = cast<ubyte> ((chars[i]      ) & 0x3f) | 0b10000000;
        pos += 6;
      }
    }
    return bytes;
  }
}
