/**
 * An interface which represents a list of elements.
 * @param <E> - the type of each element of the list
 */
interface List<E> extends Iterable<E>
{
  /**
   * A read-only property that returns the length of this List when read.
   */
  property uint length;

  /**
   * @return true if the length of this list is zero, false otherwise
   */
  immutable boolean isEmpty()
  {
    return length == 0;
  }

  /**
   * Adds the specified element to the start of this list.
   * @param element - the element to add
   */
  void addFirst(E element);

  /**
   * Adds the specified element to the end of this list.
   * @param element - the element to add
   */
  void addLast(E element);

  /**
   * Adds the specified element to the end of this list.
   * @param element - the element to add
   */
  void add(E element)
  {
    addLast(element);
  }

  /**
   * Adds the specified element to the list at the specified index, shifting each subsequent element (if any) right by one index.
   * @param index - the index to add the new element at
   * @param element - the element to add
   * @throws IndexError - if index is greater than the length of this List
   */
  void add(uint index, E element);

  /**
   * @return the first element of this list
   * @throws IllegalActionError - if the list is empty
   */
  E getFirst();

  /**
   * @return the last element of this list
   * @throws IllegalActionError - if the list is empty
   */
  E getLast();

  /**
   * Retrieves the element at the specified index.
   * @param index - the index of the element to get
   * @return the element at the specified index
   * @throws IndexError - if the index is greater than or equal to the length of this list
   */
  E get(uint index);

  /**
   * Removes and returns the first element of this List.
   * @return the element removed
   * @throws IllegalActionError - if the list is empty
   */
  E removeFirst();

  /**
   * Removes and returns the last element of this List.
   * @return the element removed
   * @throws IllegalActionError - if the list is empty
   */
  E removeLast();

  /**
   * Removes and returns the element of this list at the specified index.
   * @param index - the index of the element to remove
   * @return the element removed
   * @throws IndexError - if the index is greater than or equal to the length of this list
   */
  E remove(uint index);

  /**
   * Removes all elements from this list.
   */
  void clear();
}
