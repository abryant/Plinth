compound stdin
{
  /**
   * Reads a single byte from the input stream, and returns its value after being zero extended to an int.
   * If no errors occur while reading, a value in the range 0-255 is returned.
   * If an error occurs while reading (for example, if the end of the stream is reached), a value less than zero is returned.
   * @return the resulting character, or a value less than 0 on error
   */
  static native "plinth_stdin_getc" int readByte();

  /**
   * Tries to read len characters from stdin into the specified byte array, starting at bytes[off] and ending at bytes[off + len - 1].
   * If an error occurs at any point while reading, only the characters that were successfully read before that point are stored into the array.
   * The returned result value is the number of bytes of data read; on success, this will be len, but on error, it may be any number between 0 and len inclusive.
   * All data in the array before 'off' and after 'off + result' is left unmodified.
   * @return the number of bytes actually read into the array
   */
  static uint read([]ubyte bytes, uint off, uint len)
  {
    for (uint i = 0; i < len; ++i)
    {
      int value = readByte();
      if value < 0
      {
        return i;
      }
      bytes[off + i] = cast<ubyte> value;
    }
    return len;
  }

  /**
   * Reads a line from stdin. The line may have an arbitrary length, as it continues until it reaches a newline character ('\n'), or encounters a read error (e.g. end of file).
   * @return a string representing the data read from stdin, including the trailing newline if there was one.
   * @throws EOFException - if the end of input is reached before the line is terminated
   */
  static string readLine() throws EOFException
  {
    []ubyte buffer = new [256]ubyte;
    uint i = 0;
    while true
    {
      int value = readByte();
      if value < 0
      {
        throw new EOFException("Reached the end of input on stdin");
      }
      if i >= buffer.length
      {
        // reallocate the buffer to a longer length
        []ubyte newbuf = new [buffer.length + 256]ubyte;
        for (uint j = 0; j < buffer.length; ++j)
        {
          newbuf[j] = buffer[j];
        }
        buffer = newbuf;
      }
      buffer[i] = cast<ubyte> value;
      ++i;
      if value == "\n".bytes[0]
      {
        break;
      }
    }
    // reallocate the buffer to not have extra zero bytes at the end
    []ubyte finalBuf = new [i]ubyte;
    for (uint j = 0; j < i; ++j)
    {
      finalBuf[j] = buffer[j];
    }
    return create string(finalBuf);
  }
}
