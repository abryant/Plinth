package foo.bar;

import metadata.*;

interface Runnable
{
  void run()
  {
    stdout::println("Runnable::run()");
  }
}

interface DefaultRunnable
{
  void run()
  {
    { -> string} x = this.toString;
    stdout::println("DefaultRunnable::run(): " + x());
  }
}

abstract class Foo implements Runnable
{
  this()
  {
  }
  abstract void run();
}

class Test extends Foo implements DefaultRunnable
{
  string field;
  this(uint a)
  {
    stderr::println("Test(uint): " + a.toString());
    field = a.toString();
  }

  void alterField()
  {
    field += " (altered)";
  }

  static uint main([]string args)
  {
    // find all of the command line arguments
    string fullargs = concatMap(addSpace, args);
    stdout::println("Your " + args.length.toString() + " arguments were:" + fullargs);

    {string -> string} instance = addSpace;
    stdout::println("test: " + (instance instanceof {string #-> string}).toString());

    ?object o = new Test(9);
    stdout::println("o instanceof Foo: " + (o instanceof Foo).toString() + ", o instanceof Test: " + (o instanceof Test).toString());
    Runnable r = cast<Runnable> o;
    stdout::println("Interface call: " + r.toString());

    Foo foo = new Test(1);
    Test test = cast<Test> foo;
    Runnable runTest = foo;
    runTest.run();

    {-> void} alter = test.alterField;
    object alterObj = alter;
    // needs to throw a cast exception:
    {#-> void} immutableAlter = cast<{#-> void}> alterObj;
    immutableAlter();
    stdout::println("Field: " + test.field);

    MetadataTest metadataTest = new MetadataTest();
    metadataTest.someMethod();
    stdout::println("metadataTest.toString(): " + metadataTest.toString());
    TestInterface testInterface = metadataTest;
    stdout::println("interface toString(): " + testInterface.toString());

    stdout::println("Foo toString(): " + foo.toString());

    stdout::println("object toString(): " + new object().toString());
    stdout::println("bigint toString(): " + bigint().toString());

    return 0;
  }

  static string concatMap({string #-> string} f, []string input)
  {
    string result = string();
    for (uint i = 0; i < input.length; ++i)
    {
      result += f(input[i]);
    }
    return result;
  }

  static immutable string addSpace(string x)
  {
    return " " + x;
  }
}
