package foo.bar;

interface Foo
{
  property string str;
  void doStuff()
  {
    stdout::println(str);
  }
}

class Super
{
  property string str
  constructor(value)
  {
    stdout::println("constructor: " + value);
    str = value;
  }
  setter(final string value)
  {
    stdout::println("setter: " + value + " old: " + str);
    string old = str.toString();
    str = value;
    if (!value.equals(old))
    {
      this.str = value;
    }
  }
  getter
  {
    stdout::println("getter: " + str);
    return str;
  };

  constructor(string s)
  {
    str = s;
  }
}

class Test extends Super implements Foo
{
  static
  {
    stdout::println(x);
  }
  static final property uint x = 2
  constructor(value)
  {
    stdout::println("x-constructor: " + value);
    x = value;
  }
  getter
  {
    return x;
  };

  selfish constructor(string a)
  {
    super("foo");
    str = "twice";
    str = "again";
    stdout::println("Test(uint): " + a);
  }

  static uint main([]string args) throws Error
  {
    Test test = new Test("test");
    stdout::println(x);
    stdout::println(test.str);
    test.doStuff();
    return 0;
  }
}
