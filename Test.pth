package foo.bar;

class A
{
  static ?A escaped;
  this()
  {
    //escaped = this;
    stdout::println("Hello, old");
  }
  since(1.2) this()
  {
    stdout::println("Hello, blah");
  }
}

class B extends A
{
  string field;
  this()
  {
    stdout::println("A::escaped.field: " + ((cast<?B> A::escaped)?.field ?: "it's null"));
    field = "hi";
  }
}


class Test extends Foo
{
  {
    stderr::println("Test initialiser");
  }
  string field;
  this(uint a)
  {
    stderr::println("Test(uint): " + a.toString());
    field = "uint";
  }
  this(short c)
  {
    stderr::println("Test(short): " + c.toString());
    field = "short";
  }
  selfish this(?ubyte b)
  {
    stderr::println("Test(?ubyte) before delegate constructor");
    if b == null
    {
      this(cast<uint> 12);
    }
    else
    {
      this(-8);
    }
    (cast<{-> void}> this.foo)();
    cast<uint> foo();
    stderr::println("Test(?ubyte) after delegate constructor, field = " + field);
  }

  static uint main([]string args)
  {
    stdout::println(new B().field);
    stdout::print("Please enter your name: ");
    string line = stdin::readLine();
    // remove the newline
    line = line.substring(0, line.length() - 1);
    stdout::println("Hello, " + line + "!");

    // find all of the command line arguments
    string fullargs = concatMap(addSpace, args);
    stdout::println("Your " + args.length.toString() + " arguments were: " + args.toString());

    {-> string} toStr = 5.2.toString;

    stdout::println("2.2250738585072011e-308 = " + 2.2250738585072011e-308.toString());
    stdout::println("maths::abs(-1) = " + maths::abs(-1).toString());
    Foo test = new Test(args.length > 2 ? 2 : null);
    test.argh();
    test.foo();
    object o = 99999, toStr(), bigint();
    o = "hello, world!", 65537, main, args, o, test, 0.3, null, (5, null, test);
    stderr::println("toString() test: " + o.toString());
    Test t = cast<Test> test;
    t.argh();
    (cast<{-> void}> t.foo)();
    return args.length;
  }

  static string concatMap({string -> string} f, []string input)
  {
    string result = string();
    for (uint i = 0; i < input.length; ++i)
    {
      result += f(input[i]);
    }
    return result;
  }

  since(2.0)
  static string concatMap({string -> string} f, []string input)
  {
    string result = string();
    for (uint i = 0; i < input.length; ++i)
    {
      result += f(input[i]);
    }
    stdout::println("concatMap v2.0");
    return result;
  }

  static string addSpace(string x)
  {
    return " " + x;
  }

  void foo()
  {
    stderr::println("Test::foo()");
  }
}

class Foo
{
  {
    stderr::println("Foo initialiser");
  }
  string field;
  this()
  {
    stderr::println("super constructor!");
    field = "Foo::argh()";
  }
  since(8.12) void argh()
  {
    stderr::println(field);
  }
  since(10) uint foo()
  {
    stderr::println("Foo::foo():2");
    return 2;
  }
}
