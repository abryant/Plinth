package foo.bar;

interface Comparator<T>
{
  property boolean lastResult;
  boolean equals(T t1, T t2);
  {T, T -> boolean} getEquals()
  {
    return equals;
  }
}

class StringComparator implements Comparator<string>, Comparator<int>
{
  property boolean lastResult;
  create()
  {
  }
  boolean equals(string s1, string s2)
  {
    boolean eq = s1.length() == s2.length();
    lastResult = eq;
    return eq;
  }
  boolean equals(int i1, int i2)
  {
    boolean eq = i1 == i2;
    lastResult = eq;
    return eq;
  }
  {string, string -> boolean} getEquals()
  {
    return notEquals;
  }
  boolean notEquals(string s1, string s2)
  {
    return !equals(s1, s2);
  }
}

compound holder<T, S>
{
  property T t immutable create;
  S s;

  immutable create(T t, S s)
  {
    this.t = t;
    this.s = s;
  }
  immutable string toString()
  {
    return "<" + t + ">, <" + s + ">";
  }
}

interface Foo<T>
{
  property T t;
}

class Test implements Foo<holder<(uint, string), (long, []string)>>
{
  property holder<(uint, string), (long, []string)> t;

  create(uint x, string s, []string args)
  {
    t = create holder<(uint, string), (long, []string)>((x, s), (-0xffffffffffff, args));
  }

  static uint getArg(uint i, uint j, uint k)
  {
    return i * j * k;
  }

  static uint main([]string args) throws Error
  {
    [][][]uint notArgs = new [2][args.length][args.length]uint(getArg);
    [][]uint asdfsafsafd = new [8][1]uint;
    stdout::println(notArgs);

    StringComparator sc = new StringComparator();
    Comparator<string> c = sc;
    {string, string -> boolean} f = c.getEquals();
    if f("hi", args[1])
    {
      stdout::println("hi == " + args[1]);
    }
    else
    {
      stdout::println("hi != " + args[1]);
    }
    Comparator<int> cInt = sc;
    stdout::println("lastResult: " + cInt.lastResult);
    {int, int -> boolean} intF = cInt.getEquals();
    if intF(5, cast<int> args.length)
    {
      stdout::println("5 == " + args.length);
    }
    else
    {
      stdout::println("5 != " + args.length);
    }
    stdout::println("lastResult: " + sc.lastResult);

    Test test = new Test(args.length, args[1], args);
    Foo<holder<(uint, string), (long, []string)>> foo = test;
    holder<(uint, string), (long, []string)> aaaaa = foo.t;
    stdout::println(aaaaa);
    return 0;
  }
}
