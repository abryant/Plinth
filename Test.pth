package foo.bar;

class Test
{
  string field;
  selfish this(uint a) throws CastError
  {
    stderr::println("Test(uint): " + a);
    field = a.toString();
    foo();
  }
  
  static void throwSomething() throws Exception, unchecked Error
  {
    throw new Error("Hello, Exceptions!");
  }

  void foo() throws CastError
  {
    throw new CastError("an apple", "an orange", null);
  }

  static uint main([]string args) throws Error
  {
    new Test(3);
    { -> void throws Exception} func = throwSomething;
    Exception e = new Exception("AAAAA");
    final object o;
    uint i = args.length;
    while true
    {
      try
      {
        if i == 2
        {
          throw e;
        }
        try
        {
          throwSomething();
          stderr::println("After throwSomething()");
        }
        catch Exception ex
        {
          stderr::println("First catch");
          throw ex;
        }
      }
      catch Exception | Error ex
      {
        stderr::println("Caught Exception|Error: " + ex.getMessage());
      }
      finally
      {
        stderr::println("Second Finally!");
        o = new object();
      }
      stderr::println("after finally");
      break;
    }
    stderr::println("after loop");
    return 0;
  }
}
