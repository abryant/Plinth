package foo.bar;

interface Runnable
{
  void run();
}

interface Edible extends Runnable
{
  void consume();
}

abstract class Foo implements Edible
{
  this()
  {
  }
  void consume()
  {
    stdout::println("Consuming " + toString());
  }
  void run()
  {
    stdout::println("Running " + toString());
  }
}

class Test extends Foo
{
  string field;
  this(uint a)
  {
    stderr::println("Test(uint): " + a.toString());
    field = a.toString();
  }

  static uint main([]string args)
  {
    // find all of the command line arguments
    string fullargs = concatMap(addSpace, args);
    stdout::println("Your " + args.length.toString() + " arguments were: " + args.toString());

    object o = new Test(9);
    Runnable r = cast<Runnable> o;
    stdout::println("Interface call: " + r.toString());

    Foo foo = new Test(1);
    Test test = cast<Test> cast<Edible> foo;
    Runnable runTest = foo;
    Edible eatTest = cast<Edible> runTest;
    runTest.run();
    eatTest.consume();
    return 0;
  }

  static string concatMap({string -> string} f, []string input)
  {
    string result = string();
    for (uint i = 0; i < input.length; ++i)
    {
      result += f(input[i]);
    }
    return result;
  }

  static string addSpace(string x)
  {
    return " " + x;
  }

  immutable string toString()
  {
    return "<Test:" + field + ">";
  }
}
