CompilationUnit = Functions
Functions = Function | Functions Function

Function = Type Name LParen Parameters RParen Block
         | Type Name LParen            RParen Block
Parameters = Type Name | Parameters Comma Type Name

Block = LBrace Statements RBrace

Statements = epsilon | Statements Statement
Statement = Assignment | Block | BreakStatement | ContinueStatement | IfStatement | ReturnStatement | WhileStatement |
            FunctionCallExpression Semicolon

AssigneeList = Name |
               Primary LSquare TupleExpression RSquare |
               AssigneeList Comma Name |
               AssigneeList Comma Primary LSquare TupleExpression RSquare

Assignment = Type AssigneeList Semicolon | Type AssigneeList Equals TupleExpression Semicolon | AssigneeList Equals TupleExpression Semicolon
BreakStatement = BreakKeyword Semicolon | BreakKeyword IntegerLiteral Semicolon
ContinueStatement = ContinueKeyword Semicolon | ContinueKeyword IntegerLiteral Semicolon
IfStatement = IfKeyword TupleExpression Block | IfKeyword TupleExpression Block ElseKeyword Block | IfKeyword TupleExpression Block ElseKeyword IfStatement
ReturnStatement = ReturnKeyword TupleExpression Semicolon
WhileStatement = WhileKeyword TupleExpression Block

Type = BooleanKeyword |
       DoubleKeyword  | FloatKeyword  |
       ULongKeyword   | LongKeyword   |
       UIntKeyword    | IntKeyword    |
       UShortKeyword  | ShortKeyword  |
       UByteKeyword   | ByteKeyword   |
       LSquare RSquare Type |
       LParen TypeList RParen
TypeList = Type | TypeList Comma Type


TupleExpression = Expression | TupleExpression Comma Expression
Expression = ComparisonExpression |
             Expression Ampersand       ComparisonExpression |
             Expression Pipe            ComparisonExpression |
             Expression Caret           ComparisonExpression |
             Expression DoubleAmpersand ComparisonExpression |
             Expression DoublePipe      ComparisonExpression
ComparisonExpression = AdditiveExpression |
                       AdditiveExpression DoubleEquals          AdditiveExpression |
                       AdditiveExpression ExclamationMarkEquals AdditiveExpression |
                       AdditiveExpression LAngle                AdditiveExpression |
                       AdditiveExpression LAngleEquals          AdditiveExpression |
                       AdditiveExpression RAngle                AdditiveExpression |
                       AdditiveExpression RAngleEquals          AdditiveExpression
AdditiveExpression = MultiplicativeExpression |
                     AdditiveExpression Plus MultiplicativeExpression |
                     AdditiveExpression Minus MultiplicativeExpression
MultiplicativeExpression = TupleIndexExpression |
                           MultiplicativeExpression Star          TupleIndexExpression |
                           MultiplicativeExpression ForwardSlash  TupleIndexExpression |
                           MultiplicativeExpression Percent       TupleIndexExpression |
                           MultiplicativeExpression DoublePercent TupleIndexExpression
TupleIndexExpression = UnaryExpression | TupleIndexExpression ExclaimationMark IntegerLiteral
UnaryExpression = Primary |
                  CastKeyword LAngle Type RAngle UnaryExpression |
                  Minus UnaryExpression |
                  Tilde UnaryExpression |
                  ExclaimationMark UnaryExpression
Primary = IntegerLiteral | DoubleLiteral | TrueKeyword | FalseKeyword |
          Name |
          Primary LSquare TupleExpression RSquare |
          NewKeyword Dimensions Type |
          NewKeyword LSquare RSquare Type LBrace RBrace |
          NewKeyword LSquare RSquare Type LBrace ExpressionList RBrace |
          Primary Dot Name |
          FunctionCallExpression |
          LParen TupleExpression RParen
FunctionCallExpression = Name LParen ExpressionList RParen | Name LParen RParen
ExpressionList = Expression | ExpressionList Comma Expression

Dimensions = LSquare TupleExpression RSquare | Dimensions LSquare TupleExpression RSquare
