CompilationUnit = Imports | PackageKeyword QName Semicolon Imports | CompilationUnit CompoundTypeDef

Imports = epsilon | Imports ImportKeyword QName Semicolon | Imports ImportKeyword QName Dot Star Semicolon

QName = Name | QName Dot Name

CompoundTypeDef = CompoundKeyword Name LBrace MemberList RBrace
MemberList = epsilon |
             MemberList Field |
             MemberList Constructor |
             MemberList Method
Modifiers = StaticKeyword               | Modifiers StaticKeyword |
            FinalKeyword                | Modifiers FinalKeyword |
            NativeKeyword               | Modifiers NativeKeyword |
            NativeKeyword StringLiteral | Modifiers NativeKeyword StringLiteral
OptionalModifiers = epsilon | Modifiers
Field = OptionalModifiers Type Name Semicolon
Constructor = OptionalModifiers Name LParen Parameters RParen Block
Method = OptionalModifiers Type Name LParen Parameters RParen Block |
         OptionalModifiers Type Name LParen            RParen Block |
         OptionalModifiers VoidKeyword Name LParen Parameters RParen Block |
         OptionalModifiers VoidKeyword Name LParen            RParen Block

Parameters = OptionalModifiers Type Name | Parameters Comma OptionalModifiers Type Name

Block = LBrace Statements RBrace

Statements = epsilon | Statements Statement
Statement = Assignment | Block | BreakStatement | ContinueStatement | ForStatement | IfStatement | PrefixIncDecStatement | ReturnStatement | WhileStatement |
            ShorthandAssignment Semicolon |
            FunctionCallExpression Semicolon

Assignee = Name |
           Primary LSquare TupleExpression RSquare |
           PrimaryNoTrailingType Dot Name |
           Type DoubleColon Name |
           Underscore
AssigneeList = Assignee | AssigneeList Comma Assignee

Assignment = Modifiers Type AssigneeList Semicolon | Modifiers Type AssigneeList Equals TupleExpression Semicolon | AssigneeList Equals TupleExpression Semicolon
BreakStatement = BreakKeyword Semicolon | BreakKeyword IntegerLiteral Semicolon
ContinueStatement = ContinueKeyword Semicolon | ContinueKeyword IntegerLiteral Semicolon
IfStatement = IfKeyword TupleExpression Block | IfKeyword TupleExpression Block ElseKeyword Block | IfKeyword TupleExpression Block ElseKeyword IfStatement
PrefixIncDecStatement = DoublePlus Assignee Semicolon | DoubleMinus Assignee Semicolon
ReturnStatement = ReturnKeyword TupleExpression Semicolon | ReturnKeyword Semicolon
ShorthandAssignment = AssigneeList PlusEquals          TupleExpression |
                      AssigneeList MinusEquals         TupleExpression |
                      AssigneeList StarEquals          TupleExpression |
                      AssigneeList ForwardSlashEquals  TupleExpression |
                      AssigneeList PercentEquals       TupleExpression |
                      AssigneeList DoublePercentEquals TupleExpression |
                      AssigneeList DoubleLAngleEquals  TupleExpression |
                      AssigneeList DoubleRAngleEquals  TupleExpression |
                      AssigneeList AmpersandEquals     TupleExpression |
                      AssigneeList PipeEquals          TupleExpression |
                      AssigneeList CaretEquals         TupleExpression
WhileStatement = WhileKeyword TupleExpression Block

ForInit = Assignment | ShorthandAssignment Semicolon | Semicolon
ForUpdate = DoublePlus Assignee | DoubleMinus Assignee | AssigneeList Equals TupleExpression | ShorthandAssignment | FunctionCallExpression | epsilon
ForStatement = ForKeyword LParen ForInit TupleExpression Semicolon ForUpdate RParen Block
             | ForKeyword LParen ForInit Semicolon ForUpdate RParen Block

Type = BooleanKeyword |                 QuestionMark BooleanKeyword |
       DoubleKeyword  | FloatKeyword  | QuestionMark DoubleKeyword  | QuestionMark FloatKeyword  |
       ULongKeyword   | LongKeyword   | QuestionMark ULongKeyword   | QuestionMark LongKeyword   |
       UIntKeyword    | IntKeyword    | QuestionMark UIntKeyword    | QuestionMark IntKeyword    |
       UShortKeyword  | ShortKeyword  | QuestionMark UShortKeyword  | QuestionMark ShortKeyword  |
       UByteKeyword   | ByteKeyword   | QuestionMark UByteKeyword   | QuestionMark ByteKeyword   |
       QName                          | QuestionMark QName |
       LSquare RSquare Type           | QuestionMark LSquare RSquare Type |
       LParen TypeList RParen         | QuestionMark LParen TypeList RParen
TypeList = Type | TypeList Comma Type


TupleExpression = Expression | TupleExpression Comma Expression
Expression = LogicalExpression | LogicalExpression QuestionMark TupleExpression Colon Expression | LogicalExpression QuestionMarkColon Expression
LogicalExpression = ComparisonExpression |
                    LogicalExpression Ampersand       ComparisonExpression |
                    LogicalExpression Pipe            ComparisonExpression |
                    LogicalExpression Caret           ComparisonExpression |
                    LogicalExpression DoubleAmpersand ComparisonExpression |
                    LogicalExpression DoublePipe      ComparisonExpression
ComparisonExpression = AdditiveExpression |
                       AdditiveExpression DoubleEquals          AdditiveExpression |
                       AdditiveExpression ExclamationMarkEquals AdditiveExpression |
                       AdditiveExpression LAngle                AdditiveExpression |
                       AdditiveExpression LAngleEquals          AdditiveExpression |
                       AdditiveExpression RAngle                AdditiveExpression |
                       AdditiveExpression RAngleEquals          AdditiveExpression
AdditiveExpression = MultiplicativeExpression |
                     AdditiveExpression Plus MultiplicativeExpression |
                     AdditiveExpression Minus MultiplicativeExpression
MultiplicativeExpression = ShiftExpression |
                           MultiplicativeExpression Star          ShiftExpression |
                           MultiplicativeExpression ForwardSlash  ShiftExpression |
                           MultiplicativeExpression Percent       ShiftExpression |
                           MultiplicativeExpression DoublePercent ShiftExpression
ShiftExpression = TupleIndexExpression |
                  ShiftExpression DoubleLAngle TupleIndexExpression |
                  ShiftExpression DoubleRAngle TupleIndexExpression
TupleIndexExpression = UnaryExpression | TupleIndexExpression ExclaimationMark IntegerLiteral
UnaryExpression = Primary |
                  CastKeyword LAngle Type RAngle UnaryExpression |
                  Minus UnaryExpression |
                  Tilde UnaryExpression |
                  ExclaimationMark UnaryExpression
Primary = PrimaryNoTrailingType | NewKeyword Dimensions Type
PrimaryNoTrailingType = IntegerLiteral | DoubleLiteral |
                        TrueKeyword | FalseKeyword | ThisKeyword | NullKeyword |
                        Name |
                        Primary LSquare TupleExpression RSquare |
                        NewKeyword LSquare RSquare Type LBrace RBrace |
                        NewKeyword LSquare RSquare Type LBrace ExpressionList RBrace |
                        PrimaryNoTrailingType Dot Name |
                        Type DoubleColon Name |
                        FunctionCallExpression |
                        LParen TupleExpression RParen
FunctionCallExpression = Primary LParen ExpressionList RParen | Primary LParen RParen
ExpressionList = Expression | ExpressionList Comma Expression

Dimensions = LSquare TupleExpression RSquare | Dimensions LSquare TupleExpression RSquare
