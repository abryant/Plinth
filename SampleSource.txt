package foo.bar;

import test.Asdf;

compound complex
{
  static float testfloat;
  static ? :complex asdf;
  static ?(:complex, uint, ?[]float) test;
  final double real;
  final double imag;
  complex()
  {
    real, imag = 0, 0;
  }
  complex(double real, double imag)
  {
    this.real, this.imag = real, imag;
  }
  complex(double real)
  {
    this.real, this.imag = real, 0;
  }
  double getReal()
  {
    return real;
  }
  double getImag()
  {
    return imag;
  }
  :complex mult(:complex other)
  {
    return complex(real * other.real - imag * other.imag, real * other.imag + other.real * imag);
  }
  :complex add(:complex other)
  {
    return complex(real + other.real, imag + other.imag);
  }
  :complex subtract(:complex other)
  {
    asdf = complex(1, 2);
    return complex(real - other.real, imag - other.imag);
  }
  static :complex rotateLeft(:complex value)
  {
    asdf = value.mult(complex(0, 1));
    return cast<:complex> asdf;
  }
  static :complex swap(:complex initial)
  {
    return complex(initial.imag, initial.real);
  }

  static native uint main(final uint argc)
  {
    :Asdf argh = new Asdf(argc);
    :Asdf other = new Asdf(argh);
    return (other.next ?: other).a;
  }
}
