uint main(uint argc)
{
  [][]long longs = new [123][4]long;
  []boolean bools = new []boolean {true, false};
  bools[0] = false;
  (uint, []long) tuple = 12345, longs[1];

  []uint temp = new [1]uint;
  []long arr = new [2]long;
  // should put 27 in temp[0], due to the order of evaluation of the function calls in an array assignment
  array(arr, temp)[dimension(temp)] = value(temp);
  return temp[0];
}

[]long array([]long arr, []uint temp)
{
  temp[0] = 4 * temp[0] + 1;
  return arr;
}

uint dimension([]uint temp)
{
  temp[0] = 4 * temp[0] + 2;
  return 0;
}
long value([]uint temp)
{
  temp[0] = 4 * temp[0] + 3;
  return 123;
}

int oldmain(uint argc)
{
  boolean b = true;
  int result;
  if argc > 2 || !true
  {
    double d = 3.0;
    short i = cast<short> d;
    double d2 = cast<double> i;
    return cast<int> d2;
  }
  else if argc > 1 && true
  {
    double d = 0.0;
    result = 0;
    while d != 3.0
    {
      result = result + 1;
      d = foo(d, 0.75);
    }
  }
  else
  {
    result = cast<int> (10.5 + (-4.5 %% 3));
  }
  while true
  {
    while true
    {
      int asdf = 12;
      if asdf == 12
      {
        break 2;
      }
    }
  }
  if result == 4.0
  {
    int i = 0;
    while true
    {
      if i < 7
      {
        i = i + 1;
        continue;
      }
      result = i;
      break;
    }
  }
  return ~result;
}

int blah()
{
  while true
  {
  }
  return 1;
}

double foo(double x, double y)
{
  return x + y;
}

int add(int x, int y)
{
  return x + y;
}
