compound complex
{
  double real;
  double imag;
  complex()
  {
    real, imag = 0, 0;
  }
  complex(double real, double imag)
  {
    this.real, this.imag = real, imag;
  }
  complex(double real)
  {
    this.real, this.imag = real, 0;
  }
  double getReal()
  {
    return real;
  }
  double getImag()
  {
    return imag;
  }
  :complex mult(:complex other)
  {
    return complex(real * other.real - imag * other.imag, real * other.imag + other.real * imag);
  }
  :complex add(:complex other)
  {
    return complex(real + other.real, imag + other.imag);
  }
  :complex subtract(:complex other)
  {
    return complex(real - other.real, imag - other.imag);
  }
}

uint main(uint argc)
{
  argc, argc %%= 5, 3;

  :complex c = complex(argc);
  :complex rot = complex(0, 1);
  :complex rotated = c.mult(rot);
  return cast<uint> rotated.getImag();
}
